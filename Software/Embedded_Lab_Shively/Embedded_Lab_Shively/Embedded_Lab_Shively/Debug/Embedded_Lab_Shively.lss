
Embedded_Lab_Shively.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c720  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000254  20000000  0000c720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000001a4  20000254  0000c974  00020254  2**2
                  ALLOC
  3 .stack        00001000  200003f8  0000cb18  00020254  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002027e  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002076e  00000000  00000000  000202d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003bf9  00000000  00000000  00040a45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00009efc  00000000  00000000  0004463e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001260  00000000  00000000  0004e53a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000011d0  00000000  00000000  0004f79a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00009d19  00000000  00000000  0005096a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015973  00000000  00000000  0005a683  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000ed3bf  00000000  00000000  0006fff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00005efc  00000000  00000000  0015d3b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
       0:	f8 13 00 20 39 4d 00 00 51 1a 00 00 31 4d 00 00     ... 9M..Q...1M..
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
      10:	31 4d 00 00 31 4d 00 00 31 4d 00 00 00 00 00 00     1M..1M..1M......
	...
	if (cpu_irq_critical_section_counter == 0) {
		if (cpu_irq_is_enabled()) {
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
      2c:	31 4d 00 00 31 4d 00 00 00 00 00 00 31 4d 00 00     1M..1M......1M..
			cpu_irq_prev_interrupt_state = false;
		}

	}

	cpu_irq_critical_section_counter++;
      3c:	d5 55 00 00 31 4d 00 00 a9 27 00 00 bd 27 00 00     .U..1M...'...'..
}
      4c:	d1 27 00 00 e5 27 00 00 f9 27 00 00 0d 28 00 00     .'...'...'...(..
      5c:	21 28 00 00 35 28 00 00 49 28 00 00 5d 28 00 00     !(..5(..I(..](..
      6c:	71 28 00 00 85 28 00 00 99 28 00 00 ad 28 00 00     q(...(...(...(..
      7c:	c1 28 00 00 d5 28 00 00 31 4d 00 00 31 4d 00 00     .(...(..1M..1M..
      8c:	31 4d 00 00 31 4d 00 00 31 4d 00 00 31 4d 00 00     1M..1M..1M..1M..
      9c:	31 4d 00 00 31 4d 00 00 81 1d 00 00 95 1d 00 00     1M..1M..........
      ac:	ad 1d 00 00 c5 1d 00 00 dd 1d 00 00 f1 1d 00 00     ................
      bc:	09 1e 00 00 21 1e 00 00 39 1e 00 00 4d 1e 00 00     ....!...9...M...
      cc:	65 1e 00 00 7d 1e 00 00 31 4d 00 00 31 4d 00 00     e...}...1M..1M..
      dc:	31 4d 00 00 31 4d 00 00 31 4d 00 00 31 4d 00 00     1M..1M..1M..1M..
      ec:	31 4d 00 00 31 4d 00 00 65 1a 00 00 79 1a 00 00     1M..1M..e...y...
      fc:	8d 1a 00 00 a1 1a 00 00 b5 1a 00 00 c9 1a 00 00     ................
     10c:	dd 1a 00 00 f1 1a 00 00 31 4d 00 00 31 4d 00 00     ........1M..1M..
     11c:	31 4d 00 00 31 4d 00 00 31 4d 00 00 31 4d 00 00     1M..1M..1M..1M..
     12c:	31 4d 00 00 31 4d 00 00 d1 14 00 00 31 4d 00 00     1M..1M......1M..
     13c:	e9 14 00 00 31 4d 00 00 31 4d 00 00 31 4d 00 00     ....1M..1M..1M..
     14c:	31 4d 00 00 31 4d 00 00 31 4d 00 00 31 4d 00 00     1M..1M..1M..1M..
     15c:	31 4d 00 00 31 4d 00 00 31 4d 00 00 31 4d 00 00     1M..1M..1M..1M..
     16c:	31 4d 00 00 31 4d 00 00 01 15 00 00 19 15 00 00     1M..1M..........
     17c:	85 26 00 00                                         .&..

00000180 <__do_global_dtors_aux>:
     180:	b510      	push	{r4, lr}
     182:	4c05      	ldr	r4, [pc, #20]	; (198 <__do_global_dtors_aux+0x18>)
     184:	7823      	ldrb	r3, [r4, #0]
     186:	b933      	cbnz	r3, 196 <__do_global_dtors_aux+0x16>
     188:	4b04      	ldr	r3, [pc, #16]	; (19c <__do_global_dtors_aux+0x1c>)
     18a:	b113      	cbz	r3, 192 <__do_global_dtors_aux+0x12>
     18c:	4804      	ldr	r0, [pc, #16]	; (1a0 <__do_global_dtors_aux+0x20>)
     18e:	f3af 8000 	nop.w
     192:	2301      	movs	r3, #1
     194:	7023      	strb	r3, [r4, #0]
     196:	bd10      	pop	{r4, pc}
     198:	20000254 	.word	0x20000254
     19c:	00000000 	.word	0x00000000
     1a0:	0000c720 	.word	0x0000c720

000001a4 <frame_dummy>:
     1a4:	4b0c      	ldr	r3, [pc, #48]	; (1d8 <frame_dummy+0x34>)
     1a6:	b143      	cbz	r3, 1ba <frame_dummy+0x16>
     1a8:	480c      	ldr	r0, [pc, #48]	; (1dc <frame_dummy+0x38>)
     1aa:	490d      	ldr	r1, [pc, #52]	; (1e0 <frame_dummy+0x3c>)
     1ac:	b510      	push	{r4, lr}
     1ae:	f3af 8000 	nop.w
     1b2:	480c      	ldr	r0, [pc, #48]	; (1e4 <frame_dummy+0x40>)
     1b4:	6803      	ldr	r3, [r0, #0]
     1b6:	b923      	cbnz	r3, 1c2 <frame_dummy+0x1e>
     1b8:	bd10      	pop	{r4, pc}
     1ba:	480a      	ldr	r0, [pc, #40]	; (1e4 <frame_dummy+0x40>)
     1bc:	6803      	ldr	r3, [r0, #0]
     1be:	b933      	cbnz	r3, 1ce <frame_dummy+0x2a>
     1c0:	4770      	bx	lr
     1c2:	4b09      	ldr	r3, [pc, #36]	; (1e8 <frame_dummy+0x44>)
     1c4:	2b00      	cmp	r3, #0
     1c6:	d0f7      	beq.n	1b8 <frame_dummy+0x14>
     1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     1cc:	4718      	bx	r3
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <frame_dummy+0x44>)
     1d0:	2b00      	cmp	r3, #0
     1d2:	d0f5      	beq.n	1c0 <frame_dummy+0x1c>
     1d4:	4718      	bx	r3
     1d6:	bf00      	nop
     1d8:	00000000 	.word	0x00000000
     1dc:	0000c720 	.word	0x0000c720
     1e0:	20000258 	.word	0x20000258
     1e4:	0000c720 	.word	0x0000c720
     1e8:	00000000 	.word	0x00000000

000001ec <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     1ec:	b580      	push	{r7, lr}
     1ee:	b086      	sub	sp, #24
     1f0:	af00      	add	r7, sp, #0
     1f2:	60f8      	str	r0, [r7, #12]
     1f4:	60b9      	str	r1, [r7, #8]
     1f6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
     1f8:	2300      	movs	r3, #0
     1fa:	617b      	str	r3, [r7, #20]

	if (file != 0) {
     1fc:	68fb      	ldr	r3, [r7, #12]
     1fe:	2b00      	cmp	r3, #0
     200:	d012      	beq.n	228 <_read+0x3c>
		return -1;
     202:	f04f 33ff 	mov.w	r3, #4294967295
     206:	e013      	b.n	230 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
     208:	4b0b      	ldr	r3, [pc, #44]	; (238 <_read+0x4c>)
     20a:	681b      	ldr	r3, [r3, #0]
     20c:	4a0b      	ldr	r2, [pc, #44]	; (23c <_read+0x50>)
     20e:	6812      	ldr	r2, [r2, #0]
     210:	68b9      	ldr	r1, [r7, #8]
     212:	4610      	mov	r0, r2
     214:	4798      	blx	r3
		ptr++;
     216:	68bb      	ldr	r3, [r7, #8]
     218:	3301      	adds	r3, #1
     21a:	60bb      	str	r3, [r7, #8]
		nChars++;
     21c:	697b      	ldr	r3, [r7, #20]
     21e:	3301      	adds	r3, #1
     220:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
     222:	687b      	ldr	r3, [r7, #4]
     224:	3b01      	subs	r3, #1
     226:	607b      	str	r3, [r7, #4]
     228:	687b      	ldr	r3, [r7, #4]
     22a:	2b00      	cmp	r3, #0
     22c:	dcec      	bgt.n	208 <_read+0x1c>
	}
	return nChars;
     22e:	697b      	ldr	r3, [r7, #20]
}
     230:	4618      	mov	r0, r3
     232:	3718      	adds	r7, #24
     234:	46bd      	mov	sp, r7
     236:	bd80      	pop	{r7, pc}
     238:	2000036c 	.word	0x2000036c
     23c:	20000374 	.word	0x20000374

00000240 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
     240:	b580      	push	{r7, lr}
     242:	b086      	sub	sp, #24
     244:	af00      	add	r7, sp, #0
     246:	60f8      	str	r0, [r7, #12]
     248:	60b9      	str	r1, [r7, #8]
     24a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
     24c:	2300      	movs	r3, #0
     24e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
     250:	68fb      	ldr	r3, [r7, #12]
     252:	2b01      	cmp	r3, #1
     254:	d01e      	beq.n	294 <_write+0x54>
     256:	68fb      	ldr	r3, [r7, #12]
     258:	2b02      	cmp	r3, #2
     25a:	d01b      	beq.n	294 <_write+0x54>
     25c:	68fb      	ldr	r3, [r7, #12]
     25e:	2b03      	cmp	r3, #3
     260:	d018      	beq.n	294 <_write+0x54>
		return -1;
     262:	f04f 33ff 	mov.w	r3, #4294967295
     266:	e019      	b.n	29c <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
     268:	4b0e      	ldr	r3, [pc, #56]	; (2a4 <_write+0x64>)
     26a:	681a      	ldr	r2, [r3, #0]
     26c:	4b0e      	ldr	r3, [pc, #56]	; (2a8 <_write+0x68>)
     26e:	6818      	ldr	r0, [r3, #0]
     270:	68bb      	ldr	r3, [r7, #8]
     272:	1c59      	adds	r1, r3, #1
     274:	60b9      	str	r1, [r7, #8]
     276:	781b      	ldrb	r3, [r3, #0]
     278:	4619      	mov	r1, r3
     27a:	4790      	blx	r2
     27c:	4603      	mov	r3, r0
     27e:	2b00      	cmp	r3, #0
     280:	da02      	bge.n	288 <_write+0x48>
			return -1;
     282:	f04f 33ff 	mov.w	r3, #4294967295
     286:	e009      	b.n	29c <_write+0x5c>
		}
		++nChars;
     288:	697b      	ldr	r3, [r7, #20]
     28a:	3301      	adds	r3, #1
     28c:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
     28e:	687b      	ldr	r3, [r7, #4]
     290:	3b01      	subs	r3, #1
     292:	607b      	str	r3, [r7, #4]
     294:	687b      	ldr	r3, [r7, #4]
     296:	2b00      	cmp	r3, #0
     298:	d1e6      	bne.n	268 <_write+0x28>
	}
	return nChars;
     29a:	697b      	ldr	r3, [r7, #20]
}
     29c:	4618      	mov	r0, r3
     29e:	3718      	adds	r7, #24
     2a0:	46bd      	mov	sp, r7
     2a2:	bd80      	pop	{r7, pc}
     2a4:	20000370 	.word	0x20000370
     2a8:	20000374 	.word	0x20000374

000002ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
     2ac:	b480      	push	{r7}
     2ae:	b083      	sub	sp, #12
     2b0:	af00      	add	r7, sp, #0
     2b2:	4603      	mov	r3, r0
     2b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
     2b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
     2ba:	2b00      	cmp	r3, #0
     2bc:	db0b      	blt.n	2d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     2be:	4908      	ldr	r1, [pc, #32]	; (2e0 <__NVIC_EnableIRQ+0x34>)
     2c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
     2c4:	095b      	lsrs	r3, r3, #5
     2c6:	79fa      	ldrb	r2, [r7, #7]
     2c8:	f002 021f 	and.w	r2, r2, #31
     2cc:	2001      	movs	r0, #1
     2ce:	fa00 f202 	lsl.w	r2, r0, r2
     2d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
     2d6:	bf00      	nop
     2d8:	370c      	adds	r7, #12
     2da:	46bd      	mov	sp, r7
     2dc:	bc80      	pop	{r7}
     2de:	4770      	bx	lr
     2e0:	e000e100 	.word	0xe000e100

000002e4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
     2e4:	b480      	push	{r7}
     2e6:	b083      	sub	sp, #12
     2e8:	af00      	add	r7, sp, #0
     2ea:	4603      	mov	r3, r0
     2ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
     2ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
     2f2:	2b00      	cmp	r3, #0
     2f4:	db0c      	blt.n	310 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     2f6:	4909      	ldr	r1, [pc, #36]	; (31c <__NVIC_ClearPendingIRQ+0x38>)
     2f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
     2fc:	095b      	lsrs	r3, r3, #5
     2fe:	79fa      	ldrb	r2, [r7, #7]
     300:	f002 021f 	and.w	r2, r2, #31
     304:	2001      	movs	r0, #1
     306:	fa00 f202 	lsl.w	r2, r0, r2
     30a:	3360      	adds	r3, #96	; 0x60
     30c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
     310:	bf00      	nop
     312:	370c      	adds	r7, #12
     314:	46bd      	mov	sp, r7
     316:	bc80      	pop	{r7}
     318:	4770      	bx	lr
     31a:	bf00      	nop
     31c:	e000e100 	.word	0xe000e100

00000320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     320:	b480      	push	{r7}
     322:	b083      	sub	sp, #12
     324:	af00      	add	r7, sp, #0
     326:	4603      	mov	r3, r0
     328:	6039      	str	r1, [r7, #0]
     32a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
     32c:	f997 3007 	ldrsb.w	r3, [r7, #7]
     330:	2b00      	cmp	r3, #0
     332:	db0a      	blt.n	34a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     334:	490d      	ldr	r1, [pc, #52]	; (36c <__NVIC_SetPriority+0x4c>)
     336:	f997 3007 	ldrsb.w	r3, [r7, #7]
     33a:	683a      	ldr	r2, [r7, #0]
     33c:	b2d2      	uxtb	r2, r2
     33e:	0112      	lsls	r2, r2, #4
     340:	b2d2      	uxtb	r2, r2
     342:	440b      	add	r3, r1
     344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
     348:	e00a      	b.n	360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     34a:	4909      	ldr	r1, [pc, #36]	; (370 <__NVIC_SetPriority+0x50>)
     34c:	79fb      	ldrb	r3, [r7, #7]
     34e:	f003 030f 	and.w	r3, r3, #15
     352:	3b04      	subs	r3, #4
     354:	683a      	ldr	r2, [r7, #0]
     356:	b2d2      	uxtb	r2, r2
     358:	0112      	lsls	r2, r2, #4
     35a:	b2d2      	uxtb	r2, r2
     35c:	440b      	add	r3, r1
     35e:	761a      	strb	r2, [r3, #24]
}
     360:	bf00      	nop
     362:	370c      	adds	r7, #12
     364:	46bd      	mov	sp, r7
     366:	bc80      	pop	{r7}
     368:	4770      	bx	lr
     36a:	bf00      	nop
     36c:	e000e100 	.word	0xe000e100
     370:	e000ed00 	.word	0xe000ed00

00000374 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
     374:	b480      	push	{r7}
     376:	b083      	sub	sp, #12
     378:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     37a:	f3ef 8310 	mrs	r3, PRIMASK
     37e:	607b      	str	r3, [r7, #4]
  return(result);
     380:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
     382:	2b00      	cmp	r3, #0
     384:	bf0c      	ite	eq
     386:	2301      	moveq	r3, #1
     388:	2300      	movne	r3, #0
     38a:	b2db      	uxtb	r3, r3
     38c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     38e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     390:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     394:	4b04      	ldr	r3, [pc, #16]	; (3a8 <cpu_irq_save+0x34>)
     396:	2200      	movs	r2, #0
     398:	701a      	strb	r2, [r3, #0]
	return flags;
     39a:	683b      	ldr	r3, [r7, #0]
}
     39c:	4618      	mov	r0, r3
     39e:	370c      	adds	r7, #12
     3a0:	46bd      	mov	sp, r7
     3a2:	bc80      	pop	{r7}
     3a4:	4770      	bx	lr
     3a6:	bf00      	nop
     3a8:	20000074 	.word	0x20000074

000003ac <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
     3ac:	b480      	push	{r7}
     3ae:	b083      	sub	sp, #12
     3b0:	af00      	add	r7, sp, #0
     3b2:	6078      	str	r0, [r7, #4]
	return (flags);
     3b4:	687b      	ldr	r3, [r7, #4]
     3b6:	2b00      	cmp	r3, #0
     3b8:	bf14      	ite	ne
     3ba:	2301      	movne	r3, #1
     3bc:	2300      	moveq	r3, #0
     3be:	b2db      	uxtb	r3, r3
}
     3c0:	4618      	mov	r0, r3
     3c2:	370c      	adds	r7, #12
     3c4:	46bd      	mov	sp, r7
     3c6:	bc80      	pop	{r7}
     3c8:	4770      	bx	lr
	...

000003cc <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
     3cc:	b580      	push	{r7, lr}
     3ce:	b082      	sub	sp, #8
     3d0:	af00      	add	r7, sp, #0
     3d2:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
     3d4:	6878      	ldr	r0, [r7, #4]
     3d6:	4b07      	ldr	r3, [pc, #28]	; (3f4 <cpu_irq_restore+0x28>)
     3d8:	4798      	blx	r3
     3da:	4603      	mov	r3, r0
     3dc:	2b00      	cmp	r3, #0
     3de:	d005      	beq.n	3ec <cpu_irq_restore+0x20>
		cpu_irq_enable();
     3e0:	4b05      	ldr	r3, [pc, #20]	; (3f8 <cpu_irq_restore+0x2c>)
     3e2:	2201      	movs	r2, #1
     3e4:	701a      	strb	r2, [r3, #0]
     3e6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     3ea:	b662      	cpsie	i
}
     3ec:	bf00      	nop
     3ee:	3708      	adds	r7, #8
     3f0:	46bd      	mov	sp, r7
     3f2:	bd80      	pop	{r7, pc}
     3f4:	000003ad 	.word	0x000003ad
     3f8:	20000074 	.word	0x20000074

000003fc <sleepmgr_sleep>:
extern uint8_t sleepmgr_locks[];
#endif /* CONFIG_SLEEPMGR_ENABLE */
/** @} */

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
     3fc:	b580      	push	{r7, lr}
     3fe:	b082      	sub	sp, #8
     400:	af00      	add	r7, sp, #0
     402:	4603      	mov	r3, r0
     404:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
     406:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     408:	f3bf 8f5f 	dmb	sy
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
     40c:	4b05      	ldr	r3, [pc, #20]	; (424 <sleepmgr_sleep+0x28>)
     40e:	2200      	movs	r2, #0
     410:	701a      	strb	r2, [r3, #0]

	/* Enter the sleep mode. */
	bpm_sleep(BPM, sleep_mode);
     412:	79fb      	ldrb	r3, [r7, #7]
     414:	4619      	mov	r1, r3
     416:	4804      	ldr	r0, [pc, #16]	; (428 <sleepmgr_sleep+0x2c>)
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <sleepmgr_sleep+0x30>)
     41a:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
     41c:	bf00      	nop
     41e:	3708      	adds	r7, #8
     420:	46bd      	mov	sp, r7
     422:	bd80      	pop	{r7, pc}
     424:	20000074 	.word	0x20000074
     428:	400f0000 	.word	0x400f0000
     42c:	00004771 	.word	0x00004771

00000430 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
     430:	b480      	push	{r7}
     432:	b083      	sub	sp, #12
     434:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
     436:	2300      	movs	r3, #0
     438:	71fb      	strb	r3, [r7, #7]
     43a:	e006      	b.n	44a <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
     43c:	79fb      	ldrb	r3, [r7, #7]
     43e:	4a08      	ldr	r2, [pc, #32]	; (460 <sleepmgr_init+0x30>)
     440:	2100      	movs	r1, #0
     442:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
     444:	79fb      	ldrb	r3, [r7, #7]
     446:	3301      	adds	r3, #1
     448:	71fb      	strb	r3, [r7, #7]
     44a:	79fb      	ldrb	r3, [r7, #7]
     44c:	2b06      	cmp	r3, #6
     44e:	d9f5      	bls.n	43c <sleepmgr_init+0xc>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
     450:	4b03      	ldr	r3, [pc, #12]	; (460 <sleepmgr_init+0x30>)
     452:	2201      	movs	r2, #1
     454:	71da      	strb	r2, [r3, #7]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
     456:	bf00      	nop
     458:	370c      	adds	r7, #12
     45a:	46bd      	mov	sp, r7
     45c:	bc80      	pop	{r7}
     45e:	4770      	bx	lr
     460:	20000388 	.word	0x20000388

00000464 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
     464:	b580      	push	{r7, lr}
     466:	b084      	sub	sp, #16
     468:	af00      	add	r7, sp, #0
     46a:	4603      	mov	r3, r0
     46c:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     46e:	79fb      	ldrb	r3, [r7, #7]
     470:	4a0a      	ldr	r2, [pc, #40]	; (49c <sleepmgr_lock_mode+0x38>)
     472:	5cd3      	ldrb	r3, [r2, r3]
     474:	2bff      	cmp	r3, #255	; 0xff
     476:	d100      	bne.n	47a <sleepmgr_lock_mode+0x16>
		while (true) {
     478:	e7fe      	b.n	478 <sleepmgr_lock_mode+0x14>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
     47a:	4b09      	ldr	r3, [pc, #36]	; (4a0 <sleepmgr_lock_mode+0x3c>)
     47c:	4798      	blx	r3
     47e:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
     480:	79fb      	ldrb	r3, [r7, #7]
     482:	4a06      	ldr	r2, [pc, #24]	; (49c <sleepmgr_lock_mode+0x38>)
     484:	5cd2      	ldrb	r2, [r2, r3]
     486:	3201      	adds	r2, #1
     488:	b2d1      	uxtb	r1, r2
     48a:	4a04      	ldr	r2, [pc, #16]	; (49c <sleepmgr_lock_mode+0x38>)
     48c:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
     48e:	68f8      	ldr	r0, [r7, #12]
     490:	4b04      	ldr	r3, [pc, #16]	; (4a4 <sleepmgr_lock_mode+0x40>)
     492:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
     494:	bf00      	nop
     496:	3710      	adds	r7, #16
     498:	46bd      	mov	sp, r7
     49a:	bd80      	pop	{r7, pc}
     49c:	20000388 	.word	0x20000388
     4a0:	00000375 	.word	0x00000375
     4a4:	000003cd 	.word	0x000003cd

000004a8 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
     4a8:	b580      	push	{r7, lr}
     4aa:	b084      	sub	sp, #16
     4ac:	af00      	add	r7, sp, #0
     4ae:	4603      	mov	r3, r0
     4b0:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
     4b2:	79fb      	ldrb	r3, [r7, #7]
     4b4:	4a0a      	ldr	r2, [pc, #40]	; (4e0 <sleepmgr_unlock_mode+0x38>)
     4b6:	5cd3      	ldrb	r3, [r2, r3]
     4b8:	2b00      	cmp	r3, #0
     4ba:	d100      	bne.n	4be <sleepmgr_unlock_mode+0x16>
		while (true) {
     4bc:	e7fe      	b.n	4bc <sleepmgr_unlock_mode+0x14>
			// Check APP.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
     4be:	4b09      	ldr	r3, [pc, #36]	; (4e4 <sleepmgr_unlock_mode+0x3c>)
     4c0:	4798      	blx	r3
     4c2:	60f8      	str	r0, [r7, #12]

	--sleepmgr_locks[mode];
     4c4:	79fb      	ldrb	r3, [r7, #7]
     4c6:	4a06      	ldr	r2, [pc, #24]	; (4e0 <sleepmgr_unlock_mode+0x38>)
     4c8:	5cd2      	ldrb	r2, [r2, r3]
     4ca:	3a01      	subs	r2, #1
     4cc:	b2d1      	uxtb	r1, r2
     4ce:	4a04      	ldr	r2, [pc, #16]	; (4e0 <sleepmgr_unlock_mode+0x38>)
     4d0:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
     4d2:	68f8      	ldr	r0, [r7, #12]
     4d4:	4b04      	ldr	r3, [pc, #16]	; (4e8 <sleepmgr_unlock_mode+0x40>)
     4d6:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
     4d8:	bf00      	nop
     4da:	3710      	adds	r7, #16
     4dc:	46bd      	mov	sp, r7
     4de:	bd80      	pop	{r7, pc}
     4e0:	20000388 	.word	0x20000388
     4e4:	00000375 	.word	0x00000375
     4e8:	000003cd 	.word	0x000003cd

000004ec <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
     4ec:	b480      	push	{r7}
     4ee:	b083      	sub	sp, #12
     4f0:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
     4f2:	2300      	movs	r3, #0
     4f4:	71fb      	strb	r3, [r7, #7]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
     4f6:	4b09      	ldr	r3, [pc, #36]	; (51c <sleepmgr_get_sleep_mode+0x30>)
     4f8:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
     4fa:	e005      	b.n	508 <sleepmgr_get_sleep_mode+0x1c>
		lock_ptr++;
     4fc:	683b      	ldr	r3, [r7, #0]
     4fe:	3301      	adds	r3, #1
     500:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
     502:	79fb      	ldrb	r3, [r7, #7]
     504:	3301      	adds	r3, #1
     506:	71fb      	strb	r3, [r7, #7]
	while (!(*lock_ptr)) {
     508:	683b      	ldr	r3, [r7, #0]
     50a:	781b      	ldrb	r3, [r3, #0]
     50c:	2b00      	cmp	r3, #0
     50e:	d0f5      	beq.n	4fc <sleepmgr_get_sleep_mode+0x10>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
     510:	79fb      	ldrb	r3, [r7, #7]
}
     512:	4618      	mov	r0, r3
     514:	370c      	adds	r7, #12
     516:	46bd      	mov	sp, r7
     518:	bc80      	pop	{r7}
     51a:	4770      	bx	lr
     51c:	20000388 	.word	0x20000388

00000520 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
     520:	b580      	push	{r7, lr}
     522:	b082      	sub	sp, #8
     524:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
     526:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     528:	f3bf 8f5f 	dmb	sy
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
     52c:	4b0b      	ldr	r3, [pc, #44]	; (55c <sleepmgr_enter_sleep+0x3c>)
     52e:	2200      	movs	r2, #0
     530:	701a      	strb	r2, [r3, #0]

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
     532:	4b0b      	ldr	r3, [pc, #44]	; (560 <sleepmgr_enter_sleep+0x40>)
     534:	4798      	blx	r3
     536:	4603      	mov	r3, r0
     538:	71fb      	strb	r3, [r7, #7]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
     53a:	79fb      	ldrb	r3, [r7, #7]
     53c:	2b00      	cmp	r3, #0
     53e:	d106      	bne.n	54e <sleepmgr_enter_sleep+0x2e>
		cpu_irq_enable();
     540:	4b06      	ldr	r3, [pc, #24]	; (55c <sleepmgr_enter_sleep+0x3c>)
     542:	2201      	movs	r2, #1
     544:	701a      	strb	r2, [r3, #0]
     546:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     54a:	b662      	cpsie	i
		return;
     54c:	e003      	b.n	556 <sleepmgr_enter_sleep+0x36>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
     54e:	79fb      	ldrb	r3, [r7, #7]
     550:	4618      	mov	r0, r3
     552:	4b04      	ldr	r3, [pc, #16]	; (564 <sleepmgr_enter_sleep+0x44>)
     554:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
     556:	3708      	adds	r7, #8
     558:	46bd      	mov	sp, r7
     55a:	bd80      	pop	{r7, pc}
     55c:	20000074 	.word	0x20000074
     560:	000004ed 	.word	0x000004ed
     564:	000003fd 	.word	0x000003fd

00000568 <find_twim_channel_num>:
 * \param twim  Base address of the TWIM
 *
 * \return      TWIM channel number
 */
static uint32_t find_twim_channel_num(Twim *twim)
{
     568:	b480      	push	{r7}
     56a:	b083      	sub	sp, #12
     56c:	af00      	add	r7, sp, #0
     56e:	6078      	str	r0, [r7, #4]
#if defined(ID_TWIM3)
	if (twim == TWIM3) {
     570:	687b      	ldr	r3, [r7, #4]
     572:	4a0e      	ldr	r2, [pc, #56]	; (5ac <find_twim_channel_num+0x44>)
     574:	4293      	cmp	r3, r2
     576:	d101      	bne.n	57c <find_twim_channel_num+0x14>
		return 3;
     578:	2303      	movs	r3, #3
     57a:	e012      	b.n	5a2 <find_twim_channel_num+0x3a>
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
     57c:	687b      	ldr	r3, [r7, #4]
     57e:	4a0c      	ldr	r2, [pc, #48]	; (5b0 <find_twim_channel_num+0x48>)
     580:	4293      	cmp	r3, r2
     582:	d101      	bne.n	588 <find_twim_channel_num+0x20>
		return 2;
     584:	2302      	movs	r3, #2
     586:	e00c      	b.n	5a2 <find_twim_channel_num+0x3a>
	}
#endif
#if defined(ID_TWIM1)
	if (twim == TWIM1) {
     588:	687b      	ldr	r3, [r7, #4]
     58a:	4a0a      	ldr	r2, [pc, #40]	; (5b4 <find_twim_channel_num+0x4c>)
     58c:	4293      	cmp	r3, r2
     58e:	d101      	bne.n	594 <find_twim_channel_num+0x2c>
		return 1;
     590:	2301      	movs	r3, #1
     592:	e006      	b.n	5a2 <find_twim_channel_num+0x3a>
	}
#endif
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
     594:	687b      	ldr	r3, [r7, #4]
     596:	4a08      	ldr	r2, [pc, #32]	; (5b8 <find_twim_channel_num+0x50>)
     598:	4293      	cmp	r3, r2
     59a:	d101      	bne.n	5a0 <find_twim_channel_num+0x38>
		return 0;
     59c:	2300      	movs	r3, #0
     59e:	e000      	b.n	5a2 <find_twim_channel_num+0x3a>
	}
#endif

	return 0;
     5a0:	2300      	movs	r3, #0
}
     5a2:	4618      	mov	r0, r3
     5a4:	370c      	adds	r7, #12
     5a6:	46bd      	mov	sp, r7
     5a8:	bc80      	pop	{r7}
     5aa:	4770      	bx	lr
     5ac:	4007c000 	.word	0x4007c000
     5b0:	40078000 	.word	0x40078000
     5b4:	4001c000 	.word	0x4001c000
     5b8:	40018000 	.word	0x40018000

000005bc <twim_default_callback>:

/**
 * \brief TWIM default callback function
 */
void twim_default_callback(Twim *twim)
{
     5bc:	b580      	push	{r7, lr}
     5be:	b086      	sub	sp, #24
     5c0:	af00      	add	r7, sp, #0
     5c2:	6078      	str	r0, [r7, #4]
#define NCMDR_FREE_WAIT    2000
	volatile uint32_t ncmdr_wait = NCMDR_FREE_WAIT;
     5c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
     5c8:	60bb      	str	r3, [r7, #8]

	/* Get masked status register value */
	uint32_t twim_ch = find_twim_channel_num(twim);
     5ca:	6878      	ldr	r0, [r7, #4]
     5cc:	4b94      	ldr	r3, [pc, #592]	; (820 <twim_default_callback+0x264>)
     5ce:	4798      	blx	r3
     5d0:	6138      	str	r0, [r7, #16]
	uint32_t status = twim->TWIM_SR;
     5d2:	687b      	ldr	r3, [r7, #4]
     5d4:	69db      	ldr	r3, [r3, #28]
     5d6:	60fb      	str	r3, [r7, #12]
	status &= twim_it_mask[twim_ch];
     5d8:	4a92      	ldr	r2, [pc, #584]	; (824 <twim_default_callback+0x268>)
     5da:	693b      	ldr	r3, [r7, #16]
     5dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     5e0:	68fa      	ldr	r2, [r7, #12]
     5e2:	4013      	ands	r3, r2
     5e4:	60fb      	str	r3, [r7, #12]
	uint32_t cmdr_reg;

	/* This is a NACK */
	if (status & TWIM_SR_STD_MASK) {
     5e6:	68fb      	ldr	r3, [r7, #12]
     5e8:	f403 63a0 	and.w	r3, r3, #1280	; 0x500
     5ec:	2b00      	cmp	r3, #0
     5ee:	d028      	beq.n	642 <twim_default_callback+0x86>
		/*
		 * If we get a NACK, clear the valid bit in CMDR,
		 * otherwise the command will be re-sent.
		 */
		transfer_status[twim_ch] = (status & TWIM_IER_ANAK) ?
     5f0:	68fb      	ldr	r3, [r7, #12]
     5f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
				TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
     5f6:	2b00      	cmp	r3, #0
     5f8:	d002      	beq.n	600 <twim_default_callback+0x44>
     5fa:	f06f 0103 	mvn.w	r1, #3
     5fe:	e001      	b.n	604 <twim_default_callback+0x48>
     600:	f06f 0101 	mvn.w	r1, #1
		transfer_status[twim_ch] = (status & TWIM_IER_ANAK) ?
     604:	4a88      	ldr	r2, [pc, #544]	; (828 <twim_default_callback+0x26c>)
     606:	693b      	ldr	r3, [r7, #16]
     608:	4413      	add	r3, r2
     60a:	460a      	mov	r2, r1
     60c:	701a      	strb	r2, [r3, #0]
		twim->TWIM_NCMDR &= ~TWIM_NCMDR_VALID;
     60e:	687b      	ldr	r3, [r7, #4]
     610:	691b      	ldr	r3, [r3, #16]
     612:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
     616:	687b      	ldr	r3, [r7, #4]
     618:	611a      	str	r2, [r3, #16]
		twim->TWIM_CMDR &= ~TWIM_CMDR_VALID;
     61a:	687b      	ldr	r3, [r7, #4]
     61c:	68db      	ldr	r3, [r3, #12]
     61e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
     622:	687b      	ldr	r3, [r7, #4]
     624:	60da      	str	r2, [r3, #12]
		twim->TWIM_SCR = ~0UL;
     626:	687b      	ldr	r3, [r7, #4]
     628:	f04f 32ff 	mov.w	r2, #4294967295
     62c:	62da      	str	r2, [r3, #44]	; 0x2c
		twim->TWIM_IDR = ~0UL;
     62e:	687b      	ldr	r3, [r7, #4]
     630:	f04f 32ff 	mov.w	r2, #4294967295
     634:	625a      	str	r2, [r3, #36]	; 0x24
		twim_next_cmd_xfer_valid[twim_ch] = false;
     636:	4a7d      	ldr	r2, [pc, #500]	; (82c <twim_default_callback+0x270>)
     638:	693b      	ldr	r3, [r7, #16]
     63a:	4413      	add	r3, r2
     63c:	2200      	movs	r2, #0
     63e:	701a      	strb	r2, [r3, #0]
	else if (status & TWIM_SR_CCOMP) {
		twim->TWIM_SCR = TWIM_SCR_CCOMP;
		twim->TWIM_IDR = TWIM_IDR_CCOMP;
	}
#endif
}
     640:	e1ed      	b.n	a1e <twim_default_callback+0x462>
	else if (status & TWIM_SR_RXRDY) {
     642:	68fb      	ldr	r3, [r7, #12]
     644:	f003 0301 	and.w	r3, r3, #1
     648:	2b00      	cmp	r3, #0
     64a:	f000 80bd 	beq.w	7c8 <twim_default_callback+0x20c>
		*p_twim_rx_data[twim_ch] = twim->TWIM_RHR;
     64e:	4a78      	ldr	r2, [pc, #480]	; (830 <twim_default_callback+0x274>)
     650:	693b      	ldr	r3, [r7, #16]
     652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     656:	687a      	ldr	r2, [r7, #4]
     658:	6952      	ldr	r2, [r2, #20]
     65a:	b2d2      	uxtb	r2, r2
     65c:	701a      	strb	r2, [r3, #0]
		p_twim_rx_data[twim_ch]++;
     65e:	4a74      	ldr	r2, [pc, #464]	; (830 <twim_default_callback+0x274>)
     660:	693b      	ldr	r3, [r7, #16]
     662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     666:	1c5a      	adds	r2, r3, #1
     668:	4971      	ldr	r1, [pc, #452]	; (830 <twim_default_callback+0x274>)
     66a:	693b      	ldr	r3, [r7, #16]
     66c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		twim_rx_nb_bytes[twim_ch]--;
     670:	4a70      	ldr	r2, [pc, #448]	; (834 <twim_default_callback+0x278>)
     672:	693b      	ldr	r3, [r7, #16]
     674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     678:	1e5a      	subs	r2, r3, #1
     67a:	496e      	ldr	r1, [pc, #440]	; (834 <twim_default_callback+0x278>)
     67c:	693b      	ldr	r3, [r7, #16]
     67e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (twim_rx_nb_bytes[twim_ch] == 0) {
     682:	4a6c      	ldr	r2, [pc, #432]	; (834 <twim_default_callback+0x278>)
     684:	693b      	ldr	r3, [r7, #16]
     686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     68a:	2b00      	cmp	r3, #0
     68c:	f040 81c7 	bne.w	a1e <twim_default_callback+0x462>
			if ((twim_next_cmd_xfer_valid[twim_ch]) &&
     690:	4a66      	ldr	r2, [pc, #408]	; (82c <twim_default_callback+0x270>)
     692:	693b      	ldr	r3, [r7, #16]
     694:	4413      	add	r3, r2
     696:	781b      	ldrb	r3, [r3, #0]
     698:	b2db      	uxtb	r3, r3
     69a:	2b00      	cmp	r3, #0
     69c:	d07b      	beq.n	796 <twim_default_callback+0x1da>
					(twim_next_rx_nb_bytes[twim_ch] != 0)) {
     69e:	4a66      	ldr	r2, [pc, #408]	; (838 <twim_default_callback+0x27c>)
     6a0:	693b      	ldr	r3, [r7, #16]
     6a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			if ((twim_next_cmd_xfer_valid[twim_ch]) &&
     6a6:	2b00      	cmp	r3, #0
     6a8:	d075      	beq.n	796 <twim_default_callback+0x1da>
				p_twim_rx_data[twim_ch] = p_twim_next_rx_data[twim_ch];
     6aa:	4a64      	ldr	r2, [pc, #400]	; (83c <twim_default_callback+0x280>)
     6ac:	693b      	ldr	r3, [r7, #16]
     6ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     6b2:	495f      	ldr	r1, [pc, #380]	; (830 <twim_default_callback+0x274>)
     6b4:	693b      	ldr	r3, [r7, #16]
     6b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (twim_next_rx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
     6ba:	4a5f      	ldr	r2, [pc, #380]	; (838 <twim_default_callback+0x27c>)
     6bc:	693b      	ldr	r3, [r7, #16]
     6be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     6c2:	2bff      	cmp	r3, #255	; 0xff
     6c4:	d919      	bls.n	6fa <twim_default_callback+0x13e>
					twim_rx_nb_bytes[twim_ch] = TWIM_MAX_NBYTES_PER_XFER;
     6c6:	4a5b      	ldr	r2, [pc, #364]	; (834 <twim_default_callback+0x278>)
     6c8:	693b      	ldr	r3, [r7, #16]
     6ca:	21ff      	movs	r1, #255	; 0xff
     6cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					p_twim_next_rx_data[twim_ch] += TWIM_MAX_NBYTES_PER_XFER;
     6d0:	4a5a      	ldr	r2, [pc, #360]	; (83c <twim_default_callback+0x280>)
     6d2:	693b      	ldr	r3, [r7, #16]
     6d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     6d8:	f103 02ff 	add.w	r2, r3, #255	; 0xff
     6dc:	4957      	ldr	r1, [pc, #348]	; (83c <twim_default_callback+0x280>)
     6de:	693b      	ldr	r3, [r7, #16]
     6e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					twim_next_rx_nb_bytes[twim_ch] -= TWIM_MAX_NBYTES_PER_XFER;
     6e4:	4a54      	ldr	r2, [pc, #336]	; (838 <twim_default_callback+0x27c>)
     6e6:	693b      	ldr	r3, [r7, #16]
     6e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     6ec:	f1a3 02ff 	sub.w	r2, r3, #255	; 0xff
     6f0:	4951      	ldr	r1, [pc, #324]	; (838 <twim_default_callback+0x27c>)
     6f2:	693b      	ldr	r3, [r7, #16]
     6f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     6f8:	e00c      	b.n	714 <twim_default_callback+0x158>
					twim_rx_nb_bytes[twim_ch] = twim_next_rx_nb_bytes[twim_ch];
     6fa:	4a4f      	ldr	r2, [pc, #316]	; (838 <twim_default_callback+0x27c>)
     6fc:	693b      	ldr	r3, [r7, #16]
     6fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     702:	494c      	ldr	r1, [pc, #304]	; (834 <twim_default_callback+0x278>)
     704:	693b      	ldr	r3, [r7, #16]
     706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					twim_next_rx_nb_bytes[twim_ch] = 0;
     70a:	4a4b      	ldr	r2, [pc, #300]	; (838 <twim_default_callback+0x27c>)
     70c:	693b      	ldr	r3, [r7, #16]
     70e:	2100      	movs	r1, #0
     710:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if (twim_next_rx_nb_bytes[twim_ch] > 0) {
     714:	4a48      	ldr	r2, [pc, #288]	; (838 <twim_default_callback+0x27c>)
     716:	693b      	ldr	r3, [r7, #16]
     718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     71c:	2b00      	cmp	r3, #0
     71e:	d034      	beq.n	78a <twim_default_callback+0x1ce>
					ncmdr_wait = NCMDR_FREE_WAIT;
     720:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
     724:	60bb      	str	r3, [r7, #8]
					while ((twim->TWIM_NCMDR & TWIM_NCMDR_VALID) && (ncmdr_wait--)) {
     726:	bf00      	nop
     728:	687b      	ldr	r3, [r7, #4]
     72a:	691b      	ldr	r3, [r3, #16]
     72c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
     730:	2b00      	cmp	r3, #0
     732:	d004      	beq.n	73e <twim_default_callback+0x182>
     734:	68bb      	ldr	r3, [r7, #8]
     736:	1e5a      	subs	r2, r3, #1
     738:	60ba      	str	r2, [r7, #8]
     73a:	2b00      	cmp	r3, #0
     73c:	d1f4      	bne.n	728 <twim_default_callback+0x16c>
					cmdr_reg = twim->TWIM_CMDR;
     73e:	687b      	ldr	r3, [r7, #4]
     740:	68db      	ldr	r3, [r3, #12]
     742:	617b      	str	r3, [r7, #20]
					cmdr_reg &= (~(TWIM_CMDR_NBYTES_Msk | TWIM_CMDR_START | TWIM_CMDR_ACKLAST));
     744:	697b      	ldr	r3, [r7, #20]
     746:	f023 733f 	bic.w	r3, r3, #50069504	; 0x2fc0000
     74a:	f423 3348 	bic.w	r3, r3, #204800	; 0x32000
     74e:	617b      	str	r3, [r7, #20]
					if (twim_next_rx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
     750:	4a39      	ldr	r2, [pc, #228]	; (838 <twim_default_callback+0x27c>)
     752:	693b      	ldr	r3, [r7, #16]
     754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     758:	2bff      	cmp	r3, #255	; 0xff
     75a:	d906      	bls.n	76a <twim_default_callback+0x1ae>
						cmdr_reg |=  (TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER) | TWIM_CMDR_ACKLAST);
     75c:	697b      	ldr	r3, [r7, #20]
     75e:	f043 733f 	orr.w	r3, r3, #50069504	; 0x2fc0000
     762:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
     766:	617b      	str	r3, [r7, #20]
     768:	e00b      	b.n	782 <twim_default_callback+0x1c6>
						cmdr_reg |=  (TWIM_CMDR_NBYTES(twim_next_rx_nb_bytes[twim_ch])
     76a:	4a33      	ldr	r2, [pc, #204]	; (838 <twim_default_callback+0x27c>)
     76c:	693b      	ldr	r3, [r7, #16]
     76e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     772:	041b      	lsls	r3, r3, #16
     774:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
								| TWIM_CMDR_STOP);
     778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
						cmdr_reg |=  (TWIM_CMDR_NBYTES(twim_next_rx_nb_bytes[twim_ch])
     77c:	697a      	ldr	r2, [r7, #20]
     77e:	4313      	orrs	r3, r2
     780:	617b      	str	r3, [r7, #20]
					twim->TWIM_NCMDR = cmdr_reg;
     782:	687b      	ldr	r3, [r7, #4]
     784:	697a      	ldr	r2, [r7, #20]
     786:	611a      	str	r2, [r3, #16]
				if (twim_next_rx_nb_bytes[twim_ch] > 0) {
     788:	e149      	b.n	a1e <twim_default_callback+0x462>
					twim_next_cmd_xfer_valid[twim_ch] = false;
     78a:	4a28      	ldr	r2, [pc, #160]	; (82c <twim_default_callback+0x270>)
     78c:	693b      	ldr	r3, [r7, #16]
     78e:	4413      	add	r3, r2
     790:	2200      	movs	r2, #0
     792:	701a      	strb	r2, [r3, #0]
				if (twim_next_rx_nb_bytes[twim_ch] > 0) {
     794:	e143      	b.n	a1e <twim_default_callback+0x462>
				twim->TWIM_IDR = TWIM_IDR_RXRDY;
     796:	687b      	ldr	r3, [r7, #4]
     798:	2201      	movs	r2, #1
     79a:	625a      	str	r2, [r3, #36]	; 0x24
				twim_next_cmd_xfer_valid[twim_ch] = false;
     79c:	4a23      	ldr	r2, [pc, #140]	; (82c <twim_default_callback+0x270>)
     79e:	693b      	ldr	r3, [r7, #16]
     7a0:	4413      	add	r3, r2
     7a2:	2200      	movs	r2, #0
     7a4:	701a      	strb	r2, [r3, #0]
				twim->TWIM_SCR = TWIM_SCR_CCOMP;
     7a6:	687b      	ldr	r3, [r7, #4]
     7a8:	2208      	movs	r2, #8
     7aa:	62da      	str	r2, [r3, #44]	; 0x2c
				twim->TWIM_IER = TWIM_IER_CCOMP;
     7ac:	687b      	ldr	r3, [r7, #4]
     7ae:	2208      	movs	r2, #8
     7b0:	621a      	str	r2, [r3, #32]
				twim_it_mask[twim_ch] |= TWIM_IER_CCOMP;
     7b2:	4a1c      	ldr	r2, [pc, #112]	; (824 <twim_default_callback+0x268>)
     7b4:	693b      	ldr	r3, [r7, #16]
     7b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     7ba:	f043 0208 	orr.w	r2, r3, #8
     7be:	4919      	ldr	r1, [pc, #100]	; (824 <twim_default_callback+0x268>)
     7c0:	693b      	ldr	r3, [r7, #16]
     7c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     7c6:	e12a      	b.n	a1e <twim_default_callback+0x462>
	else if (status & TWIM_SR_TXRDY) {
     7c8:	68fb      	ldr	r3, [r7, #12]
     7ca:	f003 0302 	and.w	r3, r3, #2
     7ce:	2b00      	cmp	r3, #0
     7d0:	f000 8119 	beq.w	a06 <twim_default_callback+0x44a>
		if (twim_tx_nb_bytes[twim_ch] == 0) {
     7d4:	4a1a      	ldr	r2, [pc, #104]	; (840 <twim_default_callback+0x284>)
     7d6:	693b      	ldr	r3, [r7, #16]
     7d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     7dc:	2b00      	cmp	r3, #0
     7de:	d131      	bne.n	844 <twim_default_callback+0x288>
			twim->TWIM_IDR = TWIM_IDR_TXRDY;
     7e0:	687b      	ldr	r3, [r7, #4]
     7e2:	2202      	movs	r2, #2
     7e4:	625a      	str	r2, [r3, #36]	; 0x24
			if (twim_next_rx_nb_bytes[twim_ch] == 0) {
     7e6:	4a14      	ldr	r2, [pc, #80]	; (838 <twim_default_callback+0x27c>)
     7e8:	693b      	ldr	r3, [r7, #16]
     7ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     7ee:	2b00      	cmp	r3, #0
     7f0:	d104      	bne.n	7fc <twim_default_callback+0x240>
				twim_next_cmd_xfer_valid[twim_ch] = false;
     7f2:	4a0e      	ldr	r2, [pc, #56]	; (82c <twim_default_callback+0x270>)
     7f4:	693b      	ldr	r3, [r7, #16]
     7f6:	4413      	add	r3, r2
     7f8:	2200      	movs	r2, #0
     7fa:	701a      	strb	r2, [r3, #0]
			twim->TWIM_SCR = TWIM_SCR_CCOMP;
     7fc:	687b      	ldr	r3, [r7, #4]
     7fe:	2208      	movs	r2, #8
     800:	62da      	str	r2, [r3, #44]	; 0x2c
			twim->TWIM_IER = TWIM_IER_CCOMP;
     802:	687b      	ldr	r3, [r7, #4]
     804:	2208      	movs	r2, #8
     806:	621a      	str	r2, [r3, #32]
			twim_it_mask[twim_ch] |= TWIM_IER_CCOMP;
     808:	4a06      	ldr	r2, [pc, #24]	; (824 <twim_default_callback+0x268>)
     80a:	693b      	ldr	r3, [r7, #16]
     80c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     810:	f043 0208 	orr.w	r2, r3, #8
     814:	4903      	ldr	r1, [pc, #12]	; (824 <twim_default_callback+0x268>)
     816:	693b      	ldr	r3, [r7, #16]
     818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     81c:	e0ff      	b.n	a1e <twim_default_callback+0x462>
     81e:	bf00      	nop
     820:	00000569 	.word	0x00000569
     824:	200002b4 	.word	0x200002b4
     828:	20000290 	.word	0x20000290
     82c:	200002c4 	.word	0x200002c4
     830:	20000280 	.word	0x20000280
     834:	200002a4 	.word	0x200002a4
     838:	200002f8 	.word	0x200002f8
     83c:	200002d8 	.word	0x200002d8
     840:	20000294 	.word	0x20000294
			twim->TWIM_THR = *p_twim_tx_data[twim_ch]++;
     844:	4a78      	ldr	r2, [pc, #480]	; (a28 <twim_default_callback+0x46c>)
     846:	693b      	ldr	r3, [r7, #16]
     848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     84c:	1c59      	adds	r1, r3, #1
     84e:	4876      	ldr	r0, [pc, #472]	; (a28 <twim_default_callback+0x46c>)
     850:	693a      	ldr	r2, [r7, #16]
     852:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
     856:	781b      	ldrb	r3, [r3, #0]
     858:	b2db      	uxtb	r3, r3
     85a:	461a      	mov	r2, r3
     85c:	687b      	ldr	r3, [r7, #4]
     85e:	619a      	str	r2, [r3, #24]
			twim_tx_nb_bytes[twim_ch]--;
     860:	4a72      	ldr	r2, [pc, #456]	; (a2c <twim_default_callback+0x470>)
     862:	693b      	ldr	r3, [r7, #16]
     864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     868:	1e5a      	subs	r2, r3, #1
     86a:	4970      	ldr	r1, [pc, #448]	; (a2c <twim_default_callback+0x470>)
     86c:	693b      	ldr	r3, [r7, #16]
     86e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (twim_tx_nb_bytes[twim_ch] == 0) {
     872:	4a6e      	ldr	r2, [pc, #440]	; (a2c <twim_default_callback+0x470>)
     874:	693b      	ldr	r3, [r7, #16]
     876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     87a:	2b00      	cmp	r3, #0
     87c:	f040 80cf 	bne.w	a1e <twim_default_callback+0x462>
				if ((twim_next_cmd_xfer_valid[twim_ch]) &&
     880:	4a6b      	ldr	r2, [pc, #428]	; (a30 <twim_default_callback+0x474>)
     882:	693b      	ldr	r3, [r7, #16]
     884:	4413      	add	r3, r2
     886:	781b      	ldrb	r3, [r3, #0]
     888:	b2db      	uxtb	r3, r3
     88a:	2b00      	cmp	r3, #0
     88c:	d079      	beq.n	982 <twim_default_callback+0x3c6>
						(twim_next_tx_nb_bytes[twim_ch] != 0)) {
     88e:	4a69      	ldr	r2, [pc, #420]	; (a34 <twim_default_callback+0x478>)
     890:	693b      	ldr	r3, [r7, #16]
     892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				if ((twim_next_cmd_xfer_valid[twim_ch]) &&
     896:	2b00      	cmp	r3, #0
     898:	d073      	beq.n	982 <twim_default_callback+0x3c6>
					p_twim_tx_data[twim_ch] = p_twim_next_tx_data[twim_ch];
     89a:	4a67      	ldr	r2, [pc, #412]	; (a38 <twim_default_callback+0x47c>)
     89c:	693b      	ldr	r3, [r7, #16]
     89e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     8a2:	4961      	ldr	r1, [pc, #388]	; (a28 <twim_default_callback+0x46c>)
     8a4:	693b      	ldr	r3, [r7, #16]
     8a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if (twim_next_tx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
     8aa:	4a62      	ldr	r2, [pc, #392]	; (a34 <twim_default_callback+0x478>)
     8ac:	693b      	ldr	r3, [r7, #16]
     8ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     8b2:	2bff      	cmp	r3, #255	; 0xff
     8b4:	d919      	bls.n	8ea <twim_default_callback+0x32e>
						twim_tx_nb_bytes[twim_ch] = TWIM_MAX_NBYTES_PER_XFER;
     8b6:	4a5d      	ldr	r2, [pc, #372]	; (a2c <twim_default_callback+0x470>)
     8b8:	693b      	ldr	r3, [r7, #16]
     8ba:	21ff      	movs	r1, #255	; 0xff
     8bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						p_twim_next_tx_data[twim_ch] += TWIM_MAX_NBYTES_PER_XFER;
     8c0:	4a5d      	ldr	r2, [pc, #372]	; (a38 <twim_default_callback+0x47c>)
     8c2:	693b      	ldr	r3, [r7, #16]
     8c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     8c8:	f103 02ff 	add.w	r2, r3, #255	; 0xff
     8cc:	495a      	ldr	r1, [pc, #360]	; (a38 <twim_default_callback+0x47c>)
     8ce:	693b      	ldr	r3, [r7, #16]
     8d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						twim_next_tx_nb_bytes[twim_ch] -= TWIM_MAX_NBYTES_PER_XFER;
     8d4:	4a57      	ldr	r2, [pc, #348]	; (a34 <twim_default_callback+0x478>)
     8d6:	693b      	ldr	r3, [r7, #16]
     8d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     8dc:	f1a3 02ff 	sub.w	r2, r3, #255	; 0xff
     8e0:	4954      	ldr	r1, [pc, #336]	; (a34 <twim_default_callback+0x478>)
     8e2:	693b      	ldr	r3, [r7, #16]
     8e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     8e8:	e00c      	b.n	904 <twim_default_callback+0x348>
						twim_tx_nb_bytes[twim_ch] = twim_next_tx_nb_bytes[twim_ch];
     8ea:	4a52      	ldr	r2, [pc, #328]	; (a34 <twim_default_callback+0x478>)
     8ec:	693b      	ldr	r3, [r7, #16]
     8ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     8f2:	494e      	ldr	r1, [pc, #312]	; (a2c <twim_default_callback+0x470>)
     8f4:	693b      	ldr	r3, [r7, #16]
     8f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						twim_next_tx_nb_bytes[twim_ch] = 0;
     8fa:	4a4e      	ldr	r2, [pc, #312]	; (a34 <twim_default_callback+0x478>)
     8fc:	693b      	ldr	r3, [r7, #16]
     8fe:	2100      	movs	r1, #0
     900:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if (twim_next_tx_nb_bytes[twim_ch] > 0) {
     904:	4a4b      	ldr	r2, [pc, #300]	; (a34 <twim_default_callback+0x478>)
     906:	693b      	ldr	r3, [r7, #16]
     908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     90c:	2b00      	cmp	r3, #0
     90e:	d032      	beq.n	976 <twim_default_callback+0x3ba>
						ncmdr_wait = NCMDR_FREE_WAIT;
     910:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
     914:	60bb      	str	r3, [r7, #8]
						while ((twim->TWIM_NCMDR & TWIM_NCMDR_VALID) && (ncmdr_wait--)) {
     916:	bf00      	nop
     918:	687b      	ldr	r3, [r7, #4]
     91a:	691b      	ldr	r3, [r3, #16]
     91c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
     920:	2b00      	cmp	r3, #0
     922:	d004      	beq.n	92e <twim_default_callback+0x372>
     924:	68bb      	ldr	r3, [r7, #8]
     926:	1e5a      	subs	r2, r3, #1
     928:	60ba      	str	r2, [r7, #8]
     92a:	2b00      	cmp	r3, #0
     92c:	d1f4      	bne.n	918 <twim_default_callback+0x35c>
						cmdr_reg = twim->TWIM_CMDR;
     92e:	687b      	ldr	r3, [r7, #4]
     930:	68db      	ldr	r3, [r3, #12]
     932:	617b      	str	r3, [r7, #20]
						cmdr_reg &= (~(TWIM_CMDR_NBYTES_Msk | TWIM_CMDR_START));
     934:	697b      	ldr	r3, [r7, #20]
     936:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     93a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
     93e:	617b      	str	r3, [r7, #20]
						if (twim_next_tx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
     940:	4a3c      	ldr	r2, [pc, #240]	; (a34 <twim_default_callback+0x478>)
     942:	693b      	ldr	r3, [r7, #16]
     944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     948:	2bff      	cmp	r3, #255	; 0xff
     94a:	d904      	bls.n	956 <twim_default_callback+0x39a>
							cmdr_reg |=  TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER);
     94c:	697b      	ldr	r3, [r7, #20]
     94e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
     952:	617b      	str	r3, [r7, #20]
     954:	e00b      	b.n	96e <twim_default_callback+0x3b2>
							cmdr_reg |=  (TWIM_CMDR_NBYTES(twim_next_tx_nb_bytes[twim_ch])
     956:	4a37      	ldr	r2, [pc, #220]	; (a34 <twim_default_callback+0x478>)
     958:	693b      	ldr	r3, [r7, #16]
     95a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     95e:	041b      	lsls	r3, r3, #16
     960:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
									| TWIM_CMDR_STOP);
     964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
							cmdr_reg |=  (TWIM_CMDR_NBYTES(twim_next_tx_nb_bytes[twim_ch])
     968:	697a      	ldr	r2, [r7, #20]
     96a:	4313      	orrs	r3, r2
     96c:	617b      	str	r3, [r7, #20]
						twim->TWIM_NCMDR = cmdr_reg;
     96e:	687b      	ldr	r3, [r7, #4]
     970:	697a      	ldr	r2, [r7, #20]
     972:	611a      	str	r2, [r3, #16]
					if (twim_next_tx_nb_bytes[twim_ch] > 0) {
     974:	e053      	b.n	a1e <twim_default_callback+0x462>
						twim_next_cmd_xfer_valid[twim_ch] = false;
     976:	4a2e      	ldr	r2, [pc, #184]	; (a30 <twim_default_callback+0x474>)
     978:	693b      	ldr	r3, [r7, #16]
     97a:	4413      	add	r3, r2
     97c:	2200      	movs	r2, #0
     97e:	701a      	strb	r2, [r3, #0]
					if (twim_next_tx_nb_bytes[twim_ch] > 0) {
     980:	e04d      	b.n	a1e <twim_default_callback+0x462>
				} else if ((twim_next_cmd_xfer_valid[twim_ch]) &&
     982:	4a2b      	ldr	r2, [pc, #172]	; (a30 <twim_default_callback+0x474>)
     984:	693b      	ldr	r3, [r7, #16]
     986:	4413      	add	r3, r2
     988:	781b      	ldrb	r3, [r3, #0]
     98a:	b2db      	uxtb	r3, r3
     98c:	2b00      	cmp	r3, #0
     98e:	d046      	beq.n	a1e <twim_default_callback+0x462>
						(twim_next_rx_nb_bytes[twim_ch] != 0)) {
     990:	4a2a      	ldr	r2, [pc, #168]	; (a3c <twim_default_callback+0x480>)
     992:	693b      	ldr	r3, [r7, #16]
     994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				} else if ((twim_next_cmd_xfer_valid[twim_ch]) &&
     998:	2b00      	cmp	r3, #0
     99a:	d040      	beq.n	a1e <twim_default_callback+0x462>
					ncmdr_wait = NCMDR_FREE_WAIT;
     99c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
     9a0:	60bb      	str	r3, [r7, #8]
					while ((twim->TWIM_NCMDR & TWIM_NCMDR_VALID) && (ncmdr_wait--)) {
     9a2:	bf00      	nop
     9a4:	687b      	ldr	r3, [r7, #4]
     9a6:	691b      	ldr	r3, [r3, #16]
     9a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
     9ac:	2b00      	cmp	r3, #0
     9ae:	d004      	beq.n	9ba <twim_default_callback+0x3fe>
     9b0:	68bb      	ldr	r3, [r7, #8]
     9b2:	1e5a      	subs	r2, r3, #1
     9b4:	60ba      	str	r2, [r7, #8]
     9b6:	2b00      	cmp	r3, #0
     9b8:	d1f4      	bne.n	9a4 <twim_default_callback+0x3e8>
					cmdr_reg = twim->TWIM_CMDR;
     9ba:	687b      	ldr	r3, [r7, #4]
     9bc:	68db      	ldr	r3, [r3, #12]
     9be:	617b      	str	r3, [r7, #20]
					cmdr_reg &= (~(TWIM_CMDR_NBYTES_Msk | TWIM_CMDR_START | TWIM_CMDR_ACKLAST));
     9c0:	697b      	ldr	r3, [r7, #20]
     9c2:	f023 733f 	bic.w	r3, r3, #50069504	; 0x2fc0000
     9c6:	f423 3348 	bic.w	r3, r3, #204800	; 0x32000
     9ca:	617b      	str	r3, [r7, #20]
					if (twim_next_rx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
     9cc:	4a1b      	ldr	r2, [pc, #108]	; (a3c <twim_default_callback+0x480>)
     9ce:	693b      	ldr	r3, [r7, #16]
     9d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     9d4:	2bff      	cmp	r3, #255	; 0xff
     9d6:	d906      	bls.n	9e6 <twim_default_callback+0x42a>
						cmdr_reg |=  (TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER) | TWIM_CMDR_ACKLAST);
     9d8:	697b      	ldr	r3, [r7, #20]
     9da:	f043 733f 	orr.w	r3, r3, #50069504	; 0x2fc0000
     9de:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
     9e2:	617b      	str	r3, [r7, #20]
     9e4:	e00b      	b.n	9fe <twim_default_callback+0x442>
						cmdr_reg |=  (TWIM_CMDR_NBYTES(twim_next_rx_nb_bytes[twim_ch])
     9e6:	4a15      	ldr	r2, [pc, #84]	; (a3c <twim_default_callback+0x480>)
     9e8:	693b      	ldr	r3, [r7, #16]
     9ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     9ee:	041b      	lsls	r3, r3, #16
     9f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
								| TWIM_CMDR_STOP);
     9f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
						cmdr_reg |=  (TWIM_CMDR_NBYTES(twim_next_rx_nb_bytes[twim_ch])
     9f8:	697a      	ldr	r2, [r7, #20]
     9fa:	4313      	orrs	r3, r2
     9fc:	617b      	str	r3, [r7, #20]
					twim->TWIM_NCMDR = cmdr_reg;
     9fe:	687b      	ldr	r3, [r7, #4]
     a00:	697a      	ldr	r2, [r7, #20]
     a02:	611a      	str	r2, [r3, #16]
}
     a04:	e00b      	b.n	a1e <twim_default_callback+0x462>
	else if (status & TWIM_SR_CCOMP) {
     a06:	68fb      	ldr	r3, [r7, #12]
     a08:	f003 0308 	and.w	r3, r3, #8
     a0c:	2b00      	cmp	r3, #0
     a0e:	d006      	beq.n	a1e <twim_default_callback+0x462>
		twim->TWIM_SCR = TWIM_SCR_CCOMP;
     a10:	687b      	ldr	r3, [r7, #4]
     a12:	2208      	movs	r2, #8
     a14:	62da      	str	r2, [r3, #44]	; 0x2c
		twim->TWIM_IDR = TWIM_IDR_CCOMP;
     a16:	687b      	ldr	r3, [r7, #4]
     a18:	2208      	movs	r2, #8
     a1a:	625a      	str	r2, [r3, #36]	; 0x24
}
     a1c:	e7ff      	b.n	a1e <twim_default_callback+0x462>
     a1e:	bf00      	nop
     a20:	3718      	adds	r7, #24
     a22:	46bd      	mov	sp, r7
     a24:	bd80      	pop	{r7, pc}
     a26:	bf00      	nop
     a28:	20000270 	.word	0x20000270
     a2c:	20000294 	.word	0x20000294
     a30:	200002c4 	.word	0x200002c4
     a34:	200002e8 	.word	0x200002e8
     a38:	200002c8 	.word	0x200002c8
     a3c:	200002f8 	.word	0x200002f8

00000a40 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
     a40:	b480      	push	{r7}
     a42:	b087      	sub	sp, #28
     a44:	af00      	add	r7, sp, #0
     a46:	60f8      	str	r0, [r7, #12]
     a48:	60b9      	str	r1, [r7, #8]
     a4a:	607a      	str	r2, [r7, #4]
     a4c:	70fb      	strb	r3, [r7, #3]
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
     a4e:	2300      	movs	r3, #0
     a50:	74fb      	strb	r3, [r7, #19]
	f_prescaled = (clk / speed / 2);
     a52:	687a      	ldr	r2, [r7, #4]
     a54:	68bb      	ldr	r3, [r7, #8]
     a56:	fbb2 f3f3 	udiv	r3, r2, r3
     a5a:	085b      	lsrs	r3, r3, #1
     a5c:	617b      	str	r3, [r7, #20]

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     a5e:	e005      	b.n	a6c <twim_set_speed+0x2c>
		/* increase clock divider */
		cwgr_exp++;
     a60:	7cfb      	ldrb	r3, [r7, #19]
     a62:	3301      	adds	r3, #1
     a64:	74fb      	strb	r3, [r7, #19]
		/* divide f_prescaled value */
		f_prescaled /= 2;
     a66:	697b      	ldr	r3, [r7, #20]
     a68:	085b      	lsrs	r3, r3, #1
     a6a:	617b      	str	r3, [r7, #20]
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     a6c:	697b      	ldr	r3, [r7, #20]
     a6e:	2bff      	cmp	r3, #255	; 0xff
     a70:	d902      	bls.n	a78 <twim_set_speed+0x38>
     a72:	7cfb      	ldrb	r3, [r7, #19]
     a74:	2b07      	cmp	r3, #7
     a76:	d9f3      	bls.n	a60 <twim_set_speed+0x20>
	}

	if (cwgr_exp > 0x7) {
     a78:	7cfb      	ldrb	r3, [r7, #19]
     a7a:	2b07      	cmp	r3, #7
     a7c:	d902      	bls.n	a84 <twim_set_speed+0x44>
		return ERR_INVALID_ARG;
     a7e:	f06f 0307 	mvn.w	r3, #7
     a82:	e01b      	b.n	abc <twim_set_speed+0x7c>
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
     a84:	697b      	ldr	r3, [r7, #20]
     a86:	085b      	lsrs	r3, r3, #1
     a88:	b2da      	uxtb	r2, r3
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
     a8a:	697b      	ldr	r3, [r7, #20]
     a8c:	085b      	lsrs	r3, r3, #1
     a8e:	6979      	ldr	r1, [r7, #20]
     a90:	1acb      	subs	r3, r1, r3
     a92:	021b      	lsls	r3, r3, #8
     a94:	b29b      	uxth	r3, r3
     a96:	431a      	orrs	r2, r3
			| TWIM_CWGR_EXP(cwgr_exp)
     a98:	7cfb      	ldrb	r3, [r7, #19]
     a9a:	071b      	lsls	r3, r3, #28
     a9c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
     aa0:	431a      	orrs	r2, r3
			| TWIM_CWGR_DATA(cycles)
     aa2:	78fb      	ldrb	r3, [r7, #3]
     aa4:	061b      	lsls	r3, r3, #24
     aa6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
     aaa:	431a      	orrs	r2, r3
			| TWIM_CWGR_STASTO(f_prescaled);
     aac:	697b      	ldr	r3, [r7, #20]
     aae:	041b      	lsls	r3, r3, #16
     ab0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
     ab4:	431a      	orrs	r2, r3
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
     ab6:	68fb      	ldr	r3, [r7, #12]
     ab8:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
     aba:	2300      	movs	r3, #0
}
     abc:	4618      	mov	r0, r3
     abe:	371c      	adds	r7, #28
     ac0:	46bd      	mov	sp, r7
     ac2:	bc80      	pop	{r7}
     ac4:	4770      	bx	lr

00000ac6 <twim_set_hsmode_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_hsmode_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
     ac6:	b480      	push	{r7}
     ac8:	b087      	sub	sp, #28
     aca:	af00      	add	r7, sp, #0
     acc:	60f8      	str	r0, [r7, #12]
     ace:	60b9      	str	r1, [r7, #8]
     ad0:	607a      	str	r2, [r7, #4]
     ad2:	70fb      	strb	r3, [r7, #3]
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
     ad4:	2300      	movs	r3, #0
     ad6:	74fb      	strb	r3, [r7, #19]
	f_prescaled = (clk / speed / 2);
     ad8:	687a      	ldr	r2, [r7, #4]
     ada:	68bb      	ldr	r3, [r7, #8]
     adc:	fbb2 f3f3 	udiv	r3, r2, r3
     ae0:	085b      	lsrs	r3, r3, #1
     ae2:	617b      	str	r3, [r7, #20]

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     ae4:	e005      	b.n	af2 <twim_set_hsmode_speed+0x2c>
		/* increase clock divider */
		cwgr_exp++;
     ae6:	7cfb      	ldrb	r3, [r7, #19]
     ae8:	3301      	adds	r3, #1
     aea:	74fb      	strb	r3, [r7, #19]
		/* divide f_prescaled value */
		f_prescaled /= 2;
     aec:	697b      	ldr	r3, [r7, #20]
     aee:	085b      	lsrs	r3, r3, #1
     af0:	617b      	str	r3, [r7, #20]
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
     af2:	697b      	ldr	r3, [r7, #20]
     af4:	2bff      	cmp	r3, #255	; 0xff
     af6:	d902      	bls.n	afe <twim_set_hsmode_speed+0x38>
     af8:	7cfb      	ldrb	r3, [r7, #19]
     afa:	2b07      	cmp	r3, #7
     afc:	d9f3      	bls.n	ae6 <twim_set_hsmode_speed+0x20>
	}

	if (cwgr_exp > 0x7) {
     afe:	7cfb      	ldrb	r3, [r7, #19]
     b00:	2b07      	cmp	r3, #7
     b02:	d902      	bls.n	b0a <twim_set_hsmode_speed+0x44>
		return ERR_INVALID_ARG;
     b04:	f06f 0307 	mvn.w	r3, #7
     b08:	e01b      	b.n	b42 <twim_set_hsmode_speed+0x7c>
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
     b0a:	697b      	ldr	r3, [r7, #20]
     b0c:	085b      	lsrs	r3, r3, #1
     b0e:	b2da      	uxtb	r2, r3
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
     b10:	697b      	ldr	r3, [r7, #20]
     b12:	085b      	lsrs	r3, r3, #1
     b14:	6979      	ldr	r1, [r7, #20]
     b16:	1acb      	subs	r3, r1, r3
     b18:	021b      	lsls	r3, r3, #8
     b1a:	b29b      	uxth	r3, r3
     b1c:	431a      	orrs	r2, r3
			| TWIM_HSCWGR_EXP(cwgr_exp)
     b1e:	7cfb      	ldrb	r3, [r7, #19]
     b20:	071b      	lsls	r3, r3, #28
     b22:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
     b26:	431a      	orrs	r2, r3
			| TWIM_HSCWGR_DATA(cycles)
     b28:	78fb      	ldrb	r3, [r7, #3]
     b2a:	061b      	lsls	r3, r3, #24
     b2c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
     b30:	431a      	orrs	r2, r3
			| TWIM_HSCWGR_STASTO(f_prescaled);
     b32:	697b      	ldr	r3, [r7, #20]
     b34:	041b      	lsls	r3, r3, #16
     b36:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
     b3a:	431a      	orrs	r2, r3
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
     b3c:	68fb      	ldr	r3, [r7, #12]
     b3e:	639a      	str	r2, [r3, #56]	; 0x38

	return STATUS_OK;
     b40:	2300      	movs	r3, #0
}
     b42:	4618      	mov	r0, r3
     b44:	371c      	adds	r7, #28
     b46:	46bd      	mov	sp, r7
     b48:	bc80      	pop	{r7}
     b4a:	4770      	bx	lr

00000b4c <twim_set_config>:
 *
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_config(Twim *twim, struct twim_config *config)
{
     b4c:	b590      	push	{r4, r7, lr}
     b4e:	b083      	sub	sp, #12
     b50:	af00      	add	r7, sp, #0
     b52:	6078      	str	r0, [r7, #4]
     b54:	6039      	str	r1, [r7, #0]
	sysclk_enable_peripheral_clock(twim);
     b56:	6878      	ldr	r0, [r7, #4]
     b58:	4b43      	ldr	r3, [pc, #268]	; (c68 <twim_set_config+0x11c>)
     b5a:	4798      	blx	r3
	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
     b5c:	687b      	ldr	r3, [r7, #4]
     b5e:	2201      	movs	r2, #1
     b60:	601a      	str	r2, [r3, #0]
	/* Reset TWI */
	twim->TWIM_CR = TWIM_CR_SWRST;
     b62:	687b      	ldr	r3, [r7, #4]
     b64:	2280      	movs	r2, #128	; 0x80
     b66:	601a      	str	r2, [r3, #0]
	/* Clear SR */
	twim->TWIM_SCR = ~0UL;
     b68:	687b      	ldr	r3, [r7, #4]
     b6a:	f04f 32ff 	mov.w	r2, #4294967295
     b6e:	62da      	str	r2, [r3, #44]	; 0x2c

	if (config->smbus) {
     b70:	683b      	ldr	r3, [r7, #0]
     b72:	7b9b      	ldrb	r3, [r3, #14]
     b74:	2b00      	cmp	r3, #0
     b76:	d006      	beq.n	b86 <twim_set_config+0x3a>
		/* Enable SMBUS Transfer */
		twim->TWIM_CR = TWIM_CR_SMEN;
     b78:	687b      	ldr	r3, [r7, #4]
     b7a:	2210      	movs	r2, #16
     b7c:	601a      	str	r2, [r3, #0]
		twim->TWIM_SMBTR = (uint32_t) -1;
     b7e:	687b      	ldr	r3, [r7, #4]
     b80:	f04f 32ff 	mov.w	r2, #4294967295
     b84:	609a      	str	r2, [r3, #8]
	}

	/* Select the speed */
	if (config->speed) {
     b86:	683b      	ldr	r3, [r7, #0]
     b88:	685b      	ldr	r3, [r3, #4]
     b8a:	2b00      	cmp	r3, #0
     b8c:	d00e      	beq.n	bac <twim_set_config+0x60>
		if (twim_set_speed(twim, config->speed, config->twim_clk,
     b8e:	683b      	ldr	r3, [r7, #0]
     b90:	6859      	ldr	r1, [r3, #4]
     b92:	683b      	ldr	r3, [r7, #0]
     b94:	681a      	ldr	r2, [r3, #0]
     b96:	683b      	ldr	r3, [r7, #0]
     b98:	7b1b      	ldrb	r3, [r3, #12]
     b9a:	6878      	ldr	r0, [r7, #4]
     b9c:	4c33      	ldr	r4, [pc, #204]	; (c6c <twim_set_config+0x120>)
     b9e:	47a0      	blx	r4
     ba0:	4603      	mov	r3, r0
     ba2:	2b00      	cmp	r3, #0
     ba4:	d002      	beq.n	bac <twim_set_config+0x60>
				config->data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
     ba6:	f06f 0307 	mvn.w	r3, #7
     baa:	e058      	b.n	c5e <twim_set_config+0x112>
		}
	}
	if (config->hsmode_speed) {
     bac:	683b      	ldr	r3, [r7, #0]
     bae:	689b      	ldr	r3, [r3, #8]
     bb0:	2b00      	cmp	r3, #0
     bb2:	d00e      	beq.n	bd2 <twim_set_config+0x86>
		if (twim_set_hsmode_speed(twim, config->hsmode_speed, config->twim_clk,
     bb4:	683b      	ldr	r3, [r7, #0]
     bb6:	6899      	ldr	r1, [r3, #8]
     bb8:	683b      	ldr	r3, [r7, #0]
     bba:	681a      	ldr	r2, [r3, #0]
     bbc:	683b      	ldr	r3, [r7, #0]
     bbe:	7b5b      	ldrb	r3, [r3, #13]
     bc0:	6878      	ldr	r0, [r7, #4]
     bc2:	4c2b      	ldr	r4, [pc, #172]	; (c70 <twim_set_config+0x124>)
     bc4:	47a0      	blx	r4
     bc6:	4603      	mov	r3, r0
     bc8:	2b00      	cmp	r3, #0
     bca:	d002      	beq.n	bd2 <twim_set_config+0x86>
				config->hsmode_data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
     bcc:	f06f 0307 	mvn.w	r3, #7
     bd0:	e045      	b.n	c5e <twim_set_config+0x112>
		}
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
     bd2:	683b      	ldr	r3, [r7, #0]
     bd4:	685b      	ldr	r3, [r3, #4]
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
     bd6:	4a27      	ldr	r2, [pc, #156]	; (c74 <twim_set_config+0x128>)
     bd8:	4293      	cmp	r3, r2
     bda:	d802      	bhi.n	be2 <twim_set_config+0x96>
     bdc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
     be0:	e001      	b.n	be6 <twim_set_config+0x9a>
     be2:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
     be6:	683b      	ldr	r3, [r7, #0]
     be8:	7bdb      	ldrb	r3, [r3, #15]
     bea:	061b      	lsls	r3, r3, #24
     bec:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
     bf0:	431a      	orrs	r2, r3
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
     bf2:	683b      	ldr	r3, [r7, #0]
     bf4:	7c1b      	ldrb	r3, [r3, #16]
     bf6:	041b      	lsls	r3, r3, #16
     bf8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
     bfc:	431a      	orrs	r2, r3
			| TWIM_SRR_DASLEW(config->data_slew_limit)
     bfe:	683b      	ldr	r3, [r7, #0]
     c00:	7c5b      	ldrb	r3, [r3, #17]
     c02:	021b      	lsls	r3, r3, #8
     c04:	f403 7340 	and.w	r3, r3, #768	; 0x300
     c08:	431a      	orrs	r2, r3
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
     c0a:	683b      	ldr	r3, [r7, #0]
     c0c:	7c9b      	ldrb	r3, [r3, #18]
     c0e:	f003 0307 	and.w	r3, r3, #7
     c12:	431a      	orrs	r2, r3
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
     c14:	687b      	ldr	r3, [r7, #4]
     c16:	63da      	str	r2, [r3, #60]	; 0x3c
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
     c18:	683b      	ldr	r3, [r7, #0]
     c1a:	7cdb      	ldrb	r3, [r3, #19]
     c1c:	061b      	lsls	r3, r3, #24
     c1e:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
     c22:	683b      	ldr	r3, [r7, #0]
     c24:	7d5b      	ldrb	r3, [r3, #21]
     c26:	041b      	lsls	r3, r3, #16
     c28:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
     c2c:	431a      	orrs	r2, r3
			| TWIM_HSSRR_CLDRIVEH(config->hs_clock_drive_strength_high)
     c2e:	683b      	ldr	r3, [r7, #0]
     c30:	7d1b      	ldrb	r3, [r3, #20]
     c32:	051b      	lsls	r3, r3, #20
     c34:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
     c38:	431a      	orrs	r2, r3
			| TWIM_HSSRR_DASLEW(config->hs_data_slew_limit)
     c3a:	683b      	ldr	r3, [r7, #0]
     c3c:	7d9b      	ldrb	r3, [r3, #22]
     c3e:	021b      	lsls	r3, r3, #8
     c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
     c44:	431a      	orrs	r2, r3
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
     c46:	683b      	ldr	r3, [r7, #0]
     c48:	7ddb      	ldrb	r3, [r3, #23]
     c4a:	f003 0307 	and.w	r3, r3, #7
     c4e:	4313      	orrs	r3, r2
     c50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
     c54:	687b      	ldr	r3, [r7, #4]
     c56:	641a      	str	r2, [r3, #64]	; 0x40

#if TWIM_LOW_POWER_ENABLE
	sleepmgr_init();
     c58:	4b07      	ldr	r3, [pc, #28]	; (c78 <twim_set_config+0x12c>)
     c5a:	4798      	blx	r3
#endif

	return STATUS_OK;
     c5c:	2300      	movs	r3, #0
}
     c5e:	4618      	mov	r0, r3
     c60:	370c      	adds	r7, #12
     c62:	46bd      	mov	sp, r7
     c64:	bd90      	pop	{r4, r7, pc}
     c66:	bf00      	nop
     c68:	00003899 	.word	0x00003899
     c6c:	00000a41 	.word	0x00000a41
     c70:	00000ac7 	.word	0x00000ac7
     c74:	000f423f 	.word	0x000f423f
     c78:	00000431 	.word	0x00000431

00000c7c <twim_enable_interrupt>:
 *
 * \param twim              Base address of the TWIM
 * \param interrupt_source  The TWI interrupt to be enabled
 */
void twim_enable_interrupt(Twim *twim, uint32_t interrupt_source)
{
     c7c:	b480      	push	{r7}
     c7e:	b083      	sub	sp, #12
     c80:	af00      	add	r7, sp, #0
     c82:	6078      	str	r0, [r7, #4]
     c84:	6039      	str	r1, [r7, #0]
	/* Set the interrupt flags */
	twim->TWIM_IER = interrupt_source;
     c86:	687b      	ldr	r3, [r7, #4]
     c88:	683a      	ldr	r2, [r7, #0]
     c8a:	621a      	str	r2, [r3, #32]
}
     c8c:	bf00      	nop
     c8e:	370c      	adds	r7, #12
     c90:	46bd      	mov	sp, r7
     c92:	bc80      	pop	{r7}
     c94:	4770      	bx	lr
	...

00000c98 <twi_master_read>:
 *
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twi_master_read(Twim *twim, struct twim_package *package)
{
     c98:	b580      	push	{r7, lr}
     c9a:	b084      	sub	sp, #16
     c9c:	af00      	add	r7, sp, #0
     c9e:	6078      	str	r0, [r7, #4]
     ca0:	6039      	str	r1, [r7, #0]
	uint32_t twim_ch = find_twim_channel_num(twim);
     ca2:	6878      	ldr	r0, [r7, #4]
     ca4:	4ba8      	ldr	r3, [pc, #672]	; (f48 <twi_master_read+0x2b0>)
     ca6:	4798      	blx	r3
     ca8:	60b8      	str	r0, [r7, #8]
	uint32_t cmdr_reg;

	/* Reset the TWIM module */
	twim->TWIM_CR = TWIM_CR_MEN;
     caa:	687b      	ldr	r3, [r7, #4]
     cac:	2201      	movs	r2, #1
     cae:	601a      	str	r2, [r3, #0]
	twim->TWIM_CR = TWIM_CR_SWRST;
     cb0:	687b      	ldr	r3, [r7, #4]
     cb2:	2280      	movs	r2, #128	; 0x80
     cb4:	601a      	str	r2, [r3, #0]
	twim->TWIM_CR = TWIM_CR_MDIS;
     cb6:	687b      	ldr	r3, [r7, #4]
     cb8:	2202      	movs	r2, #2
     cba:	601a      	str	r2, [r3, #0]
	/* Clear the interrupt flags */
	twim->TWIM_IDR = ~0UL;
     cbc:	687b      	ldr	r3, [r7, #4]
     cbe:	f04f 32ff 	mov.w	r2, #4294967295
     cc2:	625a      	str	r2, [r3, #36]	; 0x24
	/* Clear the status flags */
	twim->TWIM_SCR = ~0UL;
     cc4:	687b      	ldr	r3, [r7, #4]
     cc6:	f04f 32ff 	mov.w	r2, #4294967295
     cca:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Get a pointer to application data */
	p_twim_rx_data[twim_ch] = package->buffer;
     ccc:	683b      	ldr	r3, [r7, #0]
     cce:	689a      	ldr	r2, [r3, #8]
     cd0:	499e      	ldr	r1, [pc, #632]	; (f4c <twi_master_read+0x2b4>)
     cd2:	68bb      	ldr	r3, [r7, #8]
     cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Set next transfer to false */
	twim_next_cmd_xfer_valid[twim_ch] = false;
     cd8:	4a9d      	ldr	r2, [pc, #628]	; (f50 <twi_master_read+0x2b8>)
     cda:	68bb      	ldr	r3, [r7, #8]
     cdc:	4413      	add	r3, r2
     cde:	2200      	movs	r2, #0
     ce0:	701a      	strb	r2, [r3, #0]
	twim_next_rx_nb_bytes[twim_ch] = 0;
     ce2:	4a9c      	ldr	r2, [pc, #624]	; (f54 <twi_master_read+0x2bc>)
     ce4:	68bb      	ldr	r3, [r7, #8]
     ce6:	2100      	movs	r1, #0
     ce8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	twim_next_tx_nb_bytes[twim_ch] = 0;
     cec:	4a9a      	ldr	r2, [pc, #616]	; (f58 <twi_master_read+0x2c0>)
     cee:	68bb      	ldr	r3, [r7, #8]
     cf0:	2100      	movs	r1, #0
     cf2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	/* Initialize bus transfer status */
	transfer_status[twim_ch] = TWI_SUCCESS;
     cf6:	4a99      	ldr	r2, [pc, #612]	; (f5c <twi_master_read+0x2c4>)
     cf8:	68bb      	ldr	r3, [r7, #8]
     cfa:	4413      	add	r3, r2
     cfc:	2200      	movs	r2, #0
     cfe:	701a      	strb	r2, [r3, #0]

	if (package->ten_bit) {
     d00:	683b      	ldr	r3, [r7, #0]
     d02:	7c1b      	ldrb	r3, [r3, #16]
     d04:	2b00      	cmp	r3, #0
     d06:	f000 80a2 	beq.w	e4e <twi_master_read+0x1b6>
		/* Mask NACK and RXRDY interrupts */
		twim_it_mask[twim_ch] = TWIM_IER_STD_MASK | TWIM_IER_RXRDY;
     d0a:	4a95      	ldr	r2, [pc, #596]	; (f60 <twi_master_read+0x2c8>)
     d0c:	68bb      	ldr	r3, [r7, #8]
     d0e:	f240 5101 	movw	r1, #1281	; 0x501
     d12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		/* Set the command register to initiate the transfer */
		cmdr_reg = (package->high_speed ? (TWIM_CMDR_HS |
     d16:	683b      	ldr	r3, [r7, #0]
     d18:	7c5b      	ldrb	r3, [r3, #17]
					TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
     d1a:	2b00      	cmp	r3, #0
     d1c:	d007      	beq.n	d2e <twi_master_read+0x96>
     d1e:	683b      	ldr	r3, [r7, #0]
     d20:	7c9b      	ldrb	r3, [r3, #18]
     d22:	071b      	lsls	r3, r3, #28
     d24:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
     d28:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
     d2c:	e000      	b.n	d30 <twi_master_read+0x98>
     d2e:	2200      	movs	r2, #0
					| TWIM_CMDR_SADR(package->chip)
     d30:	683b      	ldr	r3, [r7, #0]
     d32:	681b      	ldr	r3, [r3, #0]
     d34:	0059      	lsls	r1, r3, #1
     d36:	f240 73fe 	movw	r3, #2046	; 0x7fe
     d3a:	400b      	ands	r3, r1
     d3c:	4313      	orrs	r3, r2
		cmdr_reg = (package->high_speed ? (TWIM_CMDR_HS |
     d3e:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
     d42:	60fb      	str	r3, [r7, #12]
					| TWIM_CMDR_VALID
					| TWIM_CMDR_START
					| TWIM_CMDR_TENBIT;

		if (package->addr_length) {
     d44:	683b      	ldr	r3, [r7, #0]
     d46:	79db      	ldrb	r3, [r3, #7]
     d48:	2b00      	cmp	r3, #0
     d4a:	d01d      	beq.n	d88 <twi_master_read+0xf0>
			/* Selection of first valid byte of the address */
			p_twim_tx_data[twim_ch] = package->addr;
     d4c:	683b      	ldr	r3, [r7, #0]
     d4e:	1d1a      	adds	r2, r3, #4
     d50:	4984      	ldr	r1, [pc, #528]	; (f64 <twi_master_read+0x2cc>)
     d52:	68bb      	ldr	r3, [r7, #8]
     d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			/* Set the number of bytes to transmit */
			twim_tx_nb_bytes[twim_ch] = package->addr_length;
     d58:	683b      	ldr	r3, [r7, #0]
     d5a:	79db      	ldrb	r3, [r3, #7]
     d5c:	4619      	mov	r1, r3
     d5e:	4a82      	ldr	r2, [pc, #520]	; (f68 <twi_master_read+0x2d0>)
     d60:	68bb      	ldr	r3, [r7, #8]
     d62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			/* Fill transfer command */
			cmdr_reg |= twim_tx_nb_bytes[twim_ch];
     d66:	4a80      	ldr	r2, [pc, #512]	; (f68 <twi_master_read+0x2d0>)
     d68:	68bb      	ldr	r3, [r7, #8]
     d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     d6e:	68fa      	ldr	r2, [r7, #12]
     d70:	4313      	orrs	r3, r2
     d72:	60fb      	str	r3, [r7, #12]
			/* Mask TXRDY interrupt */
			twim_it_mask[twim_ch] |= TWIM_IER_TXRDY;
     d74:	4a7a      	ldr	r2, [pc, #488]	; (f60 <twi_master_read+0x2c8>)
     d76:	68bb      	ldr	r3, [r7, #8]
     d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     d7c:	f043 0202 	orr.w	r2, r3, #2
     d80:	4977      	ldr	r1, [pc, #476]	; (f60 <twi_master_read+0x2c8>)
     d82:	68bb      	ldr	r3, [r7, #8]
     d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		twim->TWIM_CMDR = cmdr_reg;
     d88:	687b      	ldr	r3, [r7, #4]
     d8a:	68fa      	ldr	r2, [r7, #12]
     d8c:	60da      	str	r2, [r3, #12]

		/* Set the command register to initiate the transfer */
		cmdr_reg = (package->high_speed ? (TWIM_CMDR_HS |
     d8e:	683b      	ldr	r3, [r7, #0]
     d90:	7c5b      	ldrb	r3, [r3, #17]
					TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
     d92:	2b00      	cmp	r3, #0
     d94:	d007      	beq.n	da6 <twi_master_read+0x10e>
     d96:	683b      	ldr	r3, [r7, #0]
     d98:	7c9b      	ldrb	r3, [r3, #18]
     d9a:	071b      	lsls	r3, r3, #28
     d9c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
     da0:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
     da4:	e000      	b.n	da8 <twi_master_read+0x110>
     da6:	2200      	movs	r2, #0
					| TWIM_CMDR_SADR(package->chip)
     da8:	683b      	ldr	r3, [r7, #0]
     daa:	681b      	ldr	r3, [r3, #0]
     dac:	0059      	lsls	r1, r3, #1
     dae:	f240 73fe 	movw	r3, #2046	; 0x7fe
     db2:	400b      	ands	r3, r1
     db4:	4313      	orrs	r3, r2
		cmdr_reg = (package->high_speed ? (TWIM_CMDR_HS |
     db6:	f443 4338 	orr.w	r3, r3, #47104	; 0xb800
     dba:	f043 0301 	orr.w	r3, r3, #1
     dbe:	60fb      	str	r3, [r7, #12]
					| TWIM_CMDR_START
					| TWIM_CMDR_TENBIT
					| TWIM_CMDR_REPSAME
					| TWIM_CMDR_READ;
		/* Fill next transfer command */
		if (package->length > TWIM_MAX_NBYTES_PER_XFER) {
     dc0:	683b      	ldr	r3, [r7, #0]
     dc2:	68db      	ldr	r3, [r3, #12]
     dc4:	2bff      	cmp	r3, #255	; 0xff
     dc6:	d922      	bls.n	e0e <twi_master_read+0x176>
			twim_next_cmd_xfer_valid[twim_ch] = true;
     dc8:	4a61      	ldr	r2, [pc, #388]	; (f50 <twi_master_read+0x2b8>)
     dca:	68bb      	ldr	r3, [r7, #8]
     dcc:	4413      	add	r3, r2
     dce:	2201      	movs	r2, #1
     dd0:	701a      	strb	r2, [r3, #0]
			twim_rx_nb_bytes[twim_ch] = TWIM_MAX_NBYTES_PER_XFER;
     dd2:	4a66      	ldr	r2, [pc, #408]	; (f6c <twi_master_read+0x2d4>)
     dd4:	68bb      	ldr	r3, [r7, #8]
     dd6:	21ff      	movs	r1, #255	; 0xff
     dd8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			p_twim_next_rx_data[twim_ch] = p_twim_rx_data[twim_ch] + TWIM_MAX_NBYTES_PER_XFER;
     ddc:	4a5b      	ldr	r2, [pc, #364]	; (f4c <twi_master_read+0x2b4>)
     dde:	68bb      	ldr	r3, [r7, #8]
     de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     de4:	f103 02ff 	add.w	r2, r3, #255	; 0xff
     de8:	4961      	ldr	r1, [pc, #388]	; (f70 <twi_master_read+0x2d8>)
     dea:	68bb      	ldr	r3, [r7, #8]
     dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			twim_next_rx_nb_bytes[twim_ch] = package->length - TWIM_MAX_NBYTES_PER_XFER;
     df0:	683b      	ldr	r3, [r7, #0]
     df2:	68db      	ldr	r3, [r3, #12]
     df4:	f1a3 02ff 	sub.w	r2, r3, #255	; 0xff
     df8:	4956      	ldr	r1, [pc, #344]	; (f54 <twi_master_read+0x2bc>)
     dfa:	68bb      	ldr	r3, [r7, #8]
     dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			cmdr_reg |=  (TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER) | TWIM_CMDR_ACKLAST);
     e00:	68fb      	ldr	r3, [r7, #12]
     e02:	f043 733f 	orr.w	r3, r3, #50069504	; 0x2fc0000
     e06:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
     e0a:	60fb      	str	r3, [r7, #12]
     e0c:	e011      	b.n	e32 <twi_master_read+0x19a>
		} else {
			twim_rx_nb_bytes[twim_ch] = package->length;
     e0e:	683b      	ldr	r3, [r7, #0]
     e10:	68da      	ldr	r2, [r3, #12]
     e12:	4956      	ldr	r1, [pc, #344]	; (f6c <twi_master_read+0x2d4>)
     e14:	68bb      	ldr	r3, [r7, #8]
     e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			cmdr_reg |= (TWIM_CMDR_NBYTES(twim_rx_nb_bytes[twim_ch]) | TWIM_CMDR_STOP);
     e1a:	4a54      	ldr	r2, [pc, #336]	; (f6c <twi_master_read+0x2d4>)
     e1c:	68bb      	ldr	r3, [r7, #8]
     e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     e22:	041b      	lsls	r3, r3, #16
     e24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
     e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     e2c:	68fa      	ldr	r2, [r7, #12]
     e2e:	4313      	orrs	r3, r2
     e30:	60fb      	str	r3, [r7, #12]
		}
		cmdr_reg |=  TWIM_CMDR_NBYTES(twim_rx_nb_bytes[twim_ch]);
     e32:	4a4e      	ldr	r2, [pc, #312]	; (f6c <twi_master_read+0x2d4>)
     e34:	68bb      	ldr	r3, [r7, #8]
     e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     e3a:	041b      	lsls	r3, r3, #16
     e3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
     e40:	68fa      	ldr	r2, [r7, #12]
     e42:	4313      	orrs	r3, r2
     e44:	60fb      	str	r3, [r7, #12]
		twim->TWIM_NCMDR = cmdr_reg;
     e46:	687b      	ldr	r3, [r7, #4]
     e48:	68fa      	ldr	r2, [r7, #12]
     e4a:	611a      	str	r2, [r3, #16]
     e4c:	e144      	b.n	10d8 <__stack_size__+0xd8>
	} else {
		/* Check if internal address access is performed */
		if (package->addr_length) {
     e4e:	683b      	ldr	r3, [r7, #0]
     e50:	79db      	ldrb	r3, [r3, #7]
     e52:	2b00      	cmp	r3, #0
     e54:	f000 80ae 	beq.w	fb4 <twi_master_read+0x31c>
			/* Selection of first valid byte of the address */
			p_twim_tx_data[twim_ch] = package->addr;
     e58:	683b      	ldr	r3, [r7, #0]
     e5a:	1d1a      	adds	r2, r3, #4
     e5c:	4941      	ldr	r1, [pc, #260]	; (f64 <twi_master_read+0x2cc>)
     e5e:	68bb      	ldr	r3, [r7, #8]
     e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			/* Set the number of bytes to transmit */
			twim_tx_nb_bytes[twim_ch] = package->addr_length;
     e64:	683b      	ldr	r3, [r7, #0]
     e66:	79db      	ldrb	r3, [r3, #7]
     e68:	4619      	mov	r1, r3
     e6a:	4a3f      	ldr	r2, [pc, #252]	; (f68 <twi_master_read+0x2d0>)
     e6c:	68bb      	ldr	r3, [r7, #8]
     e6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			/* Mask NACK, TXRDY and RXRDY interrupts */
			twim_it_mask[twim_ch] = TWIM_IER_STD_MASK | TWIM_IER_TXRDY
     e72:	4a3b      	ldr	r2, [pc, #236]	; (f60 <twi_master_read+0x2c8>)
     e74:	68bb      	ldr	r3, [r7, #8]
     e76:	f240 5103 	movw	r1, #1283	; 0x503
     e7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				| TWIM_IER_RXRDY;
			/* Set the command register to initiate the transfer */
			twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
     e7e:	683b      	ldr	r3, [r7, #0]
     e80:	7c5b      	ldrb	r3, [r3, #17]
					TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
     e82:	2b00      	cmp	r3, #0
     e84:	d007      	beq.n	e96 <twi_master_read+0x1fe>
     e86:	683b      	ldr	r3, [r7, #0]
     e88:	7c9b      	ldrb	r3, [r3, #18]
     e8a:	071b      	lsls	r3, r3, #28
     e8c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
     e90:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
     e94:	e000      	b.n	e98 <twi_master_read+0x200>
     e96:	2200      	movs	r2, #0
					| TWIM_CMDR_SADR(package->chip)
     e98:	683b      	ldr	r3, [r7, #0]
     e9a:	681b      	ldr	r3, [r3, #0]
     e9c:	0059      	lsls	r1, r3, #1
     e9e:	f240 73fe 	movw	r3, #2046	; 0x7fe
     ea2:	400b      	ands	r3, r1
     ea4:	431a      	orrs	r2, r3
					| TWIM_CMDR_NBYTES(package->addr_length)
     ea6:	683b      	ldr	r3, [r7, #0]
     ea8:	79db      	ldrb	r3, [r3, #7]
     eaa:	041b      	lsls	r3, r3, #16
     eac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
     eb0:	4313      	orrs	r3, r2
					| TWIM_CMDR_VALID
					| TWIM_CMDR_START
					| 0;
     eb2:	f443 4220 	orr.w	r2, r3, #40960	; 0xa000
			twim->TWIM_CMDR = (package->high_speed ? (TWIM_CMDR_HS |
     eb6:	687b      	ldr	r3, [r7, #4]
     eb8:	60da      	str	r2, [r3, #12]
			/* Set the command register to initiate the transfer */
			cmdr_reg = (package->high_speed ? (TWIM_NCMDR_HS |
     eba:	683b      	ldr	r3, [r7, #0]
     ebc:	7c5b      	ldrb	r3, [r3, #17]
					TWIM_NCMDR_HSMCODE(package->high_speed_code)) : 0)
     ebe:	2b00      	cmp	r3, #0
     ec0:	d007      	beq.n	ed2 <twi_master_read+0x23a>
     ec2:	683b      	ldr	r3, [r7, #0]
     ec4:	7c9b      	ldrb	r3, [r3, #18]
     ec6:	071b      	lsls	r3, r3, #28
     ec8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
     ecc:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
     ed0:	e000      	b.n	ed4 <twi_master_read+0x23c>
     ed2:	2200      	movs	r2, #0
					| TWIM_NCMDR_SADR(package->chip)
     ed4:	683b      	ldr	r3, [r7, #0]
     ed6:	681b      	ldr	r3, [r3, #0]
     ed8:	0059      	lsls	r1, r3, #1
     eda:	f240 73fe 	movw	r3, #2046	; 0x7fe
     ede:	400b      	ands	r3, r1
     ee0:	431a      	orrs	r2, r3
					| TWIM_NCMDR_NBYTES(package->length)
     ee2:	683b      	ldr	r3, [r7, #0]
     ee4:	68db      	ldr	r3, [r3, #12]
     ee6:	041b      	lsls	r3, r3, #16
     ee8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
     eec:	4313      	orrs	r3, r2
			cmdr_reg = (package->high_speed ? (TWIM_NCMDR_HS |
     eee:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
     ef2:	f043 0301 	orr.w	r3, r3, #1
     ef6:	60fb      	str	r3, [r7, #12]
					| TWIM_NCMDR_VALID
					| TWIM_NCMDR_START
					| TWIM_NCMDR_READ;
			/* Fill transfer command */
			if (package->length > TWIM_MAX_NBYTES_PER_XFER) {
     ef8:	683b      	ldr	r3, [r7, #0]
     efa:	68db      	ldr	r3, [r3, #12]
     efc:	2bff      	cmp	r3, #255	; 0xff
     efe:	d939      	bls.n	f74 <twi_master_read+0x2dc>
				twim_next_cmd_xfer_valid[twim_ch] = true;
     f00:	4a13      	ldr	r2, [pc, #76]	; (f50 <twi_master_read+0x2b8>)
     f02:	68bb      	ldr	r3, [r7, #8]
     f04:	4413      	add	r3, r2
     f06:	2201      	movs	r2, #1
     f08:	701a      	strb	r2, [r3, #0]
				twim_rx_nb_bytes[twim_ch] = TWIM_MAX_NBYTES_PER_XFER;
     f0a:	4a18      	ldr	r2, [pc, #96]	; (f6c <twi_master_read+0x2d4>)
     f0c:	68bb      	ldr	r3, [r7, #8]
     f0e:	21ff      	movs	r1, #255	; 0xff
     f10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				p_twim_next_rx_data[twim_ch] = p_twim_rx_data[twim_ch] + TWIM_MAX_NBYTES_PER_XFER;
     f14:	4a0d      	ldr	r2, [pc, #52]	; (f4c <twi_master_read+0x2b4>)
     f16:	68bb      	ldr	r3, [r7, #8]
     f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     f1c:	f103 02ff 	add.w	r2, r3, #255	; 0xff
     f20:	4913      	ldr	r1, [pc, #76]	; (f70 <twi_master_read+0x2d8>)
     f22:	68bb      	ldr	r3, [r7, #8]
     f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				twim_next_rx_nb_bytes[twim_ch] = package->length - TWIM_MAX_NBYTES_PER_XFER;
     f28:	683b      	ldr	r3, [r7, #0]
     f2a:	68db      	ldr	r3, [r3, #12]
     f2c:	f1a3 02ff 	sub.w	r2, r3, #255	; 0xff
     f30:	4908      	ldr	r1, [pc, #32]	; (f54 <twi_master_read+0x2bc>)
     f32:	68bb      	ldr	r3, [r7, #8]
     f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				cmdr_reg |=  (TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER) | TWIM_CMDR_ACKLAST);
     f38:	68fb      	ldr	r3, [r7, #12]
     f3a:	f043 733f 	orr.w	r3, r3, #50069504	; 0x2fc0000
     f3e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
     f42:	60fb      	str	r3, [r7, #12]
     f44:	e028      	b.n	f98 <twi_master_read+0x300>
     f46:	bf00      	nop
     f48:	00000569 	.word	0x00000569
     f4c:	20000280 	.word	0x20000280
     f50:	200002c4 	.word	0x200002c4
     f54:	200002f8 	.word	0x200002f8
     f58:	200002e8 	.word	0x200002e8
     f5c:	20000290 	.word	0x20000290
     f60:	200002b4 	.word	0x200002b4
     f64:	20000270 	.word	0x20000270
     f68:	20000294 	.word	0x20000294
     f6c:	200002a4 	.word	0x200002a4
     f70:	200002d8 	.word	0x200002d8
			} else {
				twim_rx_nb_bytes[twim_ch] = package->length;
     f74:	683b      	ldr	r3, [r7, #0]
     f76:	68da      	ldr	r2, [r3, #12]
     f78:	4977      	ldr	r1, [pc, #476]	; (1158 <__stack_size__+0x158>)
     f7a:	68bb      	ldr	r3, [r7, #8]
     f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				cmdr_reg |= (TWIM_CMDR_NBYTES(twim_rx_nb_bytes[twim_ch]) | TWIM_CMDR_STOP);
     f80:	4a75      	ldr	r2, [pc, #468]	; (1158 <__stack_size__+0x158>)
     f82:	68bb      	ldr	r3, [r7, #8]
     f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     f88:	041b      	lsls	r3, r3, #16
     f8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
     f8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     f92:	68fa      	ldr	r2, [r7, #12]
     f94:	4313      	orrs	r3, r2
     f96:	60fb      	str	r3, [r7, #12]
			}
			cmdr_reg |=  TWIM_CMDR_NBYTES(twim_rx_nb_bytes[twim_ch]);
     f98:	4a6f      	ldr	r2, [pc, #444]	; (1158 <__stack_size__+0x158>)
     f9a:	68bb      	ldr	r3, [r7, #8]
     f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     fa0:	041b      	lsls	r3, r3, #16
     fa2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
     fa6:	68fa      	ldr	r2, [r7, #12]
     fa8:	4313      	orrs	r3, r2
     faa:	60fb      	str	r3, [r7, #12]
			twim->TWIM_NCMDR = cmdr_reg;
     fac:	687b      	ldr	r3, [r7, #4]
     fae:	68fa      	ldr	r2, [r7, #12]
     fb0:	611a      	str	r2, [r3, #16]
     fb2:	e091      	b.n	10d8 <__stack_size__+0xd8>
		} else {
			twim_tx_nb_bytes[twim_ch] = 0;
     fb4:	4a69      	ldr	r2, [pc, #420]	; (115c <__stack_size__+0x15c>)
     fb6:	68bb      	ldr	r3, [r7, #8]
     fb8:	2100      	movs	r1, #0
     fba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			/* Mask NACK and RXRDY interrupts */
			twim_it_mask[twim_ch] = TWIM_IER_STD_MASK | TWIM_IER_RXRDY;
     fbe:	4a68      	ldr	r2, [pc, #416]	; (1160 <__stack_size__+0x160>)
     fc0:	68bb      	ldr	r3, [r7, #8]
     fc2:	f240 5101 	movw	r1, #1281	; 0x501
     fc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			/* Set the command register to initiate the transfer */
			cmdr_reg = (package->high_speed ? (TWIM_CMDR_HS |
     fca:	683b      	ldr	r3, [r7, #0]
     fcc:	7c5b      	ldrb	r3, [r3, #17]
						TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
     fce:	2b00      	cmp	r3, #0
     fd0:	d007      	beq.n	fe2 <twi_master_read+0x34a>
     fd2:	683b      	ldr	r3, [r7, #0]
     fd4:	7c9b      	ldrb	r3, [r3, #18]
     fd6:	071b      	lsls	r3, r3, #28
     fd8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
     fdc:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
     fe0:	e000      	b.n	fe4 <twi_master_read+0x34c>
     fe2:	2200      	movs	r2, #0
				| TWIM_CMDR_SADR(package->chip)
     fe4:	683b      	ldr	r3, [r7, #0]
     fe6:	681b      	ldr	r3, [r3, #0]
     fe8:	0059      	lsls	r1, r3, #1
     fea:	f240 73fe 	movw	r3, #2046	; 0x7fe
     fee:	400b      	ands	r3, r1
     ff0:	4313      	orrs	r3, r2
			cmdr_reg = (package->high_speed ? (TWIM_CMDR_HS |
     ff2:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
     ff6:	f043 0301 	orr.w	r3, r3, #1
     ffa:	60fb      	str	r3, [r7, #12]
				| TWIM_CMDR_VALID
				| TWIM_CMDR_START
				| TWIM_CMDR_READ;
			/* Fill transfer command */
			if (package->length > TWIM_MAX_NBYTES_PER_XFER) {
     ffc:	683b      	ldr	r3, [r7, #0]
     ffe:	68db      	ldr	r3, [r3, #12]
    1000:	2bff      	cmp	r3, #255	; 0xff
    1002:	d922      	bls.n	104a <__stack_size__+0x4a>
				twim_next_cmd_xfer_valid[twim_ch] = true;
    1004:	4a57      	ldr	r2, [pc, #348]	; (1164 <__stack_size__+0x164>)
    1006:	68bb      	ldr	r3, [r7, #8]
    1008:	4413      	add	r3, r2
    100a:	2201      	movs	r2, #1
    100c:	701a      	strb	r2, [r3, #0]
				twim_rx_nb_bytes[twim_ch] = TWIM_MAX_NBYTES_PER_XFER;
    100e:	4a52      	ldr	r2, [pc, #328]	; (1158 <__stack_size__+0x158>)
    1010:	68bb      	ldr	r3, [r7, #8]
    1012:	21ff      	movs	r1, #255	; 0xff
    1014:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				p_twim_next_rx_data[twim_ch] = p_twim_rx_data[twim_ch] + TWIM_MAX_NBYTES_PER_XFER;
    1018:	4a53      	ldr	r2, [pc, #332]	; (1168 <__stack_size__+0x168>)
    101a:	68bb      	ldr	r3, [r7, #8]
    101c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1020:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    1024:	4951      	ldr	r1, [pc, #324]	; (116c <__stack_size__+0x16c>)
    1026:	68bb      	ldr	r3, [r7, #8]
    1028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				twim_next_rx_nb_bytes[twim_ch] = package->length - TWIM_MAX_NBYTES_PER_XFER;
    102c:	683b      	ldr	r3, [r7, #0]
    102e:	68db      	ldr	r3, [r3, #12]
    1030:	f1a3 02ff 	sub.w	r2, r3, #255	; 0xff
    1034:	494e      	ldr	r1, [pc, #312]	; (1170 <__stack_size__+0x170>)
    1036:	68bb      	ldr	r3, [r7, #8]
    1038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				cmdr_reg |=  (TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER) | TWIM_CMDR_ACKLAST);
    103c:	68fb      	ldr	r3, [r7, #12]
    103e:	f043 733f 	orr.w	r3, r3, #50069504	; 0x2fc0000
    1042:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1046:	60fb      	str	r3, [r7, #12]
    1048:	e011      	b.n	106e <__stack_size__+0x6e>
			} else {
				twim_rx_nb_bytes[twim_ch] = package->length;
    104a:	683b      	ldr	r3, [r7, #0]
    104c:	68da      	ldr	r2, [r3, #12]
    104e:	4942      	ldr	r1, [pc, #264]	; (1158 <__stack_size__+0x158>)
    1050:	68bb      	ldr	r3, [r7, #8]
    1052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				cmdr_reg |= (TWIM_CMDR_NBYTES(twim_rx_nb_bytes[twim_ch]) | TWIM_CMDR_STOP);
    1056:	4a40      	ldr	r2, [pc, #256]	; (1158 <__stack_size__+0x158>)
    1058:	68bb      	ldr	r3, [r7, #8]
    105a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    105e:	041b      	lsls	r3, r3, #16
    1060:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    1064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1068:	68fa      	ldr	r2, [r7, #12]
    106a:	4313      	orrs	r3, r2
    106c:	60fb      	str	r3, [r7, #12]
			}
			cmdr_reg |=  TWIM_CMDR_NBYTES(twim_rx_nb_bytes[twim_ch]);
    106e:	4a3a      	ldr	r2, [pc, #232]	; (1158 <__stack_size__+0x158>)
    1070:	68bb      	ldr	r3, [r7, #8]
    1072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1076:	041b      	lsls	r3, r3, #16
    1078:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    107c:	68fa      	ldr	r2, [r7, #12]
    107e:	4313      	orrs	r3, r2
    1080:	60fb      	str	r3, [r7, #12]
			twim->TWIM_CMDR = cmdr_reg;
    1082:	687b      	ldr	r3, [r7, #4]
    1084:	68fa      	ldr	r2, [r7, #12]
    1086:	60da      	str	r2, [r3, #12]

			/* Fill next transfer command */
			if (twim_next_rx_nb_bytes[twim_ch] > 0) {
    1088:	4a39      	ldr	r2, [pc, #228]	; (1170 <__stack_size__+0x170>)
    108a:	68bb      	ldr	r3, [r7, #8]
    108c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1090:	2b00      	cmp	r3, #0
    1092:	d021      	beq.n	10d8 <__stack_size__+0xd8>
				cmdr_reg &= (~(TWIM_CMDR_NBYTES_Msk | TWIM_CMDR_START | TWIM_CMDR_ACKLAST));
    1094:	68fb      	ldr	r3, [r7, #12]
    1096:	f023 733f 	bic.w	r3, r3, #50069504	; 0x2fc0000
    109a:	f423 3348 	bic.w	r3, r3, #204800	; 0x32000
    109e:	60fb      	str	r3, [r7, #12]
				if (twim_next_rx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
    10a0:	4a33      	ldr	r2, [pc, #204]	; (1170 <__stack_size__+0x170>)
    10a2:	68bb      	ldr	r3, [r7, #8]
    10a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    10a8:	2bff      	cmp	r3, #255	; 0xff
    10aa:	d906      	bls.n	10ba <__stack_size__+0xba>
					cmdr_reg |=  (TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER) | TWIM_CMDR_ACKLAST);
    10ac:	68fb      	ldr	r3, [r7, #12]
    10ae:	f043 733f 	orr.w	r3, r3, #50069504	; 0x2fc0000
    10b2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    10b6:	60fb      	str	r3, [r7, #12]
    10b8:	e00b      	b.n	10d2 <__stack_size__+0xd2>
				} else {
					cmdr_reg |= (TWIM_CMDR_NBYTES(twim_next_rx_nb_bytes[twim_ch]) | TWIM_CMDR_STOP);
    10ba:	4a2d      	ldr	r2, [pc, #180]	; (1170 <__stack_size__+0x170>)
    10bc:	68bb      	ldr	r3, [r7, #8]
    10be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    10c2:	041b      	lsls	r3, r3, #16
    10c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    10c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    10cc:	68fa      	ldr	r2, [r7, #12]
    10ce:	4313      	orrs	r3, r2
    10d0:	60fb      	str	r3, [r7, #12]
				}
				twim->TWIM_NCMDR = cmdr_reg;
    10d2:	687b      	ldr	r3, [r7, #4]
    10d4:	68fa      	ldr	r2, [r7, #12]
    10d6:	611a      	str	r2, [r3, #16]
			}
		}
	}

	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
    10d8:	687b      	ldr	r3, [r7, #4]
    10da:	2201      	movs	r2, #1
    10dc:	601a      	str	r2, [r3, #0]
	/* Update IMR through IER */
	twim->TWIM_IER = twim_it_mask[twim_ch];
    10de:	4a20      	ldr	r2, [pc, #128]	; (1160 <__stack_size__+0x160>)
    10e0:	68bb      	ldr	r3, [r7, #8]
    10e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    10e6:	687b      	ldr	r3, [r7, #4]
    10e8:	621a      	str	r2, [r3, #32]
	/* Get data */
#if TWIM_LOW_POWER_ENABLE
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_1);
    10ea:	2002      	movs	r0, #2
    10ec:	4b21      	ldr	r3, [pc, #132]	; (1174 <__stack_size__+0x174>)
    10ee:	4798      	blx	r3
	while (!(transfer_status[twim_ch])
    10f0:	e001      	b.n	10f6 <__stack_size__+0xf6>
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
		sleepmgr_enter_sleep();
    10f2:	4b21      	ldr	r3, [pc, #132]	; (1178 <__stack_size__+0x178>)
    10f4:	4798      	blx	r3
	while (!(transfer_status[twim_ch])
    10f6:	4a21      	ldr	r2, [pc, #132]	; (117c <__stack_size__+0x17c>)
    10f8:	68bb      	ldr	r3, [r7, #8]
    10fa:	4413      	add	r3, r2
    10fc:	781b      	ldrb	r3, [r3, #0]
    10fe:	b25b      	sxtb	r3, r3
    1100:	2b00      	cmp	r3, #0
    1102:	d107      	bne.n	1114 <__stack_size__+0x114>
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
    1104:	6878      	ldr	r0, [r7, #4]
    1106:	4b1e      	ldr	r3, [pc, #120]	; (1180 <__stack_size__+0x180>)
    1108:	4798      	blx	r3
    110a:	4603      	mov	r3, r0
    110c:	f003 0310 	and.w	r3, r3, #16
    1110:	2b00      	cmp	r3, #0
    1112:	d0ee      	beq.n	10f2 <__stack_size__+0xf2>
	}
	sleepmgr_unlock_mode(SLEEPMGR_SLEEP_1);
    1114:	2002      	movs	r0, #2
    1116:	4b1b      	ldr	r3, [pc, #108]	; (1184 <__stack_size__+0x184>)
    1118:	4798      	blx	r3
	while (!(transfer_status[twim_ch])
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
	}
#endif
	/* Disable master transfer */
	twim->TWIM_IDR = ~0UL;
    111a:	687b      	ldr	r3, [r7, #4]
    111c:	f04f 32ff 	mov.w	r2, #4294967295
    1120:	625a      	str	r2, [r3, #36]	; 0x24
	twim->TWIM_CR = TWIM_CR_MDIS;
    1122:	687b      	ldr	r3, [r7, #4]
    1124:	2202      	movs	r2, #2
    1126:	601a      	str	r2, [r3, #0]
	if (transfer_status[twim_ch] == TWI_RECEIVE_NACK
    1128:	4a14      	ldr	r2, [pc, #80]	; (117c <__stack_size__+0x17c>)
    112a:	68bb      	ldr	r3, [r7, #8]
    112c:	4413      	add	r3, r2
    112e:	781b      	ldrb	r3, [r3, #0]
    1130:	b25b      	sxtb	r3, r3
    1132:	f113 0f04 	cmn.w	r3, #4
    1136:	d007      	beq.n	1148 <__stack_size__+0x148>
			|| transfer_status[twim_ch] == TWI_ARBITRATION_LOST) {
    1138:	4a10      	ldr	r2, [pc, #64]	; (117c <__stack_size__+0x17c>)
    113a:	68bb      	ldr	r3, [r7, #8]
    113c:	4413      	add	r3, r2
    113e:	781b      	ldrb	r3, [r3, #0]
    1140:	b25b      	sxtb	r3, r3
    1142:	f113 0f02 	cmn.w	r3, #2
    1146:	d102      	bne.n	114e <__stack_size__+0x14e>
		return ERR_IO_ERROR;
    1148:	f04f 33ff 	mov.w	r3, #4294967295
    114c:	e000      	b.n	1150 <__stack_size__+0x150>
	}
	return STATUS_OK;
    114e:	2300      	movs	r3, #0
}
    1150:	4618      	mov	r0, r3
    1152:	3710      	adds	r7, #16
    1154:	46bd      	mov	sp, r7
    1156:	bd80      	pop	{r7, pc}
    1158:	200002a4 	.word	0x200002a4
    115c:	20000294 	.word	0x20000294
    1160:	200002b4 	.word	0x200002b4
    1164:	200002c4 	.word	0x200002c4
    1168:	20000280 	.word	0x20000280
    116c:	200002d8 	.word	0x200002d8
    1170:	200002f8 	.word	0x200002f8
    1174:	00000465 	.word	0x00000465
    1178:	00000521 	.word	0x00000521
    117c:	20000290 	.word	0x20000290
    1180:	00001409 	.word	0x00001409
    1184:	000004a9 	.word	0x000004a9

00001188 <twi_master_write>:
 *
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twi_master_write(Twim *twim, struct twim_package *package)
{
    1188:	b580      	push	{r7, lr}
    118a:	b084      	sub	sp, #16
    118c:	af00      	add	r7, sp, #0
    118e:	6078      	str	r0, [r7, #4]
    1190:	6039      	str	r1, [r7, #0]
	uint32_t twim_ch = find_twim_channel_num(twim);
    1192:	6878      	ldr	r0, [r7, #4]
    1194:	4b8f      	ldr	r3, [pc, #572]	; (13d4 <twi_master_write+0x24c>)
    1196:	4798      	blx	r3
    1198:	60b8      	str	r0, [r7, #8]
	uint32_t cmdr_reg;

	/* Reset the TWIM module */
	twim->TWIM_CR = TWIM_CR_MEN;
    119a:	687b      	ldr	r3, [r7, #4]
    119c:	2201      	movs	r2, #1
    119e:	601a      	str	r2, [r3, #0]
	twim->TWIM_CR = TWIM_CR_SWRST;
    11a0:	687b      	ldr	r3, [r7, #4]
    11a2:	2280      	movs	r2, #128	; 0x80
    11a4:	601a      	str	r2, [r3, #0]
	twim->TWIM_CR = TWIM_CR_MDIS;
    11a6:	687b      	ldr	r3, [r7, #4]
    11a8:	2202      	movs	r2, #2
    11aa:	601a      	str	r2, [r3, #0]
	/* Clear the interrupt flags */
	twim->TWIM_IDR = ~0UL;
    11ac:	687b      	ldr	r3, [r7, #4]
    11ae:	f04f 32ff 	mov.w	r2, #4294967295
    11b2:	625a      	str	r2, [r3, #36]	; 0x24
	/* Clear the status flags */
	twim->TWIM_SCR = ~0UL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	f04f 32ff 	mov.w	r2, #4294967295
    11ba:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Initialize bus transfer status */
	transfer_status[twim_ch] = TWI_SUCCESS;
    11bc:	4a86      	ldr	r2, [pc, #536]	; (13d8 <twi_master_write+0x250>)
    11be:	68bb      	ldr	r3, [r7, #8]
    11c0:	4413      	add	r3, r2
    11c2:	2200      	movs	r2, #0
    11c4:	701a      	strb	r2, [r3, #0]
	/* Mask NACK and TXRDY interrupts */
	twim_it_mask[twim_ch] = TWIM_IER_STD_MASK | TWIM_IER_TXRDY;
    11c6:	4a85      	ldr	r2, [pc, #532]	; (13dc <twi_master_write+0x254>)
    11c8:	68bb      	ldr	r3, [r7, #8]
    11ca:	f240 5102 	movw	r1, #1282	; 0x502
    11ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	/* Set next transfer to false */
	twim_next_cmd_xfer_valid[twim_ch] = false;
    11d2:	4a83      	ldr	r2, [pc, #524]	; (13e0 <twi_master_write+0x258>)
    11d4:	68bb      	ldr	r3, [r7, #8]
    11d6:	4413      	add	r3, r2
    11d8:	2200      	movs	r2, #0
    11da:	701a      	strb	r2, [r3, #0]
	twim_next_rx_nb_bytes[twim_ch] = 0;
    11dc:	4a81      	ldr	r2, [pc, #516]	; (13e4 <twi_master_write+0x25c>)
    11de:	68bb      	ldr	r3, [r7, #8]
    11e0:	2100      	movs	r1, #0
    11e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	twim_next_tx_nb_bytes[twim_ch] = 0;
    11e6:	4a80      	ldr	r2, [pc, #512]	; (13e8 <twi_master_write+0x260>)
    11e8:	68bb      	ldr	r3, [r7, #8]
    11ea:	2100      	movs	r1, #0
    11ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	/* Set initial transfer command value */
	cmdr_reg =  (package->high_speed ? (TWIM_CMDR_HS |
    11f0:	683b      	ldr	r3, [r7, #0]
    11f2:	7c5b      	ldrb	r3, [r3, #17]
				TWIM_CMDR_HSMCODE(package->high_speed_code)) : 0)
    11f4:	2b00      	cmp	r3, #0
    11f6:	d007      	beq.n	1208 <twi_master_write+0x80>
    11f8:	683b      	ldr	r3, [r7, #0]
    11fa:	7c9b      	ldrb	r3, [r3, #18]
    11fc:	071b      	lsls	r3, r3, #28
    11fe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    1202:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
    1206:	e000      	b.n	120a <twi_master_write+0x82>
    1208:	2200      	movs	r2, #0
		| TWIM_CMDR_SADR(package->chip)
    120a:	683b      	ldr	r3, [r7, #0]
    120c:	681b      	ldr	r3, [r3, #0]
    120e:	0059      	lsls	r1, r3, #1
    1210:	f240 73fe 	movw	r3, #2046	; 0x7fe
    1214:	400b      	ands	r3, r1
    1216:	431a      	orrs	r2, r3
		| TWIM_CMDR_VALID
		| TWIM_CMDR_START
		| (package->ten_bit ? TWIM_CMDR_TENBIT : 0);
    1218:	683b      	ldr	r3, [r7, #0]
    121a:	7c1b      	ldrb	r3, [r3, #16]
    121c:	2b00      	cmp	r3, #0
    121e:	d002      	beq.n	1226 <twi_master_write+0x9e>
    1220:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1224:	e000      	b.n	1228 <twi_master_write+0xa0>
    1226:	2300      	movs	r3, #0
    1228:	4313      	orrs	r3, r2
	cmdr_reg =  (package->high_speed ? (TWIM_CMDR_HS |
    122a:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
    122e:	60fb      	str	r3, [r7, #12]

	/* Check if internal address access is performed */
	if (package->addr_length) {
    1230:	683b      	ldr	r3, [r7, #0]
    1232:	79db      	ldrb	r3, [r3, #7]
    1234:	2b00      	cmp	r3, #0
    1236:	d028      	beq.n	128a <twi_master_write+0x102>
		/* Selection of first valid byte of the address */
		p_twim_tx_data[twim_ch] = package->addr;
    1238:	683b      	ldr	r3, [r7, #0]
    123a:	1d1a      	adds	r2, r3, #4
    123c:	496b      	ldr	r1, [pc, #428]	; (13ec <twi_master_write+0x264>)
    123e:	68bb      	ldr	r3, [r7, #8]
    1240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		/* Set the number of bytes to transmit */
		twim_tx_nb_bytes[twim_ch] = package->addr_length;
    1244:	683b      	ldr	r3, [r7, #0]
    1246:	79db      	ldrb	r3, [r3, #7]
    1248:	4619      	mov	r1, r3
    124a:	4a69      	ldr	r2, [pc, #420]	; (13f0 <twi_master_write+0x268>)
    124c:	68bb      	ldr	r3, [r7, #8]
    124e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		/* Set next transfer to true */
		twim_next_cmd_xfer_valid[twim_ch] = true;
    1252:	4a63      	ldr	r2, [pc, #396]	; (13e0 <twi_master_write+0x258>)
    1254:	68bb      	ldr	r3, [r7, #8]
    1256:	4413      	add	r3, r2
    1258:	2201      	movs	r2, #1
    125a:	701a      	strb	r2, [r3, #0]
		/* Set the number of bytes & address for next transfer */
		p_twim_next_tx_data[twim_ch] = package->buffer;
    125c:	683b      	ldr	r3, [r7, #0]
    125e:	689a      	ldr	r2, [r3, #8]
    1260:	4964      	ldr	r1, [pc, #400]	; (13f4 <twi_master_write+0x26c>)
    1262:	68bb      	ldr	r3, [r7, #8]
    1264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		twim_next_tx_nb_bytes[twim_ch] = package->length;
    1268:	683b      	ldr	r3, [r7, #0]
    126a:	68da      	ldr	r2, [r3, #12]
    126c:	495e      	ldr	r1, [pc, #376]	; (13e8 <twi_master_write+0x260>)
    126e:	68bb      	ldr	r3, [r7, #8]
    1270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		/* Fill transfer command (no stop) */
		cmdr_reg |=  TWIM_CMDR_NBYTES(twim_tx_nb_bytes[twim_ch]);
    1274:	4a5e      	ldr	r2, [pc, #376]	; (13f0 <twi_master_write+0x268>)
    1276:	68bb      	ldr	r3, [r7, #8]
    1278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    127c:	041b      	lsls	r3, r3, #16
    127e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    1282:	68fa      	ldr	r2, [r7, #12]
    1284:	4313      	orrs	r3, r2
    1286:	60fb      	str	r3, [r7, #12]
    1288:	e03a      	b.n	1300 <twi_master_write+0x178>
	} else {
		/* Get a pointer to application data */
		p_twim_tx_data[twim_ch] = package->buffer;
    128a:	683b      	ldr	r3, [r7, #0]
    128c:	689a      	ldr	r2, [r3, #8]
    128e:	4957      	ldr	r1, [pc, #348]	; (13ec <twi_master_write+0x264>)
    1290:	68bb      	ldr	r3, [r7, #8]
    1292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		/* Fill transfer command */
		if (package->length > TWIM_MAX_NBYTES_PER_XFER) {
    1296:	683b      	ldr	r3, [r7, #0]
    1298:	68db      	ldr	r3, [r3, #12]
    129a:	2bff      	cmp	r3, #255	; 0xff
    129c:	d91c      	bls.n	12d8 <twi_master_write+0x150>
			twim_next_cmd_xfer_valid[twim_ch] = true;
    129e:	4a50      	ldr	r2, [pc, #320]	; (13e0 <twi_master_write+0x258>)
    12a0:	68bb      	ldr	r3, [r7, #8]
    12a2:	4413      	add	r3, r2
    12a4:	2201      	movs	r2, #1
    12a6:	701a      	strb	r2, [r3, #0]
			twim_tx_nb_bytes[twim_ch] = TWIM_MAX_NBYTES_PER_XFER;
    12a8:	4a51      	ldr	r2, [pc, #324]	; (13f0 <twi_master_write+0x268>)
    12aa:	68bb      	ldr	r3, [r7, #8]
    12ac:	21ff      	movs	r1, #255	; 0xff
    12ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			p_twim_next_tx_data[twim_ch] = p_twim_tx_data[twim_ch] + TWIM_MAX_NBYTES_PER_XFER;
    12b2:	4a4e      	ldr	r2, [pc, #312]	; (13ec <twi_master_write+0x264>)
    12b4:	68bb      	ldr	r3, [r7, #8]
    12b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    12ba:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    12be:	494d      	ldr	r1, [pc, #308]	; (13f4 <twi_master_write+0x26c>)
    12c0:	68bb      	ldr	r3, [r7, #8]
    12c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			twim_next_tx_nb_bytes[twim_ch] = package->length - TWIM_MAX_NBYTES_PER_XFER;
    12c6:	683b      	ldr	r3, [r7, #0]
    12c8:	68db      	ldr	r3, [r3, #12]
    12ca:	f1a3 02ff 	sub.w	r2, r3, #255	; 0xff
    12ce:	4946      	ldr	r1, [pc, #280]	; (13e8 <twi_master_write+0x260>)
    12d0:	68bb      	ldr	r3, [r7, #8]
    12d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    12d6:	e009      	b.n	12ec <twi_master_write+0x164>
		} else {
			twim_tx_nb_bytes[twim_ch] = package->length;
    12d8:	683b      	ldr	r3, [r7, #0]
    12da:	68da      	ldr	r2, [r3, #12]
    12dc:	4944      	ldr	r1, [pc, #272]	; (13f0 <twi_master_write+0x268>)
    12de:	68bb      	ldr	r3, [r7, #8]
    12e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			cmdr_reg |= TWIM_CMDR_STOP;
    12e4:	68fb      	ldr	r3, [r7, #12]
    12e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    12ea:	60fb      	str	r3, [r7, #12]
		}
		cmdr_reg |=  TWIM_CMDR_NBYTES(twim_tx_nb_bytes[twim_ch]);
    12ec:	4a40      	ldr	r2, [pc, #256]	; (13f0 <twi_master_write+0x268>)
    12ee:	68bb      	ldr	r3, [r7, #8]
    12f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    12f4:	041b      	lsls	r3, r3, #16
    12f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    12fa:	68fa      	ldr	r2, [r7, #12]
    12fc:	4313      	orrs	r3, r2
    12fe:	60fb      	str	r3, [r7, #12]
	}

	/* Initiate the transfer to send the data */
	twim->TWIM_CMDR = cmdr_reg;
    1300:	687b      	ldr	r3, [r7, #4]
    1302:	68fa      	ldr	r2, [r7, #12]
    1304:	60da      	str	r2, [r3, #12]

	if (twim_next_cmd_xfer_valid[twim_ch]) {
    1306:	4a36      	ldr	r2, [pc, #216]	; (13e0 <twi_master_write+0x258>)
    1308:	68bb      	ldr	r3, [r7, #8]
    130a:	4413      	add	r3, r2
    130c:	781b      	ldrb	r3, [r3, #0]
    130e:	b2db      	uxtb	r3, r3
    1310:	2b00      	cmp	r3, #0
    1312:	d01f      	beq.n	1354 <twi_master_write+0x1cc>
		cmdr_reg &= (~(TWIM_CMDR_NBYTES_Msk | TWIM_CMDR_START));
    1314:	68fb      	ldr	r3, [r7, #12]
    1316:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    131a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    131e:	60fb      	str	r3, [r7, #12]
		if (twim_next_tx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
    1320:	4a31      	ldr	r2, [pc, #196]	; (13e8 <twi_master_write+0x260>)
    1322:	68bb      	ldr	r3, [r7, #8]
    1324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1328:	2bff      	cmp	r3, #255	; 0xff
    132a:	d904      	bls.n	1336 <twi_master_write+0x1ae>
			cmdr_reg |=  TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER);
    132c:	68fb      	ldr	r3, [r7, #12]
    132e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
    1332:	60fb      	str	r3, [r7, #12]
    1334:	e00b      	b.n	134e <twi_master_write+0x1c6>
		} else {
			cmdr_reg |= (TWIM_CMDR_NBYTES(twim_next_tx_nb_bytes[twim_ch]) | TWIM_CMDR_STOP);
    1336:	4a2c      	ldr	r2, [pc, #176]	; (13e8 <twi_master_write+0x260>)
    1338:	68bb      	ldr	r3, [r7, #8]
    133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    133e:	041b      	lsls	r3, r3, #16
    1340:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    1344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1348:	68fa      	ldr	r2, [r7, #12]
    134a:	4313      	orrs	r3, r2
    134c:	60fb      	str	r3, [r7, #12]
		}
		twim->TWIM_NCMDR = cmdr_reg;
    134e:	687b      	ldr	r3, [r7, #4]
    1350:	68fa      	ldr	r2, [r7, #12]
    1352:	611a      	str	r2, [r3, #16]
	}

	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
    1354:	687b      	ldr	r3, [r7, #4]
    1356:	2201      	movs	r2, #1
    1358:	601a      	str	r2, [r3, #0]
	/* Update IMR through IER */
	twim->TWIM_IER = twim_it_mask[twim_ch];
    135a:	4a20      	ldr	r2, [pc, #128]	; (13dc <twi_master_write+0x254>)
    135c:	68bb      	ldr	r3, [r7, #8]
    135e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1362:	687b      	ldr	r3, [r7, #4]
    1364:	621a      	str	r2, [r3, #32]
	/* Send data */
#if TWIM_LOW_POWER_ENABLE
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_1);
    1366:	2002      	movs	r0, #2
    1368:	4b23      	ldr	r3, [pc, #140]	; (13f8 <twi_master_write+0x270>)
    136a:	4798      	blx	r3
	while (!(transfer_status[twim_ch])
    136c:	e001      	b.n	1372 <twi_master_write+0x1ea>
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
		sleepmgr_enter_sleep();
    136e:	4b23      	ldr	r3, [pc, #140]	; (13fc <twi_master_write+0x274>)
    1370:	4798      	blx	r3
	while (!(transfer_status[twim_ch])
    1372:	4a19      	ldr	r2, [pc, #100]	; (13d8 <twi_master_write+0x250>)
    1374:	68bb      	ldr	r3, [r7, #8]
    1376:	4413      	add	r3, r2
    1378:	781b      	ldrb	r3, [r3, #0]
    137a:	b25b      	sxtb	r3, r3
    137c:	2b00      	cmp	r3, #0
    137e:	d107      	bne.n	1390 <twi_master_write+0x208>
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
    1380:	6878      	ldr	r0, [r7, #4]
    1382:	4b1f      	ldr	r3, [pc, #124]	; (1400 <twi_master_write+0x278>)
    1384:	4798      	blx	r3
    1386:	4603      	mov	r3, r0
    1388:	f003 0310 	and.w	r3, r3, #16
    138c:	2b00      	cmp	r3, #0
    138e:	d0ee      	beq.n	136e <twi_master_write+0x1e6>
	}
	sleepmgr_unlock_mode(SLEEPMGR_SLEEP_1);
    1390:	2002      	movs	r0, #2
    1392:	4b1c      	ldr	r3, [pc, #112]	; (1404 <twi_master_write+0x27c>)
    1394:	4798      	blx	r3
			&& !(twim_get_status(twim) & TWIM_SR_IDLE)) {
	}
#endif

	/* Disable master transfer */
	twim->TWIM_IDR = ~0UL;
    1396:	687b      	ldr	r3, [r7, #4]
    1398:	f04f 32ff 	mov.w	r2, #4294967295
    139c:	625a      	str	r2, [r3, #36]	; 0x24
	twim->TWIM_CR = TWIM_CR_MDIS;
    139e:	687b      	ldr	r3, [r7, #4]
    13a0:	2202      	movs	r2, #2
    13a2:	601a      	str	r2, [r3, #0]
	/* Check for nack */
	if (transfer_status[twim_ch] == TWI_RECEIVE_NACK
    13a4:	4a0c      	ldr	r2, [pc, #48]	; (13d8 <twi_master_write+0x250>)
    13a6:	68bb      	ldr	r3, [r7, #8]
    13a8:	4413      	add	r3, r2
    13aa:	781b      	ldrb	r3, [r3, #0]
    13ac:	b25b      	sxtb	r3, r3
    13ae:	f113 0f04 	cmn.w	r3, #4
    13b2:	d007      	beq.n	13c4 <twi_master_write+0x23c>
			|| transfer_status[twim_ch] == TWI_ARBITRATION_LOST) {
    13b4:	4a08      	ldr	r2, [pc, #32]	; (13d8 <twi_master_write+0x250>)
    13b6:	68bb      	ldr	r3, [r7, #8]
    13b8:	4413      	add	r3, r2
    13ba:	781b      	ldrb	r3, [r3, #0]
    13bc:	b25b      	sxtb	r3, r3
    13be:	f113 0f02 	cmn.w	r3, #2
    13c2:	d102      	bne.n	13ca <twi_master_write+0x242>
		return ERR_IO_ERROR;
    13c4:	f04f 33ff 	mov.w	r3, #4294967295
    13c8:	e000      	b.n	13cc <twi_master_write+0x244>
	}
	return STATUS_OK;
    13ca:	2300      	movs	r3, #0
}
    13cc:	4618      	mov	r0, r3
    13ce:	3710      	adds	r7, #16
    13d0:	46bd      	mov	sp, r7
    13d2:	bd80      	pop	{r7, pc}
    13d4:	00000569 	.word	0x00000569
    13d8:	20000290 	.word	0x20000290
    13dc:	200002b4 	.word	0x200002b4
    13e0:	200002c4 	.word	0x200002c4
    13e4:	200002f8 	.word	0x200002f8
    13e8:	200002e8 	.word	0x200002e8
    13ec:	20000270 	.word	0x20000270
    13f0:	20000294 	.word	0x20000294
    13f4:	200002c8 	.word	0x200002c8
    13f8:	00000465 	.word	0x00000465
    13fc:	00000521 	.word	0x00000521
    1400:	00001409 	.word	0x00001409
    1404:	000004a9 	.word	0x000004a9

00001408 <twim_get_status>:
 * \brief Information about the current status of the TWIM
 *
 * \param twim   Base address of the TWIM
 */
uint32_t twim_get_status(Twim *twim)
{
    1408:	b480      	push	{r7}
    140a:	b083      	sub	sp, #12
    140c:	af00      	add	r7, sp, #0
    140e:	6078      	str	r0, [r7, #4]
	return twim->TWIM_SR;
    1410:	687b      	ldr	r3, [r7, #4]
    1412:	69db      	ldr	r3, [r3, #28]
}
    1414:	4618      	mov	r0, r3
    1416:	370c      	adds	r7, #12
    1418:	46bd      	mov	sp, r7
    141a:	bc80      	pop	{r7}
    141c:	4770      	bx	lr
	...

00001420 <twim_set_callback>:
 * \param callback   Callback function pointer
 * \param irq_level  Interrupt level
 */
void twim_set_callback(Twim *twim, uint32_t interrupt_source,
	twim_callback_t callback, uint8_t irq_level)
{
    1420:	b580      	push	{r7, lr}
    1422:	b086      	sub	sp, #24
    1424:	af00      	add	r7, sp, #0
    1426:	60f8      	str	r0, [r7, #12]
    1428:	60b9      	str	r1, [r7, #8]
    142a:	607a      	str	r2, [r7, #4]
    142c:	70fb      	strb	r3, [r7, #3]
	uint32_t twim_ch = find_twim_channel_num(twim);
    142e:	68f8      	ldr	r0, [r7, #12]
    1430:	4b1d      	ldr	r3, [pc, #116]	; (14a8 <twim_set_callback+0x88>)
    1432:	4798      	blx	r3
    1434:	6138      	str	r0, [r7, #16]
	uint32_t irq_line = 0;
    1436:	2300      	movs	r3, #0
    1438:	617b      	str	r3, [r7, #20]

#if defined(ID_TWIM3)
	if (twim == TWIM3) {
    143a:	68fb      	ldr	r3, [r7, #12]
    143c:	4a1b      	ldr	r2, [pc, #108]	; (14ac <twim_set_callback+0x8c>)
    143e:	4293      	cmp	r3, r2
    1440:	d101      	bne.n	1446 <twim_set_callback+0x26>
		irq_line = TWIM3_IRQn;
    1442:	234e      	movs	r3, #78	; 0x4e
    1444:	617b      	str	r3, [r7, #20]
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
    1446:	68fb      	ldr	r3, [r7, #12]
    1448:	4a19      	ldr	r2, [pc, #100]	; (14b0 <twim_set_callback+0x90>)
    144a:	4293      	cmp	r3, r2
    144c:	d101      	bne.n	1452 <twim_set_callback+0x32>
		irq_line = TWIM2_IRQn;
    144e:	234d      	movs	r3, #77	; 0x4d
    1450:	617b      	str	r3, [r7, #20]
	}
#endif
#if defined(ID_TWIM1)
	if (twim == TWIM1) {
    1452:	68fb      	ldr	r3, [r7, #12]
    1454:	4a17      	ldr	r2, [pc, #92]	; (14b4 <twim_set_callback+0x94>)
    1456:	4293      	cmp	r3, r2
    1458:	d101      	bne.n	145e <twim_set_callback+0x3e>
		irq_line = TWIM1_IRQn;
    145a:	233f      	movs	r3, #63	; 0x3f
    145c:	617b      	str	r3, [r7, #20]
	}
#endif
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
    145e:	68fb      	ldr	r3, [r7, #12]
    1460:	4a15      	ldr	r2, [pc, #84]	; (14b8 <twim_set_callback+0x98>)
    1462:	4293      	cmp	r3, r2
    1464:	d101      	bne.n	146a <twim_set_callback+0x4a>
		irq_line = TWIM0_IRQn;
    1466:	233d      	movs	r3, #61	; 0x3d
    1468:	617b      	str	r3, [r7, #20]
	}
#endif
	twim_callback_pointer[twim_ch] = callback;
    146a:	4914      	ldr	r1, [pc, #80]	; (14bc <twim_set_callback+0x9c>)
    146c:	693b      	ldr	r3, [r7, #16]
    146e:	687a      	ldr	r2, [r7, #4]
    1470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
    1474:	697b      	ldr	r3, [r7, #20]
    1476:	b25b      	sxtb	r3, r3
    1478:	4618      	mov	r0, r3
    147a:	4b11      	ldr	r3, [pc, #68]	; (14c0 <twim_set_callback+0xa0>)
    147c:	4798      	blx	r3
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
    147e:	697b      	ldr	r3, [r7, #20]
    1480:	b25b      	sxtb	r3, r3
    1482:	78fa      	ldrb	r2, [r7, #3]
    1484:	4611      	mov	r1, r2
    1486:	4618      	mov	r0, r3
    1488:	4b0e      	ldr	r3, [pc, #56]	; (14c4 <twim_set_callback+0xa4>)
    148a:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)irq_line);
    148c:	697b      	ldr	r3, [r7, #20]
    148e:	b25b      	sxtb	r3, r3
    1490:	4618      	mov	r0, r3
    1492:	4b0d      	ldr	r3, [pc, #52]	; (14c8 <twim_set_callback+0xa8>)
    1494:	4798      	blx	r3
	twim_enable_interrupt(twim, interrupt_source);
    1496:	68b9      	ldr	r1, [r7, #8]
    1498:	68f8      	ldr	r0, [r7, #12]
    149a:	4b0c      	ldr	r3, [pc, #48]	; (14cc <twim_set_callback+0xac>)
    149c:	4798      	blx	r3
}
    149e:	bf00      	nop
    14a0:	3718      	adds	r7, #24
    14a2:	46bd      	mov	sp, r7
    14a4:	bd80      	pop	{r7, pc}
    14a6:	bf00      	nop
    14a8:	00000569 	.word	0x00000569
    14ac:	4007c000 	.word	0x4007c000
    14b0:	40078000 	.word	0x40078000
    14b4:	4001c000 	.word	0x4001c000
    14b8:	40018000 	.word	0x40018000
    14bc:	20000378 	.word	0x20000378
    14c0:	000002e5 	.word	0x000002e5
    14c4:	00000321 	.word	0x00000321
    14c8:	000002ad 	.word	0x000002ad
    14cc:	00000c7d 	.word	0x00000c7d

000014d0 <TWIM0_Handler>:

#if defined(ID_TWIM0)
void TWIM0_Handler(void)
{
    14d0:	b580      	push	{r7, lr}
    14d2:	af00      	add	r7, sp, #0
	twim_callback_pointer[0](TWIM0);
    14d4:	4b02      	ldr	r3, [pc, #8]	; (14e0 <TWIM0_Handler+0x10>)
    14d6:	681b      	ldr	r3, [r3, #0]
    14d8:	4802      	ldr	r0, [pc, #8]	; (14e4 <TWIM0_Handler+0x14>)
    14da:	4798      	blx	r3
}
    14dc:	bf00      	nop
    14de:	bd80      	pop	{r7, pc}
    14e0:	20000378 	.word	0x20000378
    14e4:	40018000 	.word	0x40018000

000014e8 <TWIM1_Handler>:
#endif

#if defined(ID_TWIM1)
void TWIM1_Handler(void)
{
    14e8:	b580      	push	{r7, lr}
    14ea:	af00      	add	r7, sp, #0
	twim_callback_pointer[1](TWIM1);
    14ec:	4b02      	ldr	r3, [pc, #8]	; (14f8 <TWIM1_Handler+0x10>)
    14ee:	685b      	ldr	r3, [r3, #4]
    14f0:	4802      	ldr	r0, [pc, #8]	; (14fc <TWIM1_Handler+0x14>)
    14f2:	4798      	blx	r3
}
    14f4:	bf00      	nop
    14f6:	bd80      	pop	{r7, pc}
    14f8:	20000378 	.word	0x20000378
    14fc:	4001c000 	.word	0x4001c000

00001500 <TWIM2_Handler>:
#endif

#if defined(ID_TWIM2)
void TWIM2_Handler(void)
{
    1500:	b580      	push	{r7, lr}
    1502:	af00      	add	r7, sp, #0
	twim_callback_pointer[2](TWIM2);
    1504:	4b02      	ldr	r3, [pc, #8]	; (1510 <TWIM2_Handler+0x10>)
    1506:	689b      	ldr	r3, [r3, #8]
    1508:	4802      	ldr	r0, [pc, #8]	; (1514 <TWIM2_Handler+0x14>)
    150a:	4798      	blx	r3
}
    150c:	bf00      	nop
    150e:	bd80      	pop	{r7, pc}
    1510:	20000378 	.word	0x20000378
    1514:	40078000 	.word	0x40078000

00001518 <TWIM3_Handler>:
#endif

#if defined(ID_TWIM3)
void TWIM3_Handler(void)
{
    1518:	b580      	push	{r7, lr}
    151a:	af00      	add	r7, sp, #0
	twim_callback_pointer[3](TWIM3);
    151c:	4b02      	ldr	r3, [pc, #8]	; (1528 <TWIM3_Handler+0x10>)
    151e:	68db      	ldr	r3, [r3, #12]
    1520:	4802      	ldr	r0, [pc, #8]	; (152c <TWIM3_Handler+0x14>)
    1522:	4798      	blx	r3
}
    1524:	bf00      	nop
    1526:	bd80      	pop	{r7, pc}
    1528:	20000378 	.word	0x20000378
    152c:	4007c000 	.word	0x4007c000

00001530 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
    1530:	b480      	push	{r7}
    1532:	b089      	sub	sp, #36	; 0x24
    1534:	af00      	add	r7, sp, #0
    1536:	60f8      	str	r0, [r7, #12]
    1538:	60b9      	str	r1, [r7, #8]
    153a:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
    153c:	68bb      	ldr	r3, [r7, #8]
    153e:	011a      	lsls	r2, r3, #4
    1540:	687b      	ldr	r3, [r7, #4]
    1542:	429a      	cmp	r2, r3
    1544:	d802      	bhi.n	154c <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
    1546:	2310      	movs	r3, #16
    1548:	61fb      	str	r3, [r7, #28]
    154a:	e001      	b.n	1550 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
    154c:	2308      	movs	r3, #8
    154e:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
    1550:	687b      	ldr	r3, [r7, #4]
    1552:	00da      	lsls	r2, r3, #3
    1554:	69fb      	ldr	r3, [r7, #28]
    1556:	68b9      	ldr	r1, [r7, #8]
    1558:	fb01 f303 	mul.w	r3, r1, r3
    155c:	085b      	lsrs	r3, r3, #1
    155e:	441a      	add	r2, r3
    1560:	69fb      	ldr	r3, [r7, #28]
    1562:	68b9      	ldr	r1, [r7, #8]
    1564:	fb01 f303 	mul.w	r3, r1, r3
    1568:	fbb2 f3f3 	udiv	r3, r2, r3
    156c:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
    156e:	69bb      	ldr	r3, [r7, #24]
    1570:	08db      	lsrs	r3, r3, #3
    1572:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
    1574:	69bb      	ldr	r3, [r7, #24]
    1576:	f003 0307 	and.w	r3, r3, #7
    157a:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
    157c:	697b      	ldr	r3, [r7, #20]
    157e:	2b00      	cmp	r3, #0
    1580:	d003      	beq.n	158a <usart_set_async_baudrate+0x5a>
    1582:	697b      	ldr	r3, [r7, #20]
    1584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    1588:	d301      	bcc.n	158e <usart_set_async_baudrate+0x5e>
		return 1;
    158a:	2301      	movs	r3, #1
    158c:	e00f      	b.n	15ae <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
    158e:	69fb      	ldr	r3, [r7, #28]
    1590:	2b08      	cmp	r3, #8
    1592:	d105      	bne.n	15a0 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
    1594:	68fb      	ldr	r3, [r7, #12]
    1596:	685b      	ldr	r3, [r3, #4]
    1598:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
    159c:	68fb      	ldr	r3, [r7, #12]
    159e:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
    15a0:	693b      	ldr	r3, [r7, #16]
    15a2:	041a      	lsls	r2, r3, #16
    15a4:	697b      	ldr	r3, [r7, #20]
    15a6:	431a      	orrs	r2, r3
    15a8:	68fb      	ldr	r3, [r7, #12]
    15aa:	621a      	str	r2, [r3, #32]

	return 0;
    15ac:	2300      	movs	r3, #0
}
    15ae:	4618      	mov	r0, r3
    15b0:	3724      	adds	r7, #36	; 0x24
    15b2:	46bd      	mov	sp, r7
    15b4:	bc80      	pop	{r7}
    15b6:	4770      	bx	lr

000015b8 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
    15b8:	b580      	push	{r7, lr}
    15ba:	b082      	sub	sp, #8
    15bc:	af00      	add	r7, sp, #0
    15be:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
    15c0:	6878      	ldr	r0, [r7, #4]
    15c2:	4b0f      	ldr	r3, [pc, #60]	; (1600 <usart_reset+0x48>)
    15c4:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
    15c6:	687b      	ldr	r3, [r7, #4]
    15c8:	2200      	movs	r2, #0
    15ca:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
    15cc:	687b      	ldr	r3, [r7, #4]
    15ce:	2200      	movs	r2, #0
    15d0:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
    15d2:	687b      	ldr	r3, [r7, #4]
    15d4:	2200      	movs	r2, #0
    15d6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
    15d8:	6878      	ldr	r0, [r7, #4]
    15da:	4b0a      	ldr	r3, [pc, #40]	; (1604 <usart_reset+0x4c>)
    15dc:	4798      	blx	r3
	usart_reset_rx(p_usart);
    15de:	6878      	ldr	r0, [r7, #4]
    15e0:	4b09      	ldr	r3, [pc, #36]	; (1608 <usart_reset+0x50>)
    15e2:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
    15e4:	6878      	ldr	r0, [r7, #4]
    15e6:	4b09      	ldr	r3, [pc, #36]	; (160c <usart_reset+0x54>)
    15e8:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
    15ea:	6878      	ldr	r0, [r7, #4]
    15ec:	4b08      	ldr	r3, [pc, #32]	; (1610 <usart_reset+0x58>)
    15ee:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
    15f0:	6878      	ldr	r0, [r7, #4]
    15f2:	4b08      	ldr	r3, [pc, #32]	; (1614 <usart_reset+0x5c>)
    15f4:	4798      	blx	r3
#endif
}
    15f6:	bf00      	nop
    15f8:	3708      	adds	r7, #8
    15fa:	46bd      	mov	sp, r7
    15fc:	bd80      	pop	{r7, pc}
    15fe:	bf00      	nop
    1600:	000017ad 	.word	0x000017ad
    1604:	000016b5 	.word	0x000016b5
    1608:	000016e5 	.word	0x000016e5
    160c:	000016fd 	.word	0x000016fd
    1610:	00001731 	.word	0x00001731
    1614:	00001717 	.word	0x00001717

00001618 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
    1618:	b580      	push	{r7, lr}
    161a:	b084      	sub	sp, #16
    161c:	af00      	add	r7, sp, #0
    161e:	60f8      	str	r0, [r7, #12]
    1620:	60b9      	str	r1, [r7, #8]
    1622:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
    1624:	68f8      	ldr	r0, [r7, #12]
    1626:	4b1a      	ldr	r3, [pc, #104]	; (1690 <usart_init_rs232+0x78>)
    1628:	4798      	blx	r3

	ul_reg_val = 0;
    162a:	4b1a      	ldr	r3, [pc, #104]	; (1694 <usart_init_rs232+0x7c>)
    162c:	2200      	movs	r2, #0
    162e:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
    1630:	68bb      	ldr	r3, [r7, #8]
    1632:	2b00      	cmp	r3, #0
    1634:	d009      	beq.n	164a <usart_init_rs232+0x32>
    1636:	68bb      	ldr	r3, [r7, #8]
    1638:	681b      	ldr	r3, [r3, #0]
    163a:	687a      	ldr	r2, [r7, #4]
    163c:	4619      	mov	r1, r3
    163e:	68f8      	ldr	r0, [r7, #12]
    1640:	4b15      	ldr	r3, [pc, #84]	; (1698 <usart_init_rs232+0x80>)
    1642:	4798      	blx	r3
    1644:	4603      	mov	r3, r0
    1646:	2b00      	cmp	r3, #0
    1648:	d001      	beq.n	164e <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
    164a:	2301      	movs	r3, #1
    164c:	e01b      	b.n	1686 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    164e:	68bb      	ldr	r3, [r7, #8]
    1650:	685a      	ldr	r2, [r3, #4]
    1652:	68bb      	ldr	r3, [r7, #8]
    1654:	689b      	ldr	r3, [r3, #8]
    1656:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
    1658:	68bb      	ldr	r3, [r7, #8]
    165a:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    165c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
    165e:	68bb      	ldr	r3, [r7, #8]
    1660:	68db      	ldr	r3, [r3, #12]
    1662:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    1664:	4b0b      	ldr	r3, [pc, #44]	; (1694 <usart_init_rs232+0x7c>)
    1666:	681b      	ldr	r3, [r3, #0]
    1668:	4313      	orrs	r3, r2
    166a:	4a0a      	ldr	r2, [pc, #40]	; (1694 <usart_init_rs232+0x7c>)
    166c:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
    166e:	4b09      	ldr	r3, [pc, #36]	; (1694 <usart_init_rs232+0x7c>)
    1670:	681b      	ldr	r3, [r3, #0]
    1672:	4a08      	ldr	r2, [pc, #32]	; (1694 <usart_init_rs232+0x7c>)
    1674:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
    1676:	68fb      	ldr	r3, [r7, #12]
    1678:	685a      	ldr	r2, [r3, #4]
    167a:	4b06      	ldr	r3, [pc, #24]	; (1694 <usart_init_rs232+0x7c>)
    167c:	681b      	ldr	r3, [r3, #0]
    167e:	431a      	orrs	r2, r3
    1680:	68fb      	ldr	r3, [r7, #12]
    1682:	605a      	str	r2, [r3, #4]

	return 0;
    1684:	2300      	movs	r3, #0
}
    1686:	4618      	mov	r0, r3
    1688:	3710      	adds	r7, #16
    168a:	46bd      	mov	sp, r7
    168c:	bd80      	pop	{r7, pc}
    168e:	bf00      	nop
    1690:	000015b9 	.word	0x000015b9
    1694:	20000308 	.word	0x20000308
    1698:	00001531 	.word	0x00001531

0000169c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
    169c:	b480      	push	{r7}
    169e:	b083      	sub	sp, #12
    16a0:	af00      	add	r7, sp, #0
    16a2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
    16a4:	687b      	ldr	r3, [r7, #4]
    16a6:	2240      	movs	r2, #64	; 0x40
    16a8:	601a      	str	r2, [r3, #0]
}
    16aa:	bf00      	nop
    16ac:	370c      	adds	r7, #12
    16ae:	46bd      	mov	sp, r7
    16b0:	bc80      	pop	{r7}
    16b2:	4770      	bx	lr

000016b4 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
    16b4:	b480      	push	{r7}
    16b6:	b083      	sub	sp, #12
    16b8:	af00      	add	r7, sp, #0
    16ba:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
    16bc:	687b      	ldr	r3, [r7, #4]
    16be:	2288      	movs	r2, #136	; 0x88
    16c0:	601a      	str	r2, [r3, #0]
}
    16c2:	bf00      	nop
    16c4:	370c      	adds	r7, #12
    16c6:	46bd      	mov	sp, r7
    16c8:	bc80      	pop	{r7}
    16ca:	4770      	bx	lr

000016cc <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
    16cc:	b480      	push	{r7}
    16ce:	b083      	sub	sp, #12
    16d0:	af00      	add	r7, sp, #0
    16d2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
    16d4:	687b      	ldr	r3, [r7, #4]
    16d6:	2210      	movs	r2, #16
    16d8:	601a      	str	r2, [r3, #0]
}
    16da:	bf00      	nop
    16dc:	370c      	adds	r7, #12
    16de:	46bd      	mov	sp, r7
    16e0:	bc80      	pop	{r7}
    16e2:	4770      	bx	lr

000016e4 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
    16e4:	b480      	push	{r7}
    16e6:	b083      	sub	sp, #12
    16e8:	af00      	add	r7, sp, #0
    16ea:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
    16ec:	687b      	ldr	r3, [r7, #4]
    16ee:	2224      	movs	r2, #36	; 0x24
    16f0:	601a      	str	r2, [r3, #0]
}
    16f2:	bf00      	nop
    16f4:	370c      	adds	r7, #12
    16f6:	46bd      	mov	sp, r7
    16f8:	bc80      	pop	{r7}
    16fa:	4770      	bx	lr

000016fc <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
    16fc:	b480      	push	{r7}
    16fe:	b083      	sub	sp, #12
    1700:	af00      	add	r7, sp, #0
    1702:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
    1704:	687b      	ldr	r3, [r7, #4]
    1706:	f44f 7280 	mov.w	r2, #256	; 0x100
    170a:	601a      	str	r2, [r3, #0]
}
    170c:	bf00      	nop
    170e:	370c      	adds	r7, #12
    1710:	46bd      	mov	sp, r7
    1712:	bc80      	pop	{r7}
    1714:	4770      	bx	lr

00001716 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
    1716:	b480      	push	{r7}
    1718:	b083      	sub	sp, #12
    171a:	af00      	add	r7, sp, #0
    171c:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
    171e:	687b      	ldr	r3, [r7, #4]
    1720:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1724:	601a      	str	r2, [r3, #0]
}
    1726:	bf00      	nop
    1728:	370c      	adds	r7, #12
    172a:	46bd      	mov	sp, r7
    172c:	bc80      	pop	{r7}
    172e:	4770      	bx	lr

00001730 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
    1730:	b480      	push	{r7}
    1732:	b083      	sub	sp, #12
    1734:	af00      	add	r7, sp, #0
    1736:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
    1738:	687b      	ldr	r3, [r7, #4]
    173a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    173e:	601a      	str	r2, [r3, #0]
}
    1740:	bf00      	nop
    1742:	370c      	adds	r7, #12
    1744:	46bd      	mov	sp, r7
    1746:	bc80      	pop	{r7}
    1748:	4770      	bx	lr

0000174a <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
    174a:	b480      	push	{r7}
    174c:	b083      	sub	sp, #12
    174e:	af00      	add	r7, sp, #0
    1750:	6078      	str	r0, [r7, #4]
    1752:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
    1754:	687b      	ldr	r3, [r7, #4]
    1756:	695b      	ldr	r3, [r3, #20]
    1758:	f003 0302 	and.w	r3, r3, #2
    175c:	2b00      	cmp	r3, #0
    175e:	d101      	bne.n	1764 <usart_write+0x1a>
		return 1;
    1760:	2301      	movs	r3, #1
    1762:	e005      	b.n	1770 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
    1764:	683b      	ldr	r3, [r7, #0]
    1766:	f3c3 0208 	ubfx	r2, r3, #0, #9
    176a:	687b      	ldr	r3, [r7, #4]
    176c:	61da      	str	r2, [r3, #28]
	return 0;
    176e:	2300      	movs	r3, #0
}
    1770:	4618      	mov	r0, r3
    1772:	370c      	adds	r7, #12
    1774:	46bd      	mov	sp, r7
    1776:	bc80      	pop	{r7}
    1778:	4770      	bx	lr

0000177a <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
    177a:	b480      	push	{r7}
    177c:	b083      	sub	sp, #12
    177e:	af00      	add	r7, sp, #0
    1780:	6078      	str	r0, [r7, #4]
    1782:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
    1784:	687b      	ldr	r3, [r7, #4]
    1786:	695b      	ldr	r3, [r3, #20]
    1788:	f003 0301 	and.w	r3, r3, #1
    178c:	2b00      	cmp	r3, #0
    178e:	d101      	bne.n	1794 <usart_read+0x1a>
		return 1;
    1790:	2301      	movs	r3, #1
    1792:	e006      	b.n	17a2 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
    1794:	687b      	ldr	r3, [r7, #4]
    1796:	699b      	ldr	r3, [r3, #24]
    1798:	f3c3 0208 	ubfx	r2, r3, #0, #9
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	601a      	str	r2, [r3, #0]

	return 0;
    17a0:	2300      	movs	r3, #0
}
    17a2:	4618      	mov	r0, r3
    17a4:	370c      	adds	r7, #12
    17a6:	46bd      	mov	sp, r7
    17a8:	bc80      	pop	{r7}
    17aa:	4770      	bx	lr

000017ac <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
    17ac:	b480      	push	{r7}
    17ae:	b083      	sub	sp, #12
    17b0:	af00      	add	r7, sp, #0
    17b2:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
    17b4:	687b      	ldr	r3, [r7, #4]
    17b6:	4a04      	ldr	r2, [pc, #16]	; (17c8 <usart_disable_writeprotect+0x1c>)
    17b8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
    17bc:	bf00      	nop
    17be:	370c      	adds	r7, #12
    17c0:	46bd      	mov	sp, r7
    17c2:	bc80      	pop	{r7}
    17c4:	4770      	bx	lr
    17c6:	bf00      	nop
    17c8:	55534100 	.word	0x55534100

000017cc <lcdca_clear_display_memory>:

/**
 * \brief Clear all the LCDCA display memory.
 */
static inline void lcdca_clear_display_memory(void)
{
    17cc:	b480      	push	{r7}
    17ce:	af00      	add	r7, sp, #0
	LCDCA->LCDCA_CR = LCDCA_CR_CDM;
    17d0:	4b03      	ldr	r3, [pc, #12]	; (17e0 <lcdca_clear_display_memory+0x14>)
    17d2:	f44f 7280 	mov.w	r2, #256	; 0x100
    17d6:	601a      	str	r2, [r3, #0]
}
    17d8:	bf00      	nop
    17da:	46bd      	mov	sp, r7
    17dc:	bc80      	pop	{r7}
    17de:	4770      	bx	lr
    17e0:	40080000 	.word	0x40080000

000017e4 <lcdca_blink_disable>:

/**
 * \brief Disable the LCDCA blink mode.
 */
static inline void lcdca_blink_disable(void)
{
    17e4:	b480      	push	{r7}
    17e6:	af00      	add	r7, sp, #0
	/* Blinking "off" */
	LCDCA->LCDCA_CR  = LCDCA_CR_BSTOP;
    17e8:	4b03      	ldr	r3, [pc, #12]	; (17f8 <lcdca_blink_disable+0x14>)
    17ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    17ee:	601a      	str	r2, [r3, #0]
}
    17f0:	bf00      	nop
    17f2:	46bd      	mov	sp, r7
    17f4:	bc80      	pop	{r7}
    17f6:	4770      	bx	lr
    17f8:	40080000 	.word	0x40080000

000017fc <lcdca_automated_char_stop>:
 *
 * \note This function also disables the PDCA channel associated with the
 * LCDCA module.
 */
static inline void lcdca_automated_char_stop(void)
{
    17fc:	b580      	push	{r7, lr}
    17fe:	af00      	add	r7, sp, #0
	/* Disable PDCA channel */
	pdca_channel_disable(LCDCA_AUTOMATED_CHAR_DMA_CH);
    1800:	2003      	movs	r0, #3
    1802:	4b05      	ldr	r3, [pc, #20]	; (1818 <lcdca_automated_char_stop+0x1c>)
    1804:	4798      	blx	r3

	/* Disable automated display */
	LCDCA->LCDCA_ACMCFG &= ~LCDCA_ACMCFG_EN;
    1806:	4a05      	ldr	r2, [pc, #20]	; (181c <lcdca_automated_char_stop+0x20>)
    1808:	4b04      	ldr	r3, [pc, #16]	; (181c <lcdca_automated_char_stop+0x20>)
    180a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    180c:	f023 0301 	bic.w	r3, r3, #1
    1810:	6493      	str	r3, [r2, #72]	; 0x48
}
    1812:	bf00      	nop
    1814:	bd80      	pop	{r7, pc}
    1816:	bf00      	nop
    1818:	00002741 	.word	0x00002741
    181c:	40080000 	.word	0x40080000

00001820 <lcdca_circular_shift_disable>:

/**
 * \brief Disable the LCDCA circular shift mode.
 */
static inline void lcdca_circular_shift_disable(void)
{
    1820:	b480      	push	{r7}
    1822:	af00      	add	r7, sp, #0
	/* CSR "off" */
	LCDCA->LCDCA_CR  = LCDCA_CR_CSTOP;
    1824:	4b03      	ldr	r3, [pc, #12]	; (1834 <lcdca_circular_shift_disable+0x14>)
    1826:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    182a:	601a      	str	r2, [r3, #0]
}
    182c:	bf00      	nop
    182e:	46bd      	mov	sp, r7
    1830:	bc80      	pop	{r7}
    1832:	4770      	bx	lr
    1834:	40080000 	.word	0x40080000

00001838 <c42412a_init>:
#include "c42412a.h"
#include "conf_c42412a_lcdca.h"
#include "lcdca.h"

status_code_t c42412a_init(void)
{
    1838:	b580      	push	{r7, lr}
    183a:	b084      	sub	sp, #16
    183c:	af00      	add	r7, sp, #0
	struct lcdca_config lcdca_cfg;

	lcdca_clk_init();
    183e:	4b15      	ldr	r3, [pc, #84]	; (1894 <c42412a_init+0x5c>)
    1840:	4798      	blx	r3
	lcdca_cfg.port_mask = C42412A_PORT_MASK;
    1842:	2318      	movs	r3, #24
    1844:	713b      	strb	r3, [r7, #4]
	lcdca_cfg.x_bias = CONF_C42412A_X_BIAS;
    1846:	2300      	movs	r3, #0
    1848:	717b      	strb	r3, [r7, #5]
	lcdca_cfg.lp_wave = true;
    184a:	2301      	movs	r3, #1
    184c:	71bb      	strb	r3, [r7, #6]
	lcdca_cfg.duty_type = C42412A_LCD_DUTY;
    184e:	2300      	movs	r3, #0
    1850:	71fb      	strb	r3, [r7, #7]
	lcdca_cfg.lcd_pres = CONF_C42412A_PRES;
    1852:	2300      	movs	r3, #0
    1854:	723b      	strb	r3, [r7, #8]
	lcdca_cfg.lcd_clkdiv = CONF_C42412A_CLKDIV;
    1856:	2307      	movs	r3, #7
    1858:	727b      	strb	r3, [r7, #9]
	lcdca_cfg.fc0 = CONF_C42412A_FC0;
    185a:	2302      	movs	r3, #2
    185c:	72bb      	strb	r3, [r7, #10]
	lcdca_cfg.fc1 = CONF_C42412A_FC1;
    185e:	2302      	movs	r3, #2
    1860:	72fb      	strb	r3, [r7, #11]
	lcdca_cfg.fc2 = CONF_C42412A_FC2;
    1862:	2301      	movs	r3, #1
    1864:	733b      	strb	r3, [r7, #12]
	lcdca_cfg.contrast = CONF_C42412A_CONTRAST;
    1866:	231e      	movs	r3, #30
    1868:	737b      	strb	r3, [r7, #13]
	lcdca_set_config(&lcdca_cfg);
    186a:	1d3b      	adds	r3, r7, #4
    186c:	4618      	mov	r0, r3
    186e:	4b0a      	ldr	r3, [pc, #40]	; (1898 <c42412a_init+0x60>)
    1870:	4798      	blx	r3
	lcdca_enable();
    1872:	4b0a      	ldr	r3, [pc, #40]	; (189c <c42412a_init+0x64>)
    1874:	4798      	blx	r3
	lcdca_enable_timer(LCDCA_TIMER_FC0);
    1876:	2000      	movs	r0, #0
    1878:	4b09      	ldr	r3, [pc, #36]	; (18a0 <c42412a_init+0x68>)
    187a:	4798      	blx	r3
	lcdca_enable_timer(LCDCA_TIMER_FC1);
    187c:	2001      	movs	r0, #1
    187e:	4b08      	ldr	r3, [pc, #32]	; (18a0 <c42412a_init+0x68>)
    1880:	4798      	blx	r3
	lcdca_enable_timer(LCDCA_TIMER_FC2);
    1882:	2002      	movs	r0, #2
    1884:	4b06      	ldr	r3, [pc, #24]	; (18a0 <c42412a_init+0x68>)
    1886:	4798      	blx	r3

	return STATUS_OK;
    1888:	2300      	movs	r3, #0
}
    188a:	4618      	mov	r0, r3
    188c:	3710      	adds	r7, #16
    188e:	46bd      	mov	sp, r7
    1890:	bd80      	pop	{r7, pc}
    1892:	bf00      	nop
    1894:	000020e5 	.word	0x000020e5
    1898:	00002135 	.word	0x00002135
    189c:	000021d1 	.word	0x000021d1
    18a0:	0000226d 	.word	0x0000226d

000018a4 <c42412a_clear_all>:
	lcdca_automated_char_stop();
	lcdca_set_display_memory();
}

void c42412a_clear_all(void)
{
    18a4:	b580      	push	{r7, lr}
    18a6:	af00      	add	r7, sp, #0
	lcdca_blink_disable();
    18a8:	4b04      	ldr	r3, [pc, #16]	; (18bc <c42412a_clear_all+0x18>)
    18aa:	4798      	blx	r3
	lcdca_circular_shift_disable();
    18ac:	4b04      	ldr	r3, [pc, #16]	; (18c0 <c42412a_clear_all+0x1c>)
    18ae:	4798      	blx	r3
	lcdca_automated_char_stop();
    18b0:	4b04      	ldr	r3, [pc, #16]	; (18c4 <c42412a_clear_all+0x20>)
    18b2:	4798      	blx	r3
	lcdca_clear_display_memory();
    18b4:	4b04      	ldr	r3, [pc, #16]	; (18c8 <c42412a_clear_all+0x24>)
    18b6:	4798      	blx	r3
}
    18b8:	bf00      	nop
    18ba:	bd80      	pop	{r7, pc}
    18bc:	000017e5 	.word	0x000017e5
    18c0:	00001821 	.word	0x00001821
    18c4:	000017fd 	.word	0x000017fd
    18c8:	000017cd 	.word	0x000017cd

000018cc <c42412a_show_text>:

void c42412a_show_text(const uint8_t *data)
{
    18cc:	b590      	push	{r4, r7, lr}
    18ce:	b085      	sub	sp, #20
    18d0:	af02      	add	r7, sp, #8
    18d2:	6078      	str	r0, [r7, #4]
	lcdca_write_packet(LCDCA_TDG_14SEG4COM, C42412A_FIRST_14SEG_4C, data,
    18d4:	2300      	movs	r3, #0
    18d6:	9300      	str	r3, [sp, #0]
    18d8:	2305      	movs	r3, #5
    18da:	687a      	ldr	r2, [r7, #4]
    18dc:	2104      	movs	r1, #4
    18de:	2002      	movs	r0, #2
    18e0:	4c02      	ldr	r4, [pc, #8]	; (18ec <c42412a_show_text+0x20>)
    18e2:	47a0      	blx	r4
			C42412A_WIDTH_14SEG_4C, LCDCA_CMCFG_DREV_RIGHT);
}
    18e4:	bf00      	nop
    18e6:	370c      	adds	r7, #12
    18e8:	46bd      	mov	sp, r7
    18ea:	bd90      	pop	{r4, r7, pc}
    18ec:	00002335 	.word	0x00002335

000018f0 <c42412a_clear_text>:

void c42412a_clear_text(void)
{
    18f0:	b590      	push	{r4, r7, lr}
    18f2:	b085      	sub	sp, #20
    18f4:	af02      	add	r7, sp, #8
	uint8_t clear_data[5] = {0x0F, 0x0F, 0x0F, 0x0F, 0x0F};
    18f6:	4a09      	ldr	r2, [pc, #36]	; (191c <c42412a_clear_text+0x2c>)
    18f8:	463b      	mov	r3, r7
    18fa:	e892 0003 	ldmia.w	r2, {r0, r1}
    18fe:	6018      	str	r0, [r3, #0]
    1900:	3304      	adds	r3, #4
    1902:	7019      	strb	r1, [r3, #0]

	lcdca_write_packet(LCDCA_TDG_14SEG4COM, C42412A_FIRST_14SEG_4C,
    1904:	463a      	mov	r2, r7
    1906:	2300      	movs	r3, #0
    1908:	9300      	str	r3, [sp, #0]
    190a:	2305      	movs	r3, #5
    190c:	2104      	movs	r1, #4
    190e:	2002      	movs	r0, #2
    1910:	4c03      	ldr	r4, [pc, #12]	; (1920 <c42412a_clear_text+0x30>)
    1912:	47a0      	blx	r4
			clear_data, C42412A_WIDTH_14SEG_4C, LCDCA_CMCFG_DREV_RIGHT);
}
    1914:	bf00      	nop
    1916:	370c      	adds	r7, #12
    1918:	46bd      	mov	sp, r7
    191a:	bd90      	pop	{r4, r7, pc}
    191c:	0000bc34 	.word	0x0000bc34
    1920:	00002335 	.word	0x00002335

00001924 <c42412a_show_icon>:

void c42412a_show_icon(uint8_t icon_com, uint8_t icon_seg)
{
    1924:	b580      	push	{r7, lr}
    1926:	b082      	sub	sp, #8
    1928:	af00      	add	r7, sp, #0
    192a:	4603      	mov	r3, r0
    192c:	460a      	mov	r2, r1
    192e:	71fb      	strb	r3, [r7, #7]
    1930:	4613      	mov	r3, r2
    1932:	71bb      	strb	r3, [r7, #6]
	if (icon_com < 2) {
    1934:	79fb      	ldrb	r3, [r7, #7]
    1936:	2b01      	cmp	r3, #1
    1938:	d805      	bhi.n	1946 <c42412a_show_icon+0x22>
		lcdca_clear_blink_pixel(icon_com, icon_seg);
    193a:	79ba      	ldrb	r2, [r7, #6]
    193c:	79fb      	ldrb	r3, [r7, #7]
    193e:	4611      	mov	r1, r2
    1940:	4618      	mov	r0, r3
    1942:	4b06      	ldr	r3, [pc, #24]	; (195c <c42412a_show_icon+0x38>)
    1944:	4798      	blx	r3
	}

	lcdca_set_pixel(icon_com, icon_seg);
    1946:	79ba      	ldrb	r2, [r7, #6]
    1948:	79fb      	ldrb	r3, [r7, #7]
    194a:	4611      	mov	r1, r2
    194c:	4618      	mov	r0, r3
    194e:	4b04      	ldr	r3, [pc, #16]	; (1960 <c42412a_show_icon+0x3c>)
    1950:	4798      	blx	r3
}
    1952:	bf00      	nop
    1954:	3708      	adds	r7, #8
    1956:	46bd      	mov	sp, r7
    1958:	bd80      	pop	{r7, pc}
    195a:	bf00      	nop
    195c:	000022d9 	.word	0x000022d9
    1960:	00002495 	.word	0x00002495

00001964 <c42412a_clear_icon>:

void c42412a_clear_icon(uint8_t icon_com, uint8_t icon_seg)
{
    1964:	b580      	push	{r7, lr}
    1966:	b082      	sub	sp, #8
    1968:	af00      	add	r7, sp, #0
    196a:	4603      	mov	r3, r0
    196c:	460a      	mov	r2, r1
    196e:	71fb      	strb	r3, [r7, #7]
    1970:	4613      	mov	r3, r2
    1972:	71bb      	strb	r3, [r7, #6]
	lcdca_clear_pixel(icon_com, icon_seg);
    1974:	79ba      	ldrb	r2, [r7, #6]
    1976:	79fb      	ldrb	r3, [r7, #7]
    1978:	4611      	mov	r1, r2
    197a:	4618      	mov	r0, r3
    197c:	4b02      	ldr	r3, [pc, #8]	; (1988 <c42412a_clear_icon+0x24>)
    197e:	4798      	blx	r3
}
    1980:	bf00      	nop
    1982:	3708      	adds	r7, #8
    1984:	46bd      	mov	sp, r7
    1986:	bd80      	pop	{r7, pc}
    1988:	00002589 	.word	0x00002589

0000198c <c42412a_show_numeric_dec>:
		lcdca_set_pixel(C42412A_ICON_WLESS_LEVEL_1);
	}
}

void c42412a_show_numeric_dec(int32_t value)
{
    198c:	b580      	push	{r7, lr}
    198e:	b084      	sub	sp, #16
    1990:	af00      	add	r7, sp, #0
    1992:	6078      	str	r0, [r7, #4]
	uint8_t lcd_num[6];

	Assert(value > -200000);
	Assert(value < 200000);

	if(value < 0) {
    1994:	687b      	ldr	r3, [r7, #4]
    1996:	2b00      	cmp	r3, #0
    1998:	da04      	bge.n	19a4 <c42412a_show_numeric_dec+0x18>
		lcdca_set_pixel(C42412A_ICON_MINUS);
    199a:	2111      	movs	r1, #17
    199c:	2000      	movs	r0, #0
    199e:	4b1b      	ldr	r3, [pc, #108]	; (1a0c <c42412a_show_numeric_dec+0x80>)
    19a0:	4798      	blx	r3
    19a2:	e003      	b.n	19ac <c42412a_show_numeric_dec+0x20>
	} else {
		lcdca_clear_pixel(C42412A_ICON_MINUS);
    19a4:	2111      	movs	r1, #17
    19a6:	2000      	movs	r0, #0
    19a8:	4b19      	ldr	r3, [pc, #100]	; (1a10 <c42412a_show_numeric_dec+0x84>)
    19aa:	4798      	blx	r3
	}

	value = Abs(value);
    19ac:	687b      	ldr	r3, [r7, #4]
    19ae:	2b00      	cmp	r3, #0
    19b0:	bfb8      	it	lt
    19b2:	425b      	neglt	r3, r3
    19b4:	607b      	str	r3, [r7, #4]

	if(value > 99999) {
    19b6:	687b      	ldr	r3, [r7, #4]
    19b8:	4a16      	ldr	r2, [pc, #88]	; (1a14 <c42412a_show_numeric_dec+0x88>)
    19ba:	4293      	cmp	r3, r2
    19bc:	dd0d      	ble.n	19da <c42412a_show_numeric_dec+0x4e>
		value -= 100000;
    19be:	687b      	ldr	r3, [r7, #4]
    19c0:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
    19c4:	3ba0      	subs	r3, #160	; 0xa0
    19c6:	607b      	str	r3, [r7, #4]
		lcdca_set_pixel(C42412A_ICON_MINUS_SEG1);
    19c8:	210d      	movs	r1, #13
    19ca:	2000      	movs	r0, #0
    19cc:	4b0f      	ldr	r3, [pc, #60]	; (1a0c <c42412a_show_numeric_dec+0x80>)
    19ce:	4798      	blx	r3
		lcdca_set_pixel(C42412A_ICON_MINUS_SEG2);
    19d0:	2109      	movs	r1, #9
    19d2:	2000      	movs	r0, #0
    19d4:	4b0d      	ldr	r3, [pc, #52]	; (1a0c <c42412a_show_numeric_dec+0x80>)
    19d6:	4798      	blx	r3
    19d8:	e007      	b.n	19ea <c42412a_show_numeric_dec+0x5e>
	} else {
		lcdca_clear_pixel(C42412A_ICON_MINUS_SEG1);
    19da:	210d      	movs	r1, #13
    19dc:	2000      	movs	r0, #0
    19de:	4b0c      	ldr	r3, [pc, #48]	; (1a10 <c42412a_show_numeric_dec+0x84>)
    19e0:	4798      	blx	r3
		lcdca_clear_pixel(C42412A_ICON_MINUS_SEG2);
    19e2:	2109      	movs	r1, #9
    19e4:	2000      	movs	r0, #0
    19e6:	4b0a      	ldr	r3, [pc, #40]	; (1a10 <c42412a_show_numeric_dec+0x84>)
    19e8:	4798      	blx	r3
	}

	sprintf((char*)lcd_num, "%4d", (int)value);
    19ea:	f107 0308 	add.w	r3, r7, #8
    19ee:	687a      	ldr	r2, [r7, #4]
    19f0:	4909      	ldr	r1, [pc, #36]	; (1a18 <c42412a_show_numeric_dec+0x8c>)
    19f2:	4618      	mov	r0, r3
    19f4:	4b09      	ldr	r3, [pc, #36]	; (1a1c <c42412a_show_numeric_dec+0x90>)
    19f6:	4798      	blx	r3

	c42412a_show_text((uint8_t const*)&lcd_num);
    19f8:	f107 0308 	add.w	r3, r7, #8
    19fc:	4618      	mov	r0, r3
    19fe:	4b08      	ldr	r3, [pc, #32]	; (1a20 <c42412a_show_numeric_dec+0x94>)
    1a00:	4798      	blx	r3
}
    1a02:	bf00      	nop
    1a04:	3710      	adds	r7, #16
    1a06:	46bd      	mov	sp, r7
    1a08:	bd80      	pop	{r7, pc}
    1a0a:	bf00      	nop
    1a0c:	00002495 	.word	0x00002495
    1a10:	00002589 	.word	0x00002589
    1a14:	0001869f 	.word	0x0001869f
    1a18:	0000bc3c 	.word	0x0000bc3c
    1a1c:	00009115 	.word	0x00009115
    1a20:	000018cd 	.word	0x000018cd

00001a24 <eic_line_interrupt>:
 * eic_line_set_callback() function.
 *
 * \param [in]  line_number EIC line number to handle interrupt for
 */
static void eic_line_interrupt(uint8_t line_number)
{
    1a24:	b580      	push	{r7, lr}
    1a26:	b082      	sub	sp, #8
    1a28:	af00      	add	r7, sp, #0
    1a2a:	4603      	mov	r3, r0
    1a2c:	71fb      	strb	r3, [r7, #7]
	if (eic_callback_pointer[line_number]) {
    1a2e:	79fb      	ldrb	r3, [r7, #7]
    1a30:	4a06      	ldr	r2, [pc, #24]	; (1a4c <eic_line_interrupt+0x28>)
    1a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1a36:	2b00      	cmp	r3, #0
    1a38:	d004      	beq.n	1a44 <eic_line_interrupt+0x20>
		eic_callback_pointer[line_number]();
    1a3a:	79fb      	ldrb	r3, [r7, #7]
    1a3c:	4a03      	ldr	r2, [pc, #12]	; (1a4c <eic_line_interrupt+0x28>)
    1a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1a42:	4798      	blx	r3
	} else {
		Assert(false); /* Catch unexpected interrupt */
	}
}
    1a44:	bf00      	nop
    1a46:	3708      	adds	r7, #8
    1a48:	46bd      	mov	sp, r7
    1a4a:	bd80      	pop	{r7, pc}
    1a4c:	20000390 	.word	0x20000390

00001a50 <NMI_Handler>:

/**
 * \brief Interrupt handler for EIC NMI.
 */
void NMI_Handler(void)
{
    1a50:	b580      	push	{r7, lr}
    1a52:	af00      	add	r7, sp, #0
	eic_line_interrupt(0);
    1a54:	2000      	movs	r0, #0
    1a56:	4b02      	ldr	r3, [pc, #8]	; (1a60 <NMI_Handler+0x10>)
    1a58:	4798      	blx	r3
}
    1a5a:	bf00      	nop
    1a5c:	bd80      	pop	{r7, pc}
    1a5e:	bf00      	nop
    1a60:	00001a25 	.word	0x00001a25

00001a64 <EIC_1_Handler>:

/**
 * \brief Interrupt handler for EIC line 1.
 */
void EIC_1_Handler(void)
{
    1a64:	b580      	push	{r7, lr}
    1a66:	af00      	add	r7, sp, #0
	eic_line_interrupt(1);
    1a68:	2001      	movs	r0, #1
    1a6a:	4b02      	ldr	r3, [pc, #8]	; (1a74 <EIC_1_Handler+0x10>)
    1a6c:	4798      	blx	r3
}
    1a6e:	bf00      	nop
    1a70:	bd80      	pop	{r7, pc}
    1a72:	bf00      	nop
    1a74:	00001a25 	.word	0x00001a25

00001a78 <EIC_2_Handler>:

/**
 * \brief Interrupt handler for EIC line 2.
 */
void EIC_2_Handler(void)
{
    1a78:	b580      	push	{r7, lr}
    1a7a:	af00      	add	r7, sp, #0
	eic_line_interrupt(2);
    1a7c:	2002      	movs	r0, #2
    1a7e:	4b02      	ldr	r3, [pc, #8]	; (1a88 <EIC_2_Handler+0x10>)
    1a80:	4798      	blx	r3
}
    1a82:	bf00      	nop
    1a84:	bd80      	pop	{r7, pc}
    1a86:	bf00      	nop
    1a88:	00001a25 	.word	0x00001a25

00001a8c <EIC_3_Handler>:

/**
 * \brief Interrupt handler for EIC line 3.
 */
void EIC_3_Handler(void)
{
    1a8c:	b580      	push	{r7, lr}
    1a8e:	af00      	add	r7, sp, #0
	eic_line_interrupt(3);
    1a90:	2003      	movs	r0, #3
    1a92:	4b02      	ldr	r3, [pc, #8]	; (1a9c <EIC_3_Handler+0x10>)
    1a94:	4798      	blx	r3
}
    1a96:	bf00      	nop
    1a98:	bd80      	pop	{r7, pc}
    1a9a:	bf00      	nop
    1a9c:	00001a25 	.word	0x00001a25

00001aa0 <EIC_4_Handler>:

/**
 * \brief Interrupt handler for EIC line 4.
 */
void EIC_4_Handler(void)
{
    1aa0:	b580      	push	{r7, lr}
    1aa2:	af00      	add	r7, sp, #0
	eic_line_interrupt(4);
    1aa4:	2004      	movs	r0, #4
    1aa6:	4b02      	ldr	r3, [pc, #8]	; (1ab0 <EIC_4_Handler+0x10>)
    1aa8:	4798      	blx	r3
}
    1aaa:	bf00      	nop
    1aac:	bd80      	pop	{r7, pc}
    1aae:	bf00      	nop
    1ab0:	00001a25 	.word	0x00001a25

00001ab4 <EIC_5_Handler>:

/**
 * \brief Interrupt handler for EIC line 5.
 */
void EIC_5_Handler(void)
{
    1ab4:	b580      	push	{r7, lr}
    1ab6:	af00      	add	r7, sp, #0
	eic_line_interrupt(5);
    1ab8:	2005      	movs	r0, #5
    1aba:	4b02      	ldr	r3, [pc, #8]	; (1ac4 <EIC_5_Handler+0x10>)
    1abc:	4798      	blx	r3
}
    1abe:	bf00      	nop
    1ac0:	bd80      	pop	{r7, pc}
    1ac2:	bf00      	nop
    1ac4:	00001a25 	.word	0x00001a25

00001ac8 <EIC_6_Handler>:

/**
 * \brief Interrupt handler for EIC line 6.
 */
void EIC_6_Handler(void)
{
    1ac8:	b580      	push	{r7, lr}
    1aca:	af00      	add	r7, sp, #0
	eic_line_interrupt(6);
    1acc:	2006      	movs	r0, #6
    1ace:	4b02      	ldr	r3, [pc, #8]	; (1ad8 <EIC_6_Handler+0x10>)
    1ad0:	4798      	blx	r3
}
    1ad2:	bf00      	nop
    1ad4:	bd80      	pop	{r7, pc}
    1ad6:	bf00      	nop
    1ad8:	00001a25 	.word	0x00001a25

00001adc <EIC_7_Handler>:

/**
 * \brief Interrupt handler for EIC line 7.
 */
void EIC_7_Handler(void)
{
    1adc:	b580      	push	{r7, lr}
    1ade:	af00      	add	r7, sp, #0
	eic_line_interrupt(7);
    1ae0:	2007      	movs	r0, #7
    1ae2:	4b02      	ldr	r3, [pc, #8]	; (1aec <EIC_7_Handler+0x10>)
    1ae4:	4798      	blx	r3
}
    1ae6:	bf00      	nop
    1ae8:	bd80      	pop	{r7, pc}
    1aea:	bf00      	nop
    1aec:	00001a25 	.word	0x00001a25

00001af0 <EIC_8_Handler>:

/**
 * \brief Interrupt handler for EIC line 8.
 */
void EIC_8_Handler(void)
{
    1af0:	b580      	push	{r7, lr}
    1af2:	af00      	add	r7, sp, #0
	eic_line_interrupt(8);
    1af4:	2008      	movs	r0, #8
    1af6:	4b02      	ldr	r3, [pc, #8]	; (1b00 <EIC_8_Handler+0x10>)
    1af8:	4798      	blx	r3
}
    1afa:	bf00      	nop
    1afc:	bd80      	pop	{r7, pc}
    1afe:	bf00      	nop
    1b00:	00001a25 	.word	0x00001a25

00001b04 <__NVIC_EnableIRQ>:
{
    1b04:	b480      	push	{r7}
    1b06:	b083      	sub	sp, #12
    1b08:	af00      	add	r7, sp, #0
    1b0a:	4603      	mov	r3, r0
    1b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    1b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1b12:	2b00      	cmp	r3, #0
    1b14:	db0b      	blt.n	1b2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b16:	4908      	ldr	r1, [pc, #32]	; (1b38 <__NVIC_EnableIRQ+0x34>)
    1b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1b1c:	095b      	lsrs	r3, r3, #5
    1b1e:	79fa      	ldrb	r2, [r7, #7]
    1b20:	f002 021f 	and.w	r2, r2, #31
    1b24:	2001      	movs	r0, #1
    1b26:	fa00 f202 	lsl.w	r2, r0, r2
    1b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    1b2e:	bf00      	nop
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	bc80      	pop	{r7}
    1b36:	4770      	bx	lr
    1b38:	e000e100 	.word	0xe000e100

00001b3c <__NVIC_ClearPendingIRQ>:
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	4603      	mov	r3, r0
    1b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    1b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1b4a:	2b00      	cmp	r3, #0
    1b4c:	db0c      	blt.n	1b68 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b4e:	4909      	ldr	r1, [pc, #36]	; (1b74 <__NVIC_ClearPendingIRQ+0x38>)
    1b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1b54:	095b      	lsrs	r3, r3, #5
    1b56:	79fa      	ldrb	r2, [r7, #7]
    1b58:	f002 021f 	and.w	r2, r2, #31
    1b5c:	2001      	movs	r0, #1
    1b5e:	fa00 f202 	lsl.w	r2, r0, r2
    1b62:	3360      	adds	r3, #96	; 0x60
    1b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    1b68:	bf00      	nop
    1b6a:	370c      	adds	r7, #12
    1b6c:	46bd      	mov	sp, r7
    1b6e:	bc80      	pop	{r7}
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop
    1b74:	e000e100 	.word	0xe000e100

00001b78 <__NVIC_SetPriority>:
{
    1b78:	b480      	push	{r7}
    1b7a:	b083      	sub	sp, #12
    1b7c:	af00      	add	r7, sp, #0
    1b7e:	4603      	mov	r3, r0
    1b80:	6039      	str	r1, [r7, #0]
    1b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    1b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1b88:	2b00      	cmp	r3, #0
    1b8a:	db0a      	blt.n	1ba2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b8c:	490d      	ldr	r1, [pc, #52]	; (1bc4 <__NVIC_SetPriority+0x4c>)
    1b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1b92:	683a      	ldr	r2, [r7, #0]
    1b94:	b2d2      	uxtb	r2, r2
    1b96:	0112      	lsls	r2, r2, #4
    1b98:	b2d2      	uxtb	r2, r2
    1b9a:	440b      	add	r3, r1
    1b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    1ba0:	e00a      	b.n	1bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1ba2:	4909      	ldr	r1, [pc, #36]	; (1bc8 <__NVIC_SetPriority+0x50>)
    1ba4:	79fb      	ldrb	r3, [r7, #7]
    1ba6:	f003 030f 	and.w	r3, r3, #15
    1baa:	3b04      	subs	r3, #4
    1bac:	683a      	ldr	r2, [r7, #0]
    1bae:	b2d2      	uxtb	r2, r2
    1bb0:	0112      	lsls	r2, r2, #4
    1bb2:	b2d2      	uxtb	r2, r2
    1bb4:	440b      	add	r3, r1
    1bb6:	761a      	strb	r2, [r3, #24]
}
    1bb8:	bf00      	nop
    1bba:	370c      	adds	r7, #12
    1bbc:	46bd      	mov	sp, r7
    1bbe:	bc80      	pop	{r7}
    1bc0:	4770      	bx	lr
    1bc2:	bf00      	nop
    1bc4:	e000e100 	.word	0xe000e100
    1bc8:	e000ed00 	.word	0xe000ed00

00001bcc <ioport_pin_to_port_id>:
 *
 * \param pin IOPORT pin ID to convert
 * \retval Port ID for the given pin ID
 */
static inline ioport_port_t ioport_pin_to_port_id(ioport_pin_t pin)
{
    1bcc:	b480      	push	{r7}
    1bce:	b085      	sub	sp, #20
    1bd0:	af00      	add	r7, sp, #0
    1bd2:	6078      	str	r0, [r7, #4]
    1bd4:	687b      	ldr	r3, [r7, #4]
    1bd6:	60fb      	str	r3, [r7, #12]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    1bd8:	68fb      	ldr	r3, [r7, #12]
    1bda:	095b      	lsrs	r3, r3, #5
	return arch_ioport_pin_to_port_id(pin);
    1bdc:	bf00      	nop
}
    1bde:	4618      	mov	r0, r3
    1be0:	3714      	adds	r7, #20
    1be2:	46bd      	mov	sp, r7
    1be4:	bc80      	pop	{r7}
    1be6:	4770      	bx	lr

00001be8 <ioport_pin_to_mask>:
 *
 * \param pin IOPORT pin ID to convert
 * \retval Bitmask with a bit set that corresponds to the given pin ID in its port
 */
static inline ioport_port_mask_t ioport_pin_to_mask(ioport_pin_t pin)
{
    1be8:	b480      	push	{r7}
    1bea:	b085      	sub	sp, #20
    1bec:	af00      	add	r7, sp, #0
    1bee:	6078      	str	r0, [r7, #4]
    1bf0:	687b      	ldr	r3, [r7, #4]
    1bf2:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    1bf4:	68fb      	ldr	r3, [r7, #12]
    1bf6:	f003 031f 	and.w	r3, r3, #31
    1bfa:	2201      	movs	r2, #1
    1bfc:	fa02 f303 	lsl.w	r3, r2, r3
	return arch_ioport_pin_to_mask(pin);
    1c00:	bf00      	nop
}
    1c02:	4618      	mov	r0, r3
    1c04:	3714      	adds	r7, #20
    1c06:	46bd      	mov	sp, r7
    1c08:	bc80      	pop	{r7}
    1c0a:	4770      	bx	lr

00001c0c <gpio_set_pin_callback>:
 * \retval false Wrong parameters or maximum number of interrupt
 *                  sources has been exceeding
 */
bool gpio_set_pin_callback(ioport_pin_t pin, gpio_pin_callback_t callback,
		uint8_t irq_level)
{
    1c0c:	b580      	push	{r7, lr}
    1c0e:	b086      	sub	sp, #24
    1c10:	af00      	add	r7, sp, #0
    1c12:	60f8      	str	r0, [r7, #12]
    1c14:	60b9      	str	r1, [r7, #8]
    1c16:	4613      	mov	r3, r2
    1c18:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	int8_t irq_line;

	if (gpio_nb_sources >= GPIO_MAX_INTERRUPT_SOURCES) {
    1c1a:	4b2b      	ldr	r3, [pc, #172]	; (1cc8 <gpio_set_pin_callback+0xbc>)
    1c1c:	681b      	ldr	r3, [r3, #0]
    1c1e:	2b05      	cmp	r3, #5
    1c20:	d901      	bls.n	1c26 <gpio_set_pin_callback+0x1a>
		return false;
    1c22:	2300      	movs	r3, #0
    1c24:	e04c      	b.n	1cc0 <gpio_set_pin_callback+0xb4>
	 * Get IRQ line for the given pin.
	 *
	 * \note Grouping interrupt generators into groups of eight, four
	 * different interrupt handlers can be installed for each GPIO port.
	 */
	for (i = 0; i < 4; i++) {
    1c26:	2300      	movs	r3, #0
    1c28:	75fb      	strb	r3, [r7, #23]
    1c2a:	e012      	b.n	1c52 <gpio_set_pin_callback+0x46>
		if (ioport_pin_to_mask(pin) & (GPIO_INT_GROUP_MASK << (i * 8))) {
    1c2c:	68f8      	ldr	r0, [r7, #12]
    1c2e:	4b27      	ldr	r3, [pc, #156]	; (1ccc <gpio_set_pin_callback+0xc0>)
    1c30:	4798      	blx	r3
    1c32:	4601      	mov	r1, r0
    1c34:	f997 3017 	ldrsb.w	r3, [r7, #23]
    1c38:	00db      	lsls	r3, r3, #3
    1c3a:	22ff      	movs	r2, #255	; 0xff
    1c3c:	fa02 f303 	lsl.w	r3, r2, r3
    1c40:	400b      	ands	r3, r1
    1c42:	2b00      	cmp	r3, #0
    1c44:	d10a      	bne.n	1c5c <gpio_set_pin_callback+0x50>
	for (i = 0; i < 4; i++) {
    1c46:	f997 3017 	ldrsb.w	r3, [r7, #23]
    1c4a:	b2db      	uxtb	r3, r3
    1c4c:	3301      	adds	r3, #1
    1c4e:	b2db      	uxtb	r3, r3
    1c50:	75fb      	strb	r3, [r7, #23]
    1c52:	f997 3017 	ldrsb.w	r3, [r7, #23]
    1c56:	2b03      	cmp	r3, #3
    1c58:	dde8      	ble.n	1c2c <gpio_set_pin_callback+0x20>
    1c5a:	e000      	b.n	1c5e <gpio_set_pin_callback+0x52>
			break;
    1c5c:	bf00      	nop
		}
	}
	irq_line = GPIO_0_IRQn + ioport_pin_to_port_id(pin) * 4 + i;
    1c5e:	68f8      	ldr	r0, [r7, #12]
    1c60:	4b1b      	ldr	r3, [pc, #108]	; (1cd0 <gpio_set_pin_callback+0xc4>)
    1c62:	4798      	blx	r3
    1c64:	4603      	mov	r3, r0
    1c66:	b2db      	uxtb	r3, r3
    1c68:	009b      	lsls	r3, r3, #2
    1c6a:	b2da      	uxtb	r2, r3
    1c6c:	7dfb      	ldrb	r3, [r7, #23]
    1c6e:	4413      	add	r3, r2
    1c70:	b2db      	uxtb	r3, r3
    1c72:	3319      	adds	r3, #25
    1c74:	b2db      	uxtb	r3, r3
    1c76:	75bb      	strb	r3, [r7, #22]

	gpio_int_sources[gpio_nb_sources].pin = pin;
    1c78:	4b13      	ldr	r3, [pc, #76]	; (1cc8 <gpio_set_pin_callback+0xbc>)
    1c7a:	681b      	ldr	r3, [r3, #0]
    1c7c:	4915      	ldr	r1, [pc, #84]	; (1cd4 <gpio_set_pin_callback+0xc8>)
    1c7e:	68fa      	ldr	r2, [r7, #12]
    1c80:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	gpio_int_sources[gpio_nb_sources].callback = callback;
    1c84:	4b10      	ldr	r3, [pc, #64]	; (1cc8 <gpio_set_pin_callback+0xbc>)
    1c86:	681b      	ldr	r3, [r3, #0]
    1c88:	4a12      	ldr	r2, [pc, #72]	; (1cd4 <gpio_set_pin_callback+0xc8>)
    1c8a:	00db      	lsls	r3, r3, #3
    1c8c:	4413      	add	r3, r2
    1c8e:	68ba      	ldr	r2, [r7, #8]
    1c90:	605a      	str	r2, [r3, #4]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
    1c92:	f997 3016 	ldrsb.w	r3, [r7, #22]
    1c96:	4618      	mov	r0, r3
    1c98:	4b0f      	ldr	r3, [pc, #60]	; (1cd8 <gpio_set_pin_callback+0xcc>)
    1c9a:	4798      	blx	r3
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
    1c9c:	79fa      	ldrb	r2, [r7, #7]
    1c9e:	f997 3016 	ldrsb.w	r3, [r7, #22]
    1ca2:	4611      	mov	r1, r2
    1ca4:	4618      	mov	r0, r3
    1ca6:	4b0d      	ldr	r3, [pc, #52]	; (1cdc <gpio_set_pin_callback+0xd0>)
    1ca8:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)irq_line);
    1caa:	f997 3016 	ldrsb.w	r3, [r7, #22]
    1cae:	4618      	mov	r0, r3
    1cb0:	4b0b      	ldr	r3, [pc, #44]	; (1ce0 <gpio_set_pin_callback+0xd4>)
    1cb2:	4798      	blx	r3

	gpio_nb_sources++;
    1cb4:	4b04      	ldr	r3, [pc, #16]	; (1cc8 <gpio_set_pin_callback+0xbc>)
    1cb6:	681b      	ldr	r3, [r3, #0]
    1cb8:	3301      	adds	r3, #1
    1cba:	4a03      	ldr	r2, [pc, #12]	; (1cc8 <gpio_set_pin_callback+0xbc>)
    1cbc:	6013      	str	r3, [r2, #0]

	return true;
    1cbe:	2301      	movs	r3, #1
}
    1cc0:	4618      	mov	r0, r3
    1cc2:	3718      	adds	r7, #24
    1cc4:	46bd      	mov	sp, r7
    1cc6:	bd80      	pop	{r7, pc}
    1cc8:	2000033c 	.word	0x2000033c
    1ccc:	00001be9 	.word	0x00001be9
    1cd0:	00001bcd 	.word	0x00001bcd
    1cd4:	2000030c 	.word	0x2000030c
    1cd8:	00001b3d 	.word	0x00001b3d
    1cdc:	00001b79 	.word	0x00001b79
    1ce0:	00001b05 	.word	0x00001b05

00001ce4 <gpio_common_handler>:

/**
 * Common GPIO handler.
 */
static void gpio_common_handler(uint32_t port_id, uint32_t port_mask)
{
    1ce4:	b580      	push	{r7, lr}
    1ce6:	b086      	sub	sp, #24
    1ce8:	af00      	add	r7, sp, #0
    1cea:	6078      	str	r0, [r7, #4]
    1cec:	6039      	str	r1, [r7, #0]
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[port_id]);
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	025b      	lsls	r3, r3, #9
    1cf2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1cf6:	f503 2361 	add.w	r3, r3, #921600	; 0xe1000
    1cfa:	613b      	str	r3, [r7, #16]
	uint32_t i;
	uint32_t int_flags;
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
    1cfc:	693b      	ldr	r3, [r7, #16]
    1cfe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    1d02:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < gpio_nb_sources; i++) {
    1d04:	2300      	movs	r3, #0
    1d06:	617b      	str	r3, [r7, #20]
    1d08:	e023      	b.n	1d52 <gpio_common_handler+0x6e>
		pin = gpio_int_sources[i].pin;
    1d0a:	4a19      	ldr	r2, [pc, #100]	; (1d70 <gpio_common_handler+0x8c>)
    1d0c:	697b      	ldr	r3, [r7, #20]
    1d0e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1d12:	60bb      	str	r3, [r7, #8]
		if ((ioport_pin_to_port_id(pin) == port_id) &&
    1d14:	68b8      	ldr	r0, [r7, #8]
    1d16:	4b17      	ldr	r3, [pc, #92]	; (1d74 <gpio_common_handler+0x90>)
    1d18:	4798      	blx	r3
    1d1a:	4602      	mov	r2, r0
    1d1c:	687b      	ldr	r3, [r7, #4]
    1d1e:	429a      	cmp	r2, r3
    1d20:	d114      	bne.n	1d4c <gpio_common_handler+0x68>
				(ioport_pin_to_mask(pin) & int_flags)) {
    1d22:	68b8      	ldr	r0, [r7, #8]
    1d24:	4b14      	ldr	r3, [pc, #80]	; (1d78 <gpio_common_handler+0x94>)
    1d26:	4798      	blx	r3
    1d28:	4602      	mov	r2, r0
    1d2a:	68fb      	ldr	r3, [r7, #12]
    1d2c:	4013      	ands	r3, r2
		if ((ioport_pin_to_port_id(pin) == port_id) &&
    1d2e:	2b00      	cmp	r3, #0
    1d30:	d00c      	beq.n	1d4c <gpio_common_handler+0x68>
			if (gpio_int_sources[i].callback != NULL) {
    1d32:	4a0f      	ldr	r2, [pc, #60]	; (1d70 <gpio_common_handler+0x8c>)
    1d34:	697b      	ldr	r3, [r7, #20]
    1d36:	00db      	lsls	r3, r3, #3
    1d38:	4413      	add	r3, r2
    1d3a:	685b      	ldr	r3, [r3, #4]
    1d3c:	2b00      	cmp	r3, #0
    1d3e:	d005      	beq.n	1d4c <gpio_common_handler+0x68>
				gpio_int_sources[i].callback();
    1d40:	4a0b      	ldr	r2, [pc, #44]	; (1d70 <gpio_common_handler+0x8c>)
    1d42:	697b      	ldr	r3, [r7, #20]
    1d44:	00db      	lsls	r3, r3, #3
    1d46:	4413      	add	r3, r2
    1d48:	685b      	ldr	r3, [r3, #4]
    1d4a:	4798      	blx	r3
	for (i = 0; i < gpio_nb_sources; i++) {
    1d4c:	697b      	ldr	r3, [r7, #20]
    1d4e:	3301      	adds	r3, #1
    1d50:	617b      	str	r3, [r7, #20]
    1d52:	4b0a      	ldr	r3, [pc, #40]	; (1d7c <gpio_common_handler+0x98>)
    1d54:	681b      	ldr	r3, [r3, #0]
    1d56:	697a      	ldr	r2, [r7, #20]
    1d58:	429a      	cmp	r2, r3
    1d5a:	d3d6      	bcc.n	1d0a <gpio_common_handler+0x26>
				Assert(false); /* Catch unexpected interrupt */
			}
		}
	}

	gpio_port->GPIO_IFRC = (int_flags & port_mask);
    1d5c:	68fa      	ldr	r2, [r7, #12]
    1d5e:	683b      	ldr	r3, [r7, #0]
    1d60:	401a      	ands	r2, r3
    1d62:	693b      	ldr	r3, [r7, #16]
    1d64:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
}
    1d68:	bf00      	nop
    1d6a:	3718      	adds	r7, #24
    1d6c:	46bd      	mov	sp, r7
    1d6e:	bd80      	pop	{r7, pc}
    1d70:	2000030c 	.word	0x2000030c
    1d74:	00001bcd 	.word	0x00001bcd
    1d78:	00001be9 	.word	0x00001be9
    1d7c:	2000033c 	.word	0x2000033c

00001d80 <GPIO_0_Handler>:

/**
 * GPIO handler 0 (PA 0..7)
 */
void GPIO_0_Handler(void)
{
    1d80:	b580      	push	{r7, lr}
    1d82:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOA, GPIO_INT_GROUP_MASK);
    1d84:	21ff      	movs	r1, #255	; 0xff
    1d86:	2000      	movs	r0, #0
    1d88:	4b01      	ldr	r3, [pc, #4]	; (1d90 <GPIO_0_Handler+0x10>)
    1d8a:	4798      	blx	r3
}
    1d8c:	bf00      	nop
    1d8e:	bd80      	pop	{r7, pc}
    1d90:	00001ce5 	.word	0x00001ce5

00001d94 <GPIO_1_Handler>:

/**
 * GPIO handler 1 (PA 8..15)
 */
void GPIO_1_Handler(void)
{
    1d94:	b580      	push	{r7, lr}
    1d96:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 8));
    1d98:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    1d9c:	2000      	movs	r0, #0
    1d9e:	4b02      	ldr	r3, [pc, #8]	; (1da8 <GPIO_1_Handler+0x14>)
    1da0:	4798      	blx	r3
}
    1da2:	bf00      	nop
    1da4:	bd80      	pop	{r7, pc}
    1da6:	bf00      	nop
    1da8:	00001ce5 	.word	0x00001ce5

00001dac <GPIO_2_Handler>:

/**
 * GPIO handler 2 (PA 16..23)
 */
void GPIO_2_Handler(void)
{
    1dac:	b580      	push	{r7, lr}
    1dae:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 16));
    1db0:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    1db4:	2000      	movs	r0, #0
    1db6:	4b02      	ldr	r3, [pc, #8]	; (1dc0 <GPIO_2_Handler+0x14>)
    1db8:	4798      	blx	r3
}
    1dba:	bf00      	nop
    1dbc:	bd80      	pop	{r7, pc}
    1dbe:	bf00      	nop
    1dc0:	00001ce5 	.word	0x00001ce5

00001dc4 <GPIO_3_Handler>:

/**
 * GPIO handler 3 (PA 24..31)
 */
void GPIO_3_Handler(void)
{
    1dc4:	b580      	push	{r7, lr}
    1dc6:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 24));
    1dc8:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    1dcc:	2000      	movs	r0, #0
    1dce:	4b02      	ldr	r3, [pc, #8]	; (1dd8 <GPIO_3_Handler+0x14>)
    1dd0:	4798      	blx	r3
}
    1dd2:	bf00      	nop
    1dd4:	bd80      	pop	{r7, pc}
    1dd6:	bf00      	nop
    1dd8:	00001ce5 	.word	0x00001ce5

00001ddc <GPIO_4_Handler>:

/**
 * GPIO handler 4 (PB 0..7)
 */
void GPIO_4_Handler(void)
{
    1ddc:	b580      	push	{r7, lr}
    1dde:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOB, GPIO_INT_GROUP_MASK);
    1de0:	21ff      	movs	r1, #255	; 0xff
    1de2:	2001      	movs	r0, #1
    1de4:	4b01      	ldr	r3, [pc, #4]	; (1dec <GPIO_4_Handler+0x10>)
    1de6:	4798      	blx	r3
}
    1de8:	bf00      	nop
    1dea:	bd80      	pop	{r7, pc}
    1dec:	00001ce5 	.word	0x00001ce5

00001df0 <GPIO_5_Handler>:

/**
 * GPIO handler 5 (PB 8..15)
 */
void GPIO_5_Handler(void)
{
    1df0:	b580      	push	{r7, lr}
    1df2:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 8));
    1df4:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    1df8:	2001      	movs	r0, #1
    1dfa:	4b02      	ldr	r3, [pc, #8]	; (1e04 <GPIO_5_Handler+0x14>)
    1dfc:	4798      	blx	r3
}
    1dfe:	bf00      	nop
    1e00:	bd80      	pop	{r7, pc}
    1e02:	bf00      	nop
    1e04:	00001ce5 	.word	0x00001ce5

00001e08 <GPIO_6_Handler>:

/**
 * GPIO handler 6 (PB 16..23)
 */
void GPIO_6_Handler(void)
{
    1e08:	b580      	push	{r7, lr}
    1e0a:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 16));
    1e0c:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    1e10:	2001      	movs	r0, #1
    1e12:	4b02      	ldr	r3, [pc, #8]	; (1e1c <GPIO_6_Handler+0x14>)
    1e14:	4798      	blx	r3
}
    1e16:	bf00      	nop
    1e18:	bd80      	pop	{r7, pc}
    1e1a:	bf00      	nop
    1e1c:	00001ce5 	.word	0x00001ce5

00001e20 <GPIO_7_Handler>:

/**
 * GPIO handler 7 (PB 24..31)
 */
void GPIO_7_Handler(void)
{
    1e20:	b580      	push	{r7, lr}
    1e22:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 24));
    1e24:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    1e28:	2001      	movs	r0, #1
    1e2a:	4b02      	ldr	r3, [pc, #8]	; (1e34 <GPIO_7_Handler+0x14>)
    1e2c:	4798      	blx	r3
}
    1e2e:	bf00      	nop
    1e30:	bd80      	pop	{r7, pc}
    1e32:	bf00      	nop
    1e34:	00001ce5 	.word	0x00001ce5

00001e38 <GPIO_8_Handler>:

/**
 * GPIO handler 8 (PC 0..7)
 */
void GPIO_8_Handler(void)
{
    1e38:	b580      	push	{r7, lr}
    1e3a:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOC, GPIO_INT_GROUP_MASK);
    1e3c:	21ff      	movs	r1, #255	; 0xff
    1e3e:	2002      	movs	r0, #2
    1e40:	4b01      	ldr	r3, [pc, #4]	; (1e48 <GPIO_8_Handler+0x10>)
    1e42:	4798      	blx	r3
}
    1e44:	bf00      	nop
    1e46:	bd80      	pop	{r7, pc}
    1e48:	00001ce5 	.word	0x00001ce5

00001e4c <GPIO_9_Handler>:

/**
 * GPIO handler 9 (PC 8..15)
 */
void GPIO_9_Handler(void)
{
    1e4c:	b580      	push	{r7, lr}
    1e4e:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 8));
    1e50:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    1e54:	2002      	movs	r0, #2
    1e56:	4b02      	ldr	r3, [pc, #8]	; (1e60 <GPIO_9_Handler+0x14>)
    1e58:	4798      	blx	r3
}
    1e5a:	bf00      	nop
    1e5c:	bd80      	pop	{r7, pc}
    1e5e:	bf00      	nop
    1e60:	00001ce5 	.word	0x00001ce5

00001e64 <GPIO_10_Handler>:

/**
 * GPIO handler 10 (PC 16..23)
 */
void GPIO_10_Handler(void)
{
    1e64:	b580      	push	{r7, lr}
    1e66:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 16));
    1e68:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    1e6c:	2002      	movs	r0, #2
    1e6e:	4b02      	ldr	r3, [pc, #8]	; (1e78 <GPIO_10_Handler+0x14>)
    1e70:	4798      	blx	r3
}
    1e72:	bf00      	nop
    1e74:	bd80      	pop	{r7, pc}
    1e76:	bf00      	nop
    1e78:	00001ce5 	.word	0x00001ce5

00001e7c <GPIO_11_Handler>:

/**
 * GPIO handler 11 (PC 24..31)
 */
void GPIO_11_Handler(void)
{
    1e7c:	b580      	push	{r7, lr}
    1e7e:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 24));
    1e80:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    1e84:	2002      	movs	r0, #2
    1e86:	4b02      	ldr	r3, [pc, #8]	; (1e90 <GPIO_11_Handler+0x14>)
    1e88:	4798      	blx	r3
}
    1e8a:	bf00      	nop
    1e8c:	bd80      	pop	{r7, pc}
    1e8e:	bf00      	nop
    1e90:	00001ce5 	.word	0x00001ce5

00001e94 <cpu_irq_save>:
{
    1e94:	b480      	push	{r7}
    1e96:	b083      	sub	sp, #12
    1e98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1e9a:	f3ef 8310 	mrs	r3, PRIMASK
    1e9e:	607b      	str	r3, [r7, #4]
  return(result);
    1ea0:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1ea2:	2b00      	cmp	r3, #0
    1ea4:	bf0c      	ite	eq
    1ea6:	2301      	moveq	r3, #1
    1ea8:	2300      	movne	r3, #0
    1eaa:	b2db      	uxtb	r3, r3
    1eac:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1eae:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1eb0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1eb4:	4b04      	ldr	r3, [pc, #16]	; (1ec8 <cpu_irq_save+0x34>)
    1eb6:	2200      	movs	r2, #0
    1eb8:	701a      	strb	r2, [r3, #0]
	return flags;
    1eba:	683b      	ldr	r3, [r7, #0]
}
    1ebc:	4618      	mov	r0, r3
    1ebe:	370c      	adds	r7, #12
    1ec0:	46bd      	mov	sp, r7
    1ec2:	bc80      	pop	{r7}
    1ec4:	4770      	bx	lr
    1ec6:	bf00      	nop
    1ec8:	20000074 	.word	0x20000074

00001ecc <cpu_irq_is_enabled_flags>:
{
    1ecc:	b480      	push	{r7}
    1ece:	b083      	sub	sp, #12
    1ed0:	af00      	add	r7, sp, #0
    1ed2:	6078      	str	r0, [r7, #4]
	return (flags);
    1ed4:	687b      	ldr	r3, [r7, #4]
    1ed6:	2b00      	cmp	r3, #0
    1ed8:	bf14      	ite	ne
    1eda:	2301      	movne	r3, #1
    1edc:	2300      	moveq	r3, #0
    1ede:	b2db      	uxtb	r3, r3
}
    1ee0:	4618      	mov	r0, r3
    1ee2:	370c      	adds	r7, #12
    1ee4:	46bd      	mov	sp, r7
    1ee6:	bc80      	pop	{r7}
    1ee8:	4770      	bx	lr
	...

00001eec <cpu_irq_restore>:
{
    1eec:	b580      	push	{r7, lr}
    1eee:	b082      	sub	sp, #8
    1ef0:	af00      	add	r7, sp, #0
    1ef2:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    1ef4:	6878      	ldr	r0, [r7, #4]
    1ef6:	4b07      	ldr	r3, [pc, #28]	; (1f14 <cpu_irq_restore+0x28>)
    1ef8:	4798      	blx	r3
    1efa:	4603      	mov	r3, r0
    1efc:	2b00      	cmp	r3, #0
    1efe:	d005      	beq.n	1f0c <cpu_irq_restore+0x20>
		cpu_irq_enable();
    1f00:	4b05      	ldr	r3, [pc, #20]	; (1f18 <cpu_irq_restore+0x2c>)
    1f02:	2201      	movs	r2, #1
    1f04:	701a      	strb	r2, [r3, #0]
    1f06:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1f0a:	b662      	cpsie	i
}
    1f0c:	bf00      	nop
    1f0e:	3708      	adds	r7, #8
    1f10:	46bd      	mov	sp, r7
    1f12:	bd80      	pop	{r7, pc}
    1f14:	00001ecd 	.word	0x00001ecd
    1f18:	20000074 	.word	0x20000074

00001f1c <osc_enable>:
extern void osc_priv_disable_rcfast(void);
extern void osc_priv_enable_rc1m(void);
extern void osc_priv_disable_rc1m(void);

static inline void osc_enable(uint8_t id)
{
    1f1c:	b580      	push	{r7, lr}
    1f1e:	b082      	sub	sp, #8
    1f20:	af00      	add	r7, sp, #0
    1f22:	4603      	mov	r3, r0
    1f24:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    1f26:	79fb      	ldrb	r3, [r7, #7]
    1f28:	2b06      	cmp	r3, #6
    1f2a:	d823      	bhi.n	1f74 <osc_enable+0x58>
    1f2c:	a201      	add	r2, pc, #4	; (adr r2, 1f34 <osc_enable+0x18>)
    1f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1f32:	bf00      	nop
    1f34:	00001f51 	.word	0x00001f51
    1f38:	00001f57 	.word	0x00001f57
    1f3c:	00001f5d 	.word	0x00001f5d
    1f40:	00001f63 	.word	0x00001f63
    1f44:	00001f69 	.word	0x00001f69
    1f48:	00001f6f 	.word	0x00001f6f
    1f4c:	00001f75 	.word	0x00001f75
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
    1f50:	4b0b      	ldr	r3, [pc, #44]	; (1f80 <osc_enable+0x64>)
    1f52:	4798      	blx	r3
		break;
    1f54:	e00f      	b.n	1f76 <osc_enable+0x5a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
    1f56:	4b0b      	ldr	r3, [pc, #44]	; (1f84 <osc_enable+0x68>)
    1f58:	4798      	blx	r3
		break;
    1f5a:	e00c      	b.n	1f76 <osc_enable+0x5a>
#endif

	case OSC_ID_RC32K:
		osc_priv_enable_rc32k();
    1f5c:	4b0a      	ldr	r3, [pc, #40]	; (1f88 <osc_enable+0x6c>)
    1f5e:	4798      	blx	r3
		break;
    1f60:	e009      	b.n	1f76 <osc_enable+0x5a>

	case OSC_ID_RC80M:
		osc_priv_enable_rc80m();
    1f62:	4b0a      	ldr	r3, [pc, #40]	; (1f8c <osc_enable+0x70>)
    1f64:	4798      	blx	r3
		break;
    1f66:	e006      	b.n	1f76 <osc_enable+0x5a>

	case OSC_ID_RCFAST:
		osc_priv_enable_rcfast();
    1f68:	4b09      	ldr	r3, [pc, #36]	; (1f90 <osc_enable+0x74>)
    1f6a:	4798      	blx	r3
		break;
    1f6c:	e003      	b.n	1f76 <osc_enable+0x5a>

	case OSC_ID_RC1M:
		osc_priv_enable_rc1m();
    1f6e:	4b09      	ldr	r3, [pc, #36]	; (1f94 <osc_enable+0x78>)
    1f70:	4798      	blx	r3
		break;
    1f72:	e000      	b.n	1f76 <osc_enable+0x5a>
		/* RCSYS is always running */
		break;

	default:
		/* unhandled_case(id); */
		break;
    1f74:	bf00      	nop
	}
}
    1f76:	bf00      	nop
    1f78:	3708      	adds	r7, #8
    1f7a:	46bd      	mov	sp, r7
    1f7c:	bd80      	pop	{r7, pc}
    1f7e:	bf00      	nop
    1f80:	00003021 	.word	0x00003021
    1f84:	0000305d 	.word	0x0000305d
    1f88:	00003099 	.word	0x00003099
    1f8c:	00003119 	.word	0x00003119
    1f90:	00003159 	.word	0x00003159
    1f94:	000030d9 	.word	0x000030d9

00001f98 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint8_t id)
{
    1f98:	b480      	push	{r7}
    1f9a:	b083      	sub	sp, #12
    1f9c:	af00      	add	r7, sp, #0
    1f9e:	4603      	mov	r3, r0
    1fa0:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    1fa2:	79fb      	ldrb	r3, [r7, #7]
    1fa4:	2b06      	cmp	r3, #6
    1fa6:	d84f      	bhi.n	2048 <osc_is_ready+0xb0>
    1fa8:	a201      	add	r2, pc, #4	; (adr r2, 1fb0 <osc_is_ready+0x18>)
    1faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1fae:	bf00      	nop
    1fb0:	00001fcd 	.word	0x00001fcd
    1fb4:	00001fe1 	.word	0x00001fe1
    1fb8:	00001ff5 	.word	0x00001ff5
    1fbc:	00002009 	.word	0x00002009
    1fc0:	0000201d 	.word	0x0000201d
    1fc4:	00002031 	.word	0x00002031
    1fc8:	00002045 	.word	0x00002045
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
    1fcc:	4b21      	ldr	r3, [pc, #132]	; (2054 <osc_is_ready+0xbc>)
    1fce:	695b      	ldr	r3, [r3, #20]
    1fd0:	f003 0301 	and.w	r3, r3, #1
    1fd4:	2b00      	cmp	r3, #0
    1fd6:	bf14      	ite	ne
    1fd8:	2301      	movne	r3, #1
    1fda:	2300      	moveq	r3, #0
    1fdc:	b2db      	uxtb	r3, r3
    1fde:	e034      	b.n	204a <osc_is_ready+0xb2>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
    1fe0:	4b1d      	ldr	r3, [pc, #116]	; (2058 <osc_is_ready+0xc0>)
    1fe2:	695b      	ldr	r3, [r3, #20]
    1fe4:	f003 0301 	and.w	r3, r3, #1
    1fe8:	2b00      	cmp	r3, #0
    1fea:	bf14      	ite	ne
    1fec:	2301      	movne	r3, #1
    1fee:	2300      	moveq	r3, #0
    1ff0:	b2db      	uxtb	r3, r3
    1ff2:	e02a      	b.n	204a <osc_is_ready+0xb2>
#endif

	case OSC_ID_RC32K:
		return !!(BSCIF->BSCIF_RC32KCR & (BSCIF_RC32KCR_EN));
    1ff4:	4b18      	ldr	r3, [pc, #96]	; (2058 <osc_is_ready+0xc0>)
    1ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1ff8:	f003 0301 	and.w	r3, r3, #1
    1ffc:	2b00      	cmp	r3, #0
    1ffe:	bf14      	ite	ne
    2000:	2301      	movne	r3, #1
    2002:	2300      	moveq	r3, #0
    2004:	b2db      	uxtb	r3, r3
    2006:	e020      	b.n	204a <osc_is_ready+0xb2>

	case OSC_ID_RC80M:
		return !!(SCIF->SCIF_RC80MCR & (SCIF_RC80MCR_EN));
    2008:	4b12      	ldr	r3, [pc, #72]	; (2054 <osc_is_ready+0xbc>)
    200a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    200c:	f003 0301 	and.w	r3, r3, #1
    2010:	2b00      	cmp	r3, #0
    2012:	bf14      	ite	ne
    2014:	2301      	movne	r3, #1
    2016:	2300      	moveq	r3, #0
    2018:	b2db      	uxtb	r3, r3
    201a:	e016      	b.n	204a <osc_is_ready+0xb2>

	case OSC_ID_RCFAST:
		return !!(SCIF->SCIF_RCFASTCFG & (SCIF_RCFASTCFG_EN));
    201c:	4b0d      	ldr	r3, [pc, #52]	; (2054 <osc_is_ready+0xbc>)
    201e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2020:	f003 0301 	and.w	r3, r3, #1
    2024:	2b00      	cmp	r3, #0
    2026:	bf14      	ite	ne
    2028:	2301      	movne	r3, #1
    202a:	2300      	moveq	r3, #0
    202c:	b2db      	uxtb	r3, r3
    202e:	e00c      	b.n	204a <osc_is_ready+0xb2>

	case OSC_ID_RC1M:
		return !!(BSCIF->BSCIF_RC1MCR & (BSCIF_RC1MCR_CLKOE));
    2030:	4b09      	ldr	r3, [pc, #36]	; (2058 <osc_is_ready+0xc0>)
    2032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2034:	f003 0301 	and.w	r3, r3, #1
    2038:	2b00      	cmp	r3, #0
    203a:	bf14      	ite	ne
    203c:	2301      	movne	r3, #1
    203e:	2300      	moveq	r3, #0
    2040:	b2db      	uxtb	r3, r3
    2042:	e002      	b.n	204a <osc_is_ready+0xb2>

	case OSC_ID_RCSYS:
		/* RCSYS is always ready */
		return true;
    2044:	2301      	movs	r3, #1
    2046:	e000      	b.n	204a <osc_is_ready+0xb2>

	default:
		/* unhandled_case(id); */
		return false;
    2048:	2300      	movs	r3, #0
	}
}
    204a:	4618      	mov	r0, r3
    204c:	370c      	adds	r7, #12
    204e:	46bd      	mov	sp, r7
    2050:	bc80      	pop	{r7}
    2052:	4770      	bx	lr
    2054:	400e0800 	.word	0x400e0800
    2058:	400f0400 	.word	0x400f0400

0000205c <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
    205c:	b580      	push	{r7, lr}
    205e:	b082      	sub	sp, #8
    2060:	af00      	add	r7, sp, #0
    2062:	4603      	mov	r3, r0
    2064:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
    2066:	bf00      	nop
    2068:	79fb      	ldrb	r3, [r7, #7]
    206a:	4618      	mov	r0, r3
    206c:	4b05      	ldr	r3, [pc, #20]	; (2084 <osc_wait_ready+0x28>)
    206e:	4798      	blx	r3
    2070:	4603      	mov	r3, r0
    2072:	f083 0301 	eor.w	r3, r3, #1
    2076:	b2db      	uxtb	r3, r3
    2078:	2b00      	cmp	r3, #0
    207a:	d1f5      	bne.n	2068 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
    207c:	bf00      	nop
    207e:	3708      	adds	r7, #8
    2080:	46bd      	mov	sp, r7
    2082:	bd80      	pop	{r7, pc}
    2084:	00001f99 	.word	0x00001f99

00002088 <lcdca_clear_status>:

/**
 * \brief Clear the LCDCA beginning of frame interrupt status.
 */
static inline void lcdca_clear_status(void)
{
    2088:	b480      	push	{r7}
    208a:	af00      	add	r7, sp, #0
	LCDCA->LCDCA_SCR = LCDCA_SCR_FC0R;
    208c:	4b03      	ldr	r3, [pc, #12]	; (209c <lcdca_clear_status+0x14>)
    208e:	2201      	movs	r2, #1
    2090:	611a      	str	r2, [r3, #16]
}
    2092:	bf00      	nop
    2094:	46bd      	mov	sp, r7
    2096:	bc80      	pop	{r7}
    2098:	4770      	bx	lr
    209a:	bf00      	nop
    209c:	40080000 	.word	0x40080000

000020a0 <sleepmgr_lock_mode>:
{
    20a0:	b580      	push	{r7, lr}
    20a2:	b084      	sub	sp, #16
    20a4:	af00      	add	r7, sp, #0
    20a6:	4603      	mov	r3, r0
    20a8:	71fb      	strb	r3, [r7, #7]
	if(sleepmgr_locks[mode] >= 0xff) {
    20aa:	79fb      	ldrb	r3, [r7, #7]
    20ac:	4a0a      	ldr	r2, [pc, #40]	; (20d8 <sleepmgr_lock_mode+0x38>)
    20ae:	5cd3      	ldrb	r3, [r2, r3]
    20b0:	2bff      	cmp	r3, #255	; 0xff
    20b2:	d100      	bne.n	20b6 <sleepmgr_lock_mode+0x16>
		while (true) {
    20b4:	e7fe      	b.n	20b4 <sleepmgr_lock_mode+0x14>
	flags = cpu_irq_save();
    20b6:	4b09      	ldr	r3, [pc, #36]	; (20dc <sleepmgr_lock_mode+0x3c>)
    20b8:	4798      	blx	r3
    20ba:	60f8      	str	r0, [r7, #12]
	++sleepmgr_locks[mode];
    20bc:	79fb      	ldrb	r3, [r7, #7]
    20be:	4a06      	ldr	r2, [pc, #24]	; (20d8 <sleepmgr_lock_mode+0x38>)
    20c0:	5cd2      	ldrb	r2, [r2, r3]
    20c2:	3201      	adds	r2, #1
    20c4:	b2d1      	uxtb	r1, r2
    20c6:	4a04      	ldr	r2, [pc, #16]	; (20d8 <sleepmgr_lock_mode+0x38>)
    20c8:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
    20ca:	68f8      	ldr	r0, [r7, #12]
    20cc:	4b04      	ldr	r3, [pc, #16]	; (20e0 <sleepmgr_lock_mode+0x40>)
    20ce:	4798      	blx	r3
}
    20d0:	bf00      	nop
    20d2:	3710      	adds	r7, #16
    20d4:	46bd      	mov	sp, r7
    20d6:	bd80      	pop	{r7, pc}
    20d8:	20000388 	.word	0x20000388
    20dc:	00001e95 	.word	0x00001e95
    20e0:	00001eed 	.word	0x00001eed

000020e4 <lcdca_clk_init>:

/**
 * \brief LCDCA clock initialization.
 */
void lcdca_clk_init(void)
{
    20e4:	b580      	push	{r7, lr}
    20e6:	af00      	add	r7, sp, #0
	/* Enable APB clock for LCDCA */
	sysclk_enable_peripheral_clock(LCDCA);
    20e8:	480b      	ldr	r0, [pc, #44]	; (2118 <lcdca_clk_init+0x34>)
    20ea:	4b0c      	ldr	r3, [pc, #48]	; (211c <lcdca_clk_init+0x38>)
    20ec:	4798      	blx	r3

	/* Switch LCD input to selected source clock */
#if (CONF_LCDCA_SOURCE_CLK == OSC_ID_OSC32)
	if (!osc_is_ready(OSC_ID_OSC32)) {
    20ee:	2001      	movs	r0, #1
    20f0:	4b0b      	ldr	r3, [pc, #44]	; (2120 <lcdca_clk_init+0x3c>)
    20f2:	4798      	blx	r3
    20f4:	4603      	mov	r3, r0
    20f6:	f083 0301 	eor.w	r3, r3, #1
    20fa:	b2db      	uxtb	r3, r3
    20fc:	2b00      	cmp	r3, #0
    20fe:	d005      	beq.n	210c <lcdca_clk_init+0x28>
		osc_enable(OSC_ID_OSC32);
    2100:	2001      	movs	r0, #1
    2102:	4b08      	ldr	r3, [pc, #32]	; (2124 <lcdca_clk_init+0x40>)
    2104:	4798      	blx	r3
		osc_wait_ready(OSC_ID_OSC32);
    2106:	2001      	movs	r0, #1
    2108:	4b07      	ldr	r3, [pc, #28]	; (2128 <lcdca_clk_init+0x44>)
    210a:	4798      	blx	r3
	}
	bpm_set_clk32_source(BPM, BPM_CLK32_SOURCE_OSC32K);
    210c:	2100      	movs	r1, #0
    210e:	4807      	ldr	r0, [pc, #28]	; (212c <lcdca_clk_init+0x48>)
    2110:	4b07      	ldr	r3, [pc, #28]	; (2130 <lcdca_clk_init+0x4c>)
    2112:	4798      	blx	r3
		osc_enable(OSC_ID_RC32K);
		osc_wait_ready(OSC_ID_RC32K);
	}
	bpm_set_clk32_source(BPM, BPM_CLK32_SOURCE_RC32K);
#endif
}
    2114:	bf00      	nop
    2116:	bd80      	pop	{r7, pc}
    2118:	40080000 	.word	0x40080000
    211c:	00003899 	.word	0x00003899
    2120:	00001f99 	.word	0x00001f99
    2124:	00001f1d 	.word	0x00001f1d
    2128:	0000205d 	.word	0x0000205d
    212c:	400f0000 	.word	0x400f0000
    2130:	00004711 	.word	0x00004711

00002134 <lcdca_set_config>:
 *
 * \param[in] lcdca_cfg Pointer to an LCDCA configuration structure
 */
void lcdca_set_config(
		struct lcdca_config *lcdca_cfg)
{
    2134:	b580      	push	{r7, lr}
    2136:	b082      	sub	sp, #8
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(lcdca_cfg);
	
	/* Disable LCD controller and frame counter timer */
	LCDCA->LCDCA_CR = LCDCA_CR_DIS | LCDCA_CR_FC0DIS | LCDCA_CR_FC1DIS |
    213c:	4b22      	ldr	r3, [pc, #136]	; (21c8 <lcdca_set_config+0x94>)
    213e:	2255      	movs	r2, #85	; 0x55
    2140:	601a      	str	r2, [r3, #0]
		LCDCA_CR_FC2DIS;
	/* Set new timer */
	LCDCA->LCDCA_TIM = LCDCA_TIM_FC2(lcdca_cfg->fc2) |
    2142:	4921      	ldr	r1, [pc, #132]	; (21c8 <lcdca_set_config+0x94>)
    2144:	687b      	ldr	r3, [r7, #4]
    2146:	7a1b      	ldrb	r3, [r3, #8]
    2148:	061b      	lsls	r3, r3, #24
    214a:	f003 52f8 	and.w	r2, r3, #520093696	; 0x1f000000
			LCDCA_TIM_FC1(lcdca_cfg->fc1) |
    214e:	687b      	ldr	r3, [r7, #4]
    2150:	79db      	ldrb	r3, [r3, #7]
    2152:	041b      	lsls	r3, r3, #16
    2154:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
	LCDCA->LCDCA_TIM = LCDCA_TIM_FC2(lcdca_cfg->fc2) |
    2158:	431a      	orrs	r2, r3
			LCDCA_TIM_FC0(lcdca_cfg->fc0) |
    215a:	687b      	ldr	r3, [r7, #4]
    215c:	799b      	ldrb	r3, [r3, #6]
    215e:	021b      	lsls	r3, r3, #8
    2160:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
			LCDCA_TIM_FC1(lcdca_cfg->fc1) |
    2164:	431a      	orrs	r2, r3
			LCDCA_TIM_CLKDIV(lcdca_cfg->lcd_clkdiv) |
    2166:	687b      	ldr	r3, [r7, #4]
    2168:	795b      	ldrb	r3, [r3, #5]
    216a:	005b      	lsls	r3, r3, #1
    216c:	f003 030e 	and.w	r3, r3, #14
			LCDCA_TIM_FC0(lcdca_cfg->fc0) |
    2170:	4313      	orrs	r3, r2
			(uint32_t)lcdca_cfg->lcd_pres;
    2172:	687a      	ldr	r2, [r7, #4]
    2174:	7912      	ldrb	r2, [r2, #4]
			LCDCA_TIM_CLKDIV(lcdca_cfg->lcd_clkdiv) |
    2176:	4313      	orrs	r3, r2
	LCDCA->LCDCA_TIM = LCDCA_TIM_FC2(lcdca_cfg->fc2) |
    2178:	608b      	str	r3, [r1, #8]

	/* Set basic configuration */
	LCDCA->LCDCA_CFG = LCDCA_CFG_NSU(lcdca_cfg->port_mask) |
    217a:	4913      	ldr	r1, [pc, #76]	; (21c8 <lcdca_set_config+0x94>)
    217c:	687b      	ldr	r3, [r7, #4]
    217e:	781b      	ldrb	r3, [r3, #0]
    2180:	061b      	lsls	r3, r3, #24
    2182:	f003 527c 	and.w	r2, r3, #1056964608	; 0x3f000000
			(lcdca_cfg->x_bias ? LCDCA_CFG_XBIAS : 0) |
    2186:	687b      	ldr	r3, [r7, #4]
    2188:	785b      	ldrb	r3, [r3, #1]
    218a:	2b00      	cmp	r3, #0
    218c:	d001      	beq.n	2192 <lcdca_set_config+0x5e>
    218e:	2301      	movs	r3, #1
    2190:	e000      	b.n	2194 <lcdca_set_config+0x60>
    2192:	2300      	movs	r3, #0
	LCDCA->LCDCA_CFG = LCDCA_CFG_NSU(lcdca_cfg->port_mask) |
    2194:	431a      	orrs	r2, r3
			(lcdca_cfg->lp_wave ? 0 : LCDCA_CFG_WMOD) |
    2196:	687b      	ldr	r3, [r7, #4]
    2198:	789b      	ldrb	r3, [r3, #2]
    219a:	2b00      	cmp	r3, #0
    219c:	d001      	beq.n	21a2 <lcdca_set_config+0x6e>
    219e:	2300      	movs	r3, #0
    21a0:	e000      	b.n	21a4 <lcdca_set_config+0x70>
    21a2:	2302      	movs	r3, #2
			(lcdca_cfg->x_bias ? LCDCA_CFG_XBIAS : 0) |
    21a4:	431a      	orrs	r2, r3
			LCDCA_CFG_DUTY(lcdca_cfg->duty_type);
    21a6:	687b      	ldr	r3, [r7, #4]
    21a8:	78db      	ldrb	r3, [r3, #3]
    21aa:	021b      	lsls	r3, r3, #8
    21ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
			(lcdca_cfg->lp_wave ? 0 : LCDCA_CFG_WMOD) |
    21b0:	4313      	orrs	r3, r2
	LCDCA->LCDCA_CFG = LCDCA_CFG_NSU(lcdca_cfg->port_mask) |
    21b2:	604b      	str	r3, [r1, #4]

	/* Set contrast */
	lcdca_set_contrast(lcdca_cfg->contrast);
    21b4:	687b      	ldr	r3, [r7, #4]
    21b6:	f993 3009 	ldrsb.w	r3, [r3, #9]
    21ba:	4618      	mov	r0, r3
    21bc:	4b03      	ldr	r3, [pc, #12]	; (21cc <lcdca_set_config+0x98>)
    21be:	4798      	blx	r3
}
    21c0:	bf00      	nop
    21c2:	3708      	adds	r7, #8
    21c4:	46bd      	mov	sp, r7
    21c6:	bd80      	pop	{r7, pc}
    21c8:	40080000 	.word	0x40080000
    21cc:	00002211 	.word	0x00002211

000021d0 <lcdca_enable>:

/**
 * \brief Enable the LCDCA module.
 */
void lcdca_enable(void)
{
    21d0:	b580      	push	{r7, lr}
    21d2:	af00      	add	r7, sp, #0
	sleepmgr_lock_mode(SLEEPMGR_RET);
    21d4:	2006      	movs	r0, #6
    21d6:	4b0c      	ldr	r3, [pc, #48]	; (2208 <lcdca_enable+0x38>)
    21d8:	4798      	blx	r3
	/* Enable all display memory */
	LCDCA->LCDCA_CFG &= ~LCDCA_CFG_BLANK;
    21da:	4a0c      	ldr	r2, [pc, #48]	; (220c <lcdca_enable+0x3c>)
    21dc:	4b0b      	ldr	r3, [pc, #44]	; (220c <lcdca_enable+0x3c>)
    21de:	685b      	ldr	r3, [r3, #4]
    21e0:	f023 0304 	bic.w	r3, r3, #4
    21e4:	6053      	str	r3, [r2, #4]
	LCDCA->LCDCA_CR = LCDCA_CR_EN;
    21e6:	4b09      	ldr	r3, [pc, #36]	; (220c <lcdca_enable+0x3c>)
    21e8:	2202      	movs	r2, #2
    21ea:	601a      	str	r2, [r3, #0]
	/* Clear all display memory */
	LCDCA->LCDCA_CR = LCDCA_CR_CDM;
    21ec:	4b07      	ldr	r3, [pc, #28]	; (220c <lcdca_enable+0x3c>)
    21ee:	f44f 7280 	mov.w	r2, #256	; 0x100
    21f2:	601a      	str	r2, [r3, #0]
	/* Wait enable signal */
	while (!(LCDCA->LCDCA_SR & LCDCA_SR_EN)) {
    21f4:	bf00      	nop
    21f6:	4b05      	ldr	r3, [pc, #20]	; (220c <lcdca_enable+0x3c>)
    21f8:	68db      	ldr	r3, [r3, #12]
    21fa:	f003 0310 	and.w	r3, r3, #16
    21fe:	2b00      	cmp	r3, #0
    2200:	d0f9      	beq.n	21f6 <lcdca_enable+0x26>
	}
}
    2202:	bf00      	nop
    2204:	bd80      	pop	{r7, pc}
    2206:	bf00      	nop
    2208:	000020a1 	.word	0x000020a1
    220c:	40080000 	.word	0x40080000

00002210 <lcdca_set_contrast>:
 *
 * \param[in] contrast Contrast value (range -32 to 31 inclusive)
 */
void lcdca_set_contrast(
		int8_t contrast)
{
    2210:	b480      	push	{r7}
    2212:	b087      	sub	sp, #28
    2214:	af00      	add	r7, sp, #0
    2216:	4603      	mov	r3, r0
    2218:	71fb      	strb	r3, [r7, #7]
	uint32_t cfg = LCDCA->LCDCA_CFG;
    221a:	4b13      	ldr	r3, [pc, #76]	; (2268 <lcdca_set_contrast+0x58>)
    221c:	685b      	ldr	r3, [r3, #4]
    221e:	613b      	str	r3, [r7, #16]
	uint32_t fcst_filed;
	int8_t fcst_val_msk = (LCDCA_CFG_FCST_Msk >> (LCDCA_CFG_FCST_Pos + 1));
    2220:	231f      	movs	r3, #31
    2222:	73fb      	strb	r3, [r7, #15]
	int8_t fcst_sign_msk = ((LCDCA_CFG_FCST_Msk >> LCDCA_CFG_FCST_Pos) + 1) >> 1;
    2224:	2320      	movs	r3, #32
    2226:	73bb      	strb	r3, [r7, #14]

	/* Clear previous contrast value */
	cfg &= ~LCDCA_CFG_FCST_Msk;
    2228:	693b      	ldr	r3, [r7, #16]
    222a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
    222e:	613b      	str	r3, [r7, #16]
	/*
	 * Convert contrast value to the value in FCST field:
	 * FCST is a signed number (two's complement).
	 */
	fcst_filed = (contrast & fcst_val_msk);
    2230:	79fa      	ldrb	r2, [r7, #7]
    2232:	7bfb      	ldrb	r3, [r7, #15]
    2234:	4013      	ands	r3, r2
    2236:	b25b      	sxtb	r3, r3
    2238:	617b      	str	r3, [r7, #20]
	if (contrast < 0) {
    223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    223e:	2b00      	cmp	r3, #0
    2240:	da04      	bge.n	224c <lcdca_set_contrast+0x3c>
		fcst_filed |= fcst_sign_msk;
    2242:	f997 300e 	ldrsb.w	r3, [r7, #14]
    2246:	697a      	ldr	r2, [r7, #20]
    2248:	4313      	orrs	r3, r2
    224a:	617b      	str	r3, [r7, #20]
	}
	/* Write new value */
	LCDCA->LCDCA_CFG = cfg | LCDCA_CFG_FCST(fcst_filed);
    224c:	4906      	ldr	r1, [pc, #24]	; (2268 <lcdca_set_contrast+0x58>)
    224e:	697b      	ldr	r3, [r7, #20]
    2250:	041b      	lsls	r3, r3, #16
    2252:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
    2256:	693b      	ldr	r3, [r7, #16]
    2258:	4313      	orrs	r3, r2
    225a:	604b      	str	r3, [r1, #4]
}
    225c:	bf00      	nop
    225e:	371c      	adds	r7, #28
    2260:	46bd      	mov	sp, r7
    2262:	bc80      	pop	{r7}
    2264:	4770      	bx	lr
    2266:	bf00      	nop
    2268:	40080000 	.word	0x40080000

0000226c <lcdca_enable_timer>:
 *
 * \param[in] lcd_timer Timer number to be enabled
 */
void lcdca_enable_timer(
		uint8_t lcd_timer)
{
    226c:	b480      	push	{r7}
    226e:	b083      	sub	sp, #12
    2270:	af00      	add	r7, sp, #0
    2272:	4603      	mov	r3, r0
    2274:	71fb      	strb	r3, [r7, #7]
	if (lcd_timer == LCDCA_TIMER_FC0) {
    2276:	79fb      	ldrb	r3, [r7, #7]
    2278:	2b00      	cmp	r3, #0
    227a:	d10a      	bne.n	2292 <lcdca_enable_timer+0x26>
		LCDCA->LCDCA_CR = LCDCA_CR_FC0EN;
    227c:	4b15      	ldr	r3, [pc, #84]	; (22d4 <lcdca_enable_timer+0x68>)
    227e:	2208      	movs	r2, #8
    2280:	601a      	str	r2, [r3, #0]
		while (!(LCDCA->LCDCA_SR & LCDCA_SR_FC0S)) {
    2282:	bf00      	nop
    2284:	4b13      	ldr	r3, [pc, #76]	; (22d4 <lcdca_enable_timer+0x68>)
    2286:	68db      	ldr	r3, [r3, #12]
    2288:	f003 0302 	and.w	r3, r3, #2
    228c:	2b00      	cmp	r3, #0
    228e:	d0f9      	beq.n	2284 <lcdca_enable_timer+0x18>
	} else if (lcd_timer == LCDCA_TIMER_FC2) {
		LCDCA->LCDCA_CR = LCDCA_CR_FC2EN;
		while (!(LCDCA->LCDCA_SR & LCDCA_SR_FC2S)) {
		}
	}
}
    2290:	e01a      	b.n	22c8 <lcdca_enable_timer+0x5c>
	} else if (lcd_timer == LCDCA_TIMER_FC1) {
    2292:	79fb      	ldrb	r3, [r7, #7]
    2294:	2b01      	cmp	r3, #1
    2296:	d10a      	bne.n	22ae <lcdca_enable_timer+0x42>
		LCDCA->LCDCA_CR = LCDCA_CR_FC1EN;
    2298:	4b0e      	ldr	r3, [pc, #56]	; (22d4 <lcdca_enable_timer+0x68>)
    229a:	2220      	movs	r2, #32
    229c:	601a      	str	r2, [r3, #0]
		while (!(LCDCA->LCDCA_SR & LCDCA_SR_FC1S)) {
    229e:	bf00      	nop
    22a0:	4b0c      	ldr	r3, [pc, #48]	; (22d4 <lcdca_enable_timer+0x68>)
    22a2:	68db      	ldr	r3, [r3, #12]
    22a4:	f003 0304 	and.w	r3, r3, #4
    22a8:	2b00      	cmp	r3, #0
    22aa:	d0f9      	beq.n	22a0 <lcdca_enable_timer+0x34>
}
    22ac:	e00c      	b.n	22c8 <lcdca_enable_timer+0x5c>
	} else if (lcd_timer == LCDCA_TIMER_FC2) {
    22ae:	79fb      	ldrb	r3, [r7, #7]
    22b0:	2b02      	cmp	r3, #2
    22b2:	d109      	bne.n	22c8 <lcdca_enable_timer+0x5c>
		LCDCA->LCDCA_CR = LCDCA_CR_FC2EN;
    22b4:	4b07      	ldr	r3, [pc, #28]	; (22d4 <lcdca_enable_timer+0x68>)
    22b6:	2280      	movs	r2, #128	; 0x80
    22b8:	601a      	str	r2, [r3, #0]
		while (!(LCDCA->LCDCA_SR & LCDCA_SR_FC2S)) {
    22ba:	bf00      	nop
    22bc:	4b05      	ldr	r3, [pc, #20]	; (22d4 <lcdca_enable_timer+0x68>)
    22be:	68db      	ldr	r3, [r3, #12]
    22c0:	f003 0308 	and.w	r3, r3, #8
    22c4:	2b00      	cmp	r3, #0
    22c6:	d0f9      	beq.n	22bc <lcdca_enable_timer+0x50>
}
    22c8:	bf00      	nop
    22ca:	370c      	adds	r7, #12
    22cc:	46bd      	mov	sp, r7
    22ce:	bc80      	pop	{r7}
    22d0:	4770      	bx	lr
    22d2:	bf00      	nop
    22d4:	40080000 	.word	0x40080000

000022d8 <lcdca_clear_blink_pixel>:
 * \param[in] pix_seg Pixel/segment SEGy coordinate (range 0 to 1 inclusive)
 */
void lcdca_clear_blink_pixel(
		uint8_t pix_com,
		uint8_t pix_seg)
{
    22d8:	b480      	push	{r7}
    22da:	b083      	sub	sp, #12
    22dc:	af00      	add	r7, sp, #0
    22de:	4603      	mov	r3, r0
    22e0:	460a      	mov	r2, r1
    22e2:	71fb      	strb	r3, [r7, #7]
    22e4:	4613      	mov	r3, r2
    22e6:	71bb      	strb	r3, [r7, #6]
	/* Validate parameters. */
	Assert(pix_seg<=1);
	
	if (pix_seg == 0) {
    22e8:	79bb      	ldrb	r3, [r7, #6]
    22ea:	2b00      	cmp	r3, #0
    22ec:	d10c      	bne.n	2308 <lcdca_clear_blink_pixel+0x30>
		LCDCA->LCDCA_BCFG &= ~LCDCA_BCFG_BSS0(1 << pix_com);
    22ee:	4910      	ldr	r1, [pc, #64]	; (2330 <lcdca_clear_blink_pixel+0x58>)
    22f0:	4b0f      	ldr	r3, [pc, #60]	; (2330 <lcdca_clear_blink_pixel+0x58>)
    22f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    22f4:	79fb      	ldrb	r3, [r7, #7]
    22f6:	2001      	movs	r0, #1
    22f8:	fa00 f303 	lsl.w	r3, r0, r3
    22fc:	021b      	lsls	r3, r3, #8
    22fe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    2302:	43db      	mvns	r3, r3
    2304:	4013      	ands	r3, r2
    2306:	638b      	str	r3, [r1, #56]	; 0x38
	}

	if (pix_seg == 1) {
    2308:	79bb      	ldrb	r3, [r7, #6]
    230a:	2b01      	cmp	r3, #1
    230c:	d10b      	bne.n	2326 <lcdca_clear_blink_pixel+0x4e>
		LCDCA->LCDCA_BCFG &= ~LCDCA_BCFG_BSS1(1 << pix_com);
    230e:	4908      	ldr	r1, [pc, #32]	; (2330 <lcdca_clear_blink_pixel+0x58>)
    2310:	4b07      	ldr	r3, [pc, #28]	; (2330 <lcdca_clear_blink_pixel+0x58>)
    2312:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2314:	79fb      	ldrb	r3, [r7, #7]
    2316:	2001      	movs	r0, #1
    2318:	fa00 f303 	lsl.w	r3, r0, r3
    231c:	031b      	lsls	r3, r3, #12
    231e:	b29b      	uxth	r3, r3
    2320:	43db      	mvns	r3, r3
    2322:	4013      	ands	r3, r2
    2324:	638b      	str	r3, [r1, #56]	; 0x38
	}
}
    2326:	bf00      	nop
    2328:	370c      	adds	r7, #12
    232a:	46bd      	mov	sp, r7
    232c:	bc80      	pop	{r7}
    232e:	4770      	bx	lr
    2330:	40080000 	.word	0x40080000

00002334 <lcdca_write_packet>:
 void lcdca_write_packet(
		uint8_t lcd_tdg, uint8_t first_seg,
		const uint8_t *data,
		size_t width,
		uint8_t dir)
{
    2334:	b480      	push	{r7}
    2336:	b085      	sub	sp, #20
    2338:	af00      	add	r7, sp, #0
    233a:	60ba      	str	r2, [r7, #8]
    233c:	607b      	str	r3, [r7, #4]
    233e:	4603      	mov	r3, r0
    2340:	73fb      	strb	r3, [r7, #15]
    2342:	460b      	mov	r3, r1
    2344:	73bb      	strb	r3, [r7, #14]
	LCDCA->LCDCA_CMCFG = LCDCA_CMCFG_TDG(lcd_tdg)
    2346:	4914      	ldr	r1, [pc, #80]	; (2398 <lcdca_write_packet+0x64>)
    2348:	7bfb      	ldrb	r3, [r7, #15]
    234a:	005b      	lsls	r3, r3, #1
    234c:	f003 0206 	and.w	r2, r3, #6
			| LCDCA_CMCFG_STSEG(first_seg)
    2350:	7bbb      	ldrb	r3, [r7, #14]
    2352:	021b      	lsls	r3, r3, #8
    2354:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    2358:	431a      	orrs	r2, r3
			| (dir ? LCDCA_CMCFG_DREV_LEFT : LCDCA_CMCFG_DREV_RIGHT);
    235a:	7e3b      	ldrb	r3, [r7, #24]
    235c:	2b00      	cmp	r3, #0
    235e:	d001      	beq.n	2364 <lcdca_write_packet+0x30>
    2360:	2301      	movs	r3, #1
    2362:	e000      	b.n	2366 <lcdca_write_packet+0x32>
    2364:	2300      	movs	r3, #0
    2366:	4313      	orrs	r3, r2
	LCDCA->LCDCA_CMCFG = LCDCA_CMCFG_TDG(lcd_tdg)
    2368:	640b      	str	r3, [r1, #64]	; 0x40

	while (width--) {
    236a:	e009      	b.n	2380 <lcdca_write_packet+0x4c>
		if (*data == '\0') {
    236c:	68bb      	ldr	r3, [r7, #8]
    236e:	781b      	ldrb	r3, [r3, #0]
    2370:	2b00      	cmp	r3, #0
    2372:	d00b      	beq.n	238c <lcdca_write_packet+0x58>
			break; /* Stop on NULL char */
		}

		LCDCA->LCDCA_CMDR = (*data++);
    2374:	4908      	ldr	r1, [pc, #32]	; (2398 <lcdca_write_packet+0x64>)
    2376:	68bb      	ldr	r3, [r7, #8]
    2378:	1c5a      	adds	r2, r3, #1
    237a:	60ba      	str	r2, [r7, #8]
    237c:	781b      	ldrb	r3, [r3, #0]
    237e:	644b      	str	r3, [r1, #68]	; 0x44
	while (width--) {
    2380:	687b      	ldr	r3, [r7, #4]
    2382:	1e5a      	subs	r2, r3, #1
    2384:	607a      	str	r2, [r7, #4]
    2386:	2b00      	cmp	r3, #0
    2388:	d1f0      	bne.n	236c <lcdca_write_packet+0x38>
	}
}
    238a:	e000      	b.n	238e <lcdca_write_packet+0x5a>
			break; /* Stop on NULL char */
    238c:	bf00      	nop
}
    238e:	bf00      	nop
    2390:	3714      	adds	r7, #20
    2392:	46bd      	mov	sp, r7
    2394:	bc80      	pop	{r7}
    2396:	4770      	bx	lr
    2398:	40080000 	.word	0x40080000

0000239c <lcdca_get_pixel_register>:
 *
 * \return The address of register controlling specified pixel.
 */
static uint64_t lcdca_get_pixel_register(
		uint8_t pix_com)
{
    239c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23a0:	b085      	sub	sp, #20
    23a2:	af00      	add	r7, sp, #0
    23a4:	71f8      	strb	r0, [r7, #7]
	uint64_t register_value = 0;
    23a6:	f04f 0a00 	mov.w	sl, #0
    23aa:	f04f 0b00 	mov.w	fp, #0
    23ae:	e9c7 ab02 	strd	sl, fp, [r7, #8]

	switch (pix_com) {
    23b2:	79f8      	ldrb	r0, [r7, #7]
    23b4:	2803      	cmp	r0, #3
    23b6:	d862      	bhi.n	247e <lcdca_get_pixel_register+0xe2>
    23b8:	f20f 0e04 	addw	lr, pc, #4
    23bc:	f85e f020 	ldr.w	pc, [lr, r0, lsl #2]
    23c0:	000023d1 	.word	0x000023d1
    23c4:	000023fd 	.word	0x000023fd
    23c8:	00002427 	.word	0x00002427
    23cc:	00002451 	.word	0x00002451
	case 0:
		register_value = (uint64_t)LCDCA->LCDCA_DRL0;
    23d0:	4b2f      	ldr	r3, [pc, #188]	; (2490 <lcdca_get_pixel_register+0xf4>)
    23d2:	695b      	ldr	r3, [r3, #20]
    23d4:	f04f 0400 	mov.w	r4, #0
    23d8:	e9c7 3402 	strd	r3, r4, [r7, #8]
		register_value |= ((uint64_t)LCDCA->LCDCA_DRH0 << 32);
    23dc:	4b2c      	ldr	r3, [pc, #176]	; (2490 <lcdca_get_pixel_register+0xf4>)
    23de:	699b      	ldr	r3, [r3, #24]
    23e0:	f04f 0400 	mov.w	r4, #0
    23e4:	4699      	mov	r9, r3
    23e6:	f04f 0800 	mov.w	r8, #0
    23ea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    23ee:	ea43 0308 	orr.w	r3, r3, r8
    23f2:	ea44 0409 	orr.w	r4, r4, r9
    23f6:	e9c7 3402 	strd	r3, r4, [r7, #8]
		break;
    23fa:	e040      	b.n	247e <lcdca_get_pixel_register+0xe2>

	case 1:
		register_value = (uint64_t)LCDCA->LCDCA_DRL1;
    23fc:	4b24      	ldr	r3, [pc, #144]	; (2490 <lcdca_get_pixel_register+0xf4>)
    23fe:	69db      	ldr	r3, [r3, #28]
    2400:	f04f 0400 	mov.w	r4, #0
    2404:	e9c7 3402 	strd	r3, r4, [r7, #8]
		register_value |= ((uint64_t)LCDCA->LCDCA_DRH1 << 32);
    2408:	4b21      	ldr	r3, [pc, #132]	; (2490 <lcdca_get_pixel_register+0xf4>)
    240a:	6a1b      	ldr	r3, [r3, #32]
    240c:	f04f 0400 	mov.w	r4, #0
    2410:	001e      	movs	r6, r3
    2412:	2500      	movs	r5, #0
    2414:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    2418:	ea43 0305 	orr.w	r3, r3, r5
    241c:	ea44 0406 	orr.w	r4, r4, r6
    2420:	e9c7 3402 	strd	r3, r4, [r7, #8]
		break;
    2424:	e02b      	b.n	247e <lcdca_get_pixel_register+0xe2>

	case 2:
		register_value = (uint64_t)LCDCA->LCDCA_DRL2;
    2426:	4b1a      	ldr	r3, [pc, #104]	; (2490 <lcdca_get_pixel_register+0xf4>)
    2428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    242a:	f04f 0400 	mov.w	r4, #0
    242e:	e9c7 3402 	strd	r3, r4, [r7, #8]
		register_value |= ((uint64_t)LCDCA->LCDCA_DRH2 << 32);
    2432:	4b17      	ldr	r3, [pc, #92]	; (2490 <lcdca_get_pixel_register+0xf4>)
    2434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2436:	f04f 0400 	mov.w	r4, #0
    243a:	001a      	movs	r2, r3
    243c:	2100      	movs	r1, #0
    243e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    2442:	ea43 0301 	orr.w	r3, r3, r1
    2446:	ea44 0402 	orr.w	r4, r4, r2
    244a:	e9c7 3402 	strd	r3, r4, [r7, #8]
		break;
    244e:	e016      	b.n	247e <lcdca_get_pixel_register+0xe2>

	case 3:
		register_value = (uint64_t)LCDCA->LCDCA_DRL3;
    2450:	4a0f      	ldr	r2, [pc, #60]	; (2490 <lcdca_get_pixel_register+0xf4>)
    2452:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    2454:	4611      	mov	r1, r2
    2456:	f04f 0200 	mov.w	r2, #0
    245a:	e9c7 1202 	strd	r1, r2, [r7, #8]
		register_value |= ((uint64_t)LCDCA->LCDCA_DRH3 << 32);
    245e:	4a0c      	ldr	r2, [pc, #48]	; (2490 <lcdca_get_pixel_register+0xf4>)
    2460:	6b12      	ldr	r2, [r2, #48]	; 0x30
    2462:	4611      	mov	r1, r2
    2464:	f04f 0200 	mov.w	r2, #0
    2468:	000c      	movs	r4, r1
    246a:	2300      	movs	r3, #0
    246c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    2470:	ea43 0301 	orr.w	r3, r3, r1
    2474:	ea44 0402 	orr.w	r4, r4, r2
    2478:	e9c7 3402 	strd	r3, r4, [r7, #8]
		break;
    247c:	bf00      	nop
	}
	return register_value;
    247e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
    2482:	4618      	mov	r0, r3
    2484:	4621      	mov	r1, r4
    2486:	3714      	adds	r7, #20
    2488:	46bd      	mov	sp, r7
    248a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    248e:	bf00      	nop
    2490:	40080000 	.word	0x40080000

00002494 <lcdca_set_pixel>:
 * \param[in] pix_seg Pixel/segment SEGy coordinate
 */
 void lcdca_set_pixel(
		uint8_t pix_com,
		uint8_t pix_seg)
{
    2494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2498:	b089      	sub	sp, #36	; 0x24
    249a:	af00      	add	r7, sp, #0
    249c:	4603      	mov	r3, r0
    249e:	460a      	mov	r2, r1
    24a0:	75fb      	strb	r3, [r7, #23]
    24a2:	4613      	mov	r3, r2
    24a4:	75bb      	strb	r3, [r7, #22]
	if ((pix_com < LCDCA_MAX_NR_OF_COM) &&
    24a6:	7dfb      	ldrb	r3, [r7, #23]
    24a8:	2b03      	cmp	r3, #3
    24aa:	d863      	bhi.n	2574 <lcdca_set_pixel+0xe0>
    24ac:	7dbb      	ldrb	r3, [r7, #22]
    24ae:	2b27      	cmp	r3, #39	; 0x27
    24b0:	d860      	bhi.n	2574 <lcdca_set_pixel+0xe0>
			(pix_seg < LCDCA_MAX_NBR_OF_SEG)) {
		uint64_t register_value = lcdca_get_pixel_register(pix_com);
    24b2:	7dfb      	ldrb	r3, [r7, #23]
    24b4:	4618      	mov	r0, r3
    24b6:	4b32      	ldr	r3, [pc, #200]	; (2580 <lcdca_set_pixel+0xec>)
    24b8:	4798      	blx	r3
    24ba:	e9c7 0106 	strd	r0, r1, [r7, #24]

		register_value |= ((uint64_t)1 << pix_seg);
    24be:	7db9      	ldrb	r1, [r7, #22]
    24c0:	f04f 0301 	mov.w	r3, #1
    24c4:	f04f 0400 	mov.w	r4, #0
    24c8:	f1a1 0020 	sub.w	r0, r1, #32
    24cc:	f1c1 0220 	rsb	r2, r1, #32
    24d0:	fa04 f601 	lsl.w	r6, r4, r1
    24d4:	fa03 f000 	lsl.w	r0, r3, r0
    24d8:	4306      	orrs	r6, r0
    24da:	fa23 f202 	lsr.w	r2, r3, r2
    24de:	4316      	orrs	r6, r2
    24e0:	fa03 f501 	lsl.w	r5, r3, r1
    24e4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    24e8:	ea43 0305 	orr.w	r3, r3, r5
    24ec:	ea44 0406 	orr.w	r4, r4, r6
    24f0:	e9c7 3406 	strd	r3, r4, [r7, #24]
		switch (pix_com) {
    24f4:	7dfb      	ldrb	r3, [r7, #23]
    24f6:	2b03      	cmp	r3, #3
    24f8:	d83c      	bhi.n	2574 <lcdca_set_pixel+0xe0>
    24fa:	a201      	add	r2, pc, #4	; (adr r2, 2500 <lcdca_set_pixel+0x6c>)
    24fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2500:	00002511 	.word	0x00002511
    2504:	0000252b 	.word	0x0000252b
    2508:	00002545 	.word	0x00002545
    250c:	0000255d 	.word	0x0000255d
		case 0:
			LCDCA->LCDCA_DRL0 = register_value;
    2510:	4a1c      	ldr	r2, [pc, #112]	; (2584 <lcdca_set_pixel+0xf0>)
    2512:	69bb      	ldr	r3, [r7, #24]
    2514:	6153      	str	r3, [r2, #20]
			LCDCA->LCDCA_DRH0 = (register_value >> 32);
    2516:	4a1b      	ldr	r2, [pc, #108]	; (2584 <lcdca_set_pixel+0xf0>)
    2518:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    251c:	0023      	movs	r3, r4
    251e:	60bb      	str	r3, [r7, #8]
    2520:	2300      	movs	r3, #0
    2522:	60fb      	str	r3, [r7, #12]
    2524:	68bb      	ldr	r3, [r7, #8]
    2526:	6193      	str	r3, [r2, #24]
			break;
    2528:	e024      	b.n	2574 <lcdca_set_pixel+0xe0>

		case 1:
			LCDCA->LCDCA_DRL1 = register_value;
    252a:	4a16      	ldr	r2, [pc, #88]	; (2584 <lcdca_set_pixel+0xf0>)
    252c:	69bb      	ldr	r3, [r7, #24]
    252e:	61d3      	str	r3, [r2, #28]
			LCDCA->LCDCA_DRH1 = (register_value >> 32);
    2530:	4a14      	ldr	r2, [pc, #80]	; (2584 <lcdca_set_pixel+0xf0>)
    2532:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    2536:	0023      	movs	r3, r4
    2538:	603b      	str	r3, [r7, #0]
    253a:	2300      	movs	r3, #0
    253c:	607b      	str	r3, [r7, #4]
    253e:	683b      	ldr	r3, [r7, #0]
    2540:	6213      	str	r3, [r2, #32]
			break;
    2542:	e017      	b.n	2574 <lcdca_set_pixel+0xe0>

		case 2:
			LCDCA->LCDCA_DRL2 = register_value;
    2544:	4a0f      	ldr	r2, [pc, #60]	; (2584 <lcdca_set_pixel+0xf0>)
    2546:	69bb      	ldr	r3, [r7, #24]
    2548:	6253      	str	r3, [r2, #36]	; 0x24
			LCDCA->LCDCA_DRH2 = (register_value >> 32);
    254a:	4a0e      	ldr	r2, [pc, #56]	; (2584 <lcdca_set_pixel+0xf0>)
    254c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    2550:	46a2      	mov	sl, r4
    2552:	f04f 0b00 	mov.w	fp, #0
    2556:	4653      	mov	r3, sl
    2558:	6293      	str	r3, [r2, #40]	; 0x28
			break;
    255a:	e00b      	b.n	2574 <lcdca_set_pixel+0xe0>

		case 3:
			LCDCA->LCDCA_DRL3 = register_value;
    255c:	4a09      	ldr	r2, [pc, #36]	; (2584 <lcdca_set_pixel+0xf0>)
    255e:	69bb      	ldr	r3, [r7, #24]
    2560:	62d3      	str	r3, [r2, #44]	; 0x2c
			LCDCA->LCDCA_DRH3 = (register_value >> 32);
    2562:	4a08      	ldr	r2, [pc, #32]	; (2584 <lcdca_set_pixel+0xf0>)
    2564:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    2568:	46a0      	mov	r8, r4
    256a:	f04f 0900 	mov.w	r9, #0
    256e:	4643      	mov	r3, r8
    2570:	6313      	str	r3, [r2, #48]	; 0x30
			break;
    2572:	bf00      	nop
		}
	}
}
    2574:	bf00      	nop
    2576:	3724      	adds	r7, #36	; 0x24
    2578:	46bd      	mov	sp, r7
    257a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    257e:	bf00      	nop
    2580:	0000239d 	.word	0x0000239d
    2584:	40080000 	.word	0x40080000

00002588 <lcdca_clear_pixel>:
 *
 * \param[in] pix_com Pixel/segment COMx coordinate
 * \param[in] pix_seg Pixel/segment SEGy coordinate
 */
 void lcdca_clear_pixel(uint8_t pix_com, uint8_t pix_seg)
{
    2588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    258c:	b089      	sub	sp, #36	; 0x24
    258e:	af00      	add	r7, sp, #0
    2590:	4603      	mov	r3, r0
    2592:	460a      	mov	r2, r1
    2594:	75fb      	strb	r3, [r7, #23]
    2596:	4613      	mov	r3, r2
    2598:	75bb      	strb	r3, [r7, #22]
	if ((pix_com < LCDCA_MAX_NR_OF_COM) &&
    259a:	7dfb      	ldrb	r3, [r7, #23]
    259c:	2b03      	cmp	r3, #3
    259e:	d867      	bhi.n	2670 <lcdca_clear_pixel+0xe8>
    25a0:	7dbb      	ldrb	r3, [r7, #22]
    25a2:	2b27      	cmp	r3, #39	; 0x27
    25a4:	d864      	bhi.n	2670 <lcdca_clear_pixel+0xe8>
			(pix_seg < LCDCA_MAX_NBR_OF_SEG)) {
		uint64_t register_value = lcdca_get_pixel_register(pix_com);
    25a6:	7dfb      	ldrb	r3, [r7, #23]
    25a8:	4618      	mov	r0, r3
    25aa:	4b34      	ldr	r3, [pc, #208]	; (267c <lcdca_clear_pixel+0xf4>)
    25ac:	4798      	blx	r3
    25ae:	e9c7 0106 	strd	r0, r1, [r7, #24]

		register_value &= ~((uint64_t)1 << pix_seg);
    25b2:	7db9      	ldrb	r1, [r7, #22]
    25b4:	f04f 0301 	mov.w	r3, #1
    25b8:	f04f 0400 	mov.w	r4, #0
    25bc:	f1a1 0020 	sub.w	r0, r1, #32
    25c0:	f1c1 0220 	rsb	r2, r1, #32
    25c4:	fa04 f601 	lsl.w	r6, r4, r1
    25c8:	fa03 f000 	lsl.w	r0, r3, r0
    25cc:	4306      	orrs	r6, r0
    25ce:	fa23 f202 	lsr.w	r2, r3, r2
    25d2:	4316      	orrs	r6, r2
    25d4:	fa03 f501 	lsl.w	r5, r3, r1
    25d8:	ea6f 0305 	mvn.w	r3, r5
    25dc:	ea6f 0406 	mvn.w	r4, r6
    25e0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    25e4:	ea03 0301 	and.w	r3, r3, r1
    25e8:	ea04 0402 	and.w	r4, r4, r2
    25ec:	e9c7 3406 	strd	r3, r4, [r7, #24]
		switch (pix_com) {
    25f0:	7dfb      	ldrb	r3, [r7, #23]
    25f2:	2b03      	cmp	r3, #3
    25f4:	d83c      	bhi.n	2670 <lcdca_clear_pixel+0xe8>
    25f6:	a201      	add	r2, pc, #4	; (adr r2, 25fc <lcdca_clear_pixel+0x74>)
    25f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    25fc:	0000260d 	.word	0x0000260d
    2600:	00002627 	.word	0x00002627
    2604:	00002641 	.word	0x00002641
    2608:	00002659 	.word	0x00002659
		case 0:
			LCDCA->LCDCA_DRL0 = register_value;
    260c:	4a1c      	ldr	r2, [pc, #112]	; (2680 <lcdca_clear_pixel+0xf8>)
    260e:	69bb      	ldr	r3, [r7, #24]
    2610:	6153      	str	r3, [r2, #20]
			LCDCA->LCDCA_DRH0 = (register_value >> 32);
    2612:	4a1b      	ldr	r2, [pc, #108]	; (2680 <lcdca_clear_pixel+0xf8>)
    2614:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    2618:	0023      	movs	r3, r4
    261a:	60bb      	str	r3, [r7, #8]
    261c:	2300      	movs	r3, #0
    261e:	60fb      	str	r3, [r7, #12]
    2620:	68bb      	ldr	r3, [r7, #8]
    2622:	6193      	str	r3, [r2, #24]
			break;
    2624:	e024      	b.n	2670 <lcdca_clear_pixel+0xe8>

		case 1:
			LCDCA->LCDCA_DRL1 = register_value;
    2626:	4a16      	ldr	r2, [pc, #88]	; (2680 <lcdca_clear_pixel+0xf8>)
    2628:	69bb      	ldr	r3, [r7, #24]
    262a:	61d3      	str	r3, [r2, #28]
			LCDCA->LCDCA_DRH1 = (register_value >> 32);
    262c:	4a14      	ldr	r2, [pc, #80]	; (2680 <lcdca_clear_pixel+0xf8>)
    262e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    2632:	0023      	movs	r3, r4
    2634:	603b      	str	r3, [r7, #0]
    2636:	2300      	movs	r3, #0
    2638:	607b      	str	r3, [r7, #4]
    263a:	683b      	ldr	r3, [r7, #0]
    263c:	6213      	str	r3, [r2, #32]
			break;
    263e:	e017      	b.n	2670 <lcdca_clear_pixel+0xe8>

		case 2:
			LCDCA->LCDCA_DRL2 = register_value;
    2640:	4a0f      	ldr	r2, [pc, #60]	; (2680 <lcdca_clear_pixel+0xf8>)
    2642:	69bb      	ldr	r3, [r7, #24]
    2644:	6253      	str	r3, [r2, #36]	; 0x24
			LCDCA->LCDCA_DRH2 = (register_value >> 32);
    2646:	4a0e      	ldr	r2, [pc, #56]	; (2680 <lcdca_clear_pixel+0xf8>)
    2648:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    264c:	46a2      	mov	sl, r4
    264e:	f04f 0b00 	mov.w	fp, #0
    2652:	4653      	mov	r3, sl
    2654:	6293      	str	r3, [r2, #40]	; 0x28
			break;
    2656:	e00b      	b.n	2670 <lcdca_clear_pixel+0xe8>

		case 3:
			LCDCA->LCDCA_DRL3 = register_value;
    2658:	4a09      	ldr	r2, [pc, #36]	; (2680 <lcdca_clear_pixel+0xf8>)
    265a:	69bb      	ldr	r3, [r7, #24]
    265c:	62d3      	str	r3, [r2, #44]	; 0x2c
			LCDCA->LCDCA_DRH3 = (register_value >> 32);
    265e:	4a08      	ldr	r2, [pc, #32]	; (2680 <lcdca_clear_pixel+0xf8>)
    2660:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    2664:	46a0      	mov	r8, r4
    2666:	f04f 0900 	mov.w	r9, #0
    266a:	4643      	mov	r3, r8
    266c:	6313      	str	r3, [r2, #48]	; 0x30
			break;
    266e:	bf00      	nop
		}
	}
}
    2670:	bf00      	nop
    2672:	3724      	adds	r7, #36	; 0x24
    2674:	46bd      	mov	sp, r7
    2676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    267a:	bf00      	nop
    267c:	0000239d 	.word	0x0000239d
    2680:	40080000 	.word	0x40080000

00002684 <LCDCA_Handler>:

/**
 * \internal LCDCA interrupt handler.
 */
void LCDCA_Handler(void)
{
    2684:	b580      	push	{r7, lr}
    2686:	af00      	add	r7, sp, #0
	/* Clear interrupt flags */
	lcdca_clear_status();
    2688:	4b05      	ldr	r3, [pc, #20]	; (26a0 <LCDCA_Handler+0x1c>)
    268a:	4798      	blx	r3

	/* Interrupt handler */
	if (lcdca_callback_pointer != NULL) {
    268c:	4b05      	ldr	r3, [pc, #20]	; (26a4 <LCDCA_Handler+0x20>)
    268e:	681b      	ldr	r3, [r3, #0]
    2690:	2b00      	cmp	r3, #0
    2692:	d002      	beq.n	269a <LCDCA_Handler+0x16>
		lcdca_callback_pointer();
    2694:	4b03      	ldr	r3, [pc, #12]	; (26a4 <LCDCA_Handler+0x20>)
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	4798      	blx	r3
	}
}
    269a:	bf00      	nop
    269c:	bd80      	pop	{r7, pc}
    269e:	bf00      	nop
    26a0:	00002089 	.word	0x00002089
    26a4:	20000340 	.word	0x20000340

000026a8 <pdca_channel_get_handler>:
 *
 * \return channel handled or PDCA_INVALID_ARGUMENT
 */
volatile PdcaChannel *pdca_channel_get_handler(pdca_channel_num_t
		pdca_ch_number)
{
    26a8:	b480      	push	{r7}
    26aa:	b085      	sub	sp, #20
    26ac:	af00      	add	r7, sp, #0
    26ae:	4603      	mov	r3, r0
    26b0:	71fb      	strb	r3, [r7, #7]
	if (pdca_ch_number >= PDCA_NUMBER_OF_CHANNELS)
    26b2:	79fb      	ldrb	r3, [r7, #7]
    26b4:	2b0f      	cmp	r3, #15
    26b6:	d901      	bls.n	26bc <pdca_channel_get_handler+0x14>
		pdca_ch_number = 0;
    26b8:	2300      	movs	r3, #0
    26ba:	71fb      	strb	r3, [r7, #7]

	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
    26bc:	79fb      	ldrb	r3, [r7, #7]
    26be:	019b      	lsls	r3, r3, #6
    26c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    26c4:	f503 2322 	add.w	r3, r3, #663552	; 0xa2000
    26c8:	60fb      	str	r3, [r7, #12]
			&(PDCA->PDCA_CHANNEL[pdca_ch_number]);

	return pdca_channel;
    26ca:	68fb      	ldr	r3, [r7, #12]
}
    26cc:	4618      	mov	r0, r3
    26ce:	3714      	adds	r7, #20
    26d0:	46bd      	mov	sp, r7
    26d2:	bc80      	pop	{r7}
    26d4:	4770      	bx	lr
	...

000026d8 <pdca_get_channel_status>:
 *
 * \return 1 if channel transfer is enabled, else 0
 */
enum pdca_channel_status
		pdca_get_channel_status(pdca_channel_num_t pdca_ch_number)
{
    26d8:	b580      	push	{r7, lr}
    26da:	b086      	sub	sp, #24
    26dc:	af00      	add	r7, sp, #0
    26de:	4603      	mov	r3, r0
    26e0:	71fb      	strb	r3, [r7, #7]
	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
    26e2:	79fb      	ldrb	r3, [r7, #7]
    26e4:	4618      	mov	r0, r3
    26e6:	4b15      	ldr	r3, [pc, #84]	; (273c <pdca_get_channel_status+0x64>)
    26e8:	4798      	blx	r3
    26ea:	6178      	str	r0, [r7, #20]
			pdca_channel_get_handler(pdca_ch_number);
	uint32_t status = pdca_channel->PDCA_SR;
    26ec:	697b      	ldr	r3, [r7, #20]
    26ee:	69db      	ldr	r3, [r3, #28]
    26f0:	613b      	str	r3, [r7, #16]
	uint32_t intflag = pdca_channel->PDCA_ISR;
    26f2:	697b      	ldr	r3, [r7, #20]
    26f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    26f6:	60fb      	str	r3, [r7, #12]

	if ((status & PDCA_SR_TEN) == PDCA_SR_TEN) {
    26f8:	693b      	ldr	r3, [r7, #16]
    26fa:	f003 0301 	and.w	r3, r3, #1
    26fe:	2b00      	cmp	r3, #0
    2700:	d016      	beq.n	2730 <pdca_get_channel_status+0x58>
		if ((intflag & PDCA_ISR_TERR) == PDCA_ISR_TERR) {
    2702:	68fb      	ldr	r3, [r7, #12]
    2704:	f003 0304 	and.w	r3, r3, #4
    2708:	2b00      	cmp	r3, #0
    270a:	d001      	beq.n	2710 <pdca_get_channel_status+0x38>
			return PDCA_CH_TRANSFER_ERROR;
    270c:	2304      	movs	r3, #4
    270e:	e010      	b.n	2732 <pdca_get_channel_status+0x5a>
		} else if ((intflag & PDCA_ISR_TRC) == PDCA_ISR_TRC) {
    2710:	68fb      	ldr	r3, [r7, #12]
    2712:	f003 0302 	and.w	r3, r3, #2
    2716:	2b00      	cmp	r3, #0
    2718:	d001      	beq.n	271e <pdca_get_channel_status+0x46>
			return PDCA_CH_TRANSFER_COMPLETED;
    271a:	2303      	movs	r3, #3
    271c:	e009      	b.n	2732 <pdca_get_channel_status+0x5a>
		} else if ((intflag & PDCA_ISR_RCZ) == PDCA_ISR_RCZ) {
    271e:	68fb      	ldr	r3, [r7, #12]
    2720:	f003 0301 	and.w	r3, r3, #1
    2724:	2b00      	cmp	r3, #0
    2726:	d001      	beq.n	272c <pdca_get_channel_status+0x54>
			return PDCA_CH_COUNTER_RELOAD_IS_ZERO;
    2728:	2302      	movs	r3, #2
    272a:	e002      	b.n	2732 <pdca_get_channel_status+0x5a>
		}
		return PDCA_CH_BUSY;
    272c:	2301      	movs	r3, #1
    272e:	e000      	b.n	2732 <pdca_get_channel_status+0x5a>
	} else {
		return PDCA_CH_FREE;
    2730:	2300      	movs	r3, #0
	}
}
    2732:	4618      	mov	r0, r3
    2734:	3718      	adds	r7, #24
    2736:	46bd      	mov	sp, r7
    2738:	bd80      	pop	{r7, pc}
    273a:	bf00      	nop
    273c:	000026a9 	.word	0x000026a9

00002740 <pdca_channel_disable>:
 * \brief Disable the PDCA for the given channel
 *
 * \param pdca_ch_number PDCA channel
 */
void pdca_channel_disable(pdca_channel_num_t pdca_ch_number)
{
    2740:	b580      	push	{r7, lr}
    2742:	b084      	sub	sp, #16
    2744:	af00      	add	r7, sp, #0
    2746:	4603      	mov	r3, r0
    2748:	71fb      	strb	r3, [r7, #7]
	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
    274a:	79fb      	ldrb	r3, [r7, #7]
    274c:	4618      	mov	r0, r3
    274e:	4b05      	ldr	r3, [pc, #20]	; (2764 <pdca_channel_disable+0x24>)
    2750:	4798      	blx	r3
    2752:	60f8      	str	r0, [r7, #12]
			pdca_channel_get_handler(pdca_ch_number);

	/* Disable transfer */
	pdca_channel->PDCA_CR = PDCA_CR_TDIS;
    2754:	68fb      	ldr	r3, [r7, #12]
    2756:	2202      	movs	r2, #2
    2758:	615a      	str	r2, [r3, #20]

}
    275a:	bf00      	nop
    275c:	3710      	adds	r7, #16
    275e:	46bd      	mov	sp, r7
    2760:	bd80      	pop	{r7, pc}
    2762:	bf00      	nop
    2764:	000026a9 	.word	0x000026a9

00002768 <pdca_channel_interrupt>:
 * pdca_channel_set_callback() function.
 *
 * \param pdca_ch_number PDCA channel number to handle interrupt for
 */
static void pdca_channel_interrupt(const pdca_channel_num_t pdca_ch_number)
{
    2768:	b580      	push	{r7, lr}
    276a:	b084      	sub	sp, #16
    276c:	af00      	add	r7, sp, #0
    276e:	4603      	mov	r3, r0
    2770:	71fb      	strb	r3, [r7, #7]
	enum pdca_channel_status status;

	status = pdca_get_channel_status(pdca_ch_number);
    2772:	79fb      	ldrb	r3, [r7, #7]
    2774:	4618      	mov	r0, r3
    2776:	4b0a      	ldr	r3, [pc, #40]	; (27a0 <pdca_channel_interrupt+0x38>)
    2778:	4798      	blx	r3
    277a:	4603      	mov	r3, r0
    277c:	73fb      	strb	r3, [r7, #15]

	if (pdca_callback_pointer[pdca_ch_number]) {
    277e:	79fb      	ldrb	r3, [r7, #7]
    2780:	4a08      	ldr	r2, [pc, #32]	; (27a4 <pdca_channel_interrupt+0x3c>)
    2782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2786:	2b00      	cmp	r3, #0
    2788:	d006      	beq.n	2798 <pdca_channel_interrupt+0x30>
		pdca_callback_pointer[pdca_ch_number] (status);
    278a:	79fb      	ldrb	r3, [r7, #7]
    278c:	4a05      	ldr	r2, [pc, #20]	; (27a4 <pdca_channel_interrupt+0x3c>)
    278e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2792:	7bfa      	ldrb	r2, [r7, #15]
    2794:	4610      	mov	r0, r2
    2796:	4798      	blx	r3
	} else {
		Assert(false); /* Catch unexpected interrupt */
	}
}
    2798:	bf00      	nop
    279a:	3710      	adds	r7, #16
    279c:	46bd      	mov	sp, r7
    279e:	bd80      	pop	{r7, pc}
    27a0:	000026d9 	.word	0x000026d9
    27a4:	200003b4 	.word	0x200003b4

000027a8 <PDCA_0_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 0.
 */
void PDCA_0_Handler(void)
{
    27a8:	b580      	push	{r7, lr}
    27aa:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(0);
    27ac:	2000      	movs	r0, #0
    27ae:	4b02      	ldr	r3, [pc, #8]	; (27b8 <PDCA_0_Handler+0x10>)
    27b0:	4798      	blx	r3
}
    27b2:	bf00      	nop
    27b4:	bd80      	pop	{r7, pc}
    27b6:	bf00      	nop
    27b8:	00002769 	.word	0x00002769

000027bc <PDCA_1_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 1.
 */
void PDCA_1_Handler(void)
{
    27bc:	b580      	push	{r7, lr}
    27be:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(1);
    27c0:	2001      	movs	r0, #1
    27c2:	4b02      	ldr	r3, [pc, #8]	; (27cc <PDCA_1_Handler+0x10>)
    27c4:	4798      	blx	r3
}
    27c6:	bf00      	nop
    27c8:	bd80      	pop	{r7, pc}
    27ca:	bf00      	nop
    27cc:	00002769 	.word	0x00002769

000027d0 <PDCA_2_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 2.
 */
void PDCA_2_Handler(void)
{
    27d0:	b580      	push	{r7, lr}
    27d2:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(2);
    27d4:	2002      	movs	r0, #2
    27d6:	4b02      	ldr	r3, [pc, #8]	; (27e0 <PDCA_2_Handler+0x10>)
    27d8:	4798      	blx	r3
}
    27da:	bf00      	nop
    27dc:	bd80      	pop	{r7, pc}
    27de:	bf00      	nop
    27e0:	00002769 	.word	0x00002769

000027e4 <PDCA_3_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 3.
 */
void PDCA_3_Handler(void)
{
    27e4:	b580      	push	{r7, lr}
    27e6:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(3);
    27e8:	2003      	movs	r0, #3
    27ea:	4b02      	ldr	r3, [pc, #8]	; (27f4 <PDCA_3_Handler+0x10>)
    27ec:	4798      	blx	r3
}
    27ee:	bf00      	nop
    27f0:	bd80      	pop	{r7, pc}
    27f2:	bf00      	nop
    27f4:	00002769 	.word	0x00002769

000027f8 <PDCA_4_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 4.
 */
void PDCA_4_Handler(void)
{
    27f8:	b580      	push	{r7, lr}
    27fa:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(4);
    27fc:	2004      	movs	r0, #4
    27fe:	4b02      	ldr	r3, [pc, #8]	; (2808 <PDCA_4_Handler+0x10>)
    2800:	4798      	blx	r3
}
    2802:	bf00      	nop
    2804:	bd80      	pop	{r7, pc}
    2806:	bf00      	nop
    2808:	00002769 	.word	0x00002769

0000280c <PDCA_5_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 5.
 */
void PDCA_5_Handler(void)
{
    280c:	b580      	push	{r7, lr}
    280e:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(5);
    2810:	2005      	movs	r0, #5
    2812:	4b02      	ldr	r3, [pc, #8]	; (281c <PDCA_5_Handler+0x10>)
    2814:	4798      	blx	r3
}
    2816:	bf00      	nop
    2818:	bd80      	pop	{r7, pc}
    281a:	bf00      	nop
    281c:	00002769 	.word	0x00002769

00002820 <PDCA_6_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 6.
 */
void PDCA_6_Handler(void)
{
    2820:	b580      	push	{r7, lr}
    2822:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(6);
    2824:	2006      	movs	r0, #6
    2826:	4b02      	ldr	r3, [pc, #8]	; (2830 <PDCA_6_Handler+0x10>)
    2828:	4798      	blx	r3
}
    282a:	bf00      	nop
    282c:	bd80      	pop	{r7, pc}
    282e:	bf00      	nop
    2830:	00002769 	.word	0x00002769

00002834 <PDCA_7_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 7.
 */
void PDCA_7_Handler(void)
{
    2834:	b580      	push	{r7, lr}
    2836:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(7);
    2838:	2007      	movs	r0, #7
    283a:	4b02      	ldr	r3, [pc, #8]	; (2844 <PDCA_7_Handler+0x10>)
    283c:	4798      	blx	r3
}
    283e:	bf00      	nop
    2840:	bd80      	pop	{r7, pc}
    2842:	bf00      	nop
    2844:	00002769 	.word	0x00002769

00002848 <PDCA_8_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 8.
 */
void PDCA_8_Handler(void)
{
    2848:	b580      	push	{r7, lr}
    284a:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(8);
    284c:	2008      	movs	r0, #8
    284e:	4b02      	ldr	r3, [pc, #8]	; (2858 <PDCA_8_Handler+0x10>)
    2850:	4798      	blx	r3
}
    2852:	bf00      	nop
    2854:	bd80      	pop	{r7, pc}
    2856:	bf00      	nop
    2858:	00002769 	.word	0x00002769

0000285c <PDCA_9_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 9.
 */
void PDCA_9_Handler(void)
{
    285c:	b580      	push	{r7, lr}
    285e:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(9);
    2860:	2009      	movs	r0, #9
    2862:	4b02      	ldr	r3, [pc, #8]	; (286c <PDCA_9_Handler+0x10>)
    2864:	4798      	blx	r3
}
    2866:	bf00      	nop
    2868:	bd80      	pop	{r7, pc}
    286a:	bf00      	nop
    286c:	00002769 	.word	0x00002769

00002870 <PDCA_10_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 10.
 */
void PDCA_10_Handler(void)
{
    2870:	b580      	push	{r7, lr}
    2872:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(10);
    2874:	200a      	movs	r0, #10
    2876:	4b02      	ldr	r3, [pc, #8]	; (2880 <PDCA_10_Handler+0x10>)
    2878:	4798      	blx	r3
}
    287a:	bf00      	nop
    287c:	bd80      	pop	{r7, pc}
    287e:	bf00      	nop
    2880:	00002769 	.word	0x00002769

00002884 <PDCA_11_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 11.
 */
void PDCA_11_Handler(void)
{
    2884:	b580      	push	{r7, lr}
    2886:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(11);
    2888:	200b      	movs	r0, #11
    288a:	4b02      	ldr	r3, [pc, #8]	; (2894 <PDCA_11_Handler+0x10>)
    288c:	4798      	blx	r3
}
    288e:	bf00      	nop
    2890:	bd80      	pop	{r7, pc}
    2892:	bf00      	nop
    2894:	00002769 	.word	0x00002769

00002898 <PDCA_12_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 12.
 */
void PDCA_12_Handler(void)
{
    2898:	b580      	push	{r7, lr}
    289a:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(12);
    289c:	200c      	movs	r0, #12
    289e:	4b02      	ldr	r3, [pc, #8]	; (28a8 <PDCA_12_Handler+0x10>)
    28a0:	4798      	blx	r3
}
    28a2:	bf00      	nop
    28a4:	bd80      	pop	{r7, pc}
    28a6:	bf00      	nop
    28a8:	00002769 	.word	0x00002769

000028ac <PDCA_13_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 13.
 */
void PDCA_13_Handler(void)
{
    28ac:	b580      	push	{r7, lr}
    28ae:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(13);
    28b0:	200d      	movs	r0, #13
    28b2:	4b02      	ldr	r3, [pc, #8]	; (28bc <PDCA_13_Handler+0x10>)
    28b4:	4798      	blx	r3
}
    28b6:	bf00      	nop
    28b8:	bd80      	pop	{r7, pc}
    28ba:	bf00      	nop
    28bc:	00002769 	.word	0x00002769

000028c0 <PDCA_14_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 14.
 */
void PDCA_14_Handler(void)
{
    28c0:	b580      	push	{r7, lr}
    28c2:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(14);
    28c4:	200e      	movs	r0, #14
    28c6:	4b02      	ldr	r3, [pc, #8]	; (28d0 <PDCA_14_Handler+0x10>)
    28c8:	4798      	blx	r3
}
    28ca:	bf00      	nop
    28cc:	bd80      	pop	{r7, pc}
    28ce:	bf00      	nop
    28d0:	00002769 	.word	0x00002769

000028d4 <PDCA_15_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 15.
 */
void PDCA_15_Handler(void)
{
    28d4:	b580      	push	{r7, lr}
    28d6:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(15);
    28d8:	200f      	movs	r0, #15
    28da:	4b02      	ldr	r3, [pc, #8]	; (28e4 <PDCA_15_Handler+0x10>)
    28dc:	4798      	blx	r3
}
    28de:	bf00      	nop
    28e0:	bd80      	pop	{r7, pc}
    28e2:	bf00      	nop
    28e4:	00002769 	.word	0x00002769

000028e8 <cpu_irq_save>:
{
    28e8:	b480      	push	{r7}
    28ea:	b083      	sub	sp, #12
    28ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    28ee:	f3ef 8310 	mrs	r3, PRIMASK
    28f2:	607b      	str	r3, [r7, #4]
  return(result);
    28f4:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    28f6:	2b00      	cmp	r3, #0
    28f8:	bf0c      	ite	eq
    28fa:	2301      	moveq	r3, #1
    28fc:	2300      	movne	r3, #0
    28fe:	b2db      	uxtb	r3, r3
    2900:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    2902:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2904:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2908:	4b04      	ldr	r3, [pc, #16]	; (291c <cpu_irq_save+0x34>)
    290a:	2200      	movs	r2, #0
    290c:	701a      	strb	r2, [r3, #0]
	return flags;
    290e:	683b      	ldr	r3, [r7, #0]
}
    2910:	4618      	mov	r0, r3
    2912:	370c      	adds	r7, #12
    2914:	46bd      	mov	sp, r7
    2916:	bc80      	pop	{r7}
    2918:	4770      	bx	lr
    291a:	bf00      	nop
    291c:	20000074 	.word	0x20000074

00002920 <cpu_irq_is_enabled_flags>:
{
    2920:	b480      	push	{r7}
    2922:	b083      	sub	sp, #12
    2924:	af00      	add	r7, sp, #0
    2926:	6078      	str	r0, [r7, #4]
	return (flags);
    2928:	687b      	ldr	r3, [r7, #4]
    292a:	2b00      	cmp	r3, #0
    292c:	bf14      	ite	ne
    292e:	2301      	movne	r3, #1
    2930:	2300      	moveq	r3, #0
    2932:	b2db      	uxtb	r3, r3
}
    2934:	4618      	mov	r0, r3
    2936:	370c      	adds	r7, #12
    2938:	46bd      	mov	sp, r7
    293a:	bc80      	pop	{r7}
    293c:	4770      	bx	lr
	...

00002940 <cpu_irq_restore>:
{
    2940:	b580      	push	{r7, lr}
    2942:	b082      	sub	sp, #8
    2944:	af00      	add	r7, sp, #0
    2946:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    2948:	6878      	ldr	r0, [r7, #4]
    294a:	4b07      	ldr	r3, [pc, #28]	; (2968 <cpu_irq_restore+0x28>)
    294c:	4798      	blx	r3
    294e:	4603      	mov	r3, r0
    2950:	2b00      	cmp	r3, #0
    2952:	d005      	beq.n	2960 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    2954:	4b05      	ldr	r3, [pc, #20]	; (296c <cpu_irq_restore+0x2c>)
    2956:	2201      	movs	r2, #1
    2958:	701a      	strb	r2, [r3, #0]
    295a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    295e:	b662      	cpsie	i
}
    2960:	bf00      	nop
    2962:	3708      	adds	r7, #8
    2964:	46bd      	mov	sp, r7
    2966:	bd80      	pop	{r7, pc}
    2968:	00002921 	.word	0x00002921
    296c:	20000074 	.word	0x20000074

00002970 <osc_enable>:
{
    2970:	b580      	push	{r7, lr}
    2972:	b082      	sub	sp, #8
    2974:	af00      	add	r7, sp, #0
    2976:	4603      	mov	r3, r0
    2978:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    297a:	79fb      	ldrb	r3, [r7, #7]
    297c:	2b06      	cmp	r3, #6
    297e:	d823      	bhi.n	29c8 <osc_enable+0x58>
    2980:	a201      	add	r2, pc, #4	; (adr r2, 2988 <osc_enable+0x18>)
    2982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2986:	bf00      	nop
    2988:	000029a5 	.word	0x000029a5
    298c:	000029ab 	.word	0x000029ab
    2990:	000029b1 	.word	0x000029b1
    2994:	000029b7 	.word	0x000029b7
    2998:	000029bd 	.word	0x000029bd
    299c:	000029c3 	.word	0x000029c3
    29a0:	000029c9 	.word	0x000029c9
		osc_priv_enable_osc0();
    29a4:	4b0b      	ldr	r3, [pc, #44]	; (29d4 <osc_enable+0x64>)
    29a6:	4798      	blx	r3
		break;
    29a8:	e00f      	b.n	29ca <osc_enable+0x5a>
		osc_priv_enable_osc32();
    29aa:	4b0b      	ldr	r3, [pc, #44]	; (29d8 <osc_enable+0x68>)
    29ac:	4798      	blx	r3
		break;
    29ae:	e00c      	b.n	29ca <osc_enable+0x5a>
		osc_priv_enable_rc32k();
    29b0:	4b0a      	ldr	r3, [pc, #40]	; (29dc <osc_enable+0x6c>)
    29b2:	4798      	blx	r3
		break;
    29b4:	e009      	b.n	29ca <osc_enable+0x5a>
		osc_priv_enable_rc80m();
    29b6:	4b0a      	ldr	r3, [pc, #40]	; (29e0 <osc_enable+0x70>)
    29b8:	4798      	blx	r3
		break;
    29ba:	e006      	b.n	29ca <osc_enable+0x5a>
		osc_priv_enable_rcfast();
    29bc:	4b09      	ldr	r3, [pc, #36]	; (29e4 <osc_enable+0x74>)
    29be:	4798      	blx	r3
		break;
    29c0:	e003      	b.n	29ca <osc_enable+0x5a>
		osc_priv_enable_rc1m();
    29c2:	4b09      	ldr	r3, [pc, #36]	; (29e8 <osc_enable+0x78>)
    29c4:	4798      	blx	r3
		break;
    29c6:	e000      	b.n	29ca <osc_enable+0x5a>
		break;
    29c8:	bf00      	nop
}
    29ca:	bf00      	nop
    29cc:	3708      	adds	r7, #8
    29ce:	46bd      	mov	sp, r7
    29d0:	bd80      	pop	{r7, pc}
    29d2:	bf00      	nop
    29d4:	00003021 	.word	0x00003021
    29d8:	0000305d 	.word	0x0000305d
    29dc:	00003099 	.word	0x00003099
    29e0:	00003119 	.word	0x00003119
    29e4:	00003159 	.word	0x00003159
    29e8:	000030d9 	.word	0x000030d9

000029ec <osc_is_ready>:
{
    29ec:	b480      	push	{r7}
    29ee:	b083      	sub	sp, #12
    29f0:	af00      	add	r7, sp, #0
    29f2:	4603      	mov	r3, r0
    29f4:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    29f6:	79fb      	ldrb	r3, [r7, #7]
    29f8:	2b06      	cmp	r3, #6
    29fa:	d84f      	bhi.n	2a9c <osc_is_ready+0xb0>
    29fc:	a201      	add	r2, pc, #4	; (adr r2, 2a04 <osc_is_ready+0x18>)
    29fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2a02:	bf00      	nop
    2a04:	00002a21 	.word	0x00002a21
    2a08:	00002a35 	.word	0x00002a35
    2a0c:	00002a49 	.word	0x00002a49
    2a10:	00002a5d 	.word	0x00002a5d
    2a14:	00002a71 	.word	0x00002a71
    2a18:	00002a85 	.word	0x00002a85
    2a1c:	00002a99 	.word	0x00002a99
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
    2a20:	4b21      	ldr	r3, [pc, #132]	; (2aa8 <osc_is_ready+0xbc>)
    2a22:	695b      	ldr	r3, [r3, #20]
    2a24:	f003 0301 	and.w	r3, r3, #1
    2a28:	2b00      	cmp	r3, #0
    2a2a:	bf14      	ite	ne
    2a2c:	2301      	movne	r3, #1
    2a2e:	2300      	moveq	r3, #0
    2a30:	b2db      	uxtb	r3, r3
    2a32:	e034      	b.n	2a9e <osc_is_ready+0xb2>
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
    2a34:	4b1d      	ldr	r3, [pc, #116]	; (2aac <osc_is_ready+0xc0>)
    2a36:	695b      	ldr	r3, [r3, #20]
    2a38:	f003 0301 	and.w	r3, r3, #1
    2a3c:	2b00      	cmp	r3, #0
    2a3e:	bf14      	ite	ne
    2a40:	2301      	movne	r3, #1
    2a42:	2300      	moveq	r3, #0
    2a44:	b2db      	uxtb	r3, r3
    2a46:	e02a      	b.n	2a9e <osc_is_ready+0xb2>
		return !!(BSCIF->BSCIF_RC32KCR & (BSCIF_RC32KCR_EN));
    2a48:	4b18      	ldr	r3, [pc, #96]	; (2aac <osc_is_ready+0xc0>)
    2a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2a4c:	f003 0301 	and.w	r3, r3, #1
    2a50:	2b00      	cmp	r3, #0
    2a52:	bf14      	ite	ne
    2a54:	2301      	movne	r3, #1
    2a56:	2300      	moveq	r3, #0
    2a58:	b2db      	uxtb	r3, r3
    2a5a:	e020      	b.n	2a9e <osc_is_ready+0xb2>
		return !!(SCIF->SCIF_RC80MCR & (SCIF_RC80MCR_EN));
    2a5c:	4b12      	ldr	r3, [pc, #72]	; (2aa8 <osc_is_ready+0xbc>)
    2a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2a60:	f003 0301 	and.w	r3, r3, #1
    2a64:	2b00      	cmp	r3, #0
    2a66:	bf14      	ite	ne
    2a68:	2301      	movne	r3, #1
    2a6a:	2300      	moveq	r3, #0
    2a6c:	b2db      	uxtb	r3, r3
    2a6e:	e016      	b.n	2a9e <osc_is_ready+0xb2>
		return !!(SCIF->SCIF_RCFASTCFG & (SCIF_RCFASTCFG_EN));
    2a70:	4b0d      	ldr	r3, [pc, #52]	; (2aa8 <osc_is_ready+0xbc>)
    2a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2a74:	f003 0301 	and.w	r3, r3, #1
    2a78:	2b00      	cmp	r3, #0
    2a7a:	bf14      	ite	ne
    2a7c:	2301      	movne	r3, #1
    2a7e:	2300      	moveq	r3, #0
    2a80:	b2db      	uxtb	r3, r3
    2a82:	e00c      	b.n	2a9e <osc_is_ready+0xb2>
		return !!(BSCIF->BSCIF_RC1MCR & (BSCIF_RC1MCR_CLKOE));
    2a84:	4b09      	ldr	r3, [pc, #36]	; (2aac <osc_is_ready+0xc0>)
    2a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2a88:	f003 0301 	and.w	r3, r3, #1
    2a8c:	2b00      	cmp	r3, #0
    2a8e:	bf14      	ite	ne
    2a90:	2301      	movne	r3, #1
    2a92:	2300      	moveq	r3, #0
    2a94:	b2db      	uxtb	r3, r3
    2a96:	e002      	b.n	2a9e <osc_is_ready+0xb2>
		return true;
    2a98:	2301      	movs	r3, #1
    2a9a:	e000      	b.n	2a9e <osc_is_ready+0xb2>
		return false;
    2a9c:	2300      	movs	r3, #0
}
    2a9e:	4618      	mov	r0, r3
    2aa0:	370c      	adds	r7, #12
    2aa2:	46bd      	mov	sp, r7
    2aa4:	bc80      	pop	{r7}
    2aa6:	4770      	bx	lr
    2aa8:	400e0800 	.word	0x400e0800
    2aac:	400f0400 	.word	0x400f0400

00002ab0 <osc_wait_ready>:
{
    2ab0:	b580      	push	{r7, lr}
    2ab2:	b082      	sub	sp, #8
    2ab4:	af00      	add	r7, sp, #0
    2ab6:	4603      	mov	r3, r0
    2ab8:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
    2aba:	bf00      	nop
    2abc:	79fb      	ldrb	r3, [r7, #7]
    2abe:	4618      	mov	r0, r3
    2ac0:	4b05      	ldr	r3, [pc, #20]	; (2ad8 <osc_wait_ready+0x28>)
    2ac2:	4798      	blx	r3
    2ac4:	4603      	mov	r3, r0
    2ac6:	f083 0301 	eor.w	r3, r3, #1
    2aca:	b2db      	uxtb	r3, r3
    2acc:	2b00      	cmp	r3, #0
    2ace:	d1f5      	bne.n	2abc <osc_wait_ready+0xc>
}
    2ad0:	bf00      	nop
    2ad2:	3708      	adds	r7, #8
    2ad4:	46bd      	mov	sp, r7
    2ad6:	bd80      	pop	{r7, pc}
    2ad8:	000029ed 	.word	0x000029ed

00002adc <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		uint32_t id)
{
    2adc:	b480      	push	{r7}
    2ade:	b083      	sub	sp, #12
    2ae0:	af00      	add	r7, sp, #0
    2ae2:	6078      	str	r0, [r7, #4]
    2ae4:	6039      	str	r1, [r7, #0]
	UNUSED(id);
	cfg->ctrl = 0;
    2ae6:	687b      	ldr	r3, [r7, #4]
    2ae8:	2200      	movs	r2, #0
    2aea:	601a      	str	r2, [r3, #0]
}
    2aec:	bf00      	nop
    2aee:	370c      	adds	r7, #12
    2af0:	46bd      	mov	sp, r7
    2af2:	bc80      	pop	{r7}
    2af4:	4770      	bx	lr

00002af6 <genclk_config_set_source>:
	SCIF->SCIF_GCCTRL[id].SCIF_GCCTRL = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
    2af6:	b480      	push	{r7}
    2af8:	b083      	sub	sp, #12
    2afa:	af00      	add	r7, sp, #0
    2afc:	6078      	str	r0, [r7, #4]
    2afe:	460b      	mov	r3, r1
    2b00:	70fb      	strb	r3, [r7, #3]
	cfg->ctrl = (cfg->ctrl & ~SCIF_GCCTRL_OSCSEL_Msk)
    2b02:	687b      	ldr	r3, [r7, #4]
    2b04:	681b      	ldr	r3, [r3, #0]
    2b06:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
			| SCIF_GCCTRL_OSCSEL(src);
    2b0a:	78fb      	ldrb	r3, [r7, #3]
    2b0c:	021b      	lsls	r3, r3, #8
    2b0e:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    2b12:	431a      	orrs	r2, r3
	cfg->ctrl = (cfg->ctrl & ~SCIF_GCCTRL_OSCSEL_Msk)
    2b14:	687b      	ldr	r3, [r7, #4]
    2b16:	601a      	str	r2, [r3, #0]
}
    2b18:	bf00      	nop
    2b1a:	370c      	adds	r7, #12
    2b1c:	46bd      	mov	sp, r7
    2b1e:	bc80      	pop	{r7}
    2b20:	4770      	bx	lr

00002b22 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		uint32_t divider)
{
    2b22:	b480      	push	{r7}
    2b24:	b083      	sub	sp, #12
    2b26:	af00      	add	r7, sp, #0
    2b28:	6078      	str	r0, [r7, #4]
    2b2a:	6039      	str	r1, [r7, #0]
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(SCIF_GCCTRL_DIVEN
    2b2c:	687b      	ldr	r3, [r7, #4]
    2b2e:	681a      	ldr	r2, [r3, #0]
    2b30:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    2b34:	4013      	ands	r3, r2
    2b36:	687a      	ldr	r2, [r7, #4]
    2b38:	6013      	str	r3, [r2, #0]
			| SCIF_GCCTRL_DIV_Msk);

	if (divider > 1) {
    2b3a:	683b      	ldr	r3, [r7, #0]
    2b3c:	2b01      	cmp	r3, #1
    2b3e:	d90f      	bls.n	2b60 <genclk_config_set_divider+0x3e>
		cfg->ctrl |= SCIF_GCCTRL_DIVEN;
    2b40:	687b      	ldr	r3, [r7, #4]
    2b42:	681b      	ldr	r3, [r3, #0]
    2b44:	f043 0202 	orr.w	r2, r3, #2
    2b48:	687b      	ldr	r3, [r7, #4]
    2b4a:	601a      	str	r2, [r3, #0]
		cfg->ctrl |= SCIF_GCCTRL_DIV(((divider + 1) / 2) - 1);
    2b4c:	687b      	ldr	r3, [r7, #4]
    2b4e:	681a      	ldr	r2, [r3, #0]
    2b50:	683b      	ldr	r3, [r7, #0]
    2b52:	3301      	adds	r3, #1
    2b54:	085b      	lsrs	r3, r3, #1
    2b56:	3b01      	subs	r3, #1
    2b58:	041b      	lsls	r3, r3, #16
    2b5a:	431a      	orrs	r2, r3
    2b5c:	687b      	ldr	r3, [r7, #4]
    2b5e:	601a      	str	r2, [r3, #0]
	}
}
    2b60:	bf00      	nop
    2b62:	370c      	adds	r7, #12
    2b64:	46bd      	mov	sp, r7
    2b66:	bc80      	pop	{r7}
    2b68:	4770      	bx	lr
	...

00002b6c <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		uint32_t id)
{
    2b6c:	b480      	push	{r7}
    2b6e:	b083      	sub	sp, #12
    2b70:	af00      	add	r7, sp, #0
    2b72:	6078      	str	r0, [r7, #4]
    2b74:	6039      	str	r1, [r7, #0]
	 SCIF->SCIF_GCCTRL[id].SCIF_GCCTRL = cfg->ctrl | SCIF_GCCTRL_CEN;
    2b76:	4907      	ldr	r1, [pc, #28]	; (2b94 <genclk_enable+0x28>)
    2b78:	687b      	ldr	r3, [r7, #4]
    2b7a:	681b      	ldr	r3, [r3, #0]
    2b7c:	f043 0201 	orr.w	r2, r3, #1
    2b80:	683b      	ldr	r3, [r7, #0]
    2b82:	331c      	adds	r3, #28
    2b84:	009b      	lsls	r3, r3, #2
    2b86:	440b      	add	r3, r1
    2b88:	605a      	str	r2, [r3, #4]
}
    2b8a:	bf00      	nop
    2b8c:	370c      	adds	r7, #12
    2b8e:	46bd      	mov	sp, r7
    2b90:	bc80      	pop	{r7}
    2b92:	4770      	bx	lr
    2b94:	400e0800 	.word	0x400e0800

00002b98 <dfll_config_set_max_step>:
	uint8_t                 freq_range;     //!< Frequency Range
};

static inline void dfll_config_set_max_step(struct dfll_config *cfg,
		uint16_t coarse, uint16_t fine)
{
    2b98:	b480      	push	{r7}
    2b9a:	b083      	sub	sp, #12
    2b9c:	af00      	add	r7, sp, #0
    2b9e:	6078      	str	r0, [r7, #4]
    2ba0:	460b      	mov	r3, r1
    2ba2:	807b      	strh	r3, [r7, #2]
    2ba4:	4613      	mov	r3, r2
    2ba6:	803b      	strh	r3, [r7, #0]
	cfg->step = (SCIF_DFLL0STEP_CSTEP(coarse)
    2ba8:	887b      	ldrh	r3, [r7, #2]
    2baa:	041b      	lsls	r3, r3, #16
    2bac:	f403 12f8 	and.w	r2, r3, #2031616	; 0x1f0000
			| SCIF_DFLL0STEP_FSTEP(fine));
    2bb0:	883b      	ldrh	r3, [r7, #0]
    2bb2:	b2db      	uxtb	r3, r3
    2bb4:	431a      	orrs	r2, r3
	cfg->step = (SCIF_DFLL0STEP_CSTEP(coarse)
    2bb6:	687b      	ldr	r3, [r7, #4]
    2bb8:	60da      	str	r2, [r3, #12]
}
    2bba:	bf00      	nop
    2bbc:	370c      	adds	r7, #12
    2bbe:	46bd      	mov	sp, r7
    2bc0:	bc80      	pop	{r7}
    2bc2:	4770      	bx	lr

00002bc4 <dfll_priv_set_frequency_range>:

static inline void dfll_priv_set_frequency_range(struct dfll_config *cfg,
		uint32_t freq)
{
    2bc4:	b480      	push	{r7}
    2bc6:	b083      	sub	sp, #12
    2bc8:	af00      	add	r7, sp, #0
    2bca:	6078      	str	r0, [r7, #4]
    2bcc:	6039      	str	r1, [r7, #0]
	if (freq < DFLL_MAX_RANGE3){
    2bce:	683b      	ldr	r3, [r7, #0]
    2bd0:	4a17      	ldr	r2, [pc, #92]	; (2c30 <dfll_priv_set_frequency_range+0x6c>)
    2bd2:	4293      	cmp	r3, r2
    2bd4:	d803      	bhi.n	2bde <dfll_priv_set_frequency_range+0x1a>
		cfg->freq_range = DFLL_RANGE3;
    2bd6:	687b      	ldr	r3, [r7, #4]
    2bd8:	2203      	movs	r2, #3
    2bda:	761a      	strb	r2, [r3, #24]
    2bdc:	e012      	b.n	2c04 <dfll_priv_set_frequency_range+0x40>
	}
	else if (freq < DFLL_MAX_RANGE2){
    2bde:	683b      	ldr	r3, [r7, #0]
    2be0:	4a14      	ldr	r2, [pc, #80]	; (2c34 <dfll_priv_set_frequency_range+0x70>)
    2be2:	4293      	cmp	r3, r2
    2be4:	d803      	bhi.n	2bee <dfll_priv_set_frequency_range+0x2a>
		cfg->freq_range = DFLL_RANGE2;
    2be6:	687b      	ldr	r3, [r7, #4]
    2be8:	2202      	movs	r2, #2
    2bea:	761a      	strb	r2, [r3, #24]
    2bec:	e00a      	b.n	2c04 <dfll_priv_set_frequency_range+0x40>
	}
	else if (freq < DFLL_MAX_RANGE1){
    2bee:	683b      	ldr	r3, [r7, #0]
    2bf0:	4a11      	ldr	r2, [pc, #68]	; (2c38 <dfll_priv_set_frequency_range+0x74>)
    2bf2:	4293      	cmp	r3, r2
    2bf4:	d803      	bhi.n	2bfe <dfll_priv_set_frequency_range+0x3a>
		cfg->freq_range = DFLL_RANGE1;
    2bf6:	687b      	ldr	r3, [r7, #4]
    2bf8:	2201      	movs	r2, #1
    2bfa:	761a      	strb	r2, [r3, #24]
    2bfc:	e002      	b.n	2c04 <dfll_priv_set_frequency_range+0x40>
	}
	else {
		cfg->freq_range = DFLL_RANGE0;
    2bfe:	687b      	ldr	r3, [r7, #4]
    2c00:	2200      	movs	r2, #0
    2c02:	761a      	strb	r2, [r3, #24]
	}
	cfg->conf &= ~SCIF_DFLL0CONF_RANGE_Msk;
    2c04:	687b      	ldr	r3, [r7, #4]
    2c06:	685b      	ldr	r3, [r3, #4]
    2c08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
    2c0c:	687b      	ldr	r3, [r7, #4]
    2c0e:	605a      	str	r2, [r3, #4]
	cfg->conf |=SCIF_DFLL0CONF_RANGE(cfg->freq_range);
    2c10:	687b      	ldr	r3, [r7, #4]
    2c12:	685a      	ldr	r2, [r3, #4]
    2c14:	687b      	ldr	r3, [r7, #4]
    2c16:	7e1b      	ldrb	r3, [r3, #24]
    2c18:	041b      	lsls	r3, r3, #16
    2c1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    2c1e:	431a      	orrs	r2, r3
    2c20:	687b      	ldr	r3, [r7, #4]
    2c22:	605a      	str	r2, [r3, #4]
}
    2c24:	bf00      	nop
    2c26:	370c      	adds	r7, #12
    2c28:	46bd      	mov	sp, r7
    2c2a:	bc80      	pop	{r7}
    2c2c:	4770      	bx	lr
    2c2e:	bf00      	nop
    2c30:	01c9c37f 	.word	0x01c9c37f
    2c34:	03473bbf 	.word	0x03473bbf
    2c38:	068e777f 	.word	0x068e777f

00002c3c <dfll_config_init_closed_loop_mode>:
}

#ifdef CONFIG_DFLL0_FREQ
static inline void dfll_config_init_closed_loop_mode(struct dfll_config *cfg,
		dfll_refclk_t refclk, uint16_t divide, uint16_t mul)
{
    2c3c:	b580      	push	{r7, lr}
    2c3e:	b084      	sub	sp, #16
    2c40:	af00      	add	r7, sp, #0
    2c42:	60f8      	str	r0, [r7, #12]
    2c44:	4608      	mov	r0, r1
    2c46:	4611      	mov	r1, r2
    2c48:	461a      	mov	r2, r3
    2c4a:	4603      	mov	r3, r0
    2c4c:	72fb      	strb	r3, [r7, #11]
    2c4e:	460b      	mov	r3, r1
    2c50:	813b      	strh	r3, [r7, #8]
    2c52:	4613      	mov	r3, r2
    2c54:	80fb      	strh	r3, [r7, #6]
	/*
	 * Set up generic clock source with specified reference clock
	 * and divider.
	 */
	genclk_config_defaults(&cfg->ref_cfg, 0);
    2c56:	68fb      	ldr	r3, [r7, #12]
    2c58:	2100      	movs	r1, #0
    2c5a:	4618      	mov	r0, r3
    2c5c:	4b1b      	ldr	r3, [pc, #108]	; (2ccc <dfll_config_init_closed_loop_mode+0x90>)
    2c5e:	4798      	blx	r3
	genclk_config_set_source(&cfg->ref_cfg, refclk);
    2c60:	68fb      	ldr	r3, [r7, #12]
    2c62:	7afa      	ldrb	r2, [r7, #11]
    2c64:	4611      	mov	r1, r2
    2c66:	4618      	mov	r0, r3
    2c68:	4b19      	ldr	r3, [pc, #100]	; (2cd0 <dfll_config_init_closed_loop_mode+0x94>)
    2c6a:	4798      	blx	r3
	genclk_config_set_divider(&cfg->ref_cfg, divide);
    2c6c:	68fb      	ldr	r3, [r7, #12]
    2c6e:	893a      	ldrh	r2, [r7, #8]
    2c70:	4611      	mov	r1, r2
    2c72:	4618      	mov	r0, r3
    2c74:	4b17      	ldr	r3, [pc, #92]	; (2cd4 <dfll_config_init_closed_loop_mode+0x98>)
    2c76:	4798      	blx	r3

	// Do a sync before reading a dfll conf register
	SCIF->SCIF_DFLL0SYNC = SCIF_DFLL0SYNC_SYNC;
    2c78:	4b17      	ldr	r3, [pc, #92]	; (2cd8 <dfll_config_init_closed_loop_mode+0x9c>)
    2c7a:	2201      	movs	r2, #1
    2c7c:	641a      	str	r2, [r3, #64]	; 0x40
	while (!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0RDY));
    2c7e:	bf00      	nop
    2c80:	4b15      	ldr	r3, [pc, #84]	; (2cd8 <dfll_config_init_closed_loop_mode+0x9c>)
    2c82:	695b      	ldr	r3, [r3, #20]
    2c84:	f003 0308 	and.w	r3, r3, #8
    2c88:	2b00      	cmp	r3, #0
    2c8a:	d0f9      	beq.n	2c80 <dfll_config_init_closed_loop_mode+0x44>
	cfg->conf = SCIF->SCIF_DFLL0CONF;
    2c8c:	4b12      	ldr	r3, [pc, #72]	; (2cd8 <dfll_config_init_closed_loop_mode+0x9c>)
    2c8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2c90:	68fb      	ldr	r3, [r7, #12]
    2c92:	605a      	str	r2, [r3, #4]
	// Select Closed Loop Mode
	cfg->conf |= SCIF_DFLL0CONF_MODE;
    2c94:	68fb      	ldr	r3, [r7, #12]
    2c96:	685b      	ldr	r3, [r3, #4]
    2c98:	f043 0202 	orr.w	r2, r3, #2
    2c9c:	68fb      	ldr	r3, [r7, #12]
    2c9e:	605a      	str	r2, [r3, #4]
	// Write DFLL Frequency Range
	dfll_priv_set_frequency_range(cfg, CONFIG_DFLL0_FREQ);
    2ca0:	490e      	ldr	r1, [pc, #56]	; (2cdc <dfll_config_init_closed_loop_mode+0xa0>)
    2ca2:	68f8      	ldr	r0, [r7, #12]
    2ca4:	4b0e      	ldr	r3, [pc, #56]	; (2ce0 <dfll_config_init_closed_loop_mode+0xa4>)
    2ca6:	4798      	blx	r3

	cfg->mul = mul;
    2ca8:	88fa      	ldrh	r2, [r7, #6]
    2caa:	68fb      	ldr	r3, [r7, #12]
    2cac:	609a      	str	r2, [r3, #8]
	cfg->val = 0;
    2cae:	68fb      	ldr	r3, [r7, #12]
    2cb0:	2200      	movs	r2, #0
    2cb2:	615a      	str	r2, [r3, #20]
	/*
	 * Initial step length of 4. If this is set too high, the DFLL
	 * may fail to lock.
	 */
	dfll_config_set_max_step(cfg, 4, 4);
    2cb4:	2204      	movs	r2, #4
    2cb6:	2104      	movs	r1, #4
    2cb8:	68f8      	ldr	r0, [r7, #12]
    2cba:	4b0a      	ldr	r3, [pc, #40]	; (2ce4 <dfll_config_init_closed_loop_mode+0xa8>)
    2cbc:	4798      	blx	r3
	cfg->ssg = 0;
    2cbe:	68fb      	ldr	r3, [r7, #12]
    2cc0:	2200      	movs	r2, #0
    2cc2:	611a      	str	r2, [r3, #16]
}
    2cc4:	bf00      	nop
    2cc6:	3710      	adds	r7, #16
    2cc8:	46bd      	mov	sp, r7
    2cca:	bd80      	pop	{r7, pc}
    2ccc:	00002add 	.word	0x00002add
    2cd0:	00002af7 	.word	0x00002af7
    2cd4:	00002b23 	.word	0x00002b23
    2cd8:	400e0800 	.word	0x400e0800
    2cdc:	02dc6c00 	.word	0x02dc6c00
    2ce0:	00002bc5 	.word	0x00002bc5
    2ce4:	00002b99 	.word	0x00002b99

00002ce8 <dfll_is_fine_locked>:
	UNUSED(dfll_id);
	return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0LOCKC);
}

static inline bool dfll_is_fine_locked(uint32_t dfll_id)
{
    2ce8:	b480      	push	{r7}
    2cea:	b083      	sub	sp, #12
    2cec:	af00      	add	r7, sp, #0
    2cee:	6078      	str	r0, [r7, #4]
	UNUSED(dfll_id);
	return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0LOCKF);
    2cf0:	4b06      	ldr	r3, [pc, #24]	; (2d0c <dfll_is_fine_locked+0x24>)
    2cf2:	695b      	ldr	r3, [r3, #20]
    2cf4:	f003 0304 	and.w	r3, r3, #4
    2cf8:	2b00      	cmp	r3, #0
    2cfa:	bf14      	ite	ne
    2cfc:	2301      	movne	r3, #1
    2cfe:	2300      	moveq	r3, #0
    2d00:	b2db      	uxtb	r3, r3
}
    2d02:	4618      	mov	r0, r3
    2d04:	370c      	adds	r7, #12
    2d06:	46bd      	mov	sp, r7
    2d08:	bc80      	pop	{r7}
    2d0a:	4770      	bx	lr
    2d0c:	400e0800 	.word	0x400e0800

00002d10 <dfll_enable_source>:
	return (dfll_is_coarse_locked(dfll_id) &&
			dfll_is_fine_locked(dfll_id));
}

static inline void dfll_enable_source(dfll_refclk_t src)
{
    2d10:	b580      	push	{r7, lr}
    2d12:	b082      	sub	sp, #8
    2d14:	af00      	add	r7, sp, #0
    2d16:	4603      	mov	r3, r0
    2d18:	71fb      	strb	r3, [r7, #7]
	switch (src) {
    2d1a:	79fb      	ldrb	r3, [r7, #7]
    2d1c:	2b0d      	cmp	r3, #13
    2d1e:	d85f      	bhi.n	2de0 <dfll_enable_source+0xd0>
    2d20:	a201      	add	r2, pc, #4	; (adr r2, 2d28 <dfll_enable_source+0x18>)
    2d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2d26:	bf00      	nop
    2d28:	00002de1 	.word	0x00002de1
    2d2c:	00002d61 	.word	0x00002d61
    2d30:	00002de1 	.word	0x00002de1
    2d34:	00002d81 	.word	0x00002d81
    2d38:	00002da1 	.word	0x00002da1
    2d3c:	00002de1 	.word	0x00002de1
    2d40:	00002de1 	.word	0x00002de1
    2d44:	00002de1 	.word	0x00002de1
    2d48:	00002de1 	.word	0x00002de1
    2d4c:	00002de1 	.word	0x00002de1
    2d50:	00002de1 	.word	0x00002de1
    2d54:	00002de1 	.word	0x00002de1
    2d58:	00002de1 	.word	0x00002de1
    2d5c:	00002dc1 	.word	0x00002dc1
		/* Nothing to do */
		break;

#ifdef BOARD_OSC32_HZ
	case GENCLK_SRC_OSC32K:
		if (!osc_is_ready(OSC_ID_OSC32)) {
    2d60:	2001      	movs	r0, #1
    2d62:	4b26      	ldr	r3, [pc, #152]	; (2dfc <dfll_enable_source+0xec>)
    2d64:	4798      	blx	r3
    2d66:	4603      	mov	r3, r0
    2d68:	f083 0301 	eor.w	r3, r3, #1
    2d6c:	b2db      	uxtb	r3, r3
    2d6e:	2b00      	cmp	r3, #0
    2d70:	d038      	beq.n	2de4 <dfll_enable_source+0xd4>
			osc_enable(OSC_ID_OSC32);
    2d72:	2001      	movs	r0, #1
    2d74:	4b22      	ldr	r3, [pc, #136]	; (2e00 <dfll_enable_source+0xf0>)
    2d76:	4798      	blx	r3
			osc_wait_ready(OSC_ID_OSC32);
    2d78:	2001      	movs	r0, #1
    2d7a:	4b22      	ldr	r3, [pc, #136]	; (2e04 <dfll_enable_source+0xf4>)
    2d7c:	4798      	blx	r3
		}
		break;
    2d7e:	e031      	b.n	2de4 <dfll_enable_source+0xd4>
#endif

#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
    2d80:	2000      	movs	r0, #0
    2d82:	4b1e      	ldr	r3, [pc, #120]	; (2dfc <dfll_enable_source+0xec>)
    2d84:	4798      	blx	r3
    2d86:	4603      	mov	r3, r0
    2d88:	f083 0301 	eor.w	r3, r3, #1
    2d8c:	b2db      	uxtb	r3, r3
    2d8e:	2b00      	cmp	r3, #0
    2d90:	d02a      	beq.n	2de8 <dfll_enable_source+0xd8>
			osc_enable(OSC_ID_OSC0);
    2d92:	2000      	movs	r0, #0
    2d94:	4b1a      	ldr	r3, [pc, #104]	; (2e00 <dfll_enable_source+0xf0>)
    2d96:	4798      	blx	r3
			osc_wait_ready(OSC_ID_OSC0);
    2d98:	2000      	movs	r0, #0
    2d9a:	4b1a      	ldr	r3, [pc, #104]	; (2e04 <dfll_enable_source+0xf4>)
    2d9c:	4798      	blx	r3
		}
		break;
    2d9e:	e023      	b.n	2de8 <dfll_enable_source+0xd8>
#endif

	case GENCLK_SRC_RC80M:
		if (!osc_is_ready(OSC_ID_RC80M)) {
    2da0:	2003      	movs	r0, #3
    2da2:	4b16      	ldr	r3, [pc, #88]	; (2dfc <dfll_enable_source+0xec>)
    2da4:	4798      	blx	r3
    2da6:	4603      	mov	r3, r0
    2da8:	f083 0301 	eor.w	r3, r3, #1
    2dac:	b2db      	uxtb	r3, r3
    2dae:	2b00      	cmp	r3, #0
    2db0:	d01c      	beq.n	2dec <dfll_enable_source+0xdc>
			osc_enable(OSC_ID_RC80M);
    2db2:	2003      	movs	r0, #3
    2db4:	4b12      	ldr	r3, [pc, #72]	; (2e00 <dfll_enable_source+0xf0>)
    2db6:	4798      	blx	r3
			osc_wait_ready(OSC_ID_RC80M);
    2db8:	2003      	movs	r0, #3
    2dba:	4b12      	ldr	r3, [pc, #72]	; (2e04 <dfll_enable_source+0xf4>)
    2dbc:	4798      	blx	r3
		}
		break;
    2dbe:	e015      	b.n	2dec <dfll_enable_source+0xdc>

	case GENCLK_SRC_RC32K:
		if (!osc_is_ready(OSC_ID_RC32K)) {
    2dc0:	2002      	movs	r0, #2
    2dc2:	4b0e      	ldr	r3, [pc, #56]	; (2dfc <dfll_enable_source+0xec>)
    2dc4:	4798      	blx	r3
    2dc6:	4603      	mov	r3, r0
    2dc8:	f083 0301 	eor.w	r3, r3, #1
    2dcc:	b2db      	uxtb	r3, r3
    2dce:	2b00      	cmp	r3, #0
    2dd0:	d00e      	beq.n	2df0 <dfll_enable_source+0xe0>
			osc_enable(OSC_ID_RC32K);
    2dd2:	2002      	movs	r0, #2
    2dd4:	4b0a      	ldr	r3, [pc, #40]	; (2e00 <dfll_enable_source+0xf0>)
    2dd6:	4798      	blx	r3
			osc_wait_ready(OSC_ID_RC32K);
    2dd8:	2002      	movs	r0, #2
    2dda:	4b0a      	ldr	r3, [pc, #40]	; (2e04 <dfll_enable_source+0xf4>)
    2ddc:	4798      	blx	r3
		}
		break;
    2dde:	e007      	b.n	2df0 <dfll_enable_source+0xe0>

	default:
		Assert(false);
		break;
    2de0:	bf00      	nop
    2de2:	e006      	b.n	2df2 <dfll_enable_source+0xe2>
		break;
    2de4:	bf00      	nop
    2de6:	e004      	b.n	2df2 <dfll_enable_source+0xe2>
		break;
    2de8:	bf00      	nop
    2dea:	e002      	b.n	2df2 <dfll_enable_source+0xe2>
		break;
    2dec:	bf00      	nop
    2dee:	e000      	b.n	2df2 <dfll_enable_source+0xe2>
		break;
    2df0:	bf00      	nop
	}
}
    2df2:	bf00      	nop
    2df4:	3708      	adds	r7, #8
    2df6:	46bd      	mov	sp, r7
    2df8:	bd80      	pop	{r7, pc}
    2dfa:	bf00      	nop
    2dfc:	000029ed 	.word	0x000029ed
    2e00:	00002971 	.word	0x00002971
    2e04:	00002ab1 	.word	0x00002ab1

00002e08 <dfll_enable_closed_loop>:
	/* Finally, stop the reference clock */
	genclk_disable(0);
}

void dfll_enable_closed_loop(const struct dfll_config *cfg, uint32_t dfll_id)
{
    2e08:	b580      	push	{r7, lr}
    2e0a:	b088      	sub	sp, #32
    2e0c:	af00      	add	r7, sp, #0
    2e0e:	6078      	str	r0, [r7, #4]
    2e10:	6039      	str	r1, [r7, #0]
	irqflags_t flags;

	UNUSED(dfll_id);

	/* Enable the reference clock */
	genclk_enable(&cfg->ref_cfg, 0);
    2e12:	687b      	ldr	r3, [r7, #4]
    2e14:	2100      	movs	r1, #0
    2e16:	4618      	mov	r0, r3
    2e18:	4b31      	ldr	r3, [pc, #196]	; (2ee0 <dfll_enable_closed_loop+0xd8>)
    2e1a:	4798      	blx	r3
	/*
	 * Enable the DFLL first, but don't wait for the DFLL0RDY bit
	 * because if the DFLL has been disabled before, the DFLL0RDY
	 * bit stays cleared until it is re-enabled.
	 */
	flags = cpu_irq_save();
    2e1c:	4b31      	ldr	r3, [pc, #196]	; (2ee4 <dfll_enable_closed_loop+0xdc>)
    2e1e:	4798      	blx	r3
    2e20:	61f8      	str	r0, [r7, #28]
	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAUL)
    2e22:	4b31      	ldr	r3, [pc, #196]	; (2ee8 <dfll_enable_closed_loop+0xe0>)
    2e24:	4a31      	ldr	r2, [pc, #196]	; (2eec <dfll_enable_closed_loop+0xe4>)
    2e26:	619a      	str	r2, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_DFLL0CONF - (uint32_t)SCIF);
	SCIF->SCIF_DFLL0CONF = SCIF_DFLL0CONF_EN;
    2e28:	4b2f      	ldr	r3, [pc, #188]	; (2ee8 <dfll_enable_closed_loop+0xe0>)
    2e2a:	2201      	movs	r2, #1
    2e2c:	629a      	str	r2, [r3, #40]	; 0x28
	cpu_irq_restore(flags);
    2e2e:	69f8      	ldr	r0, [r7, #28]
    2e30:	4b2f      	ldr	r3, [pc, #188]	; (2ef0 <dfll_enable_closed_loop+0xe8>)
    2e32:	4798      	blx	r3

	/*
	 * Then, configure the DFLL, taking care to wait for the
	 * DFLL0RDY bit before every step.
	 */
	dfll_write_reg(DFLL0STEP, cfg->step);
    2e34:	bf00      	nop
    2e36:	4b2c      	ldr	r3, [pc, #176]	; (2ee8 <dfll_enable_closed_loop+0xe0>)
    2e38:	695b      	ldr	r3, [r3, #20]
    2e3a:	f003 0308 	and.w	r3, r3, #8
    2e3e:	2b00      	cmp	r3, #0
    2e40:	d0f9      	beq.n	2e36 <dfll_enable_closed_loop+0x2e>
    2e42:	4b28      	ldr	r3, [pc, #160]	; (2ee4 <dfll_enable_closed_loop+0xdc>)
    2e44:	4798      	blx	r3
    2e46:	61b8      	str	r0, [r7, #24]
    2e48:	4b27      	ldr	r3, [pc, #156]	; (2ee8 <dfll_enable_closed_loop+0xe0>)
    2e4a:	4a2a      	ldr	r2, [pc, #168]	; (2ef4 <dfll_enable_closed_loop+0xec>)
    2e4c:	619a      	str	r2, [r3, #24]
    2e4e:	4a26      	ldr	r2, [pc, #152]	; (2ee8 <dfll_enable_closed_loop+0xe0>)
    2e50:	687b      	ldr	r3, [r7, #4]
    2e52:	68db      	ldr	r3, [r3, #12]
    2e54:	6353      	str	r3, [r2, #52]	; 0x34
    2e56:	69b8      	ldr	r0, [r7, #24]
    2e58:	4b25      	ldr	r3, [pc, #148]	; (2ef0 <dfll_enable_closed_loop+0xe8>)
    2e5a:	4798      	blx	r3
	dfll_write_reg(DFLL0MUL, cfg->mul);
    2e5c:	bf00      	nop
    2e5e:	4b22      	ldr	r3, [pc, #136]	; (2ee8 <dfll_enable_closed_loop+0xe0>)
    2e60:	695b      	ldr	r3, [r3, #20]
    2e62:	f003 0308 	and.w	r3, r3, #8
    2e66:	2b00      	cmp	r3, #0
    2e68:	d0f9      	beq.n	2e5e <dfll_enable_closed_loop+0x56>
    2e6a:	4b1e      	ldr	r3, [pc, #120]	; (2ee4 <dfll_enable_closed_loop+0xdc>)
    2e6c:	4798      	blx	r3
    2e6e:	6178      	str	r0, [r7, #20]
    2e70:	4b1d      	ldr	r3, [pc, #116]	; (2ee8 <dfll_enable_closed_loop+0xe0>)
    2e72:	4a21      	ldr	r2, [pc, #132]	; (2ef8 <dfll_enable_closed_loop+0xf0>)
    2e74:	619a      	str	r2, [r3, #24]
    2e76:	4a1c      	ldr	r2, [pc, #112]	; (2ee8 <dfll_enable_closed_loop+0xe0>)
    2e78:	687b      	ldr	r3, [r7, #4]
    2e7a:	689b      	ldr	r3, [r3, #8]
    2e7c:	6313      	str	r3, [r2, #48]	; 0x30
    2e7e:	6978      	ldr	r0, [r7, #20]
    2e80:	4b1b      	ldr	r3, [pc, #108]	; (2ef0 <dfll_enable_closed_loop+0xe8>)
    2e82:	4798      	blx	r3
	dfll_write_reg(DFLL0SSG, cfg->ssg);
    2e84:	bf00      	nop
    2e86:	4b18      	ldr	r3, [pc, #96]	; (2ee8 <dfll_enable_closed_loop+0xe0>)
    2e88:	695b      	ldr	r3, [r3, #20]
    2e8a:	f003 0308 	and.w	r3, r3, #8
    2e8e:	2b00      	cmp	r3, #0
    2e90:	d0f9      	beq.n	2e86 <dfll_enable_closed_loop+0x7e>
    2e92:	4b14      	ldr	r3, [pc, #80]	; (2ee4 <dfll_enable_closed_loop+0xdc>)
    2e94:	4798      	blx	r3
    2e96:	6138      	str	r0, [r7, #16]
    2e98:	4b13      	ldr	r3, [pc, #76]	; (2ee8 <dfll_enable_closed_loop+0xe0>)
    2e9a:	4a18      	ldr	r2, [pc, #96]	; (2efc <dfll_enable_closed_loop+0xf4>)
    2e9c:	619a      	str	r2, [r3, #24]
    2e9e:	4a12      	ldr	r2, [pc, #72]	; (2ee8 <dfll_enable_closed_loop+0xe0>)
    2ea0:	687b      	ldr	r3, [r7, #4]
    2ea2:	691b      	ldr	r3, [r3, #16]
    2ea4:	6393      	str	r3, [r2, #56]	; 0x38
    2ea6:	6938      	ldr	r0, [r7, #16]
    2ea8:	4b11      	ldr	r3, [pc, #68]	; (2ef0 <dfll_enable_closed_loop+0xe8>)
    2eaa:	4798      	blx	r3
	dfll_write_reg(DFLL0CONF, cfg->conf | SCIF_DFLL0CONF_EN);
    2eac:	bf00      	nop
    2eae:	4b0e      	ldr	r3, [pc, #56]	; (2ee8 <dfll_enable_closed_loop+0xe0>)
    2eb0:	695b      	ldr	r3, [r3, #20]
    2eb2:	f003 0308 	and.w	r3, r3, #8
    2eb6:	2b00      	cmp	r3, #0
    2eb8:	d0f9      	beq.n	2eae <dfll_enable_closed_loop+0xa6>
    2eba:	4b0a      	ldr	r3, [pc, #40]	; (2ee4 <dfll_enable_closed_loop+0xdc>)
    2ebc:	4798      	blx	r3
    2ebe:	60f8      	str	r0, [r7, #12]
    2ec0:	4b09      	ldr	r3, [pc, #36]	; (2ee8 <dfll_enable_closed_loop+0xe0>)
    2ec2:	4a0a      	ldr	r2, [pc, #40]	; (2eec <dfll_enable_closed_loop+0xe4>)
    2ec4:	619a      	str	r2, [r3, #24]
    2ec6:	4a08      	ldr	r2, [pc, #32]	; (2ee8 <dfll_enable_closed_loop+0xe0>)
    2ec8:	687b      	ldr	r3, [r7, #4]
    2eca:	685b      	ldr	r3, [r3, #4]
    2ecc:	f043 0301 	orr.w	r3, r3, #1
    2ed0:	6293      	str	r3, [r2, #40]	; 0x28
    2ed2:	68f8      	ldr	r0, [r7, #12]
    2ed4:	4b06      	ldr	r3, [pc, #24]	; (2ef0 <dfll_enable_closed_loop+0xe8>)
    2ed6:	4798      	blx	r3
}
    2ed8:	bf00      	nop
    2eda:	3720      	adds	r7, #32
    2edc:	46bd      	mov	sp, r7
    2ede:	bd80      	pop	{r7, pc}
    2ee0:	00002b6d 	.word	0x00002b6d
    2ee4:	000028e9 	.word	0x000028e9
    2ee8:	400e0800 	.word	0x400e0800
    2eec:	aa000028 	.word	0xaa000028
    2ef0:	00002941 	.word	0x00002941
    2ef4:	aa000034 	.word	0xaa000034
    2ef8:	aa000030 	.word	0xaa000030
    2efc:	aa000038 	.word	0xaa000038

00002f00 <dfll_enable_config_defaults>:
	/* Finally, stop the reference clock */
	genclk_disable(0);
}

void dfll_enable_config_defaults(uint32_t dfll_id)
{
    2f00:	b590      	push	{r4, r7, lr}
    2f02:	b08b      	sub	sp, #44	; 0x2c
    2f04:	af00      	add	r7, sp, #0
    2f06:	6078      	str	r0, [r7, #4]
#ifdef CONFIG_DFLL0_SOURCE
	struct dfll_config dfllcfg;
#endif
	static bool open_loop_done = false;

	if((SCIF->SCIF_DFLL0CONF & SCIF_DFLL0CONF_MODE) &&
    2f08:	4b1d      	ldr	r3, [pc, #116]	; (2f80 <dfll_enable_config_defaults+0x80>)
    2f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f0c:	f003 0302 	and.w	r3, r3, #2
    2f10:	2b00      	cmp	r3, #0
    2f12:	d00b      	beq.n	2f2c <dfll_enable_config_defaults+0x2c>
	   (SCIF->SCIF_DFLL0CONF & SCIF_DFLL0CONF_EN)) {
    2f14:	4b1a      	ldr	r3, [pc, #104]	; (2f80 <dfll_enable_config_defaults+0x80>)
    2f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f18:	f003 0301 	and.w	r3, r3, #1
	if((SCIF->SCIF_DFLL0CONF & SCIF_DFLL0CONF_MODE) &&
    2f1c:	2b00      	cmp	r3, #0
    2f1e:	d005      	beq.n	2f2c <dfll_enable_config_defaults+0x2c>
		// Closed-loop mode
		if (dfll_is_fine_locked(dfll_id)) {
    2f20:	6878      	ldr	r0, [r7, #4]
    2f22:	4b18      	ldr	r3, [pc, #96]	; (2f84 <dfll_enable_config_defaults+0x84>)
    2f24:	4798      	blx	r3
    2f26:	4603      	mov	r3, r0
    2f28:	2b00      	cmp	r3, #0
    2f2a:	d123      	bne.n	2f74 <dfll_enable_config_defaults+0x74>
			return; // DFLL already running
		}
	}
	if (open_loop_done == true) {
    2f2c:	4b16      	ldr	r3, [pc, #88]	; (2f88 <dfll_enable_config_defaults+0x88>)
    2f2e:	781b      	ldrb	r3, [r3, #0]
    2f30:	2b00      	cmp	r3, #0
    2f32:	d121      	bne.n	2f78 <dfll_enable_config_defaults+0x78>
		return;
	}

	switch (dfll_id) {
    2f34:	687b      	ldr	r3, [r7, #4]
    2f36:	2b00      	cmp	r3, #0
    2f38:	d000      	beq.n	2f3c <dfll_enable_config_defaults+0x3c>
		break;
#endif

	default:
		Assert(false);
		break;
    2f3a:	e01e      	b.n	2f7a <dfll_enable_config_defaults+0x7a>
		dfll_enable_source(CONFIG_DFLL0_SOURCE);
    2f3c:	2001      	movs	r0, #1
    2f3e:	4b13      	ldr	r3, [pc, #76]	; (2f8c <dfll_enable_config_defaults+0x8c>)
    2f40:	4798      	blx	r3
		dfll_config_init_closed_loop_mode(&dfllcfg,
    2f42:	f107 000c 	add.w	r0, r7, #12
    2f46:	f44f 63b7 	mov.w	r3, #1464	; 0x5b8
    2f4a:	2201      	movs	r2, #1
    2f4c:	2101      	movs	r1, #1
    2f4e:	4c10      	ldr	r4, [pc, #64]	; (2f90 <dfll_enable_config_defaults+0x90>)
    2f50:	47a0      	blx	r4
		dfll_enable_closed_loop(&dfllcfg, dfll_id);
    2f52:	f107 030c 	add.w	r3, r7, #12
    2f56:	6879      	ldr	r1, [r7, #4]
    2f58:	4618      	mov	r0, r3
    2f5a:	4b0e      	ldr	r3, [pc, #56]	; (2f94 <dfll_enable_config_defaults+0x94>)
    2f5c:	4798      	blx	r3
		while (!dfll_is_fine_locked(dfll_id));
    2f5e:	bf00      	nop
    2f60:	6878      	ldr	r0, [r7, #4]
    2f62:	4b08      	ldr	r3, [pc, #32]	; (2f84 <dfll_enable_config_defaults+0x84>)
    2f64:	4798      	blx	r3
    2f66:	4603      	mov	r3, r0
    2f68:	f083 0301 	eor.w	r3, r3, #1
    2f6c:	b2db      	uxtb	r3, r3
    2f6e:	2b00      	cmp	r3, #0
    2f70:	d1f6      	bne.n	2f60 <dfll_enable_config_defaults+0x60>
		break;
    2f72:	e002      	b.n	2f7a <dfll_enable_config_defaults+0x7a>
			return; // DFLL already running
    2f74:	bf00      	nop
    2f76:	e000      	b.n	2f7a <dfll_enable_config_defaults+0x7a>
		return;
    2f78:	bf00      	nop
	}
}
    2f7a:	372c      	adds	r7, #44	; 0x2c
    2f7c:	46bd      	mov	sp, r7
    2f7e:	bd90      	pop	{r4, r7, pc}
    2f80:	400e0800 	.word	0x400e0800
    2f84:	00002ce9 	.word	0x00002ce9
    2f88:	20000344 	.word	0x20000344
    2f8c:	00002d11 	.word	0x00002d11
    2f90:	00002c3d 	.word	0x00002c3d
    2f94:	00002e09 	.word	0x00002e09

00002f98 <cpu_irq_save>:
{
    2f98:	b480      	push	{r7}
    2f9a:	b083      	sub	sp, #12
    2f9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2f9e:	f3ef 8310 	mrs	r3, PRIMASK
    2fa2:	607b      	str	r3, [r7, #4]
  return(result);
    2fa4:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2fa6:	2b00      	cmp	r3, #0
    2fa8:	bf0c      	ite	eq
    2faa:	2301      	moveq	r3, #1
    2fac:	2300      	movne	r3, #0
    2fae:	b2db      	uxtb	r3, r3
    2fb0:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    2fb2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2fb4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2fb8:	4b04      	ldr	r3, [pc, #16]	; (2fcc <cpu_irq_save+0x34>)
    2fba:	2200      	movs	r2, #0
    2fbc:	701a      	strb	r2, [r3, #0]
	return flags;
    2fbe:	683b      	ldr	r3, [r7, #0]
}
    2fc0:	4618      	mov	r0, r3
    2fc2:	370c      	adds	r7, #12
    2fc4:	46bd      	mov	sp, r7
    2fc6:	bc80      	pop	{r7}
    2fc8:	4770      	bx	lr
    2fca:	bf00      	nop
    2fcc:	20000074 	.word	0x20000074

00002fd0 <cpu_irq_is_enabled_flags>:
{
    2fd0:	b480      	push	{r7}
    2fd2:	b083      	sub	sp, #12
    2fd4:	af00      	add	r7, sp, #0
    2fd6:	6078      	str	r0, [r7, #4]
	return (flags);
    2fd8:	687b      	ldr	r3, [r7, #4]
    2fda:	2b00      	cmp	r3, #0
    2fdc:	bf14      	ite	ne
    2fde:	2301      	movne	r3, #1
    2fe0:	2300      	moveq	r3, #0
    2fe2:	b2db      	uxtb	r3, r3
}
    2fe4:	4618      	mov	r0, r3
    2fe6:	370c      	adds	r7, #12
    2fe8:	46bd      	mov	sp, r7
    2fea:	bc80      	pop	{r7}
    2fec:	4770      	bx	lr
	...

00002ff0 <cpu_irq_restore>:
{
    2ff0:	b580      	push	{r7, lr}
    2ff2:	b082      	sub	sp, #8
    2ff4:	af00      	add	r7, sp, #0
    2ff6:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    2ff8:	6878      	ldr	r0, [r7, #4]
    2ffa:	4b07      	ldr	r3, [pc, #28]	; (3018 <cpu_irq_restore+0x28>)
    2ffc:	4798      	blx	r3
    2ffe:	4603      	mov	r3, r0
    3000:	2b00      	cmp	r3, #0
    3002:	d005      	beq.n	3010 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    3004:	4b05      	ldr	r3, [pc, #20]	; (301c <cpu_irq_restore+0x2c>)
    3006:	2201      	movs	r2, #1
    3008:	701a      	strb	r2, [r3, #0]
    300a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    300e:	b662      	cpsie	i
}
    3010:	bf00      	nop
    3012:	3708      	adds	r7, #8
    3014:	46bd      	mov	sp, r7
    3016:	bd80      	pop	{r7, pc}
    3018:	00002fd1 	.word	0x00002fd1
    301c:	20000074 	.word	0x20000074

00003020 <osc_priv_enable_osc0>:
 */
#include <osc.h>

#ifdef BOARD_OSC0_HZ
void osc_priv_enable_osc0(void)
{
    3020:	b580      	push	{r7, lr}
    3022:	b082      	sub	sp, #8
    3024:	af00      	add	r7, sp, #0
	irqflags_t flags;

	flags = cpu_irq_save();
    3026:	4b08      	ldr	r3, [pc, #32]	; (3048 <osc_priv_enable_osc0+0x28>)
    3028:	4798      	blx	r3
    302a:	6078      	str	r0, [r7, #4]
	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
    302c:	4b07      	ldr	r3, [pc, #28]	; (304c <osc_priv_enable_osc0+0x2c>)
    302e:	4a08      	ldr	r2, [pc, #32]	; (3050 <osc_priv_enable_osc0+0x30>)
    3030:	619a      	str	r2, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_OSCCTRL0 - (uint32_t)SCIF);
	SCIF->SCIF_OSCCTRL0 =
    3032:	4b06      	ldr	r3, [pc, #24]	; (304c <osc_priv_enable_osc0+0x2c>)
    3034:	4a07      	ldr	r2, [pc, #28]	; (3054 <osc_priv_enable_osc0+0x34>)
    3036:	621a      	str	r2, [r3, #32]
# if BOARD_OSC0_IS_XTAL == true
			| OSC0_GAIN_VALUE
#endif
			| OSC0_MODE_VALUE
			| SCIF_OSCCTRL0_OSCEN;
	cpu_irq_restore(flags);
    3038:	6878      	ldr	r0, [r7, #4]
    303a:	4b07      	ldr	r3, [pc, #28]	; (3058 <osc_priv_enable_osc0+0x38>)
    303c:	4798      	blx	r3
}
    303e:	bf00      	nop
    3040:	3708      	adds	r7, #8
    3042:	46bd      	mov	sp, r7
    3044:	bd80      	pop	{r7, pc}
    3046:	bf00      	nop
    3048:	00002f99 	.word	0x00002f99
    304c:	400e0800 	.word	0x400e0800
    3050:	aa000020 	.word	0xaa000020
    3054:	00010307 	.word	0x00010307
    3058:	00002ff1 	.word	0x00002ff1

0000305c <osc_priv_enable_osc32>:
}
#endif /* BOARD_OSC0_HZ */

#ifdef BOARD_OSC32_HZ
void osc_priv_enable_osc32(void)
{
    305c:	b580      	push	{r7, lr}
    305e:	b082      	sub	sp, #8
    3060:	af00      	add	r7, sp, #0
	irqflags_t flags;

	flags = cpu_irq_save();
    3062:	4b08      	ldr	r3, [pc, #32]	; (3084 <osc_priv_enable_osc32+0x28>)
    3064:	4798      	blx	r3
    3066:	6078      	str	r0, [r7, #4]
	BSCIF->BSCIF_UNLOCK = BSCIF_UNLOCK_KEY(0xAAu)
    3068:	4b07      	ldr	r3, [pc, #28]	; (3088 <osc_priv_enable_osc32+0x2c>)
    306a:	4a08      	ldr	r2, [pc, #32]	; (308c <osc_priv_enable_osc32+0x30>)
    306c:	619a      	str	r2, [r3, #24]
		| BSCIF_UNLOCK_ADDR((uint32_t)&BSCIF->BSCIF_OSCCTRL32 - (uint32_t)BSCIF);
	BSCIF->BSCIF_OSCCTRL32 =
    306e:	4b06      	ldr	r3, [pc, #24]	; (3088 <osc_priv_enable_osc32+0x2c>)
    3070:	4a07      	ldr	r2, [pc, #28]	; (3090 <osc_priv_enable_osc32+0x34>)
    3072:	621a      	str	r2, [r3, #32]
			| BOARD_OSC32_SELCURR
			| OSC32_MODE_VALUE
			| BSCIF_OSCCTRL32_EN1K
			| BSCIF_OSCCTRL32_EN32K
			| BSCIF_OSCCTRL32_OSC32EN;
	cpu_irq_restore(flags);
    3074:	6878      	ldr	r0, [r7, #4]
    3076:	4b07      	ldr	r3, [pc, #28]	; (3094 <osc_priv_enable_osc32+0x38>)
    3078:	4798      	blx	r3
}
    307a:	bf00      	nop
    307c:	3708      	adds	r7, #8
    307e:	46bd      	mov	sp, r7
    3080:	bd80      	pop	{r7, pc}
    3082:	bf00      	nop
    3084:	00002f99 	.word	0x00002f99
    3088:	400f0400 	.word	0x400f0400
    308c:	aa000020 	.word	0xaa000020
    3090:	0005a10d 	.word	0x0005a10d
    3094:	00002ff1 	.word	0x00002ff1

00003098 <osc_priv_enable_rc32k>:
	cpu_irq_restore(flags);
}
#endif /* BOARD_OSC32_HZ */

void osc_priv_enable_rc32k(void)
{
    3098:	b580      	push	{r7, lr}
    309a:	b082      	sub	sp, #8
    309c:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint32_t temp;

	flags = cpu_irq_save();
    309e:	4b0a      	ldr	r3, [pc, #40]	; (30c8 <osc_priv_enable_rc32k+0x30>)
    30a0:	4798      	blx	r3
    30a2:	6078      	str	r0, [r7, #4]
	temp = BSCIF->BSCIF_RC32KCR;
    30a4:	4b09      	ldr	r3, [pc, #36]	; (30cc <osc_priv_enable_rc32k+0x34>)
    30a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    30a8:	603b      	str	r3, [r7, #0]
	BSCIF->BSCIF_UNLOCK = BSCIF_UNLOCK_KEY(0xAAu)
    30aa:	4b08      	ldr	r3, [pc, #32]	; (30cc <osc_priv_enable_rc32k+0x34>)
    30ac:	4a08      	ldr	r2, [pc, #32]	; (30d0 <osc_priv_enable_rc32k+0x38>)
    30ae:	619a      	str	r2, [r3, #24]
		| BSCIF_UNLOCK_ADDR((uint32_t)&BSCIF->BSCIF_RC32KCR - (uint32_t)BSCIF);
	BSCIF->BSCIF_RC32KCR = temp | BSCIF_RC32KCR_EN32K | BSCIF_RC32KCR_EN;
    30b0:	4a06      	ldr	r2, [pc, #24]	; (30cc <osc_priv_enable_rc32k+0x34>)
    30b2:	683b      	ldr	r3, [r7, #0]
    30b4:	f043 0305 	orr.w	r3, r3, #5
    30b8:	6253      	str	r3, [r2, #36]	; 0x24
	cpu_irq_restore(flags);
    30ba:	6878      	ldr	r0, [r7, #4]
    30bc:	4b05      	ldr	r3, [pc, #20]	; (30d4 <osc_priv_enable_rc32k+0x3c>)
    30be:	4798      	blx	r3
}
    30c0:	bf00      	nop
    30c2:	3708      	adds	r7, #8
    30c4:	46bd      	mov	sp, r7
    30c6:	bd80      	pop	{r7, pc}
    30c8:	00002f99 	.word	0x00002f99
    30cc:	400f0400 	.word	0x400f0400
    30d0:	aa000024 	.word	0xaa000024
    30d4:	00002ff1 	.word	0x00002ff1

000030d8 <osc_priv_enable_rc1m>:
	BSCIF->BSCIF_RC32KCR = temp;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rc1m(void)
{
    30d8:	b580      	push	{r7, lr}
    30da:	b082      	sub	sp, #8
    30dc:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint32_t temp;

	flags = cpu_irq_save();
    30de:	4b0a      	ldr	r3, [pc, #40]	; (3108 <osc_priv_enable_rc1m+0x30>)
    30e0:	4798      	blx	r3
    30e2:	6078      	str	r0, [r7, #4]
	temp = BSCIF->BSCIF_RC1MCR;
    30e4:	4b09      	ldr	r3, [pc, #36]	; (310c <osc_priv_enable_rc1m+0x34>)
    30e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    30e8:	603b      	str	r3, [r7, #0]
	BSCIF->BSCIF_UNLOCK = BSCIF_UNLOCK_KEY(0xAAu)
    30ea:	4b08      	ldr	r3, [pc, #32]	; (310c <osc_priv_enable_rc1m+0x34>)
    30ec:	4a08      	ldr	r2, [pc, #32]	; (3110 <osc_priv_enable_rc1m+0x38>)
    30ee:	619a      	str	r2, [r3, #24]
		| BSCIF_UNLOCK_ADDR((uint32_t)&BSCIF->BSCIF_RC1MCR - (uint32_t)BSCIF);
	BSCIF->BSCIF_RC1MCR = temp | BSCIF_RC1MCR_CLKOE;
    30f0:	4a06      	ldr	r2, [pc, #24]	; (310c <osc_priv_enable_rc1m+0x34>)
    30f2:	683b      	ldr	r3, [r7, #0]
    30f4:	f043 0301 	orr.w	r3, r3, #1
    30f8:	6593      	str	r3, [r2, #88]	; 0x58
	cpu_irq_restore(flags);
    30fa:	6878      	ldr	r0, [r7, #4]
    30fc:	4b05      	ldr	r3, [pc, #20]	; (3114 <osc_priv_enable_rc1m+0x3c>)
    30fe:	4798      	blx	r3
}
    3100:	bf00      	nop
    3102:	3708      	adds	r7, #8
    3104:	46bd      	mov	sp, r7
    3106:	bd80      	pop	{r7, pc}
    3108:	00002f99 	.word	0x00002f99
    310c:	400f0400 	.word	0x400f0400
    3110:	aa000058 	.word	0xaa000058
    3114:	00002ff1 	.word	0x00002ff1

00003118 <osc_priv_enable_rc80m>:
	BSCIF->BSCIF_RC1MCR = temp;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rc80m(void)
{
    3118:	b580      	push	{r7, lr}
    311a:	b082      	sub	sp, #8
    311c:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint32_t temp;

	flags = cpu_irq_save();
    311e:	4b0a      	ldr	r3, [pc, #40]	; (3148 <osc_priv_enable_rc80m+0x30>)
    3120:	4798      	blx	r3
    3122:	6078      	str	r0, [r7, #4]
	temp = SCIF->SCIF_RC80MCR;
    3124:	4b09      	ldr	r3, [pc, #36]	; (314c <osc_priv_enable_rc80m+0x34>)
    3126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    3128:	603b      	str	r3, [r7, #0]
	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
    312a:	4b08      	ldr	r3, [pc, #32]	; (314c <osc_priv_enable_rc80m+0x34>)
    312c:	4a08      	ldr	r2, [pc, #32]	; (3150 <osc_priv_enable_rc80m+0x38>)
    312e:	619a      	str	r2, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_RC80MCR - (uint32_t)SCIF);
	SCIF->SCIF_RC80MCR = temp | SCIF_RC80MCR_EN;
    3130:	4a06      	ldr	r2, [pc, #24]	; (314c <osc_priv_enable_rc80m+0x34>)
    3132:	683b      	ldr	r3, [r7, #0]
    3134:	f043 0301 	orr.w	r3, r3, #1
    3138:	6513      	str	r3, [r2, #80]	; 0x50
	cpu_irq_restore(flags);
    313a:	6878      	ldr	r0, [r7, #4]
    313c:	4b05      	ldr	r3, [pc, #20]	; (3154 <osc_priv_enable_rc80m+0x3c>)
    313e:	4798      	blx	r3
}
    3140:	bf00      	nop
    3142:	3708      	adds	r7, #8
    3144:	46bd      	mov	sp, r7
    3146:	bd80      	pop	{r7, pc}
    3148:	00002f99 	.word	0x00002f99
    314c:	400e0800 	.word	0x400e0800
    3150:	aa000050 	.word	0xaa000050
    3154:	00002ff1 	.word	0x00002ff1

00003158 <osc_priv_enable_rcfast>:
	SCIF->SCIF_RC80MCR = temp;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rcfast(void)
{
    3158:	b580      	push	{r7, lr}
    315a:	b082      	sub	sp, #8
    315c:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint32_t temp;

	flags = cpu_irq_save();
    315e:	4b0c      	ldr	r3, [pc, #48]	; (3190 <osc_priv_enable_rcfast+0x38>)
    3160:	4798      	blx	r3
    3162:	6078      	str	r0, [r7, #4]
	// Let FCD and calibration value by default
	temp = SCIF->SCIF_RCFASTCFG;
    3164:	4b0b      	ldr	r3, [pc, #44]	; (3194 <osc_priv_enable_rcfast+0x3c>)
    3166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3168:	603b      	str	r3, [r7, #0]
	// Clear previous FRANGE value
	temp &= ~SCIF_RCFASTCFG_FRANGE_Msk;
    316a:	683b      	ldr	r3, [r7, #0]
    316c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    3170:	603b      	str	r3, [r7, #0]

	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
    3172:	4b08      	ldr	r3, [pc, #32]	; (3194 <osc_priv_enable_rcfast+0x3c>)
    3174:	4a08      	ldr	r2, [pc, #32]	; (3198 <osc_priv_enable_rcfast+0x40>)
    3176:	619a      	str	r2, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_RCFASTCFG - (uint32_t)SCIF);
	SCIF->SCIF_RCFASTCFG = temp | SCIF_RCFASTCFG_EN
    3178:	4a06      	ldr	r2, [pc, #24]	; (3194 <osc_priv_enable_rcfast+0x3c>)
		| SCIF_RCFASTCFG_FRANGE(CONFIG_RCFAST_FRANGE);
    317a:	683b      	ldr	r3, [r7, #0]
    317c:	f043 0301 	orr.w	r3, r3, #1
	SCIF->SCIF_RCFASTCFG = temp | SCIF_RCFASTCFG_EN
    3180:	6493      	str	r3, [r2, #72]	; 0x48
	cpu_irq_restore(flags);
    3182:	6878      	ldr	r0, [r7, #4]
    3184:	4b05      	ldr	r3, [pc, #20]	; (319c <osc_priv_enable_rcfast+0x44>)
    3186:	4798      	blx	r3
}
    3188:	bf00      	nop
    318a:	3708      	adds	r7, #8
    318c:	46bd      	mov	sp, r7
    318e:	bd80      	pop	{r7, pc}
    3190:	00002f99 	.word	0x00002f99
    3194:	400e0800 	.word	0x400e0800
    3198:	aa000048 	.word	0xaa000048
    319c:	00002ff1 	.word	0x00002ff1

000031a0 <cpu_irq_save>:
{
    31a0:	b480      	push	{r7}
    31a2:	b083      	sub	sp, #12
    31a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    31a6:	f3ef 8310 	mrs	r3, PRIMASK
    31aa:	607b      	str	r3, [r7, #4]
  return(result);
    31ac:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    31ae:	2b00      	cmp	r3, #0
    31b0:	bf0c      	ite	eq
    31b2:	2301      	moveq	r3, #1
    31b4:	2300      	movne	r3, #0
    31b6:	b2db      	uxtb	r3, r3
    31b8:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    31ba:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    31bc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    31c0:	4b04      	ldr	r3, [pc, #16]	; (31d4 <cpu_irq_save+0x34>)
    31c2:	2200      	movs	r2, #0
    31c4:	701a      	strb	r2, [r3, #0]
	return flags;
    31c6:	683b      	ldr	r3, [r7, #0]
}
    31c8:	4618      	mov	r0, r3
    31ca:	370c      	adds	r7, #12
    31cc:	46bd      	mov	sp, r7
    31ce:	bc80      	pop	{r7}
    31d0:	4770      	bx	lr
    31d2:	bf00      	nop
    31d4:	20000074 	.word	0x20000074

000031d8 <cpu_irq_is_enabled_flags>:
{
    31d8:	b480      	push	{r7}
    31da:	b083      	sub	sp, #12
    31dc:	af00      	add	r7, sp, #0
    31de:	6078      	str	r0, [r7, #4]
	return (flags);
    31e0:	687b      	ldr	r3, [r7, #4]
    31e2:	2b00      	cmp	r3, #0
    31e4:	bf14      	ite	ne
    31e6:	2301      	movne	r3, #1
    31e8:	2300      	moveq	r3, #0
    31ea:	b2db      	uxtb	r3, r3
}
    31ec:	4618      	mov	r0, r3
    31ee:	370c      	adds	r7, #12
    31f0:	46bd      	mov	sp, r7
    31f2:	bc80      	pop	{r7}
    31f4:	4770      	bx	lr
	...

000031f8 <cpu_irq_restore>:
{
    31f8:	b580      	push	{r7, lr}
    31fa:	b082      	sub	sp, #8
    31fc:	af00      	add	r7, sp, #0
    31fe:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    3200:	6878      	ldr	r0, [r7, #4]
    3202:	4b07      	ldr	r3, [pc, #28]	; (3220 <cpu_irq_restore+0x28>)
    3204:	4798      	blx	r3
    3206:	4603      	mov	r3, r0
    3208:	2b00      	cmp	r3, #0
    320a:	d005      	beq.n	3218 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    320c:	4b05      	ldr	r3, [pc, #20]	; (3224 <cpu_irq_restore+0x2c>)
    320e:	2201      	movs	r2, #1
    3210:	701a      	strb	r2, [r3, #0]
    3212:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3216:	b662      	cpsie	i
}
    3218:	bf00      	nop
    321a:	3708      	adds	r7, #8
    321c:	46bd      	mov	sp, r7
    321e:	bd80      	pop	{r7, pc}
    3220:	000031d9 	.word	0x000031d9
    3224:	20000074 	.word	0x20000074

00003228 <dfll_priv_get_source_hz>:
{
    3228:	b480      	push	{r7}
    322a:	b083      	sub	sp, #12
    322c:	af00      	add	r7, sp, #0
    322e:	4603      	mov	r3, r0
    3230:	71fb      	strb	r3, [r7, #7]
	switch (src) {
    3232:	79fb      	ldrb	r3, [r7, #7]
    3234:	2b0d      	cmp	r3, #13
    3236:	d82b      	bhi.n	3290 <dfll_priv_get_source_hz+0x68>
    3238:	a201      	add	r2, pc, #4	; (adr r2, 3240 <dfll_priv_get_source_hz+0x18>)
    323a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    323e:	bf00      	nop
    3240:	00003279 	.word	0x00003279
    3244:	0000327d 	.word	0x0000327d
    3248:	00003291 	.word	0x00003291
    324c:	00003283 	.word	0x00003283
    3250:	00003287 	.word	0x00003287
    3254:	00003291 	.word	0x00003291
    3258:	00003291 	.word	0x00003291
    325c:	00003291 	.word	0x00003291
    3260:	00003291 	.word	0x00003291
    3264:	00003291 	.word	0x00003291
    3268:	00003291 	.word	0x00003291
    326c:	00003291 	.word	0x00003291
    3270:	00003291 	.word	0x00003291
    3274:	0000328b 	.word	0x0000328b
		return OSC_RCSYS_NOMINAL_HZ;
    3278:	4b08      	ldr	r3, [pc, #32]	; (329c <dfll_priv_get_source_hz+0x74>)
    327a:	e00a      	b.n	3292 <dfll_priv_get_source_hz+0x6a>
		return BOARD_OSC32_HZ;
    327c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3280:	e007      	b.n	3292 <dfll_priv_get_source_hz+0x6a>
		return BOARD_OSC0_HZ;
    3282:	4b07      	ldr	r3, [pc, #28]	; (32a0 <dfll_priv_get_source_hz+0x78>)
    3284:	e005      	b.n	3292 <dfll_priv_get_source_hz+0x6a>
		return OSC_RC80M_NOMINAL_HZ;
    3286:	4b07      	ldr	r3, [pc, #28]	; (32a4 <dfll_priv_get_source_hz+0x7c>)
    3288:	e003      	b.n	3292 <dfll_priv_get_source_hz+0x6a>
		return OSC_RC32K_NOMINAL_HZ;
    328a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    328e:	e000      	b.n	3292 <dfll_priv_get_source_hz+0x6a>
		return 0;
    3290:	2300      	movs	r3, #0
}
    3292:	4618      	mov	r0, r3
    3294:	370c      	adds	r7, #12
    3296:	46bd      	mov	sp, r7
    3298:	bc80      	pop	{r7}
    329a:	4770      	bx	lr
    329c:	0001c138 	.word	0x0001c138
    32a0:	00b71b00 	.word	0x00b71b00
    32a4:	04c4b400 	.word	0x04c4b400

000032a8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
    32a8:	b580      	push	{r7, lr}
    32aa:	af00      	add	r7, sp, #0
	}
#endif

#ifdef CONFIG_DFLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_DFLL) {
		return dfll_get_default_rate(0);
    32ac:	2001      	movs	r0, #1
    32ae:	4b04      	ldr	r3, [pc, #16]	; (32c0 <sysclk_get_main_hz+0x18>)
    32b0:	4798      	blx	r3
    32b2:	4602      	mov	r2, r0
    32b4:	f44f 63b7 	mov.w	r3, #1464	; 0x5b8
    32b8:	fb03 f302 	mul.w	r3, r3, r2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
    32bc:	4618      	mov	r0, r3
    32be:	bd80      	pop	{r7, pc}
    32c0:	00003229 	.word	0x00003229

000032c4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    32c4:	b580      	push	{r7, lr}
    32c6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
    32c8:	4b02      	ldr	r3, [pc, #8]	; (32d4 <sysclk_get_cpu_hz+0x10>)
    32ca:	4798      	blx	r3
    32cc:	4603      	mov	r3, r0
}
    32ce:	4618      	mov	r0, r3
    32d0:	bd80      	pop	{r7, pc}
    32d2:	bf00      	nop
    32d4:	000032a9 	.word	0x000032a9

000032d8 <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
    32d8:	b580      	push	{r7, lr}
    32da:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
    32dc:	4b02      	ldr	r3, [pc, #8]	; (32e8 <sysclk_get_pba_hz+0x10>)
    32de:	4798      	blx	r3
    32e0:	4603      	mov	r3, r0
}
    32e2:	4618      	mov	r0, r3
    32e4:	bd80      	pop	{r7, pc}
    32e6:	bf00      	nop
    32e8:	000032a9 	.word	0x000032a9

000032ec <sysclk_get_pbb_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus B clock
 *
 * \return Frequency of the Peripheral Bus B clock, in Hz.
 */
static inline uint32_t sysclk_get_pbb_hz(void)
{
    32ec:	b580      	push	{r7, lr}
    32ee:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBB_DIV;
    32f0:	4b02      	ldr	r3, [pc, #8]	; (32fc <sysclk_get_pbb_hz+0x10>)
    32f2:	4798      	blx	r3
    32f4:	4603      	mov	r3, r0
}
    32f6:	4618      	mov	r0, r3
    32f8:	bd80      	pop	{r7, pc}
    32fa:	bf00      	nop
    32fc:	000032a9 	.word	0x000032a9

00003300 <sysclk_get_pbc_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus C clock
 *
 * \return Frequency of the Peripheral Bus C clock, in Hz.
 */
static inline uint32_t sysclk_get_pbc_hz(void)
{
    3300:	b580      	push	{r7, lr}
    3302:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBC_DIV;
    3304:	4b02      	ldr	r3, [pc, #8]	; (3310 <sysclk_get_pbc_hz+0x10>)
    3306:	4798      	blx	r3
    3308:	4603      	mov	r3, r0
}
    330a:	4618      	mov	r0, r3
    330c:	bd80      	pop	{r7, pc}
    330e:	bf00      	nop
    3310:	000032a9 	.word	0x000032a9

00003314 <sysclk_get_pbd_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus D clock
 *
 * \return Frequency of the Peripheral Bus D clock, in Hz.
 */
static inline uint32_t sysclk_get_pbd_hz(void)
{
    3314:	b580      	push	{r7, lr}
    3316:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBD_DIV;
    3318:	4b02      	ldr	r3, [pc, #8]	; (3324 <sysclk_get_pbd_hz+0x10>)
    331a:	4798      	blx	r3
    331c:	4603      	mov	r3, r0
}
    331e:	4618      	mov	r0, r3
    3320:	bd80      	pop	{r7, pc}
    3322:	bf00      	nop
    3324:	000032a9 	.word	0x000032a9

00003328 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
    3328:	b580      	push	{r7, lr}
    332a:	b082      	sub	sp, #8
    332c:	af00      	add	r7, sp, #0
    332e:	6078      	str	r0, [r7, #4]
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    3330:	6879      	ldr	r1, [r7, #4]
    3332:	2001      	movs	r0, #1
    3334:	4b02      	ldr	r3, [pc, #8]	; (3340 <sysclk_enable_hsb_module+0x18>)
    3336:	4798      	blx	r3
}
    3338:	bf00      	nop
    333a:	3708      	adds	r7, #8
    333c:	46bd      	mov	sp, r7
    333e:	bd80      	pop	{r7, pc}
    3340:	0000343d 	.word	0x0000343d

00003344 <sysclk_disable_hsb_module>:
/**
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
    3344:	b580      	push	{r7, lr}
    3346:	b082      	sub	sp, #8
    3348:	af00      	add	r7, sp, #0
    334a:	6078      	str	r0, [r7, #4]
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    334c:	6879      	ldr	r1, [r7, #4]
    334e:	2001      	movs	r0, #1
    3350:	4b02      	ldr	r3, [pc, #8]	; (335c <sysclk_disable_hsb_module+0x18>)
    3352:	4798      	blx	r3
}
    3354:	bf00      	nop
    3356:	3708      	adds	r7, #8
    3358:	46bd      	mov	sp, r7
    335a:	bd80      	pop	{r7, pc}
    335c:	000034a5 	.word	0x000034a5

00003360 <sysclk_enable_pbc_module>:
/**
 * \brief Enable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbc_module(uint32_t module_index)
{
    3360:	b580      	push	{r7, lr}
    3362:	b082      	sub	sp, #8
    3364:	af00      	add	r7, sp, #0
    3366:	6078      	str	r0, [r7, #4]
	sysclk_priv_enable_module(PM_CLK_GRP_PBC, module_index);
    3368:	6879      	ldr	r1, [r7, #4]
    336a:	2004      	movs	r0, #4
    336c:	4b02      	ldr	r3, [pc, #8]	; (3378 <sysclk_enable_pbc_module+0x18>)
    336e:	4798      	blx	r3
}
    3370:	bf00      	nop
    3372:	3708      	adds	r7, #8
    3374:	46bd      	mov	sp, r7
    3376:	bd80      	pop	{r7, pc}
    3378:	0000343d 	.word	0x0000343d

0000337c <sysclk_disable_pbc_module>:
/**
 * \brief Disable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbc_module(uint32_t module_index)
{
    337c:	b580      	push	{r7, lr}
    337e:	b082      	sub	sp, #8
    3380:	af00      	add	r7, sp, #0
    3382:	6078      	str	r0, [r7, #4]
	sysclk_priv_disable_module(PM_CLK_GRP_PBC, module_index);
    3384:	6879      	ldr	r1, [r7, #4]
    3386:	2004      	movs	r0, #4
    3388:	4b02      	ldr	r3, [pc, #8]	; (3394 <sysclk_disable_pbc_module+0x18>)
    338a:	4798      	blx	r3
}
    338c:	bf00      	nop
    338e:	3708      	adds	r7, #8
    3390:	46bd      	mov	sp, r7
    3392:	bd80      	pop	{r7, pc}
    3394:	000034a5 	.word	0x000034a5

00003398 <sysclk_enable_pbd_module>:
/**
 * \brief Enable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbd_module(uint32_t module_index)
{
    3398:	b580      	push	{r7, lr}
    339a:	b082      	sub	sp, #8
    339c:	af00      	add	r7, sp, #0
    339e:	6078      	str	r0, [r7, #4]
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
    33a0:	6879      	ldr	r1, [r7, #4]
    33a2:	2005      	movs	r0, #5
    33a4:	4b02      	ldr	r3, [pc, #8]	; (33b0 <sysclk_enable_pbd_module+0x18>)
    33a6:	4798      	blx	r3
}
    33a8:	bf00      	nop
    33aa:	3708      	adds	r7, #8
    33ac:	46bd      	mov	sp, r7
    33ae:	bd80      	pop	{r7, pc}
    33b0:	0000343d 	.word	0x0000343d

000033b4 <sysclk_disable_pbd_module>:
/**
 * \brief Disable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbd_module(uint32_t module_index)
{
    33b4:	b580      	push	{r7, lr}
    33b6:	b082      	sub	sp, #8
    33b8:	af00      	add	r7, sp, #0
    33ba:	6078      	str	r0, [r7, #4]
	sysclk_priv_disable_module(PM_CLK_GRP_PBD, module_index);
    33bc:	6879      	ldr	r1, [r7, #4]
    33be:	2005      	movs	r0, #5
    33c0:	4b02      	ldr	r3, [pc, #8]	; (33cc <sysclk_disable_pbd_module+0x18>)
    33c2:	4798      	blx	r3
}
    33c4:	bf00      	nop
    33c6:	3708      	adds	r7, #8
    33c8:	46bd      	mov	sp, r7
    33ca:	bd80      	pop	{r7, pc}
    33cc:	000034a5 	.word	0x000034a5

000033d0 <sysclk_enable_pba_divmask>:
/**
 * \brief Enable divided clock mask derived from the PBA clock
 * \param mask mask of the divided clock in the PBADIVMASK register
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
    33d0:	b480      	push	{r7}
    33d2:	b085      	sub	sp, #20
    33d4:	af00      	add	r7, sp, #0
    33d6:	6078      	str	r0, [r7, #4]
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    33d8:	4b08      	ldr	r3, [pc, #32]	; (33fc <sysclk_enable_pba_divmask+0x2c>)
    33da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    33dc:	60fb      	str	r3, [r7, #12]
	temp_mask |= mask;
    33de:	68fa      	ldr	r2, [r7, #12]
    33e0:	687b      	ldr	r3, [r7, #4]
    33e2:	4313      	orrs	r3, r2
    33e4:	60fb      	str	r3, [r7, #12]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    33e6:	4b05      	ldr	r3, [pc, #20]	; (33fc <sysclk_enable_pba_divmask+0x2c>)
    33e8:	4a05      	ldr	r2, [pc, #20]	; (3400 <sysclk_enable_pba_divmask+0x30>)
    33ea:	659a      	str	r2, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    33ec:	4a03      	ldr	r2, [pc, #12]	; (33fc <sysclk_enable_pba_divmask+0x2c>)
    33ee:	68fb      	ldr	r3, [r7, #12]
    33f0:	6413      	str	r3, [r2, #64]	; 0x40
}
    33f2:	bf00      	nop
    33f4:	3714      	adds	r7, #20
    33f6:	46bd      	mov	sp, r7
    33f8:	bc80      	pop	{r7}
    33fa:	4770      	bx	lr
    33fc:	400e0000 	.word	0x400e0000
    3400:	aa000040 	.word	0xaa000040

00003404 <sysclk_disable_pba_divmask>:
/**
 * \brief Disable divided clock mask derived from the PBA clock
 * \param mask mask of the divided clock in the PBADIVMASK register
 */
static inline void sysclk_disable_pba_divmask(uint32_t mask)
{
    3404:	b480      	push	{r7}
    3406:	b085      	sub	sp, #20
    3408:	af00      	add	r7, sp, #0
    340a:	6078      	str	r0, [r7, #4]
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    340c:	4b09      	ldr	r3, [pc, #36]	; (3434 <sysclk_disable_pba_divmask+0x30>)
    340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3410:	60fb      	str	r3, [r7, #12]
	temp_mask &= ~mask;
    3412:	687b      	ldr	r3, [r7, #4]
    3414:	43db      	mvns	r3, r3
    3416:	68fa      	ldr	r2, [r7, #12]
    3418:	4013      	ands	r3, r2
    341a:	60fb      	str	r3, [r7, #12]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    341c:	4b05      	ldr	r3, [pc, #20]	; (3434 <sysclk_disable_pba_divmask+0x30>)
    341e:	4a06      	ldr	r2, [pc, #24]	; (3438 <sysclk_disable_pba_divmask+0x34>)
    3420:	659a      	str	r2, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    3422:	4a04      	ldr	r2, [pc, #16]	; (3434 <sysclk_disable_pba_divmask+0x30>)
    3424:	68fb      	ldr	r3, [r7, #12]
    3426:	6413      	str	r3, [r2, #64]	; 0x40
}
    3428:	bf00      	nop
    342a:	3714      	adds	r7, #20
    342c:	46bd      	mov	sp, r7
    342e:	bc80      	pop	{r7}
    3430:	4770      	bx	lr
    3432:	bf00      	nop
    3434:	400e0000 	.word	0x400e0000
    3438:	aa000040 	.word	0xaa000040

0000343c <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(uint32_t bus_id, uint32_t module_index)
{
    343c:	b580      	push	{r7, lr}
    343e:	b084      	sub	sp, #16
    3440:	af00      	add	r7, sp, #0
    3442:	6078      	str	r0, [r7, #4]
    3444:	6039      	str	r1, [r7, #0]
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
    3446:	4b13      	ldr	r3, [pc, #76]	; (3494 <sysclk_priv_enable_module+0x58>)
    3448:	4798      	blx	r3
    344a:	60f8      	str	r0, [r7, #12]

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    344c:	687b      	ldr	r3, [r7, #4]
    344e:	009a      	lsls	r2, r3, #2
    3450:	4b11      	ldr	r3, [pc, #68]	; (3498 <sysclk_priv_enable_module+0x5c>)
    3452:	4413      	add	r3, r2
    3454:	681b      	ldr	r3, [r3, #0]
    3456:	60bb      	str	r3, [r7, #8]
	mask |= 1U << module_index;
    3458:	2201      	movs	r2, #1
    345a:	683b      	ldr	r3, [r7, #0]
    345c:	fa02 f303 	lsl.w	r3, r2, r3
    3460:	68ba      	ldr	r2, [r7, #8]
    3462:	4313      	orrs	r3, r2
    3464:	60bb      	str	r3, [r7, #8]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    3466:	4a0d      	ldr	r2, [pc, #52]	; (349c <sysclk_priv_enable_module+0x60>)
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    3468:	687b      	ldr	r3, [r7, #4]
    346a:	3308      	adds	r3, #8
    346c:	009b      	lsls	r3, r3, #2
    346e:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    3472:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
    3476:	6593      	str	r3, [r2, #88]	; 0x58
	*(&PM->PM_CPUMASK + bus_id) = mask;
    3478:	687b      	ldr	r3, [r7, #4]
    347a:	009a      	lsls	r2, r3, #2
    347c:	4b06      	ldr	r3, [pc, #24]	; (3498 <sysclk_priv_enable_module+0x5c>)
    347e:	4413      	add	r3, r2
    3480:	68ba      	ldr	r2, [r7, #8]
    3482:	601a      	str	r2, [r3, #0]

	cpu_irq_restore(flags);
    3484:	68f8      	ldr	r0, [r7, #12]
    3486:	4b06      	ldr	r3, [pc, #24]	; (34a0 <sysclk_priv_enable_module+0x64>)
    3488:	4798      	blx	r3
}
    348a:	bf00      	nop
    348c:	3710      	adds	r7, #16
    348e:	46bd      	mov	sp, r7
    3490:	bd80      	pop	{r7, pc}
    3492:	bf00      	nop
    3494:	000031a1 	.word	0x000031a1
    3498:	400e0020 	.word	0x400e0020
    349c:	400e0000 	.word	0x400e0000
    34a0:	000031f9 	.word	0x000031f9

000034a4 <sysclk_priv_disable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be disabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_disable_module(uint32_t bus_id, uint32_t module_index)
{
    34a4:	b580      	push	{r7, lr}
    34a6:	b084      	sub	sp, #16
    34a8:	af00      	add	r7, sp, #0
    34aa:	6078      	str	r0, [r7, #4]
    34ac:	6039      	str	r1, [r7, #0]
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
    34ae:	4b13      	ldr	r3, [pc, #76]	; (34fc <sysclk_priv_disable_module+0x58>)
    34b0:	4798      	blx	r3
    34b2:	60f8      	str	r0, [r7, #12]

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    34b4:	687b      	ldr	r3, [r7, #4]
    34b6:	009a      	lsls	r2, r3, #2
    34b8:	4b11      	ldr	r3, [pc, #68]	; (3500 <sysclk_priv_disable_module+0x5c>)
    34ba:	4413      	add	r3, r2
    34bc:	681b      	ldr	r3, [r3, #0]
    34be:	60bb      	str	r3, [r7, #8]
	mask &= ~(1U << module_index);
    34c0:	2201      	movs	r2, #1
    34c2:	683b      	ldr	r3, [r7, #0]
    34c4:	fa02 f303 	lsl.w	r3, r2, r3
    34c8:	43db      	mvns	r3, r3
    34ca:	68ba      	ldr	r2, [r7, #8]
    34cc:	4013      	ands	r3, r2
    34ce:	60bb      	str	r3, [r7, #8]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    34d0:	4a0c      	ldr	r2, [pc, #48]	; (3504 <sysclk_priv_disable_module+0x60>)
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    34d2:	687b      	ldr	r3, [r7, #4]
    34d4:	3308      	adds	r3, #8
    34d6:	009b      	lsls	r3, r3, #2
    34d8:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    34dc:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
    34e0:	6593      	str	r3, [r2, #88]	; 0x58
	*(&PM->PM_CPUMASK + bus_id) = mask;
    34e2:	687b      	ldr	r3, [r7, #4]
    34e4:	009a      	lsls	r2, r3, #2
    34e6:	4b06      	ldr	r3, [pc, #24]	; (3500 <sysclk_priv_disable_module+0x5c>)
    34e8:	4413      	add	r3, r2
    34ea:	68ba      	ldr	r2, [r7, #8]
    34ec:	601a      	str	r2, [r3, #0]

	cpu_irq_restore(flags);
    34ee:	68f8      	ldr	r0, [r7, #12]
    34f0:	4b05      	ldr	r3, [pc, #20]	; (3508 <sysclk_priv_disable_module+0x64>)
    34f2:	4798      	blx	r3
}
    34f4:	bf00      	nop
    34f6:	3710      	adds	r7, #16
    34f8:	46bd      	mov	sp, r7
    34fa:	bd80      	pop	{r7, pc}
    34fc:	000031a1 	.word	0x000031a1
    3500:	400e0020 	.word	0x400e0020
    3504:	400e0000 	.word	0x400e0000
    3508:	000031f9 	.word	0x000031f9

0000350c <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_enable_pba_module(uint32_t module_index)
{
    350c:	b580      	push	{r7, lr}
    350e:	b084      	sub	sp, #16
    3510:	af00      	add	r7, sp, #0
    3512:	6078      	str	r0, [r7, #4]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();
    3514:	4b0a      	ldr	r3, [pc, #40]	; (3540 <sysclk_enable_pba_module+0x34>)
    3516:	4798      	blx	r3
    3518:	60f8      	str	r0, [r7, #12]

	if (PM->PM_PBAMASK == 0) {
    351a:	4b0a      	ldr	r3, [pc, #40]	; (3544 <sysclk_enable_pba_module+0x38>)
    351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    351e:	2b00      	cmp	r3, #0
    3520:	d102      	bne.n	3528 <sysclk_enable_pba_module+0x1c>
		sysclk_enable_hsb_module(SYSCLK_PBA_BRIDGE);
    3522:	2005      	movs	r0, #5
    3524:	4b08      	ldr	r3, [pc, #32]	; (3548 <sysclk_enable_pba_module+0x3c>)
    3526:	4798      	blx	r3
	}

	cpu_irq_restore(flags);
    3528:	68f8      	ldr	r0, [r7, #12]
    352a:	4b08      	ldr	r3, [pc, #32]	; (354c <sysclk_enable_pba_module+0x40>)
    352c:	4798      	blx	r3

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBA, module_index);
    352e:	6879      	ldr	r1, [r7, #4]
    3530:	2002      	movs	r0, #2
    3532:	4b07      	ldr	r3, [pc, #28]	; (3550 <sysclk_enable_pba_module+0x44>)
    3534:	4798      	blx	r3
}
    3536:	bf00      	nop
    3538:	3710      	adds	r7, #16
    353a:	46bd      	mov	sp, r7
    353c:	bd80      	pop	{r7, pc}
    353e:	bf00      	nop
    3540:	000031a1 	.word	0x000031a1
    3544:	400e0000 	.word	0x400e0000
    3548:	00003329 	.word	0x00003329
    354c:	000031f9 	.word	0x000031f9
    3550:	0000343d 	.word	0x0000343d

00003554 <sysclk_disable_pba_module>:
/**
 * \brief Disable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_disable_pba_module(uint32_t module_index)
{
    3554:	b580      	push	{r7, lr}
    3556:	b084      	sub	sp, #16
    3558:	af00      	add	r7, sp, #0
    355a:	6078      	str	r0, [r7, #4]
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBA, module_index);
    355c:	6879      	ldr	r1, [r7, #4]
    355e:	2002      	movs	r0, #2
    3560:	4b09      	ldr	r3, [pc, #36]	; (3588 <sysclk_disable_pba_module+0x34>)
    3562:	4798      	blx	r3

	/* Disable the bridge if possible */
	flags = cpu_irq_save();
    3564:	4b09      	ldr	r3, [pc, #36]	; (358c <sysclk_disable_pba_module+0x38>)
    3566:	4798      	blx	r3
    3568:	60f8      	str	r0, [r7, #12]

	if (PM->PM_PBAMASK == 0) {
    356a:	4b09      	ldr	r3, [pc, #36]	; (3590 <sysclk_disable_pba_module+0x3c>)
    356c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    356e:	2b00      	cmp	r3, #0
    3570:	d102      	bne.n	3578 <sysclk_disable_pba_module+0x24>
		sysclk_disable_hsb_module(SYSCLK_PBA_BRIDGE);
    3572:	2005      	movs	r0, #5
    3574:	4b07      	ldr	r3, [pc, #28]	; (3594 <sysclk_disable_pba_module+0x40>)
    3576:	4798      	blx	r3
	}

	cpu_irq_restore(flags);
    3578:	68f8      	ldr	r0, [r7, #12]
    357a:	4b07      	ldr	r3, [pc, #28]	; (3598 <sysclk_disable_pba_module+0x44>)
    357c:	4798      	blx	r3
}
    357e:	bf00      	nop
    3580:	3710      	adds	r7, #16
    3582:	46bd      	mov	sp, r7
    3584:	bd80      	pop	{r7, pc}
    3586:	bf00      	nop
    3588:	000034a5 	.word	0x000034a5
    358c:	000031a1 	.word	0x000031a1
    3590:	400e0000 	.word	0x400e0000
    3594:	00003345 	.word	0x00003345
    3598:	000031f9 	.word	0x000031f9

0000359c <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(uint32_t module_index)
{
    359c:	b580      	push	{r7, lr}
    359e:	b084      	sub	sp, #16
    35a0:	af00      	add	r7, sp, #0
    35a2:	6078      	str	r0, [r7, #4]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();
    35a4:	4b0a      	ldr	r3, [pc, #40]	; (35d0 <sysclk_enable_pbb_module+0x34>)
    35a6:	4798      	blx	r3
    35a8:	60f8      	str	r0, [r7, #12]

	if (PM->PM_PBBMASK == 0) {
    35aa:	4b0a      	ldr	r3, [pc, #40]	; (35d4 <sysclk_enable_pbb_module+0x38>)
    35ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    35ae:	2b00      	cmp	r3, #0
    35b0:	d102      	bne.n	35b8 <sysclk_enable_pbb_module+0x1c>
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);
    35b2:	2006      	movs	r0, #6
    35b4:	4b08      	ldr	r3, [pc, #32]	; (35d8 <sysclk_enable_pbb_module+0x3c>)
    35b6:	4798      	blx	r3
	}

	cpu_irq_restore(flags);
    35b8:	68f8      	ldr	r0, [r7, #12]
    35ba:	4b08      	ldr	r3, [pc, #32]	; (35dc <sysclk_enable_pbb_module+0x40>)
    35bc:	4798      	blx	r3

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBB, module_index);
    35be:	6879      	ldr	r1, [r7, #4]
    35c0:	2003      	movs	r0, #3
    35c2:	4b07      	ldr	r3, [pc, #28]	; (35e0 <sysclk_enable_pbb_module+0x44>)
    35c4:	4798      	blx	r3
}
    35c6:	bf00      	nop
    35c8:	3710      	adds	r7, #16
    35ca:	46bd      	mov	sp, r7
    35cc:	bd80      	pop	{r7, pc}
    35ce:	bf00      	nop
    35d0:	000031a1 	.word	0x000031a1
    35d4:	400e0000 	.word	0x400e0000
    35d8:	00003329 	.word	0x00003329
    35dc:	000031f9 	.word	0x000031f9
    35e0:	0000343d 	.word	0x0000343d

000035e4 <sysclk_disable_pbb_module>:
/**
 * \brief Disable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_disable_pbb_module(uint32_t module_index)
{
    35e4:	b580      	push	{r7, lr}
    35e6:	b084      	sub	sp, #16
    35e8:	af00      	add	r7, sp, #0
    35ea:	6078      	str	r0, [r7, #4]
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBB, module_index);
    35ec:	6879      	ldr	r1, [r7, #4]
    35ee:	2003      	movs	r0, #3
    35f0:	4b09      	ldr	r3, [pc, #36]	; (3618 <sysclk_disable_pbb_module+0x34>)
    35f2:	4798      	blx	r3

	/* Disable the bridge if possible */
	flags = cpu_irq_save();
    35f4:	4b09      	ldr	r3, [pc, #36]	; (361c <sysclk_disable_pbb_module+0x38>)
    35f6:	4798      	blx	r3
    35f8:	60f8      	str	r0, [r7, #12]

	if (PM->PM_PBBMASK == 0) {
    35fa:	4b09      	ldr	r3, [pc, #36]	; (3620 <sysclk_disable_pbb_module+0x3c>)
    35fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    35fe:	2b00      	cmp	r3, #0
    3600:	d102      	bne.n	3608 <sysclk_disable_pbb_module+0x24>
		sysclk_disable_hsb_module(SYSCLK_PBB_BRIDGE);
    3602:	2006      	movs	r0, #6
    3604:	4b07      	ldr	r3, [pc, #28]	; (3624 <sysclk_disable_pbb_module+0x40>)
    3606:	4798      	blx	r3
	}

	cpu_irq_restore(flags);
    3608:	68f8      	ldr	r0, [r7, #12]
    360a:	4b07      	ldr	r3, [pc, #28]	; (3628 <sysclk_disable_pbb_module+0x44>)
    360c:	4798      	blx	r3
}
    360e:	bf00      	nop
    3610:	3710      	adds	r7, #16
    3612:	46bd      	mov	sp, r7
    3614:	bd80      	pop	{r7, pc}
    3616:	bf00      	nop
    3618:	000034a5 	.word	0x000034a5
    361c:	000031a1 	.word	0x000031a1
    3620:	400e0000 	.word	0x400e0000
    3624:	00003345 	.word	0x00003345
    3628:	000031f9 	.word	0x000031f9

0000362c <sysclk_get_peripheral_bus_hz>:
 * \param module Pointer to the module's base address.
 *
 * \return Frequency of the bus attached to the specified peripheral, in Hz.
 */
uint32_t sysclk_get_peripheral_bus_hz(const volatile void *module)
{
    362c:	b580      	push	{r7, lr}
    362e:	b082      	sub	sp, #8
    3630:	af00      	add	r7, sp, #0
    3632:	6078      	str	r0, [r7, #4]
	/* Fallthroughs intended for modules sharing the same peripheral bus. */
	switch ((uintptr_t)module) {
    3634:	687b      	ldr	r3, [r7, #4]
    3636:	4a6c      	ldr	r2, [pc, #432]	; (37e8 <sysclk_get_peripheral_bus_hz+0x1bc>)
    3638:	4293      	cmp	r3, r2
    363a:	f000 80c0 	beq.w	37be <sysclk_get_peripheral_bus_hz+0x192>
    363e:	4a6a      	ldr	r2, [pc, #424]	; (37e8 <sysclk_get_peripheral_bus_hz+0x1bc>)
    3640:	4293      	cmp	r3, r2
    3642:	d863      	bhi.n	370c <sysclk_get_peripheral_bus_hz+0xe0>
    3644:	4a69      	ldr	r2, [pc, #420]	; (37ec <sysclk_get_peripheral_bus_hz+0x1c0>)
    3646:	4293      	cmp	r3, r2
    3648:	f000 80b9 	beq.w	37be <sysclk_get_peripheral_bus_hz+0x192>
    364c:	4a67      	ldr	r2, [pc, #412]	; (37ec <sysclk_get_peripheral_bus_hz+0x1c0>)
    364e:	4293      	cmp	r3, r2
    3650:	d830      	bhi.n	36b4 <sysclk_get_peripheral_bus_hz+0x88>
    3652:	4a67      	ldr	r2, [pc, #412]	; (37f0 <sysclk_get_peripheral_bus_hz+0x1c4>)
    3654:	4293      	cmp	r3, r2
    3656:	f000 80b2 	beq.w	37be <sysclk_get_peripheral_bus_hz+0x192>
    365a:	4a65      	ldr	r2, [pc, #404]	; (37f0 <sysclk_get_peripheral_bus_hz+0x1c4>)
    365c:	4293      	cmp	r3, r2
    365e:	d814      	bhi.n	368a <sysclk_get_peripheral_bus_hz+0x5e>
    3660:	4a64      	ldr	r2, [pc, #400]	; (37f4 <sysclk_get_peripheral_bus_hz+0x1c8>)
    3662:	4293      	cmp	r3, r2
    3664:	f000 80ab 	beq.w	37be <sysclk_get_peripheral_bus_hz+0x192>
    3668:	4a62      	ldr	r2, [pc, #392]	; (37f4 <sysclk_get_peripheral_bus_hz+0x1c8>)
    366a:	4293      	cmp	r3, r2
    366c:	d804      	bhi.n	3678 <sysclk_get_peripheral_bus_hz+0x4c>
    366e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    3672:	f000 80a4 	beq.w	37be <sysclk_get_peripheral_bus_hz+0x192>
    3676:	e0b2      	b.n	37de <sysclk_get_peripheral_bus_hz+0x1b2>
    3678:	4a5f      	ldr	r2, [pc, #380]	; (37f8 <sysclk_get_peripheral_bus_hz+0x1cc>)
    367a:	4293      	cmp	r3, r2
    367c:	f000 809f 	beq.w	37be <sysclk_get_peripheral_bus_hz+0x192>
    3680:	4a5e      	ldr	r2, [pc, #376]	; (37fc <sysclk_get_peripheral_bus_hz+0x1d0>)
    3682:	4293      	cmp	r3, r2
    3684:	f000 809b 	beq.w	37be <sysclk_get_peripheral_bus_hz+0x192>
    3688:	e0a9      	b.n	37de <sysclk_get_peripheral_bus_hz+0x1b2>
    368a:	4a5d      	ldr	r2, [pc, #372]	; (3800 <sysclk_get_peripheral_bus_hz+0x1d4>)
    368c:	4293      	cmp	r3, r2
    368e:	f000 8096 	beq.w	37be <sysclk_get_peripheral_bus_hz+0x192>
    3692:	4a5b      	ldr	r2, [pc, #364]	; (3800 <sysclk_get_peripheral_bus_hz+0x1d4>)
    3694:	4293      	cmp	r3, r2
    3696:	d804      	bhi.n	36a2 <sysclk_get_peripheral_bus_hz+0x76>
    3698:	4a5a      	ldr	r2, [pc, #360]	; (3804 <sysclk_get_peripheral_bus_hz+0x1d8>)
    369a:	4293      	cmp	r3, r2
    369c:	f000 808f 	beq.w	37be <sysclk_get_peripheral_bus_hz+0x192>
    36a0:	e09d      	b.n	37de <sysclk_get_peripheral_bus_hz+0x1b2>
    36a2:	4a59      	ldr	r2, [pc, #356]	; (3808 <sysclk_get_peripheral_bus_hz+0x1dc>)
    36a4:	4293      	cmp	r3, r2
    36a6:	f000 808a 	beq.w	37be <sysclk_get_peripheral_bus_hz+0x192>
    36aa:	4a58      	ldr	r2, [pc, #352]	; (380c <sysclk_get_peripheral_bus_hz+0x1e0>)
    36ac:	4293      	cmp	r3, r2
    36ae:	f000 8086 	beq.w	37be <sysclk_get_peripheral_bus_hz+0x192>
    36b2:	e094      	b.n	37de <sysclk_get_peripheral_bus_hz+0x1b2>
    36b4:	4a56      	ldr	r2, [pc, #344]	; (3810 <sysclk_get_peripheral_bus_hz+0x1e4>)
    36b6:	4293      	cmp	r3, r2
    36b8:	f000 8081 	beq.w	37be <sysclk_get_peripheral_bus_hz+0x192>
    36bc:	4a54      	ldr	r2, [pc, #336]	; (3810 <sysclk_get_peripheral_bus_hz+0x1e4>)
    36be:	4293      	cmp	r3, r2
    36c0:	d810      	bhi.n	36e4 <sysclk_get_peripheral_bus_hz+0xb8>
    36c2:	4a54      	ldr	r2, [pc, #336]	; (3814 <sysclk_get_peripheral_bus_hz+0x1e8>)
    36c4:	4293      	cmp	r3, r2
    36c6:	d07a      	beq.n	37be <sysclk_get_peripheral_bus_hz+0x192>
    36c8:	4a52      	ldr	r2, [pc, #328]	; (3814 <sysclk_get_peripheral_bus_hz+0x1e8>)
    36ca:	4293      	cmp	r3, r2
    36cc:	d803      	bhi.n	36d6 <sysclk_get_peripheral_bus_hz+0xaa>
    36ce:	4a52      	ldr	r2, [pc, #328]	; (3818 <sysclk_get_peripheral_bus_hz+0x1ec>)
    36d0:	4293      	cmp	r3, r2
    36d2:	d074      	beq.n	37be <sysclk_get_peripheral_bus_hz+0x192>
    36d4:	e083      	b.n	37de <sysclk_get_peripheral_bus_hz+0x1b2>
    36d6:	4a51      	ldr	r2, [pc, #324]	; (381c <sysclk_get_peripheral_bus_hz+0x1f0>)
    36d8:	4293      	cmp	r3, r2
    36da:	d070      	beq.n	37be <sysclk_get_peripheral_bus_hz+0x192>
    36dc:	4a50      	ldr	r2, [pc, #320]	; (3820 <sysclk_get_peripheral_bus_hz+0x1f4>)
    36de:	4293      	cmp	r3, r2
    36e0:	d06d      	beq.n	37be <sysclk_get_peripheral_bus_hz+0x192>
    36e2:	e07c      	b.n	37de <sysclk_get_peripheral_bus_hz+0x1b2>
    36e4:	4a4f      	ldr	r2, [pc, #316]	; (3824 <sysclk_get_peripheral_bus_hz+0x1f8>)
    36e6:	4293      	cmp	r3, r2
    36e8:	d069      	beq.n	37be <sysclk_get_peripheral_bus_hz+0x192>
    36ea:	4a4e      	ldr	r2, [pc, #312]	; (3824 <sysclk_get_peripheral_bus_hz+0x1f8>)
    36ec:	4293      	cmp	r3, r2
    36ee:	d806      	bhi.n	36fe <sysclk_get_peripheral_bus_hz+0xd2>
    36f0:	4a4d      	ldr	r2, [pc, #308]	; (3828 <sysclk_get_peripheral_bus_hz+0x1fc>)
    36f2:	4293      	cmp	r3, r2
    36f4:	d063      	beq.n	37be <sysclk_get_peripheral_bus_hz+0x192>
    36f6:	4a4d      	ldr	r2, [pc, #308]	; (382c <sysclk_get_peripheral_bus_hz+0x200>)
    36f8:	4293      	cmp	r3, r2
    36fa:	d060      	beq.n	37be <sysclk_get_peripheral_bus_hz+0x192>
    36fc:	e06f      	b.n	37de <sysclk_get_peripheral_bus_hz+0x1b2>
    36fe:	4a4c      	ldr	r2, [pc, #304]	; (3830 <sysclk_get_peripheral_bus_hz+0x204>)
    3700:	4293      	cmp	r3, r2
    3702:	d05c      	beq.n	37be <sysclk_get_peripheral_bus_hz+0x192>
    3704:	4a4b      	ldr	r2, [pc, #300]	; (3834 <sysclk_get_peripheral_bus_hz+0x208>)
    3706:	4293      	cmp	r3, r2
    3708:	d059      	beq.n	37be <sysclk_get_peripheral_bus_hz+0x192>
    370a:	e068      	b.n	37de <sysclk_get_peripheral_bus_hz+0x1b2>
    370c:	4a4a      	ldr	r2, [pc, #296]	; (3838 <sysclk_get_peripheral_bus_hz+0x20c>)
    370e:	4293      	cmp	r3, r2
    3710:	d05d      	beq.n	37ce <sysclk_get_peripheral_bus_hz+0x1a2>
    3712:	4a49      	ldr	r2, [pc, #292]	; (3838 <sysclk_get_peripheral_bus_hz+0x20c>)
    3714:	4293      	cmp	r3, r2
    3716:	d827      	bhi.n	3768 <sysclk_get_peripheral_bus_hz+0x13c>
    3718:	4a48      	ldr	r2, [pc, #288]	; (383c <sysclk_get_peripheral_bus_hz+0x210>)
    371a:	4293      	cmp	r3, r2
    371c:	d053      	beq.n	37c6 <sysclk_get_peripheral_bus_hz+0x19a>
    371e:	4a47      	ldr	r2, [pc, #284]	; (383c <sysclk_get_peripheral_bus_hz+0x210>)
    3720:	4293      	cmp	r3, r2
    3722:	d810      	bhi.n	3746 <sysclk_get_peripheral_bus_hz+0x11a>
    3724:	4a46      	ldr	r2, [pc, #280]	; (3840 <sysclk_get_peripheral_bus_hz+0x214>)
    3726:	4293      	cmp	r3, r2
    3728:	d049      	beq.n	37be <sysclk_get_peripheral_bus_hz+0x192>
    372a:	4a45      	ldr	r2, [pc, #276]	; (3840 <sysclk_get_peripheral_bus_hz+0x214>)
    372c:	4293      	cmp	r3, r2
    372e:	d803      	bhi.n	3738 <sysclk_get_peripheral_bus_hz+0x10c>
    3730:	4a44      	ldr	r2, [pc, #272]	; (3844 <sysclk_get_peripheral_bus_hz+0x218>)
    3732:	4293      	cmp	r3, r2
    3734:	d043      	beq.n	37be <sysclk_get_peripheral_bus_hz+0x192>
    3736:	e052      	b.n	37de <sysclk_get_peripheral_bus_hz+0x1b2>
    3738:	4a43      	ldr	r2, [pc, #268]	; (3848 <sysclk_get_peripheral_bus_hz+0x21c>)
    373a:	4293      	cmp	r3, r2
    373c:	d043      	beq.n	37c6 <sysclk_get_peripheral_bus_hz+0x19a>
    373e:	4a43      	ldr	r2, [pc, #268]	; (384c <sysclk_get_peripheral_bus_hz+0x220>)
    3740:	4293      	cmp	r3, r2
    3742:	d040      	beq.n	37c6 <sysclk_get_peripheral_bus_hz+0x19a>
    3744:	e04b      	b.n	37de <sysclk_get_peripheral_bus_hz+0x1b2>
    3746:	4a42      	ldr	r2, [pc, #264]	; (3850 <sysclk_get_peripheral_bus_hz+0x224>)
    3748:	4293      	cmp	r3, r2
    374a:	d03c      	beq.n	37c6 <sysclk_get_peripheral_bus_hz+0x19a>
    374c:	4a40      	ldr	r2, [pc, #256]	; (3850 <sysclk_get_peripheral_bus_hz+0x224>)
    374e:	4293      	cmp	r3, r2
    3750:	d803      	bhi.n	375a <sysclk_get_peripheral_bus_hz+0x12e>
    3752:	4a40      	ldr	r2, [pc, #256]	; (3854 <sysclk_get_peripheral_bus_hz+0x228>)
    3754:	4293      	cmp	r3, r2
    3756:	d036      	beq.n	37c6 <sysclk_get_peripheral_bus_hz+0x19a>
    3758:	e041      	b.n	37de <sysclk_get_peripheral_bus_hz+0x1b2>
    375a:	4a3f      	ldr	r2, [pc, #252]	; (3858 <sysclk_get_peripheral_bus_hz+0x22c>)
    375c:	4293      	cmp	r3, r2
    375e:	d032      	beq.n	37c6 <sysclk_get_peripheral_bus_hz+0x19a>
    3760:	4a3e      	ldr	r2, [pc, #248]	; (385c <sysclk_get_peripheral_bus_hz+0x230>)
    3762:	4293      	cmp	r3, r2
    3764:	d02f      	beq.n	37c6 <sysclk_get_peripheral_bus_hz+0x19a>
    3766:	e03a      	b.n	37de <sysclk_get_peripheral_bus_hz+0x1b2>
    3768:	4a3d      	ldr	r2, [pc, #244]	; (3860 <sysclk_get_peripheral_bus_hz+0x234>)
    376a:	4293      	cmp	r3, r2
    376c:	d033      	beq.n	37d6 <sysclk_get_peripheral_bus_hz+0x1aa>
    376e:	4a3c      	ldr	r2, [pc, #240]	; (3860 <sysclk_get_peripheral_bus_hz+0x234>)
    3770:	4293      	cmp	r3, r2
    3772:	d810      	bhi.n	3796 <sysclk_get_peripheral_bus_hz+0x16a>
    3774:	4a3b      	ldr	r2, [pc, #236]	; (3864 <sysclk_get_peripheral_bus_hz+0x238>)
    3776:	4293      	cmp	r3, r2
    3778:	d029      	beq.n	37ce <sysclk_get_peripheral_bus_hz+0x1a2>
    377a:	4a3a      	ldr	r2, [pc, #232]	; (3864 <sysclk_get_peripheral_bus_hz+0x238>)
    377c:	4293      	cmp	r3, r2
    377e:	d803      	bhi.n	3788 <sysclk_get_peripheral_bus_hz+0x15c>
    3780:	4a39      	ldr	r2, [pc, #228]	; (3868 <sysclk_get_peripheral_bus_hz+0x23c>)
    3782:	4293      	cmp	r3, r2
    3784:	d023      	beq.n	37ce <sysclk_get_peripheral_bus_hz+0x1a2>
    3786:	e02a      	b.n	37de <sysclk_get_peripheral_bus_hz+0x1b2>
    3788:	4a38      	ldr	r2, [pc, #224]	; (386c <sysclk_get_peripheral_bus_hz+0x240>)
    378a:	4293      	cmp	r3, r2
    378c:	d01f      	beq.n	37ce <sysclk_get_peripheral_bus_hz+0x1a2>
    378e:	4a38      	ldr	r2, [pc, #224]	; (3870 <sysclk_get_peripheral_bus_hz+0x244>)
    3790:	4293      	cmp	r3, r2
    3792:	d01c      	beq.n	37ce <sysclk_get_peripheral_bus_hz+0x1a2>
    3794:	e023      	b.n	37de <sysclk_get_peripheral_bus_hz+0x1b2>
    3796:	4a37      	ldr	r2, [pc, #220]	; (3874 <sysclk_get_peripheral_bus_hz+0x248>)
    3798:	4293      	cmp	r3, r2
    379a:	d01c      	beq.n	37d6 <sysclk_get_peripheral_bus_hz+0x1aa>
    379c:	4a35      	ldr	r2, [pc, #212]	; (3874 <sysclk_get_peripheral_bus_hz+0x248>)
    379e:	4293      	cmp	r3, r2
    37a0:	d806      	bhi.n	37b0 <sysclk_get_peripheral_bus_hz+0x184>
    37a2:	4a35      	ldr	r2, [pc, #212]	; (3878 <sysclk_get_peripheral_bus_hz+0x24c>)
    37a4:	4293      	cmp	r3, r2
    37a6:	d016      	beq.n	37d6 <sysclk_get_peripheral_bus_hz+0x1aa>
    37a8:	4a34      	ldr	r2, [pc, #208]	; (387c <sysclk_get_peripheral_bus_hz+0x250>)
    37aa:	4293      	cmp	r3, r2
    37ac:	d013      	beq.n	37d6 <sysclk_get_peripheral_bus_hz+0x1aa>
    37ae:	e016      	b.n	37de <sysclk_get_peripheral_bus_hz+0x1b2>
    37b0:	4a33      	ldr	r2, [pc, #204]	; (3880 <sysclk_get_peripheral_bus_hz+0x254>)
    37b2:	4293      	cmp	r3, r2
    37b4:	d00f      	beq.n	37d6 <sysclk_get_peripheral_bus_hz+0x1aa>
    37b6:	4a33      	ldr	r2, [pc, #204]	; (3884 <sysclk_get_peripheral_bus_hz+0x258>)
    37b8:	4293      	cmp	r3, r2
    37ba:	d00c      	beq.n	37d6 <sysclk_get_peripheral_bus_hz+0x1aa>
    37bc:	e00f      	b.n	37de <sysclk_get_peripheral_bus_hz+0x1b2>
	case TWIM2_ADDR:
	case TWIM3_ADDR:
	#if !SAM4LS
	case LCDCA_ADDR:
	#endif
		return sysclk_get_pba_hz();
    37be:	4b32      	ldr	r3, [pc, #200]	; (3888 <sysclk_get_peripheral_bus_hz+0x25c>)
    37c0:	4798      	blx	r3
    37c2:	4603      	mov	r3, r0
    37c4:	e00c      	b.n	37e0 <sysclk_get_peripheral_bus_hz+0x1b4>
	case HMATRIX_ADDR:
	case PDCA_ADDR:
	case CRCCU_ADDR:
	case USBC_ADDR:
	case PEVC_ADDR:
		return sysclk_get_pbb_hz();
    37c6:	4b31      	ldr	r3, [pc, #196]	; (388c <sysclk_get_peripheral_bus_hz+0x260>)
    37c8:	4798      	blx	r3
    37ca:	4603      	mov	r3, r0
    37cc:	e008      	b.n	37e0 <sysclk_get_peripheral_bus_hz+0x1b4>
	case PM_ADDR:
	case CHIPID_ADDR:
	case SCIF_ADDR:
	case FREQM_ADDR:
	case GPIO_ADDR:
		return sysclk_get_pbc_hz();
    37ce:	4b30      	ldr	r3, [pc, #192]	; (3890 <sysclk_get_peripheral_bus_hz+0x264>)
    37d0:	4798      	blx	r3
    37d2:	4603      	mov	r3, r0
    37d4:	e004      	b.n	37e0 <sysclk_get_peripheral_bus_hz+0x1b4>
	case BSCIF_ADDR:
	case AST_ADDR:
	case WDT_ADDR:
	case EIC_ADDR:
	case PICOUART_ADDR:
		return sysclk_get_pbd_hz();
    37d6:	4b2f      	ldr	r3, [pc, #188]	; (3894 <sysclk_get_peripheral_bus_hz+0x268>)
    37d8:	4798      	blx	r3
    37da:	4603      	mov	r3, r0
    37dc:	e000      	b.n	37e0 <sysclk_get_peripheral_bus_hz+0x1b4>

	default:
		Assert(false);
		return 0;
    37de:	2300      	movs	r3, #0
	}
}
    37e0:	4618      	mov	r0, r3
    37e2:	3708      	adds	r7, #8
    37e4:	46bd      	mov	sp, r7
    37e6:	bd80      	pop	{r7, pc}
    37e8:	40078000 	.word	0x40078000
    37ec:	40028000 	.word	0x40028000
    37f0:	40018000 	.word	0x40018000
    37f4:	40008000 	.word	0x40008000
    37f8:	40010000 	.word	0x40010000
    37fc:	40014000 	.word	0x40014000
    3800:	4001c000 	.word	0x4001c000
    3804:	40018400 	.word	0x40018400
    3808:	4001c400 	.word	0x4001c400
    380c:	40024000 	.word	0x40024000
    3810:	40040000 	.word	0x40040000
    3814:	40030000 	.word	0x40030000
    3818:	4002c000 	.word	0x4002c000
    381c:	40038000 	.word	0x40038000
    3820:	4003c000 	.word	0x4003c000
    3824:	40068000 	.word	0x40068000
    3828:	40060000 	.word	0x40060000
    382c:	40064000 	.word	0x40064000
    3830:	4006c000 	.word	0x4006c000
    3834:	40070000 	.word	0x40070000
    3838:	400e0000 	.word	0x400e0000
    383c:	400a1000 	.word	0x400a1000
    3840:	40080000 	.word	0x40080000
    3844:	4007c000 	.word	0x4007c000
    3848:	400a0000 	.word	0x400a0000
    384c:	400a0400 	.word	0x400a0400
    3850:	400a4000 	.word	0x400a4000
    3854:	400a2000 	.word	0x400a2000
    3858:	400a5000 	.word	0x400a5000
    385c:	400a6000 	.word	0x400a6000
    3860:	400f0000 	.word	0x400f0000
    3864:	400e0800 	.word	0x400e0800
    3868:	400e0400 	.word	0x400e0400
    386c:	400e0c00 	.word	0x400e0c00
    3870:	400e1000 	.word	0x400e1000
    3874:	400f0c00 	.word	0x400f0c00
    3878:	400f0400 	.word	0x400f0400
    387c:	400f0800 	.word	0x400f0800
    3880:	400f1000 	.word	0x400f1000
    3884:	400f1400 	.word	0x400f1400
    3888:	000032d9 	.word	0x000032d9
    388c:	000032ed 	.word	0x000032ed
    3890:	00003301 	.word	0x00003301
    3894:	00003315 	.word	0x00003315

00003898 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
    3898:	b580      	push	{r7, lr}
    389a:	b082      	sub	sp, #8
    389c:	af00      	add	r7, sp, #0
    389e:	6078      	str	r0, [r7, #4]
	switch ((uintptr_t)module) {
    38a0:	687b      	ldr	r3, [r7, #4]
    38a2:	4aa9      	ldr	r2, [pc, #676]	; (3b48 <sysclk_enable_peripheral_clock+0x2b0>)
    38a4:	4293      	cmp	r3, r2
    38a6:	f000 8146 	beq.w	3b36 <sysclk_enable_peripheral_clock+0x29e>
    38aa:	4aa7      	ldr	r2, [pc, #668]	; (3b48 <sysclk_enable_peripheral_clock+0x2b0>)
    38ac:	4293      	cmp	r3, r2
    38ae:	d86c      	bhi.n	398a <sysclk_enable_peripheral_clock+0xf2>
    38b0:	4aa6      	ldr	r2, [pc, #664]	; (3b4c <sysclk_enable_peripheral_clock+0x2b4>)
    38b2:	4293      	cmp	r3, r2
    38b4:	f000 810a 	beq.w	3acc <sysclk_enable_peripheral_clock+0x234>
    38b8:	4aa4      	ldr	r2, [pc, #656]	; (3b4c <sysclk_enable_peripheral_clock+0x2b4>)
    38ba:	4293      	cmp	r3, r2
    38bc:	d830      	bhi.n	3920 <sysclk_enable_peripheral_clock+0x88>
    38be:	4aa4      	ldr	r2, [pc, #656]	; (3b50 <sysclk_enable_peripheral_clock+0x2b8>)
    38c0:	4293      	cmp	r3, r2
    38c2:	f000 80ec 	beq.w	3a9e <sysclk_enable_peripheral_clock+0x206>
    38c6:	4aa2      	ldr	r2, [pc, #648]	; (3b50 <sysclk_enable_peripheral_clock+0x2b8>)
    38c8:	4293      	cmp	r3, r2
    38ca:	d814      	bhi.n	38f6 <sysclk_enable_peripheral_clock+0x5e>
    38cc:	4aa1      	ldr	r2, [pc, #644]	; (3b54 <sysclk_enable_peripheral_clock+0x2bc>)
    38ce:	4293      	cmp	r3, r2
    38d0:	f000 80d3 	beq.w	3a7a <sysclk_enable_peripheral_clock+0x1e2>
    38d4:	4a9f      	ldr	r2, [pc, #636]	; (3b54 <sysclk_enable_peripheral_clock+0x2bc>)
    38d6:	4293      	cmp	r3, r2
    38d8:	d804      	bhi.n	38e4 <sysclk_enable_peripheral_clock+0x4c>
    38da:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    38de:	f000 80c8 	beq.w	3a72 <sysclk_enable_peripheral_clock+0x1da>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    38e2:	e1e4      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    38e4:	4a9c      	ldr	r2, [pc, #624]	; (3b58 <sysclk_enable_peripheral_clock+0x2c0>)
    38e6:	4293      	cmp	r3, r2
    38e8:	f000 80cb 	beq.w	3a82 <sysclk_enable_peripheral_clock+0x1ea>
    38ec:	4a9b      	ldr	r2, [pc, #620]	; (3b5c <sysclk_enable_peripheral_clock+0x2c4>)
    38ee:	4293      	cmp	r3, r2
    38f0:	f000 80ce 	beq.w	3a90 <sysclk_enable_peripheral_clock+0x1f8>
		return;
    38f4:	e1db      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    38f6:	4a9a      	ldr	r2, [pc, #616]	; (3b60 <sysclk_enable_peripheral_clock+0x2c8>)
    38f8:	4293      	cmp	r3, r2
    38fa:	f000 80d8 	beq.w	3aae <sysclk_enable_peripheral_clock+0x216>
    38fe:	4a98      	ldr	r2, [pc, #608]	; (3b60 <sysclk_enable_peripheral_clock+0x2c8>)
    3900:	4293      	cmp	r3, r2
    3902:	d804      	bhi.n	390e <sysclk_enable_peripheral_clock+0x76>
    3904:	4a97      	ldr	r2, [pc, #604]	; (3b64 <sysclk_enable_peripheral_clock+0x2cc>)
    3906:	4293      	cmp	r3, r2
    3908:	f000 80cd 	beq.w	3aa6 <sysclk_enable_peripheral_clock+0x20e>
		return;
    390c:	e1cf      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    390e:	4a96      	ldr	r2, [pc, #600]	; (3b68 <sysclk_enable_peripheral_clock+0x2d0>)
    3910:	4293      	cmp	r3, r2
    3912:	f000 80d0 	beq.w	3ab6 <sysclk_enable_peripheral_clock+0x21e>
    3916:	4a95      	ldr	r2, [pc, #596]	; (3b6c <sysclk_enable_peripheral_clock+0x2d4>)
    3918:	4293      	cmp	r3, r2
    391a:	f000 80d0 	beq.w	3abe <sysclk_enable_peripheral_clock+0x226>
		return;
    391e:	e1c6      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    3920:	4a93      	ldr	r2, [pc, #588]	; (3b70 <sysclk_enable_peripheral_clock+0x2d8>)
    3922:	4293      	cmp	r3, r2
    3924:	f000 80ef 	beq.w	3b06 <sysclk_enable_peripheral_clock+0x26e>
    3928:	4a91      	ldr	r2, [pc, #580]	; (3b70 <sysclk_enable_peripheral_clock+0x2d8>)
    392a:	4293      	cmp	r3, r2
    392c:	d814      	bhi.n	3958 <sysclk_enable_peripheral_clock+0xc0>
    392e:	4a91      	ldr	r2, [pc, #580]	; (3b74 <sysclk_enable_peripheral_clock+0x2dc>)
    3930:	4293      	cmp	r3, r2
    3932:	f000 80d9 	beq.w	3ae8 <sysclk_enable_peripheral_clock+0x250>
    3936:	4a8f      	ldr	r2, [pc, #572]	; (3b74 <sysclk_enable_peripheral_clock+0x2dc>)
    3938:	4293      	cmp	r3, r2
    393a:	d804      	bhi.n	3946 <sysclk_enable_peripheral_clock+0xae>
    393c:	4a8e      	ldr	r2, [pc, #568]	; (3b78 <sysclk_enable_peripheral_clock+0x2e0>)
    393e:	4293      	cmp	r3, r2
    3940:	f000 80cb 	beq.w	3ada <sysclk_enable_peripheral_clock+0x242>
		return;
    3944:	e1b3      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    3946:	4a8d      	ldr	r2, [pc, #564]	; (3b7c <sysclk_enable_peripheral_clock+0x2e4>)
    3948:	4293      	cmp	r3, r2
    394a:	f000 80d4 	beq.w	3af6 <sysclk_enable_peripheral_clock+0x25e>
    394e:	4a8c      	ldr	r2, [pc, #560]	; (3b80 <sysclk_enable_peripheral_clock+0x2e8>)
    3950:	4293      	cmp	r3, r2
    3952:	f000 80d4 	beq.w	3afe <sysclk_enable_peripheral_clock+0x266>
		return;
    3956:	e1aa      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    3958:	4a8a      	ldr	r2, [pc, #552]	; (3b84 <sysclk_enable_peripheral_clock+0x2ec>)
    395a:	4293      	cmp	r3, r2
    395c:	f000 80df 	beq.w	3b1e <sysclk_enable_peripheral_clock+0x286>
    3960:	4a88      	ldr	r2, [pc, #544]	; (3b84 <sysclk_enable_peripheral_clock+0x2ec>)
    3962:	4293      	cmp	r3, r2
    3964:	d808      	bhi.n	3978 <sysclk_enable_peripheral_clock+0xe0>
    3966:	4a88      	ldr	r2, [pc, #544]	; (3b88 <sysclk_enable_peripheral_clock+0x2f0>)
    3968:	4293      	cmp	r3, r2
    396a:	f000 80d0 	beq.w	3b0e <sysclk_enable_peripheral_clock+0x276>
    396e:	4a87      	ldr	r2, [pc, #540]	; (3b8c <sysclk_enable_peripheral_clock+0x2f4>)
    3970:	4293      	cmp	r3, r2
    3972:	f000 80d0 	beq.w	3b16 <sysclk_enable_peripheral_clock+0x27e>
		return;
    3976:	e19a      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    3978:	4a85      	ldr	r2, [pc, #532]	; (3b90 <sysclk_enable_peripheral_clock+0x2f8>)
    397a:	4293      	cmp	r3, r2
    397c:	f000 80d3 	beq.w	3b26 <sysclk_enable_peripheral_clock+0x28e>
    3980:	4a84      	ldr	r2, [pc, #528]	; (3b94 <sysclk_enable_peripheral_clock+0x2fc>)
    3982:	4293      	cmp	r3, r2
    3984:	f000 80d3 	beq.w	3b2e <sysclk_enable_peripheral_clock+0x296>
		return;
    3988:	e191      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    398a:	4a83      	ldr	r2, [pc, #524]	; (3b98 <sysclk_enable_peripheral_clock+0x300>)
    398c:	4293      	cmp	r3, r2
    398e:	f000 8162 	beq.w	3c56 <sysclk_enable_peripheral_clock+0x3be>
    3992:	4a81      	ldr	r2, [pc, #516]	; (3b98 <sysclk_enable_peripheral_clock+0x300>)
    3994:	4293      	cmp	r3, r2
    3996:	d833      	bhi.n	3a00 <sysclk_enable_peripheral_clock+0x168>
    3998:	4a80      	ldr	r2, [pc, #512]	; (3b9c <sysclk_enable_peripheral_clock+0x304>)
    399a:	4293      	cmp	r3, r2
    399c:	f000 813e 	beq.w	3c1c <sysclk_enable_peripheral_clock+0x384>
    39a0:	4a7e      	ldr	r2, [pc, #504]	; (3b9c <sysclk_enable_peripheral_clock+0x304>)
    39a2:	4293      	cmp	r3, r2
    39a4:	d814      	bhi.n	39d0 <sysclk_enable_peripheral_clock+0x138>
    39a6:	4a7e      	ldr	r2, [pc, #504]	; (3ba0 <sysclk_enable_peripheral_clock+0x308>)
    39a8:	4293      	cmp	r3, r2
    39aa:	f000 8125 	beq.w	3bf8 <sysclk_enable_peripheral_clock+0x360>
    39ae:	4a7c      	ldr	r2, [pc, #496]	; (3ba0 <sysclk_enable_peripheral_clock+0x308>)
    39b0:	4293      	cmp	r3, r2
    39b2:	d804      	bhi.n	39be <sysclk_enable_peripheral_clock+0x126>
    39b4:	4a7b      	ldr	r2, [pc, #492]	; (3ba4 <sysclk_enable_peripheral_clock+0x30c>)
    39b6:	4293      	cmp	r3, r2
    39b8:	f000 80c1 	beq.w	3b3e <sysclk_enable_peripheral_clock+0x2a6>
		return;
    39bc:	e177      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    39be:	4a7a      	ldr	r2, [pc, #488]	; (3ba8 <sysclk_enable_peripheral_clock+0x310>)
    39c0:	4293      	cmp	r3, r2
    39c2:	f000 811d 	beq.w	3c00 <sysclk_enable_peripheral_clock+0x368>
    39c6:	4a79      	ldr	r2, [pc, #484]	; (3bac <sysclk_enable_peripheral_clock+0x314>)
    39c8:	4293      	cmp	r3, r2
    39ca:	f000 8120 	beq.w	3c0e <sysclk_enable_peripheral_clock+0x376>
		return;
    39ce:	e16e      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    39d0:	4a77      	ldr	r2, [pc, #476]	; (3bb0 <sysclk_enable_peripheral_clock+0x318>)
    39d2:	4293      	cmp	r3, r2
    39d4:	f000 8134 	beq.w	3c40 <sysclk_enable_peripheral_clock+0x3a8>
    39d8:	4a75      	ldr	r2, [pc, #468]	; (3bb0 <sysclk_enable_peripheral_clock+0x318>)
    39da:	4293      	cmp	r3, r2
    39dc:	d808      	bhi.n	39f0 <sysclk_enable_peripheral_clock+0x158>
    39de:	4a75      	ldr	r2, [pc, #468]	; (3bb4 <sysclk_enable_peripheral_clock+0x31c>)
    39e0:	4293      	cmp	r3, r2
    39e2:	f000 811f 	beq.w	3c24 <sysclk_enable_peripheral_clock+0x38c>
    39e6:	4a74      	ldr	r2, [pc, #464]	; (3bb8 <sysclk_enable_peripheral_clock+0x320>)
    39e8:	4293      	cmp	r3, r2
    39ea:	f000 8122 	beq.w	3c32 <sysclk_enable_peripheral_clock+0x39a>
		return;
    39ee:	e15e      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    39f0:	4a72      	ldr	r2, [pc, #456]	; (3bbc <sysclk_enable_peripheral_clock+0x324>)
    39f2:	4293      	cmp	r3, r2
    39f4:	f000 812b 	beq.w	3c4e <sysclk_enable_peripheral_clock+0x3b6>
    39f8:	4a71      	ldr	r2, [pc, #452]	; (3bc0 <sysclk_enable_peripheral_clock+0x328>)
    39fa:	4293      	cmp	r3, r2
    39fc:	d035      	beq.n	3a6a <sysclk_enable_peripheral_clock+0x1d2>
		return;
    39fe:	e156      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    3a00:	4a70      	ldr	r2, [pc, #448]	; (3bc4 <sysclk_enable_peripheral_clock+0x32c>)
    3a02:	4293      	cmp	r3, r2
    3a04:	f000 813b 	beq.w	3c7e <sysclk_enable_peripheral_clock+0x3e6>
    3a08:	4a6e      	ldr	r2, [pc, #440]	; (3bc4 <sysclk_enable_peripheral_clock+0x32c>)
    3a0a:	4293      	cmp	r3, r2
    3a0c:	d814      	bhi.n	3a38 <sysclk_enable_peripheral_clock+0x1a0>
    3a0e:	4a6e      	ldr	r2, [pc, #440]	; (3bc8 <sysclk_enable_peripheral_clock+0x330>)
    3a10:	4293      	cmp	r3, r2
    3a12:	f000 8128 	beq.w	3c66 <sysclk_enable_peripheral_clock+0x3ce>
    3a16:	4a6c      	ldr	r2, [pc, #432]	; (3bc8 <sysclk_enable_peripheral_clock+0x330>)
    3a18:	4293      	cmp	r3, r2
    3a1a:	d804      	bhi.n	3a26 <sysclk_enable_peripheral_clock+0x18e>
    3a1c:	4a6b      	ldr	r2, [pc, #428]	; (3bcc <sysclk_enable_peripheral_clock+0x334>)
    3a1e:	4293      	cmp	r3, r2
    3a20:	f000 811d 	beq.w	3c5e <sysclk_enable_peripheral_clock+0x3c6>
		return;
    3a24:	e143      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    3a26:	4a6a      	ldr	r2, [pc, #424]	; (3bd0 <sysclk_enable_peripheral_clock+0x338>)
    3a28:	4293      	cmp	r3, r2
    3a2a:	f000 8120 	beq.w	3c6e <sysclk_enable_peripheral_clock+0x3d6>
    3a2e:	4a69      	ldr	r2, [pc, #420]	; (3bd4 <sysclk_enable_peripheral_clock+0x33c>)
    3a30:	4293      	cmp	r3, r2
    3a32:	f000 8120 	beq.w	3c76 <sysclk_enable_peripheral_clock+0x3de>
		return;
    3a36:	e13a      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    3a38:	4a67      	ldr	r2, [pc, #412]	; (3bd8 <sysclk_enable_peripheral_clock+0x340>)
    3a3a:	4293      	cmp	r3, r2
    3a3c:	f000 812b 	beq.w	3c96 <sysclk_enable_peripheral_clock+0x3fe>
    3a40:	4a65      	ldr	r2, [pc, #404]	; (3bd8 <sysclk_enable_peripheral_clock+0x340>)
    3a42:	4293      	cmp	r3, r2
    3a44:	d808      	bhi.n	3a58 <sysclk_enable_peripheral_clock+0x1c0>
    3a46:	4a65      	ldr	r2, [pc, #404]	; (3bdc <sysclk_enable_peripheral_clock+0x344>)
    3a48:	4293      	cmp	r3, r2
    3a4a:	f000 811c 	beq.w	3c86 <sysclk_enable_peripheral_clock+0x3ee>
    3a4e:	4a64      	ldr	r2, [pc, #400]	; (3be0 <sysclk_enable_peripheral_clock+0x348>)
    3a50:	4293      	cmp	r3, r2
    3a52:	f000 811c 	beq.w	3c8e <sysclk_enable_peripheral_clock+0x3f6>
		return;
    3a56:	e12a      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    3a58:	4a62      	ldr	r2, [pc, #392]	; (3be4 <sysclk_enable_peripheral_clock+0x34c>)
    3a5a:	4293      	cmp	r3, r2
    3a5c:	f000 811f 	beq.w	3c9e <sysclk_enable_peripheral_clock+0x406>
    3a60:	4a61      	ldr	r2, [pc, #388]	; (3be8 <sysclk_enable_peripheral_clock+0x350>)
    3a62:	4293      	cmp	r3, r2
    3a64:	f000 811f 	beq.w	3ca6 <sysclk_enable_peripheral_clock+0x40e>
		return;
    3a68:	e121      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_hsb_module(SYSCLK_AESA_HSB);
    3a6a:	2009      	movs	r0, #9
    3a6c:	4b5f      	ldr	r3, [pc, #380]	; (3bec <sysclk_enable_peripheral_clock+0x354>)
    3a6e:	4798      	blx	r3
		break;
    3a70:	e11d      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_IISC);
    3a72:	2000      	movs	r0, #0
    3a74:	4b5e      	ldr	r3, [pc, #376]	; (3bf0 <sysclk_enable_peripheral_clock+0x358>)
    3a76:	4798      	blx	r3
		break;
    3a78:	e119      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_SPI);
    3a7a:	2001      	movs	r0, #1
    3a7c:	4b5c      	ldr	r3, [pc, #368]	; (3bf0 <sysclk_enable_peripheral_clock+0x358>)
    3a7e:	4798      	blx	r3
		break;
    3a80:	e115      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TC0);
    3a82:	2002      	movs	r0, #2
    3a84:	4b5a      	ldr	r3, [pc, #360]	; (3bf0 <sysclk_enable_peripheral_clock+0x358>)
    3a86:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_TIMER_CLOCK2
    3a88:	2055      	movs	r0, #85	; 0x55
    3a8a:	4b5a      	ldr	r3, [pc, #360]	; (3bf4 <sysclk_enable_peripheral_clock+0x35c>)
    3a8c:	4798      	blx	r3
		break;
    3a8e:	e10e      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TC1);
    3a90:	2003      	movs	r0, #3
    3a92:	4b57      	ldr	r3, [pc, #348]	; (3bf0 <sysclk_enable_peripheral_clock+0x358>)
    3a94:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_TIMER_CLOCK2
    3a96:	2055      	movs	r0, #85	; 0x55
    3a98:	4b56      	ldr	r3, [pc, #344]	; (3bf4 <sysclk_enable_peripheral_clock+0x35c>)
    3a9a:	4798      	blx	r3
		break;
    3a9c:	e107      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TWIM0);
    3a9e:	2004      	movs	r0, #4
    3aa0:	4b53      	ldr	r3, [pc, #332]	; (3bf0 <sysclk_enable_peripheral_clock+0x358>)
    3aa2:	4798      	blx	r3
		break;
    3aa4:	e103      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TWIS0);
    3aa6:	2005      	movs	r0, #5
    3aa8:	4b51      	ldr	r3, [pc, #324]	; (3bf0 <sysclk_enable_peripheral_clock+0x358>)
    3aaa:	4798      	blx	r3
		break;
    3aac:	e0ff      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TWIM1);
    3aae:	2006      	movs	r0, #6
    3ab0:	4b4f      	ldr	r3, [pc, #316]	; (3bf0 <sysclk_enable_peripheral_clock+0x358>)
    3ab2:	4798      	blx	r3
		break;
    3ab4:	e0fb      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TWIS1);
    3ab6:	2007      	movs	r0, #7
    3ab8:	4b4d      	ldr	r3, [pc, #308]	; (3bf0 <sysclk_enable_peripheral_clock+0x358>)
    3aba:	4798      	blx	r3
		break;
    3abc:	e0f7      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_USART0);
    3abe:	2008      	movs	r0, #8
    3ac0:	4b4b      	ldr	r3, [pc, #300]	; (3bf0 <sysclk_enable_peripheral_clock+0x358>)
    3ac2:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
    3ac4:	2004      	movs	r0, #4
    3ac6:	4b4b      	ldr	r3, [pc, #300]	; (3bf4 <sysclk_enable_peripheral_clock+0x35c>)
    3ac8:	4798      	blx	r3
		break;
    3aca:	e0f0      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_USART1);
    3acc:	2009      	movs	r0, #9
    3ace:	4b48      	ldr	r3, [pc, #288]	; (3bf0 <sysclk_enable_peripheral_clock+0x358>)
    3ad0:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
    3ad2:	2004      	movs	r0, #4
    3ad4:	4b47      	ldr	r3, [pc, #284]	; (3bf4 <sysclk_enable_peripheral_clock+0x35c>)
    3ad6:	4798      	blx	r3
		break;
    3ad8:	e0e9      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_USART2);
    3ada:	200a      	movs	r0, #10
    3adc:	4b44      	ldr	r3, [pc, #272]	; (3bf0 <sysclk_enable_peripheral_clock+0x358>)
    3ade:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
    3ae0:	2004      	movs	r0, #4
    3ae2:	4b44      	ldr	r3, [pc, #272]	; (3bf4 <sysclk_enable_peripheral_clock+0x35c>)
    3ae4:	4798      	blx	r3
		break;
    3ae6:	e0e2      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_USART3);
    3ae8:	200b      	movs	r0, #11
    3aea:	4b41      	ldr	r3, [pc, #260]	; (3bf0 <sysclk_enable_peripheral_clock+0x358>)
    3aec:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
    3aee:	2004      	movs	r0, #4
    3af0:	4b40      	ldr	r3, [pc, #256]	; (3bf4 <sysclk_enable_peripheral_clock+0x35c>)
    3af2:	4798      	blx	r3
		break;
    3af4:	e0db      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_ADCIFE);
    3af6:	200c      	movs	r0, #12
    3af8:	4b3d      	ldr	r3, [pc, #244]	; (3bf0 <sysclk_enable_peripheral_clock+0x358>)
    3afa:	4798      	blx	r3
		break;
    3afc:	e0d7      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_DACC);
    3afe:	200d      	movs	r0, #13
    3b00:	4b3b      	ldr	r3, [pc, #236]	; (3bf0 <sysclk_enable_peripheral_clock+0x358>)
    3b02:	4798      	blx	r3
		break;
    3b04:	e0d3      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_ACIFC);
    3b06:	200e      	movs	r0, #14
    3b08:	4b39      	ldr	r3, [pc, #228]	; (3bf0 <sysclk_enable_peripheral_clock+0x358>)
    3b0a:	4798      	blx	r3
		break;
    3b0c:	e0cf      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_GLOC);
    3b0e:	200f      	movs	r0, #15
    3b10:	4b37      	ldr	r3, [pc, #220]	; (3bf0 <sysclk_enable_peripheral_clock+0x358>)
    3b12:	4798      	blx	r3
		break;
    3b14:	e0cb      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_ABDACB);
    3b16:	2010      	movs	r0, #16
    3b18:	4b35      	ldr	r3, [pc, #212]	; (3bf0 <sysclk_enable_peripheral_clock+0x358>)
    3b1a:	4798      	blx	r3
		break;
    3b1c:	e0c7      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TRNG);
    3b1e:	2011      	movs	r0, #17
    3b20:	4b33      	ldr	r3, [pc, #204]	; (3bf0 <sysclk_enable_peripheral_clock+0x358>)
    3b22:	4798      	blx	r3
		break;
    3b24:	e0c3      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_PARC);
    3b26:	2012      	movs	r0, #18
    3b28:	4b31      	ldr	r3, [pc, #196]	; (3bf0 <sysclk_enable_peripheral_clock+0x358>)
    3b2a:	4798      	blx	r3
		break;
    3b2c:	e0bf      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_CATB);
    3b2e:	2013      	movs	r0, #19
    3b30:	4b2f      	ldr	r3, [pc, #188]	; (3bf0 <sysclk_enable_peripheral_clock+0x358>)
    3b32:	4798      	blx	r3
		break;
    3b34:	e0bb      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TWIM2);
    3b36:	2015      	movs	r0, #21
    3b38:	4b2d      	ldr	r3, [pc, #180]	; (3bf0 <sysclk_enable_peripheral_clock+0x358>)
    3b3a:	4798      	blx	r3
		break;
    3b3c:	e0b7      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TWIM3);
    3b3e:	2016      	movs	r0, #22
    3b40:	4b2b      	ldr	r3, [pc, #172]	; (3bf0 <sysclk_enable_peripheral_clock+0x358>)
    3b42:	4798      	blx	r3
		break;
    3b44:	e0b3      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
    3b46:	bf00      	nop
    3b48:	40078000 	.word	0x40078000
    3b4c:	40028000 	.word	0x40028000
    3b50:	40018000 	.word	0x40018000
    3b54:	40008000 	.word	0x40008000
    3b58:	40010000 	.word	0x40010000
    3b5c:	40014000 	.word	0x40014000
    3b60:	4001c000 	.word	0x4001c000
    3b64:	40018400 	.word	0x40018400
    3b68:	4001c400 	.word	0x4001c400
    3b6c:	40024000 	.word	0x40024000
    3b70:	40040000 	.word	0x40040000
    3b74:	40030000 	.word	0x40030000
    3b78:	4002c000 	.word	0x4002c000
    3b7c:	40038000 	.word	0x40038000
    3b80:	4003c000 	.word	0x4003c000
    3b84:	40068000 	.word	0x40068000
    3b88:	40060000 	.word	0x40060000
    3b8c:	40064000 	.word	0x40064000
    3b90:	4006c000 	.word	0x4006c000
    3b94:	40070000 	.word	0x40070000
    3b98:	400e0000 	.word	0x400e0000
    3b9c:	400a1000 	.word	0x400a1000
    3ba0:	40080000 	.word	0x40080000
    3ba4:	4007c000 	.word	0x4007c000
    3ba8:	400a0000 	.word	0x400a0000
    3bac:	400a0400 	.word	0x400a0400
    3bb0:	400a5000 	.word	0x400a5000
    3bb4:	400a2000 	.word	0x400a2000
    3bb8:	400a4000 	.word	0x400a4000
    3bbc:	400a6000 	.word	0x400a6000
    3bc0:	400b0000 	.word	0x400b0000
    3bc4:	400f0000 	.word	0x400f0000
    3bc8:	400e0800 	.word	0x400e0800
    3bcc:	400e0400 	.word	0x400e0400
    3bd0:	400e0c00 	.word	0x400e0c00
    3bd4:	400e1000 	.word	0x400e1000
    3bd8:	400f0c00 	.word	0x400f0c00
    3bdc:	400f0400 	.word	0x400f0400
    3be0:	400f0800 	.word	0x400f0800
    3be4:	400f1000 	.word	0x400f1000
    3be8:	400f1400 	.word	0x400f1400
    3bec:	00003329 	.word	0x00003329
    3bf0:	0000350d 	.word	0x0000350d
    3bf4:	000033d1 	.word	0x000033d1
		sysclk_enable_pba_module(SYSCLK_LCDCA);
    3bf8:	2017      	movs	r0, #23
    3bfa:	4b2e      	ldr	r3, [pc, #184]	; (3cb4 <sysclk_enable_peripheral_clock+0x41c>)
    3bfc:	4798      	blx	r3
		break;
    3bfe:	e056      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_hsb_module(SYSCLK_HFLASHC_DATA);
    3c00:	2001      	movs	r0, #1
    3c02:	4b2d      	ldr	r3, [pc, #180]	; (3cb8 <sysclk_enable_peripheral_clock+0x420>)
    3c04:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_HFLASHC_REGS);
    3c06:	2000      	movs	r0, #0
    3c08:	4b2c      	ldr	r3, [pc, #176]	; (3cbc <sysclk_enable_peripheral_clock+0x424>)
    3c0a:	4798      	blx	r3
		break;
    3c0c:	e04f      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_hsb_module(SYSCLK_HRAMC1_DATA);
    3c0e:	2002      	movs	r0, #2
    3c10:	4b29      	ldr	r3, [pc, #164]	; (3cb8 <sysclk_enable_peripheral_clock+0x420>)
    3c12:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_HRAMC1_REGS);
    3c14:	2001      	movs	r0, #1
    3c16:	4b29      	ldr	r3, [pc, #164]	; (3cbc <sysclk_enable_peripheral_clock+0x424>)
    3c18:	4798      	blx	r3
		break;
    3c1a:	e048      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
    3c1c:	2002      	movs	r0, #2
    3c1e:	4b27      	ldr	r3, [pc, #156]	; (3cbc <sysclk_enable_peripheral_clock+0x424>)
    3c20:	4798      	blx	r3
		break;
    3c22:	e044      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
    3c24:	2000      	movs	r0, #0
    3c26:	4b24      	ldr	r3, [pc, #144]	; (3cb8 <sysclk_enable_peripheral_clock+0x420>)
    3c28:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_PDCA_PB);
    3c2a:	2003      	movs	r0, #3
    3c2c:	4b23      	ldr	r3, [pc, #140]	; (3cbc <sysclk_enable_peripheral_clock+0x424>)
    3c2e:	4798      	blx	r3
		break;
    3c30:	e03d      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_hsb_module(SYSCLK_CRCCU_DATA);
    3c32:	2004      	movs	r0, #4
    3c34:	4b20      	ldr	r3, [pc, #128]	; (3cb8 <sysclk_enable_peripheral_clock+0x420>)
    3c36:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_CRCCU_REGS);
    3c38:	2004      	movs	r0, #4
    3c3a:	4b20      	ldr	r3, [pc, #128]	; (3cbc <sysclk_enable_peripheral_clock+0x424>)
    3c3c:	4798      	blx	r3
		break;
    3c3e:	e036      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_hsb_module(SYSCLK_USBC_DATA);
    3c40:	2003      	movs	r0, #3
    3c42:	4b1d      	ldr	r3, [pc, #116]	; (3cb8 <sysclk_enable_peripheral_clock+0x420>)
    3c44:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
    3c46:	2005      	movs	r0, #5
    3c48:	4b1c      	ldr	r3, [pc, #112]	; (3cbc <sysclk_enable_peripheral_clock+0x424>)
    3c4a:	4798      	blx	r3
		break;
    3c4c:	e02f      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbb_module(SYSCLK_PEVC);
    3c4e:	2006      	movs	r0, #6
    3c50:	4b1a      	ldr	r3, [pc, #104]	; (3cbc <sysclk_enable_peripheral_clock+0x424>)
    3c52:	4798      	blx	r3
		break;
    3c54:	e02b      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbc_module(SYSCLK_PM);
    3c56:	2000      	movs	r0, #0
    3c58:	4b19      	ldr	r3, [pc, #100]	; (3cc0 <sysclk_enable_peripheral_clock+0x428>)
    3c5a:	4798      	blx	r3
		break;
    3c5c:	e027      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbc_module(SYSCLK_CHIPID);
    3c5e:	2001      	movs	r0, #1
    3c60:	4b17      	ldr	r3, [pc, #92]	; (3cc0 <sysclk_enable_peripheral_clock+0x428>)
    3c62:	4798      	blx	r3
		break;
    3c64:	e023      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbc_module(SYSCLK_SCIF);
    3c66:	2002      	movs	r0, #2
    3c68:	4b15      	ldr	r3, [pc, #84]	; (3cc0 <sysclk_enable_peripheral_clock+0x428>)
    3c6a:	4798      	blx	r3
		break;
    3c6c:	e01f      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbc_module(SYSCLK_FREQM);
    3c6e:	2003      	movs	r0, #3
    3c70:	4b13      	ldr	r3, [pc, #76]	; (3cc0 <sysclk_enable_peripheral_clock+0x428>)
    3c72:	4798      	blx	r3
		break;
    3c74:	e01b      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbc_module(SYSCLK_GPIO);
    3c76:	2004      	movs	r0, #4
    3c78:	4b11      	ldr	r3, [pc, #68]	; (3cc0 <sysclk_enable_peripheral_clock+0x428>)
    3c7a:	4798      	blx	r3
		break;
    3c7c:	e017      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbd_module(SYSCLK_BPM);
    3c7e:	2000      	movs	r0, #0
    3c80:	4b10      	ldr	r3, [pc, #64]	; (3cc4 <sysclk_enable_peripheral_clock+0x42c>)
    3c82:	4798      	blx	r3
		break;
    3c84:	e013      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbd_module(SYSCLK_BSCIF);
    3c86:	2001      	movs	r0, #1
    3c88:	4b0e      	ldr	r3, [pc, #56]	; (3cc4 <sysclk_enable_peripheral_clock+0x42c>)
    3c8a:	4798      	blx	r3
		break;
    3c8c:	e00f      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbd_module(SYSCLK_AST);
    3c8e:	2002      	movs	r0, #2
    3c90:	4b0c      	ldr	r3, [pc, #48]	; (3cc4 <sysclk_enable_peripheral_clock+0x42c>)
    3c92:	4798      	blx	r3
		break;
    3c94:	e00b      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbd_module(SYSCLK_WDT);
    3c96:	2003      	movs	r0, #3
    3c98:	4b0a      	ldr	r3, [pc, #40]	; (3cc4 <sysclk_enable_peripheral_clock+0x42c>)
    3c9a:	4798      	blx	r3
		break;
    3c9c:	e007      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbd_module(SYSCLK_EIC);
    3c9e:	2004      	movs	r0, #4
    3ca0:	4b08      	ldr	r3, [pc, #32]	; (3cc4 <sysclk_enable_peripheral_clock+0x42c>)
    3ca2:	4798      	blx	r3
		break;
    3ca4:	e003      	b.n	3cae <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
    3ca6:	2005      	movs	r0, #5
    3ca8:	4b06      	ldr	r3, [pc, #24]	; (3cc4 <sysclk_enable_peripheral_clock+0x42c>)
    3caa:	4798      	blx	r3
		break;
    3cac:	bf00      	nop
	}
}
    3cae:	3708      	adds	r7, #8
    3cb0:	46bd      	mov	sp, r7
    3cb2:	bd80      	pop	{r7, pc}
    3cb4:	0000350d 	.word	0x0000350d
    3cb8:	00003329 	.word	0x00003329
    3cbc:	0000359d 	.word	0x0000359d
    3cc0:	00003361 	.word	0x00003361
    3cc4:	00003399 	.word	0x00003399

00003cc8 <sysclk_disable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be disabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
    3cc8:	b580      	push	{r7, lr}
    3cca:	b082      	sub	sp, #8
    3ccc:	af00      	add	r7, sp, #0
    3cce:	6078      	str	r0, [r7, #4]
	switch ((uintptr_t)module) {
    3cd0:	687b      	ldr	r3, [r7, #4]
    3cd2:	4aa7      	ldr	r2, [pc, #668]	; (3f70 <sysclk_disable_peripheral_clock+0x2a8>)
    3cd4:	4293      	cmp	r3, r2
    3cd6:	f000 8134 	beq.w	3f42 <sysclk_disable_peripheral_clock+0x27a>
    3cda:	4aa5      	ldr	r2, [pc, #660]	; (3f70 <sysclk_disable_peripheral_clock+0x2a8>)
    3cdc:	4293      	cmp	r3, r2
    3cde:	d86c      	bhi.n	3dba <sysclk_disable_peripheral_clock+0xf2>
    3ce0:	4aa4      	ldr	r2, [pc, #656]	; (3f74 <sysclk_disable_peripheral_clock+0x2ac>)
    3ce2:	4293      	cmp	r3, r2
    3ce4:	f000 8101 	beq.w	3eea <sysclk_disable_peripheral_clock+0x222>
    3ce8:	4aa2      	ldr	r2, [pc, #648]	; (3f74 <sysclk_disable_peripheral_clock+0x2ac>)
    3cea:	4293      	cmp	r3, r2
    3cec:	d830      	bhi.n	3d50 <sysclk_disable_peripheral_clock+0x88>
    3cee:	4aa2      	ldr	r2, [pc, #648]	; (3f78 <sysclk_disable_peripheral_clock+0x2b0>)
    3cf0:	4293      	cmp	r3, r2
    3cf2:	f000 80e6 	beq.w	3ec2 <sysclk_disable_peripheral_clock+0x1fa>
    3cf6:	4aa0      	ldr	r2, [pc, #640]	; (3f78 <sysclk_disable_peripheral_clock+0x2b0>)
    3cf8:	4293      	cmp	r3, r2
    3cfa:	d814      	bhi.n	3d26 <sysclk_disable_peripheral_clock+0x5e>
    3cfc:	4a9f      	ldr	r2, [pc, #636]	; (3f7c <sysclk_disable_peripheral_clock+0x2b4>)
    3cfe:	4293      	cmp	r3, r2
    3d00:	f000 80d3 	beq.w	3eaa <sysclk_disable_peripheral_clock+0x1e2>
    3d04:	4a9d      	ldr	r2, [pc, #628]	; (3f7c <sysclk_disable_peripheral_clock+0x2b4>)
    3d06:	4293      	cmp	r3, r2
    3d08:	d804      	bhi.n	3d14 <sysclk_disable_peripheral_clock+0x4c>
    3d0a:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    3d0e:	f000 80c8 	beq.w	3ea2 <sysclk_disable_peripheral_clock+0x1da>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    3d12:	e1d8      	b.n	40c6 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    3d14:	4a9a      	ldr	r2, [pc, #616]	; (3f80 <sysclk_disable_peripheral_clock+0x2b8>)
    3d16:	4293      	cmp	r3, r2
    3d18:	f000 80cb 	beq.w	3eb2 <sysclk_disable_peripheral_clock+0x1ea>
    3d1c:	4a99      	ldr	r2, [pc, #612]	; (3f84 <sysclk_disable_peripheral_clock+0x2bc>)
    3d1e:	4293      	cmp	r3, r2
    3d20:	f000 80cb 	beq.w	3eba <sysclk_disable_peripheral_clock+0x1f2>
		return;
    3d24:	e1cf      	b.n	40c6 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    3d26:	4a98      	ldr	r2, [pc, #608]	; (3f88 <sysclk_disable_peripheral_clock+0x2c0>)
    3d28:	4293      	cmp	r3, r2
    3d2a:	f000 80d2 	beq.w	3ed2 <sysclk_disable_peripheral_clock+0x20a>
    3d2e:	4a96      	ldr	r2, [pc, #600]	; (3f88 <sysclk_disable_peripheral_clock+0x2c0>)
    3d30:	4293      	cmp	r3, r2
    3d32:	d804      	bhi.n	3d3e <sysclk_disable_peripheral_clock+0x76>
    3d34:	4a95      	ldr	r2, [pc, #596]	; (3f8c <sysclk_disable_peripheral_clock+0x2c4>)
    3d36:	4293      	cmp	r3, r2
    3d38:	f000 80c7 	beq.w	3eca <sysclk_disable_peripheral_clock+0x202>
		return;
    3d3c:	e1c3      	b.n	40c6 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    3d3e:	4a94      	ldr	r2, [pc, #592]	; (3f90 <sysclk_disable_peripheral_clock+0x2c8>)
    3d40:	4293      	cmp	r3, r2
    3d42:	f000 80ca 	beq.w	3eda <sysclk_disable_peripheral_clock+0x212>
    3d46:	4a93      	ldr	r2, [pc, #588]	; (3f94 <sysclk_disable_peripheral_clock+0x2cc>)
    3d48:	4293      	cmp	r3, r2
    3d4a:	f000 80ca 	beq.w	3ee2 <sysclk_disable_peripheral_clock+0x21a>
		return;
    3d4e:	e1ba      	b.n	40c6 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    3d50:	4a91      	ldr	r2, [pc, #580]	; (3f98 <sysclk_disable_peripheral_clock+0x2d0>)
    3d52:	4293      	cmp	r3, r2
    3d54:	f000 80dd 	beq.w	3f12 <sysclk_disable_peripheral_clock+0x24a>
    3d58:	4a8f      	ldr	r2, [pc, #572]	; (3f98 <sysclk_disable_peripheral_clock+0x2d0>)
    3d5a:	4293      	cmp	r3, r2
    3d5c:	d814      	bhi.n	3d88 <sysclk_disable_peripheral_clock+0xc0>
    3d5e:	4a8f      	ldr	r2, [pc, #572]	; (3f9c <sysclk_disable_peripheral_clock+0x2d4>)
    3d60:	4293      	cmp	r3, r2
    3d62:	f000 80ca 	beq.w	3efa <sysclk_disable_peripheral_clock+0x232>
    3d66:	4a8d      	ldr	r2, [pc, #564]	; (3f9c <sysclk_disable_peripheral_clock+0x2d4>)
    3d68:	4293      	cmp	r3, r2
    3d6a:	d804      	bhi.n	3d76 <sysclk_disable_peripheral_clock+0xae>
    3d6c:	4a8c      	ldr	r2, [pc, #560]	; (3fa0 <sysclk_disable_peripheral_clock+0x2d8>)
    3d6e:	4293      	cmp	r3, r2
    3d70:	f000 80bf 	beq.w	3ef2 <sysclk_disable_peripheral_clock+0x22a>
		return;
    3d74:	e1a7      	b.n	40c6 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    3d76:	4a8b      	ldr	r2, [pc, #556]	; (3fa4 <sysclk_disable_peripheral_clock+0x2dc>)
    3d78:	4293      	cmp	r3, r2
    3d7a:	f000 80c2 	beq.w	3f02 <sysclk_disable_peripheral_clock+0x23a>
    3d7e:	4a8a      	ldr	r2, [pc, #552]	; (3fa8 <sysclk_disable_peripheral_clock+0x2e0>)
    3d80:	4293      	cmp	r3, r2
    3d82:	f000 80c2 	beq.w	3f0a <sysclk_disable_peripheral_clock+0x242>
		return;
    3d86:	e19e      	b.n	40c6 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    3d88:	4a88      	ldr	r2, [pc, #544]	; (3fac <sysclk_disable_peripheral_clock+0x2e4>)
    3d8a:	4293      	cmp	r3, r2
    3d8c:	f000 80cd 	beq.w	3f2a <sysclk_disable_peripheral_clock+0x262>
    3d90:	4a86      	ldr	r2, [pc, #536]	; (3fac <sysclk_disable_peripheral_clock+0x2e4>)
    3d92:	4293      	cmp	r3, r2
    3d94:	d808      	bhi.n	3da8 <sysclk_disable_peripheral_clock+0xe0>
    3d96:	4a86      	ldr	r2, [pc, #536]	; (3fb0 <sysclk_disable_peripheral_clock+0x2e8>)
    3d98:	4293      	cmp	r3, r2
    3d9a:	f000 80be 	beq.w	3f1a <sysclk_disable_peripheral_clock+0x252>
    3d9e:	4a85      	ldr	r2, [pc, #532]	; (3fb4 <sysclk_disable_peripheral_clock+0x2ec>)
    3da0:	4293      	cmp	r3, r2
    3da2:	f000 80be 	beq.w	3f22 <sysclk_disable_peripheral_clock+0x25a>
		return;
    3da6:	e18e      	b.n	40c6 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    3da8:	4a83      	ldr	r2, [pc, #524]	; (3fb8 <sysclk_disable_peripheral_clock+0x2f0>)
    3daa:	4293      	cmp	r3, r2
    3dac:	f000 80c1 	beq.w	3f32 <sysclk_disable_peripheral_clock+0x26a>
    3db0:	4a82      	ldr	r2, [pc, #520]	; (3fbc <sysclk_disable_peripheral_clock+0x2f4>)
    3db2:	4293      	cmp	r3, r2
    3db4:	f000 80c1 	beq.w	3f3a <sysclk_disable_peripheral_clock+0x272>
		return;
    3db8:	e185      	b.n	40c6 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    3dba:	4a81      	ldr	r2, [pc, #516]	; (3fc0 <sysclk_disable_peripheral_clock+0x2f8>)
    3dbc:	4293      	cmp	r3, r2
    3dbe:	f000 814c 	beq.w	405a <sysclk_disable_peripheral_clock+0x392>
    3dc2:	4a7f      	ldr	r2, [pc, #508]	; (3fc0 <sysclk_disable_peripheral_clock+0x2f8>)
    3dc4:	4293      	cmp	r3, r2
    3dc6:	d833      	bhi.n	3e30 <sysclk_disable_peripheral_clock+0x168>
    3dc8:	4a7e      	ldr	r2, [pc, #504]	; (3fc4 <sysclk_disable_peripheral_clock+0x2fc>)
    3dca:	4293      	cmp	r3, r2
    3dcc:	f000 8128 	beq.w	4020 <sysclk_disable_peripheral_clock+0x358>
    3dd0:	4a7c      	ldr	r2, [pc, #496]	; (3fc4 <sysclk_disable_peripheral_clock+0x2fc>)
    3dd2:	4293      	cmp	r3, r2
    3dd4:	d814      	bhi.n	3e00 <sysclk_disable_peripheral_clock+0x138>
    3dd6:	4a7c      	ldr	r2, [pc, #496]	; (3fc8 <sysclk_disable_peripheral_clock+0x300>)
    3dd8:	4293      	cmp	r3, r2
    3dda:	f000 80ba 	beq.w	3f52 <sysclk_disable_peripheral_clock+0x28a>
    3dde:	4a7a      	ldr	r2, [pc, #488]	; (3fc8 <sysclk_disable_peripheral_clock+0x300>)
    3de0:	4293      	cmp	r3, r2
    3de2:	d804      	bhi.n	3dee <sysclk_disable_peripheral_clock+0x126>
    3de4:	4a79      	ldr	r2, [pc, #484]	; (3fcc <sysclk_disable_peripheral_clock+0x304>)
    3de6:	4293      	cmp	r3, r2
    3de8:	f000 80af 	beq.w	3f4a <sysclk_disable_peripheral_clock+0x282>
		return;
    3dec:	e16b      	b.n	40c6 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    3dee:	4a78      	ldr	r2, [pc, #480]	; (3fd0 <sysclk_disable_peripheral_clock+0x308>)
    3df0:	4293      	cmp	r3, r2
    3df2:	f000 80b2 	beq.w	3f5a <sysclk_disable_peripheral_clock+0x292>
    3df6:	4a77      	ldr	r2, [pc, #476]	; (3fd4 <sysclk_disable_peripheral_clock+0x30c>)
    3df8:	4293      	cmp	r3, r2
    3dfa:	f000 80b2 	beq.w	3f62 <sysclk_disable_peripheral_clock+0x29a>
		return;
    3dfe:	e162      	b.n	40c6 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    3e00:	4a75      	ldr	r2, [pc, #468]	; (3fd8 <sysclk_disable_peripheral_clock+0x310>)
    3e02:	4293      	cmp	r3, r2
    3e04:	f000 811e 	beq.w	4044 <sysclk_disable_peripheral_clock+0x37c>
    3e08:	4a73      	ldr	r2, [pc, #460]	; (3fd8 <sysclk_disable_peripheral_clock+0x310>)
    3e0a:	4293      	cmp	r3, r2
    3e0c:	d808      	bhi.n	3e20 <sysclk_disable_peripheral_clock+0x158>
    3e0e:	4a73      	ldr	r2, [pc, #460]	; (3fdc <sysclk_disable_peripheral_clock+0x314>)
    3e10:	4293      	cmp	r3, r2
    3e12:	f000 8109 	beq.w	4028 <sysclk_disable_peripheral_clock+0x360>
    3e16:	4a72      	ldr	r2, [pc, #456]	; (3fe0 <sysclk_disable_peripheral_clock+0x318>)
    3e18:	4293      	cmp	r3, r2
    3e1a:	f000 810c 	beq.w	4036 <sysclk_disable_peripheral_clock+0x36e>
		return;
    3e1e:	e152      	b.n	40c6 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    3e20:	4a70      	ldr	r2, [pc, #448]	; (3fe4 <sysclk_disable_peripheral_clock+0x31c>)
    3e22:	4293      	cmp	r3, r2
    3e24:	f000 8115 	beq.w	4052 <sysclk_disable_peripheral_clock+0x38a>
    3e28:	4a6f      	ldr	r2, [pc, #444]	; (3fe8 <sysclk_disable_peripheral_clock+0x320>)
    3e2a:	4293      	cmp	r3, r2
    3e2c:	d035      	beq.n	3e9a <sysclk_disable_peripheral_clock+0x1d2>
		return;
    3e2e:	e14a      	b.n	40c6 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    3e30:	4a6e      	ldr	r2, [pc, #440]	; (3fec <sysclk_disable_peripheral_clock+0x324>)
    3e32:	4293      	cmp	r3, r2
    3e34:	f000 8125 	beq.w	4082 <sysclk_disable_peripheral_clock+0x3ba>
    3e38:	4a6c      	ldr	r2, [pc, #432]	; (3fec <sysclk_disable_peripheral_clock+0x324>)
    3e3a:	4293      	cmp	r3, r2
    3e3c:	d814      	bhi.n	3e68 <sysclk_disable_peripheral_clock+0x1a0>
    3e3e:	4a6c      	ldr	r2, [pc, #432]	; (3ff0 <sysclk_disable_peripheral_clock+0x328>)
    3e40:	4293      	cmp	r3, r2
    3e42:	f000 8112 	beq.w	406a <sysclk_disable_peripheral_clock+0x3a2>
    3e46:	4a6a      	ldr	r2, [pc, #424]	; (3ff0 <sysclk_disable_peripheral_clock+0x328>)
    3e48:	4293      	cmp	r3, r2
    3e4a:	d804      	bhi.n	3e56 <sysclk_disable_peripheral_clock+0x18e>
    3e4c:	4a69      	ldr	r2, [pc, #420]	; (3ff4 <sysclk_disable_peripheral_clock+0x32c>)
    3e4e:	4293      	cmp	r3, r2
    3e50:	f000 8107 	beq.w	4062 <sysclk_disable_peripheral_clock+0x39a>
		return;
    3e54:	e137      	b.n	40c6 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    3e56:	4a68      	ldr	r2, [pc, #416]	; (3ff8 <sysclk_disable_peripheral_clock+0x330>)
    3e58:	4293      	cmp	r3, r2
    3e5a:	f000 810a 	beq.w	4072 <sysclk_disable_peripheral_clock+0x3aa>
    3e5e:	4a67      	ldr	r2, [pc, #412]	; (3ffc <sysclk_disable_peripheral_clock+0x334>)
    3e60:	4293      	cmp	r3, r2
    3e62:	f000 810a 	beq.w	407a <sysclk_disable_peripheral_clock+0x3b2>
		return;
    3e66:	e12e      	b.n	40c6 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    3e68:	4a65      	ldr	r2, [pc, #404]	; (4000 <sysclk_disable_peripheral_clock+0x338>)
    3e6a:	4293      	cmp	r3, r2
    3e6c:	f000 8115 	beq.w	409a <sysclk_disable_peripheral_clock+0x3d2>
    3e70:	4a63      	ldr	r2, [pc, #396]	; (4000 <sysclk_disable_peripheral_clock+0x338>)
    3e72:	4293      	cmp	r3, r2
    3e74:	d808      	bhi.n	3e88 <sysclk_disable_peripheral_clock+0x1c0>
    3e76:	4a63      	ldr	r2, [pc, #396]	; (4004 <sysclk_disable_peripheral_clock+0x33c>)
    3e78:	4293      	cmp	r3, r2
    3e7a:	f000 8106 	beq.w	408a <sysclk_disable_peripheral_clock+0x3c2>
    3e7e:	4a62      	ldr	r2, [pc, #392]	; (4008 <sysclk_disable_peripheral_clock+0x340>)
    3e80:	4293      	cmp	r3, r2
    3e82:	f000 8106 	beq.w	4092 <sysclk_disable_peripheral_clock+0x3ca>
		return;
    3e86:	e11e      	b.n	40c6 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    3e88:	4a60      	ldr	r2, [pc, #384]	; (400c <sysclk_disable_peripheral_clock+0x344>)
    3e8a:	4293      	cmp	r3, r2
    3e8c:	f000 8109 	beq.w	40a2 <sysclk_disable_peripheral_clock+0x3da>
    3e90:	4a5f      	ldr	r2, [pc, #380]	; (4010 <sysclk_disable_peripheral_clock+0x348>)
    3e92:	4293      	cmp	r3, r2
    3e94:	f000 8109 	beq.w	40aa <sysclk_disable_peripheral_clock+0x3e2>
		return;
    3e98:	e115      	b.n	40c6 <sysclk_disable_peripheral_clock+0x3fe>
		sysclk_disable_hsb_module(SYSCLK_AESA_HSB);
    3e9a:	2009      	movs	r0, #9
    3e9c:	4b5d      	ldr	r3, [pc, #372]	; (4014 <sysclk_disable_peripheral_clock+0x34c>)
    3e9e:	4798      	blx	r3
		break;
    3ea0:	e107      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_IISC);
    3ea2:	2000      	movs	r0, #0
    3ea4:	4b5c      	ldr	r3, [pc, #368]	; (4018 <sysclk_disable_peripheral_clock+0x350>)
    3ea6:	4798      	blx	r3
		break;
    3ea8:	e103      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_SPI);
    3eaa:	2001      	movs	r0, #1
    3eac:	4b5a      	ldr	r3, [pc, #360]	; (4018 <sysclk_disable_peripheral_clock+0x350>)
    3eae:	4798      	blx	r3
		break;
    3eb0:	e0ff      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TC0);
    3eb2:	2002      	movs	r0, #2
    3eb4:	4b58      	ldr	r3, [pc, #352]	; (4018 <sysclk_disable_peripheral_clock+0x350>)
    3eb6:	4798      	blx	r3
		break;
    3eb8:	e0fb      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TC1);
    3eba:	2003      	movs	r0, #3
    3ebc:	4b56      	ldr	r3, [pc, #344]	; (4018 <sysclk_disable_peripheral_clock+0x350>)
    3ebe:	4798      	blx	r3
		break;
    3ec0:	e0f7      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TWIM0);
    3ec2:	2004      	movs	r0, #4
    3ec4:	4b54      	ldr	r3, [pc, #336]	; (4018 <sysclk_disable_peripheral_clock+0x350>)
    3ec6:	4798      	blx	r3
		break;
    3ec8:	e0f3      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TWIS0);
    3eca:	2005      	movs	r0, #5
    3ecc:	4b52      	ldr	r3, [pc, #328]	; (4018 <sysclk_disable_peripheral_clock+0x350>)
    3ece:	4798      	blx	r3
		break;
    3ed0:	e0ef      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TWIM1);
    3ed2:	2006      	movs	r0, #6
    3ed4:	4b50      	ldr	r3, [pc, #320]	; (4018 <sysclk_disable_peripheral_clock+0x350>)
    3ed6:	4798      	blx	r3
		break;
    3ed8:	e0eb      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TWIS1);
    3eda:	2007      	movs	r0, #7
    3edc:	4b4e      	ldr	r3, [pc, #312]	; (4018 <sysclk_disable_peripheral_clock+0x350>)
    3ede:	4798      	blx	r3
		break;
    3ee0:	e0e7      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_USART0);
    3ee2:	2008      	movs	r0, #8
    3ee4:	4b4c      	ldr	r3, [pc, #304]	; (4018 <sysclk_disable_peripheral_clock+0x350>)
    3ee6:	4798      	blx	r3
		break;
    3ee8:	e0e3      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_USART1);
    3eea:	2009      	movs	r0, #9
    3eec:	4b4a      	ldr	r3, [pc, #296]	; (4018 <sysclk_disable_peripheral_clock+0x350>)
    3eee:	4798      	blx	r3
		break;
    3ef0:	e0df      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_USART2);
    3ef2:	200a      	movs	r0, #10
    3ef4:	4b48      	ldr	r3, [pc, #288]	; (4018 <sysclk_disable_peripheral_clock+0x350>)
    3ef6:	4798      	blx	r3
		break;
    3ef8:	e0db      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_USART3);
    3efa:	200b      	movs	r0, #11
    3efc:	4b46      	ldr	r3, [pc, #280]	; (4018 <sysclk_disable_peripheral_clock+0x350>)
    3efe:	4798      	blx	r3
		break;
    3f00:	e0d7      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_ADCIFE);
    3f02:	200c      	movs	r0, #12
    3f04:	4b44      	ldr	r3, [pc, #272]	; (4018 <sysclk_disable_peripheral_clock+0x350>)
    3f06:	4798      	blx	r3
		break;
    3f08:	e0d3      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_DACC);
    3f0a:	200d      	movs	r0, #13
    3f0c:	4b42      	ldr	r3, [pc, #264]	; (4018 <sysclk_disable_peripheral_clock+0x350>)
    3f0e:	4798      	blx	r3
		break;
    3f10:	e0cf      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_ACIFC);
    3f12:	200e      	movs	r0, #14
    3f14:	4b40      	ldr	r3, [pc, #256]	; (4018 <sysclk_disable_peripheral_clock+0x350>)
    3f16:	4798      	blx	r3
		break;
    3f18:	e0cb      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_GLOC);
    3f1a:	200f      	movs	r0, #15
    3f1c:	4b3e      	ldr	r3, [pc, #248]	; (4018 <sysclk_disable_peripheral_clock+0x350>)
    3f1e:	4798      	blx	r3
		break;
    3f20:	e0c7      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_ABDACB);
    3f22:	2010      	movs	r0, #16
    3f24:	4b3c      	ldr	r3, [pc, #240]	; (4018 <sysclk_disable_peripheral_clock+0x350>)
    3f26:	4798      	blx	r3
		break;
    3f28:	e0c3      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TRNG);
    3f2a:	2011      	movs	r0, #17
    3f2c:	4b3a      	ldr	r3, [pc, #232]	; (4018 <sysclk_disable_peripheral_clock+0x350>)
    3f2e:	4798      	blx	r3
		break;
    3f30:	e0bf      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_PARC);
    3f32:	2012      	movs	r0, #18
    3f34:	4b38      	ldr	r3, [pc, #224]	; (4018 <sysclk_disable_peripheral_clock+0x350>)
    3f36:	4798      	blx	r3
		break;
    3f38:	e0bb      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_CATB);
    3f3a:	2013      	movs	r0, #19
    3f3c:	4b36      	ldr	r3, [pc, #216]	; (4018 <sysclk_disable_peripheral_clock+0x350>)
    3f3e:	4798      	blx	r3
		break;
    3f40:	e0b7      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TWIM2);
    3f42:	2015      	movs	r0, #21
    3f44:	4b34      	ldr	r3, [pc, #208]	; (4018 <sysclk_disable_peripheral_clock+0x350>)
    3f46:	4798      	blx	r3
		break;
    3f48:	e0b3      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TWIM3);
    3f4a:	2016      	movs	r0, #22
    3f4c:	4b32      	ldr	r3, [pc, #200]	; (4018 <sysclk_disable_peripheral_clock+0x350>)
    3f4e:	4798      	blx	r3
		break;
    3f50:	e0af      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_LCDCA);
    3f52:	2017      	movs	r0, #23
    3f54:	4b30      	ldr	r3, [pc, #192]	; (4018 <sysclk_disable_peripheral_clock+0x350>)
    3f56:	4798      	blx	r3
		break;
    3f58:	e0ab      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbb_module(SYSCLK_HFLASHC_REGS);
    3f5a:	2000      	movs	r0, #0
    3f5c:	4b2f      	ldr	r3, [pc, #188]	; (401c <sysclk_disable_peripheral_clock+0x354>)
    3f5e:	4798      	blx	r3
		break;
    3f60:	e0a7      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_hsb_module(SYSCLK_HRAMC1_DATA);
    3f62:	2002      	movs	r0, #2
    3f64:	4b2b      	ldr	r3, [pc, #172]	; (4014 <sysclk_disable_peripheral_clock+0x34c>)
    3f66:	4798      	blx	r3
		sysclk_disable_pbb_module(SYSCLK_HRAMC1_REGS);
    3f68:	2001      	movs	r0, #1
    3f6a:	4b2c      	ldr	r3, [pc, #176]	; (401c <sysclk_disable_peripheral_clock+0x354>)
    3f6c:	4798      	blx	r3
		break;
    3f6e:	e0a0      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
    3f70:	40078000 	.word	0x40078000
    3f74:	40028000 	.word	0x40028000
    3f78:	40018000 	.word	0x40018000
    3f7c:	40008000 	.word	0x40008000
    3f80:	40010000 	.word	0x40010000
    3f84:	40014000 	.word	0x40014000
    3f88:	4001c000 	.word	0x4001c000
    3f8c:	40018400 	.word	0x40018400
    3f90:	4001c400 	.word	0x4001c400
    3f94:	40024000 	.word	0x40024000
    3f98:	40040000 	.word	0x40040000
    3f9c:	40030000 	.word	0x40030000
    3fa0:	4002c000 	.word	0x4002c000
    3fa4:	40038000 	.word	0x40038000
    3fa8:	4003c000 	.word	0x4003c000
    3fac:	40068000 	.word	0x40068000
    3fb0:	40060000 	.word	0x40060000
    3fb4:	40064000 	.word	0x40064000
    3fb8:	4006c000 	.word	0x4006c000
    3fbc:	40070000 	.word	0x40070000
    3fc0:	400e0000 	.word	0x400e0000
    3fc4:	400a1000 	.word	0x400a1000
    3fc8:	40080000 	.word	0x40080000
    3fcc:	4007c000 	.word	0x4007c000
    3fd0:	400a0000 	.word	0x400a0000
    3fd4:	400a0400 	.word	0x400a0400
    3fd8:	400a5000 	.word	0x400a5000
    3fdc:	400a2000 	.word	0x400a2000
    3fe0:	400a4000 	.word	0x400a4000
    3fe4:	400a6000 	.word	0x400a6000
    3fe8:	400b0000 	.word	0x400b0000
    3fec:	400f0000 	.word	0x400f0000
    3ff0:	400e0800 	.word	0x400e0800
    3ff4:	400e0400 	.word	0x400e0400
    3ff8:	400e0c00 	.word	0x400e0c00
    3ffc:	400e1000 	.word	0x400e1000
    4000:	400f0c00 	.word	0x400f0c00
    4004:	400f0400 	.word	0x400f0400
    4008:	400f0800 	.word	0x400f0800
    400c:	400f1000 	.word	0x400f1000
    4010:	400f1400 	.word	0x400f1400
    4014:	00003345 	.word	0x00003345
    4018:	00003555 	.word	0x00003555
    401c:	000035e5 	.word	0x000035e5
		sysclk_disable_pbb_module(SYSCLK_HMATRIX);
    4020:	2002      	movs	r0, #2
    4022:	4b2a      	ldr	r3, [pc, #168]	; (40cc <sysclk_disable_peripheral_clock+0x404>)
    4024:	4798      	blx	r3
		break;
    4026:	e044      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_hsb_module(SYSCLK_PDCA_HSB);
    4028:	2000      	movs	r0, #0
    402a:	4b29      	ldr	r3, [pc, #164]	; (40d0 <sysclk_disable_peripheral_clock+0x408>)
    402c:	4798      	blx	r3
		sysclk_disable_pbb_module(SYSCLK_PDCA_PB);
    402e:	2003      	movs	r0, #3
    4030:	4b26      	ldr	r3, [pc, #152]	; (40cc <sysclk_disable_peripheral_clock+0x404>)
    4032:	4798      	blx	r3
		break;
    4034:	e03d      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_hsb_module(SYSCLK_CRCCU_DATA);
    4036:	2004      	movs	r0, #4
    4038:	4b25      	ldr	r3, [pc, #148]	; (40d0 <sysclk_disable_peripheral_clock+0x408>)
    403a:	4798      	blx	r3
		sysclk_disable_pbb_module(SYSCLK_CRCCU_REGS);
    403c:	2004      	movs	r0, #4
    403e:	4b23      	ldr	r3, [pc, #140]	; (40cc <sysclk_disable_peripheral_clock+0x404>)
    4040:	4798      	blx	r3
		break;
    4042:	e036      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_hsb_module(SYSCLK_USBC_DATA);
    4044:	2003      	movs	r0, #3
    4046:	4b22      	ldr	r3, [pc, #136]	; (40d0 <sysclk_disable_peripheral_clock+0x408>)
    4048:	4798      	blx	r3
		sysclk_disable_pbb_module(SYSCLK_USBC_REGS);
    404a:	2005      	movs	r0, #5
    404c:	4b1f      	ldr	r3, [pc, #124]	; (40cc <sysclk_disable_peripheral_clock+0x404>)
    404e:	4798      	blx	r3
		break;
    4050:	e02f      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbb_module(SYSCLK_PEVC);
    4052:	2006      	movs	r0, #6
    4054:	4b1d      	ldr	r3, [pc, #116]	; (40cc <sysclk_disable_peripheral_clock+0x404>)
    4056:	4798      	blx	r3
		break;
    4058:	e02b      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbc_module(SYSCLK_PM);
    405a:	2000      	movs	r0, #0
    405c:	4b1d      	ldr	r3, [pc, #116]	; (40d4 <sysclk_disable_peripheral_clock+0x40c>)
    405e:	4798      	blx	r3
		break;
    4060:	e027      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbc_module(SYSCLK_CHIPID);
    4062:	2001      	movs	r0, #1
    4064:	4b1b      	ldr	r3, [pc, #108]	; (40d4 <sysclk_disable_peripheral_clock+0x40c>)
    4066:	4798      	blx	r3
		break;
    4068:	e023      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbc_module(SYSCLK_SCIF);
    406a:	2002      	movs	r0, #2
    406c:	4b19      	ldr	r3, [pc, #100]	; (40d4 <sysclk_disable_peripheral_clock+0x40c>)
    406e:	4798      	blx	r3
		break;
    4070:	e01f      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbc_module(SYSCLK_FREQM);
    4072:	2003      	movs	r0, #3
    4074:	4b17      	ldr	r3, [pc, #92]	; (40d4 <sysclk_disable_peripheral_clock+0x40c>)
    4076:	4798      	blx	r3
		break;
    4078:	e01b      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbc_module(SYSCLK_GPIO);
    407a:	2004      	movs	r0, #4
    407c:	4b15      	ldr	r3, [pc, #84]	; (40d4 <sysclk_disable_peripheral_clock+0x40c>)
    407e:	4798      	blx	r3
		break;
    4080:	e017      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbd_module(SYSCLK_BPM);
    4082:	2000      	movs	r0, #0
    4084:	4b14      	ldr	r3, [pc, #80]	; (40d8 <sysclk_disable_peripheral_clock+0x410>)
    4086:	4798      	blx	r3
		break;
    4088:	e013      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbd_module(SYSCLK_BSCIF);
    408a:	2001      	movs	r0, #1
    408c:	4b12      	ldr	r3, [pc, #72]	; (40d8 <sysclk_disable_peripheral_clock+0x410>)
    408e:	4798      	blx	r3
		break;
    4090:	e00f      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbd_module(SYSCLK_AST);
    4092:	2002      	movs	r0, #2
    4094:	4b10      	ldr	r3, [pc, #64]	; (40d8 <sysclk_disable_peripheral_clock+0x410>)
    4096:	4798      	blx	r3
		break;
    4098:	e00b      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbd_module(SYSCLK_WDT);
    409a:	2003      	movs	r0, #3
    409c:	4b0e      	ldr	r3, [pc, #56]	; (40d8 <sysclk_disable_peripheral_clock+0x410>)
    409e:	4798      	blx	r3
		break;
    40a0:	e007      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbd_module(SYSCLK_EIC);
    40a2:	2004      	movs	r0, #4
    40a4:	4b0c      	ldr	r3, [pc, #48]	; (40d8 <sysclk_disable_peripheral_clock+0x410>)
    40a6:	4798      	blx	r3
		break;
    40a8:	e003      	b.n	40b2 <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
    40aa:	2005      	movs	r0, #5
    40ac:	4b0a      	ldr	r3, [pc, #40]	; (40d8 <sysclk_disable_peripheral_clock+0x410>)
    40ae:	4798      	blx	r3
		break;
    40b0:	bf00      	nop
							(1 << SYSCLK_TC1) | \
							(1 << SYSCLK_USART0) | \
							(1 << SYSCLK_USART1) | \
							(1 << SYSCLK_USART2) | \
							(1 << SYSCLK_USART3))
	if ((PM->PM_PBAMASK & PBADIV_CLKSRC_MASK) == 0) {
    40b2:	4b0a      	ldr	r3, [pc, #40]	; (40dc <sysclk_disable_peripheral_clock+0x414>)
    40b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    40b6:	f640 730c 	movw	r3, #3852	; 0xf0c
    40ba:	4013      	ands	r3, r2
    40bc:	2b00      	cmp	r3, #0
    40be:	d102      	bne.n	40c6 <sysclk_disable_peripheral_clock+0x3fe>
		sysclk_disable_pba_divmask(PBA_DIVMASK_Msk);
    40c0:	207f      	movs	r0, #127	; 0x7f
    40c2:	4b07      	ldr	r3, [pc, #28]	; (40e0 <sysclk_disable_peripheral_clock+0x418>)
    40c4:	4798      	blx	r3
	}
}
    40c6:	3708      	adds	r7, #8
    40c8:	46bd      	mov	sp, r7
    40ca:	bd80      	pop	{r7, pc}
    40cc:	000035e5 	.word	0x000035e5
    40d0:	00003345 	.word	0x00003345
    40d4:	0000337d 	.word	0x0000337d
    40d8:	000033b5 	.word	0x000033b5
    40dc:	400e0000 	.word	0x400e0000
    40e0:	00003405 	.word	0x00003405

000040e4 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint32_t src)
{
    40e4:	b580      	push	{r7, lr}
    40e6:	b084      	sub	sp, #16
    40e8:	af00      	add	r7, sp, #0
    40ea:	6078      	str	r0, [r7, #4]
	irqflags_t flags;
	Assert(src <= SYSCLK_SRC_RC1M);

	flags = cpu_irq_save();
    40ec:	4b08      	ldr	r3, [pc, #32]	; (4110 <sysclk_set_source+0x2c>)
    40ee:	4798      	blx	r3
    40f0:	60f8      	str	r0, [r7, #12]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    40f2:	4b08      	ldr	r3, [pc, #32]	; (4114 <sysclk_set_source+0x30>)
    40f4:	f04f 422a 	mov.w	r2, #2852126720	; 0xaa000000
    40f8:	659a      	str	r2, [r3, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_MCCTRL - (uint32_t)PM);
	PM->PM_MCCTRL = src;
    40fa:	4a06      	ldr	r2, [pc, #24]	; (4114 <sysclk_set_source+0x30>)
    40fc:	687b      	ldr	r3, [r7, #4]
    40fe:	6013      	str	r3, [r2, #0]
	cpu_irq_restore(flags);
    4100:	68f8      	ldr	r0, [r7, #12]
    4102:	4b05      	ldr	r3, [pc, #20]	; (4118 <sysclk_set_source+0x34>)
    4104:	4798      	blx	r3
}
    4106:	bf00      	nop
    4108:	3710      	adds	r7, #16
    410a:	46bd      	mov	sp, r7
    410c:	bd80      	pop	{r7, pc}
    410e:	bf00      	nop
    4110:	000031a1 	.word	0x000031a1
    4114:	400e0000 	.word	0x400e0000
    4118:	000031f9 	.word	0x000031f9

0000411c <sysclk_init>:
   genclk_disable(7);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
    411c:	b580      	push	{r7, lr}
    411e:	b086      	sub	sp, #24
    4120:	af00      	add	r7, sp, #0
	uint32_t ps_value = 0;
    4122:	2300      	movs	r3, #0
    4124:	617b      	str	r3, [r7, #20]
	bool is_fwu_enabled = false;
    4126:	2300      	movs	r3, #0
    4128:	74fb      	strb	r3, [r7, #19]

#if CONFIG_HCACHE_ENABLE == 1
	/* Enable HCACHE */
	sysclk_enable_peripheral_clock(HCACHE);
    412a:	4822      	ldr	r0, [pc, #136]	; (41b4 <sysclk_init+0x98>)
    412c:	4b22      	ldr	r3, [pc, #136]	; (41b8 <sysclk_init+0x9c>)
    412e:	4798      	blx	r3
	HCACHE->HCACHE_CTRL = HCACHE_CTRL_CEN_YES;
    4130:	4b20      	ldr	r3, [pc, #128]	; (41b4 <sysclk_init+0x98>)
    4132:	2201      	movs	r2, #1
    4134:	609a      	str	r2, [r3, #8]
	while (!(HCACHE->HCACHE_SR & HCACHE_SR_CSTS_EN));
    4136:	bf00      	nop
    4138:	4b1e      	ldr	r3, [pc, #120]	; (41b4 <sysclk_init+0x98>)
    413a:	68db      	ldr	r3, [r3, #12]
    413c:	f003 0301 	and.w	r3, r3, #1
    4140:	2b00      	cmp	r3, #0
    4142:	d0f9      	beq.n	4138 <sysclk_init+0x1c>
#ifdef CONFIG_FLASH_READ_MODE_HIGH_SPEED_ENABLE
	ps_value = BPM_PS_2;
	is_fwu_enabled = false;
#elif (defined(CONFIG_PLL0_MUL) || defined(CONFIG_DFLL0_MUL) ||	defined(CONFIG_USBCLK_DIV))
	/* USB/DFLL/PLL are not available in PS1 (BPM.PMCON.PS=1) mode */
	ps_value = BPM_PS_0;
    4144:	2300      	movs	r3, #0
    4146:	617b      	str	r3, [r7, #20]
	is_fwu_enabled = false;
    4148:	2300      	movs	r3, #0
    414a:	74fb      	strb	r3, [r7, #19]
		sysclk_set_source(SYSCLK_SRC_OSC0);
	}
#endif
#ifdef CONFIG_DFLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_DFLL) {
		dfll_enable_config_defaults(0);
    414c:	2000      	movs	r0, #0
    414e:	4b1b      	ldr	r3, [pc, #108]	; (41bc <sysclk_init+0xa0>)
    4150:	4798      	blx	r3
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz(), ps_value, is_fwu_enabled);
    4152:	4b1b      	ldr	r3, [pc, #108]	; (41c0 <sysclk_init+0xa4>)
    4154:	4798      	blx	r3
    4156:	7cfb      	ldrb	r3, [r7, #19]
    4158:	461a      	mov	r2, r3
    415a:	6979      	ldr	r1, [r7, #20]
    415c:	4b19      	ldr	r3, [pc, #100]	; (41c4 <sysclk_init+0xa8>)
    415e:	4798      	blx	r3
		sysclk_set_source(SYSCLK_SRC_DFLL);
    4160:	2003      	movs	r0, #3
    4162:	4b19      	ldr	r3, [pc, #100]	; (41c8 <sysclk_init+0xac>)
    4164:	4798      	blx	r3
    4166:	4b19      	ldr	r3, [pc, #100]	; (41cc <sysclk_init+0xb0>)
    4168:	60bb      	str	r3, [r7, #8]
    416a:	697b      	ldr	r3, [r7, #20]
    416c:	607b      	str	r3, [r7, #4]
    416e:	2301      	movs	r3, #1
    4170:	603b      	str	r3, [r7, #0]
 * \return true if no error.
 */
__always_inline static
bool bpm_configure_power_scaling(Bpm *bpm, uint32_t ps_value, uint32_t no_halt)
{
	if (!no_halt) {
    4172:	683b      	ldr	r3, [r7, #0]
    4174:	2b00      	cmp	r3, #0
    4176:	d104      	bne.n	4182 <sysclk_init+0x66>
		bpm_power_scaling_cpu(bpm, ps_value);
    4178:	6879      	ldr	r1, [r7, #4]
    417a:	68b8      	ldr	r0, [r7, #8]
    417c:	4b14      	ldr	r3, [pc, #80]	; (41d0 <sysclk_init+0xb4>)
    417e:	4798      	blx	r3
    4180:	e004      	b.n	418c <sysclk_init+0x70>
		return true;
	}

	return bpm_power_scaling_cpu_failsafe(bpm, ps_value, 240000);
    4182:	4a14      	ldr	r2, [pc, #80]	; (41d4 <sysclk_init+0xb8>)
    4184:	6879      	ldr	r1, [r7, #4]
    4186:	68b8      	ldr	r0, [r7, #8]
    4188:	4b13      	ldr	r3, [pc, #76]	; (41d8 <sysclk_init+0xbc>)
    418a:	4798      	blx	r3
		Assert(false);
	}

	/* Automatically switch to low power mode */
	bpm_configure_power_scaling(BPM, ps_value, BPM_PSCM_CPU_NOT_HALT);
	while ((bpm_get_status(BPM) & BPM_SR_PSOK) == 0);
    418c:	bf00      	nop
    418e:	480f      	ldr	r0, [pc, #60]	; (41cc <sysclk_init+0xb0>)
    4190:	4b12      	ldr	r3, [pc, #72]	; (41dc <sysclk_init+0xc0>)
    4192:	4798      	blx	r3
    4194:	4603      	mov	r3, r0
    4196:	f003 0301 	and.w	r3, r3, #1
    419a:	2b00      	cmp	r3, #0
    419c:	d0f7      	beq.n	418e <sysclk_init+0x72>

	/* If the user has specified clock masks, enable only requested clocks */
	irqflags_t const flags = cpu_irq_save();
    419e:	4b10      	ldr	r3, [pc, #64]	; (41e0 <sysclk_init+0xc4>)
    41a0:	4798      	blx	r3
    41a2:	60f8      	str	r0, [r7, #12]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBDMASK - (uint32_t)PM);
	PM->PM_PBDMASK = SYSCLK_INIT_MINIMAL_PBDMASK | CONFIG_SYSCLK_INIT_PBDMASK;
#endif

	cpu_irq_restore(flags);
    41a4:	68f8      	ldr	r0, [r7, #12]
    41a6:	4b0f      	ldr	r3, [pc, #60]	; (41e4 <sysclk_init+0xc8>)
    41a8:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
    41aa:	bf00      	nop
    41ac:	3718      	adds	r7, #24
    41ae:	46bd      	mov	sp, r7
    41b0:	bd80      	pop	{r7, pc}
    41b2:	bf00      	nop
    41b4:	400a0400 	.word	0x400a0400
    41b8:	00003899 	.word	0x00003899
    41bc:	00002f01 	.word	0x00002f01
    41c0:	000032c5 	.word	0x000032c5
    41c4:	000048e9 	.word	0x000048e9
    41c8:	000040e5 	.word	0x000040e5
    41cc:	400f0000 	.word	0x400f0000
    41d0:	000046b9 	.word	0x000046b9
    41d4:	0003a980 	.word	0x0003a980
    41d8:	00004615 	.word	0x00004615
    41dc:	00004759 	.word	0x00004759
    41e0:	000031a1 	.word	0x000031a1
    41e4:	000031f9 	.word	0x000031f9

000041e8 <ioport_init>:
{
    41e8:	b580      	push	{r7, lr}
    41ea:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
	sysclk_enable_peripheral_clock(GPIO);
    41ec:	4802      	ldr	r0, [pc, #8]	; (41f8 <ioport_init+0x10>)
    41ee:	4b03      	ldr	r3, [pc, #12]	; (41fc <ioport_init+0x14>)
    41f0:	4798      	blx	r3
}
    41f2:	bf00      	nop
    41f4:	bd80      	pop	{r7, pc}
    41f6:	bf00      	nop
    41f8:	400e1000 	.word	0x400e1000
    41fc:	00003899 	.word	0x00003899

00004200 <ioport_disable_pin>:
{
    4200:	b480      	push	{r7}
    4202:	b089      	sub	sp, #36	; 0x24
    4204:	af00      	add	r7, sp, #0
    4206:	6078      	str	r0, [r7, #4]
    4208:	687b      	ldr	r3, [r7, #4]
    420a:	61fb      	str	r3, [r7, #28]
    420c:	69fb      	ldr	r3, [r7, #28]
    420e:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
    4210:	69bb      	ldr	r3, [r7, #24]
    4212:	095a      	lsrs	r2, r3, #5
    4214:	69fb      	ldr	r3, [r7, #28]
    4216:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
    4218:	697b      	ldr	r3, [r7, #20]
    421a:	f003 031f 	and.w	r3, r3, #31
    421e:	2101      	movs	r1, #1
    4220:	fa01 f303 	lsl.w	r3, r1, r3
    4224:	613a      	str	r2, [r7, #16]
    4226:	60fb      	str	r3, [r7, #12]
    4228:	693b      	ldr	r3, [r7, #16]
    422a:	60bb      	str	r3, [r7, #8]
		+ port * sizeof(GpioPort));
    422c:	68bb      	ldr	r3, [r7, #8]
    422e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    4232:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    4236:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    4238:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    423a:	68fb      	ldr	r3, [r7, #12]
    423c:	6093      	str	r3, [r2, #8]
}
    423e:	bf00      	nop
    4240:	3724      	adds	r7, #36	; 0x24
    4242:	46bd      	mov	sp, r7
    4244:	bc80      	pop	{r7}
    4246:	4770      	bx	lr

00004248 <ioport_set_pin_mode>:
{
    4248:	b480      	push	{r7}
    424a:	b08d      	sub	sp, #52	; 0x34
    424c:	af00      	add	r7, sp, #0
    424e:	6078      	str	r0, [r7, #4]
    4250:	6039      	str	r1, [r7, #0]
    4252:	687b      	ldr	r3, [r7, #4]
    4254:	62fb      	str	r3, [r7, #44]	; 0x2c
    4256:	683b      	ldr	r3, [r7, #0]
    4258:	62bb      	str	r3, [r7, #40]	; 0x28
    425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    425c:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
    425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4260:	095a      	lsrs	r2, r3, #5
    4262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4264:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
    4266:	6a3b      	ldr	r3, [r7, #32]
    4268:	f003 031f 	and.w	r3, r3, #31
    426c:	2101      	movs	r1, #1
    426e:	fa01 f303 	lsl.w	r3, r1, r3
    4272:	61fa      	str	r2, [r7, #28]
    4274:	61bb      	str	r3, [r7, #24]
    4276:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4278:	617b      	str	r3, [r7, #20]
    427a:	69fb      	ldr	r3, [r7, #28]
    427c:	613b      	str	r3, [r7, #16]
		+ port * sizeof(GpioPort));
    427e:	693b      	ldr	r3, [r7, #16]
    4280:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    4284:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    4288:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);
    428a:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
    428c:	697b      	ldr	r3, [r7, #20]
    428e:	f003 0308 	and.w	r3, r3, #8
    4292:	2b00      	cmp	r3, #0
    4294:	d003      	beq.n	429e <ioport_set_pin_mode+0x56>
		base->GPIO_PUERS = mask;
    4296:	68fb      	ldr	r3, [r7, #12]
    4298:	69ba      	ldr	r2, [r7, #24]
    429a:	675a      	str	r2, [r3, #116]	; 0x74
    429c:	e002      	b.n	42a4 <ioport_set_pin_mode+0x5c>
	} else {
		base->GPIO_PUERC = mask;
    429e:	68fb      	ldr	r3, [r7, #12]
    42a0:	69ba      	ldr	r2, [r7, #24]
    42a2:	679a      	str	r2, [r3, #120]	; 0x78
	}

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
    42a4:	697b      	ldr	r3, [r7, #20]
    42a6:	f003 0310 	and.w	r3, r3, #16
    42aa:	2b00      	cmp	r3, #0
    42ac:	d004      	beq.n	42b8 <ioport_set_pin_mode+0x70>
		base->GPIO_PDERS = mask;
    42ae:	68fb      	ldr	r3, [r7, #12]
    42b0:	69ba      	ldr	r2, [r7, #24]
    42b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    42b6:	e003      	b.n	42c0 <ioport_set_pin_mode+0x78>
	} else {
		base->GPIO_PDERC = mask;
    42b8:	68fb      	ldr	r3, [r7, #12]
    42ba:	69ba      	ldr	r2, [r7, #24]
    42bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
    42c0:	697b      	ldr	r3, [r7, #20]
    42c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    42c6:	2b00      	cmp	r3, #0
    42c8:	d004      	beq.n	42d4 <ioport_set_pin_mode+0x8c>
		base->GPIO_GFERS = mask;
    42ca:	68fb      	ldr	r3, [r7, #12]
    42cc:	69ba      	ldr	r2, [r7, #24]
    42ce:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    42d2:	e003      	b.n	42dc <ioport_set_pin_mode+0x94>
	} else {
		base->GPIO_GFERC = mask;
    42d4:	68fb      	ldr	r3, [r7, #12]
    42d6:	69ba      	ldr	r2, [r7, #24]
    42d8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	}

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
    42dc:	697b      	ldr	r3, [r7, #20]
    42de:	f003 0380 	and.w	r3, r3, #128	; 0x80
    42e2:	2b00      	cmp	r3, #0
    42e4:	d004      	beq.n	42f0 <ioport_set_pin_mode+0xa8>
		base->GPIO_ODCR0S = mask;
    42e6:	68fb      	ldr	r3, [r7, #12]
    42e8:	69ba      	ldr	r2, [r7, #24]
    42ea:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    42ee:	e003      	b.n	42f8 <ioport_set_pin_mode+0xb0>
	} else {
		base->GPIO_ODCR0C = mask;
    42f0:	68fb      	ldr	r3, [r7, #12]
    42f2:	69ba      	ldr	r2, [r7, #24]
    42f4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
    42f8:	697b      	ldr	r3, [r7, #20]
    42fa:	f003 0301 	and.w	r3, r3, #1
    42fe:	2b00      	cmp	r3, #0
    4300:	d003      	beq.n	430a <ioport_set_pin_mode+0xc2>
		base->GPIO_PMR0S = mask;
    4302:	68fb      	ldr	r3, [r7, #12]
    4304:	69ba      	ldr	r2, [r7, #24]
    4306:	615a      	str	r2, [r3, #20]
    4308:	e002      	b.n	4310 <ioport_set_pin_mode+0xc8>
	} else {
		base->GPIO_PMR0C = mask;
    430a:	68fb      	ldr	r3, [r7, #12]
    430c:	69ba      	ldr	r2, [r7, #24]
    430e:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
    4310:	697b      	ldr	r3, [r7, #20]
    4312:	f003 0302 	and.w	r3, r3, #2
    4316:	2b00      	cmp	r3, #0
    4318:	d003      	beq.n	4322 <ioport_set_pin_mode+0xda>
		base->GPIO_PMR1S = mask;
    431a:	68fb      	ldr	r3, [r7, #12]
    431c:	69ba      	ldr	r2, [r7, #24]
    431e:	625a      	str	r2, [r3, #36]	; 0x24
    4320:	e002      	b.n	4328 <ioport_set_pin_mode+0xe0>
	} else {
		base->GPIO_PMR1C = mask;
    4322:	68fb      	ldr	r3, [r7, #12]
    4324:	69ba      	ldr	r2, [r7, #24]
    4326:	629a      	str	r2, [r3, #40]	; 0x28
	}

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
    4328:	697b      	ldr	r3, [r7, #20]
    432a:	f003 0304 	and.w	r3, r3, #4
    432e:	2b00      	cmp	r3, #0
    4330:	d003      	beq.n	433a <ioport_set_pin_mode+0xf2>
		base->GPIO_PMR2S = mask;
    4332:	68fb      	ldr	r3, [r7, #12]
    4334:	69ba      	ldr	r2, [r7, #24]
    4336:	635a      	str	r2, [r3, #52]	; 0x34
}
    4338:	e002      	b.n	4340 <ioport_set_pin_mode+0xf8>
	} else {
		base->GPIO_PMR2C = mask;
    433a:	68fb      	ldr	r3, [r7, #12]
    433c:	69ba      	ldr	r2, [r7, #24]
    433e:	639a      	str	r2, [r3, #56]	; 0x38
    4340:	bf00      	nop
    4342:	3734      	adds	r7, #52	; 0x34
    4344:	46bd      	mov	sp, r7
    4346:	bc80      	pop	{r7}
    4348:	4770      	bx	lr

0000434a <ioport_set_pin_dir>:
{
    434a:	b480      	push	{r7}
    434c:	b095      	sub	sp, #84	; 0x54
    434e:	af00      	add	r7, sp, #0
    4350:	6078      	str	r0, [r7, #4]
    4352:	460b      	mov	r3, r1
    4354:	70fb      	strb	r3, [r7, #3]
    4356:	687b      	ldr	r3, [r7, #4]
    4358:	64fb      	str	r3, [r7, #76]	; 0x4c
    435a:	78fb      	ldrb	r3, [r7, #3]
    435c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
    4360:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    4364:	2b01      	cmp	r3, #1
    4366:	d12f      	bne.n	43c8 <ioport_set_pin_dir+0x7e>
    4368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    436a:	647b      	str	r3, [r7, #68]	; 0x44
    436c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    436e:	643b      	str	r3, [r7, #64]	; 0x40
	return pin >> 5;
    4370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4372:	095b      	lsrs	r3, r3, #5
    4374:	63fb      	str	r3, [r7, #60]	; 0x3c
		+ port * sizeof(GpioPort));
    4376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4378:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    437c:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    4380:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    4382:	4619      	mov	r1, r3
    4384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4386:	63bb      	str	r3, [r7, #56]	; 0x38
	return 1U << (pin & 0x1F);
    4388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    438a:	f003 031f 	and.w	r3, r3, #31
    438e:	2201      	movs	r2, #1
    4390:	fa02 f303 	lsl.w	r3, r2, r3
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    4394:	644b      	str	r3, [r1, #68]	; 0x44
    4396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4398:	637b      	str	r3, [r7, #52]	; 0x34
    439a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    439c:	633b      	str	r3, [r7, #48]	; 0x30
	return pin >> 5;
    439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    43a0:	095b      	lsrs	r3, r3, #5
    43a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		+ port * sizeof(GpioPort));
    43a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    43a6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    43aa:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    43ae:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    43b0:	4619      	mov	r1, r3
    43b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    43b4:	62bb      	str	r3, [r7, #40]	; 0x28
	return 1U << (pin & 0x1F);
    43b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    43b8:	f003 031f 	and.w	r3, r3, #31
    43bc:	2201      	movs	r2, #1
    43be:	fa02 f303 	lsl.w	r3, r2, r3
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    43c2:	f8c1 3168 	str.w	r3, [r1, #360]	; 0x168
}
    43c6:	e032      	b.n	442e <ioport_set_pin_dir+0xe4>
	} else if (dir == IOPORT_DIR_INPUT) {
    43c8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    43cc:	2b00      	cmp	r3, #0
    43ce:	d12e      	bne.n	442e <ioport_set_pin_dir+0xe4>
    43d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    43d2:	627b      	str	r3, [r7, #36]	; 0x24
    43d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    43d6:	623b      	str	r3, [r7, #32]
	return pin >> 5;
    43d8:	6a3b      	ldr	r3, [r7, #32]
    43da:	095b      	lsrs	r3, r3, #5
    43dc:	61fb      	str	r3, [r7, #28]
		+ port * sizeof(GpioPort));
    43de:	69fb      	ldr	r3, [r7, #28]
    43e0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    43e4:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    43e8:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    43ea:	4619      	mov	r1, r3
    43ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    43ee:	61bb      	str	r3, [r7, #24]
	return 1U << (pin & 0x1F);
    43f0:	69bb      	ldr	r3, [r7, #24]
    43f2:	f003 031f 	and.w	r3, r3, #31
    43f6:	2201      	movs	r2, #1
    43f8:	fa02 f303 	lsl.w	r3, r2, r3
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    43fc:	648b      	str	r3, [r1, #72]	; 0x48
    43fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4400:	617b      	str	r3, [r7, #20]
    4402:	697b      	ldr	r3, [r7, #20]
    4404:	613b      	str	r3, [r7, #16]
	return pin >> 5;
    4406:	693b      	ldr	r3, [r7, #16]
    4408:	095b      	lsrs	r3, r3, #5
    440a:	60fb      	str	r3, [r7, #12]
		+ port * sizeof(GpioPort));
    440c:	68fb      	ldr	r3, [r7, #12]
    440e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    4412:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    4416:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    4418:	4619      	mov	r1, r3
    441a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    441c:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
    441e:	68bb      	ldr	r3, [r7, #8]
    4420:	f003 031f 	and.w	r3, r3, #31
    4424:	2201      	movs	r2, #1
    4426:	fa02 f303 	lsl.w	r3, r2, r3
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    442a:	f8c1 3164 	str.w	r3, [r1, #356]	; 0x164
    442e:	bf00      	nop
    4430:	3754      	adds	r7, #84	; 0x54
    4432:	46bd      	mov	sp, r7
    4434:	bc80      	pop	{r7}
    4436:	4770      	bx	lr

00004438 <ioport_set_pin_level>:
{
    4438:	b480      	push	{r7}
    443a:	b08d      	sub	sp, #52	; 0x34
    443c:	af00      	add	r7, sp, #0
    443e:	6078      	str	r0, [r7, #4]
    4440:	460b      	mov	r3, r1
    4442:	70fb      	strb	r3, [r7, #3]
    4444:	687b      	ldr	r3, [r7, #4]
    4446:	62fb      	str	r3, [r7, #44]	; 0x2c
    4448:	78fb      	ldrb	r3, [r7, #3]
    444a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
    444e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    4452:	2b00      	cmp	r3, #0
    4454:	d017      	beq.n	4486 <ioport_set_pin_level+0x4e>
    4456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4458:	627b      	str	r3, [r7, #36]	; 0x24
    445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    445c:	623b      	str	r3, [r7, #32]
	return pin >> 5;
    445e:	6a3b      	ldr	r3, [r7, #32]
    4460:	095b      	lsrs	r3, r3, #5
    4462:	61fb      	str	r3, [r7, #28]
		+ port * sizeof(GpioPort));
    4464:	69fb      	ldr	r3, [r7, #28]
    4466:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    446a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    446e:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    4470:	4619      	mov	r1, r3
    4472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4474:	61bb      	str	r3, [r7, #24]
	return 1U << (pin & 0x1F);
    4476:	69bb      	ldr	r3, [r7, #24]
    4478:	f003 031f 	and.w	r3, r3, #31
    447c:	2201      	movs	r2, #1
    447e:	fa02 f303 	lsl.w	r3, r2, r3
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    4482:	654b      	str	r3, [r1, #84]	; 0x54
}
    4484:	e016      	b.n	44b4 <ioport_set_pin_level+0x7c>
    4486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4488:	617b      	str	r3, [r7, #20]
    448a:	697b      	ldr	r3, [r7, #20]
    448c:	613b      	str	r3, [r7, #16]
	return pin >> 5;
    448e:	693b      	ldr	r3, [r7, #16]
    4490:	095b      	lsrs	r3, r3, #5
    4492:	60fb      	str	r3, [r7, #12]
		+ port * sizeof(GpioPort));
    4494:	68fb      	ldr	r3, [r7, #12]
    4496:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    449a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    449e:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    44a0:	4619      	mov	r1, r3
    44a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    44a4:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
    44a6:	68bb      	ldr	r3, [r7, #8]
    44a8:	f003 031f 	and.w	r3, r3, #31
    44ac:	2201      	movs	r2, #1
    44ae:	fa02 f303 	lsl.w	r3, r2, r3
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    44b2:	658b      	str	r3, [r1, #88]	; 0x58
    44b4:	bf00      	nop
    44b6:	3734      	adds	r7, #52	; 0x34
    44b8:	46bd      	mov	sp, r7
    44ba:	bc80      	pop	{r7}
    44bc:	4770      	bx	lr
	...

000044c0 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_disable_pin(pin);\
	} while (0)

void board_init(void)
{
    44c0:	b580      	push	{r7, lr}
    44c2:	b088      	sub	sp, #32
    44c4:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	struct wdt_dev_inst wdt_inst;
	struct wdt_config   wdt_cfg;

	wdt_get_config_defaults(&wdt_cfg);
    44c6:	1d3b      	adds	r3, r7, #4
    44c8:	4618      	mov	r0, r3
    44ca:	4b27      	ldr	r3, [pc, #156]	; (4568 <board_init+0xa8>)
    44cc:	4798      	blx	r3
	wdt_init(&wdt_inst, WDT, &wdt_cfg);
    44ce:	1d3a      	adds	r2, r7, #4
    44d0:	f107 0318 	add.w	r3, r7, #24
    44d4:	4925      	ldr	r1, [pc, #148]	; (456c <board_init+0xac>)
    44d6:	4618      	mov	r0, r3
    44d8:	4b25      	ldr	r3, [pc, #148]	; (4570 <board_init+0xb0>)
    44da:	4798      	blx	r3
	wdt_disable(&wdt_inst);
    44dc:	f107 0318 	add.w	r3, r7, #24
    44e0:	4618      	mov	r0, r3
    44e2:	4b24      	ldr	r3, [pc, #144]	; (4574 <board_init+0xb4>)
    44e4:	4798      	blx	r3
#endif

	/* Initialize IOPORT */
	ioport_init();
    44e6:	4b24      	ldr	r3, [pc, #144]	; (4578 <board_init+0xb8>)
    44e8:	4798      	blx	r3

	/* Initialize LED0, turned off */
	ioport_set_pin_dir(LED_0_PIN, IOPORT_DIR_OUTPUT);
    44ea:	2101      	movs	r1, #1
    44ec:	2047      	movs	r0, #71	; 0x47
    44ee:	4b23      	ldr	r3, [pc, #140]	; (457c <board_init+0xbc>)
    44f0:	4798      	blx	r3
	ioport_set_pin_level(LED_0_PIN, IOPORT_PIN_LEVEL_HIGH);
    44f2:	2101      	movs	r1, #1
    44f4:	2047      	movs	r0, #71	; 0x47
    44f6:	4b22      	ldr	r3, [pc, #136]	; (4580 <board_init+0xc0>)
    44f8:	4798      	blx	r3

	/* Initialize SW0 */
	ioport_set_pin_dir(BUTTON_0_PIN, IOPORT_DIR_INPUT);
    44fa:	2100      	movs	r1, #0
    44fc:	2058      	movs	r0, #88	; 0x58
    44fe:	4b1f      	ldr	r3, [pc, #124]	; (457c <board_init+0xbc>)
    4500:	4798      	blx	r3
	ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLUP);
    4502:	2108      	movs	r1, #8
    4504:	2058      	movs	r0, #88	; 0x58
    4506:	4b1f      	ldr	r3, [pc, #124]	; (4584 <board_init+0xc4>)
    4508:	4798      	blx	r3
#else
	/* Push button as input: already done, it's the default pin state */
#endif

#if defined (CONF_BOARD_COM_PORT)
	ioport_set_pin_peripheral_mode(COM_PORT_RX_PIN, COM_PORT_RX_MUX);
    450a:	2100      	movs	r1, #0
    450c:	205a      	movs	r0, #90	; 0x5a
    450e:	4b1d      	ldr	r3, [pc, #116]	; (4584 <board_init+0xc4>)
    4510:	4798      	blx	r3
    4512:	205a      	movs	r0, #90	; 0x5a
    4514:	4b1c      	ldr	r3, [pc, #112]	; (4588 <board_init+0xc8>)
    4516:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(COM_PORT_TX_PIN, COM_PORT_TX_MUX);
    4518:	2100      	movs	r1, #0
    451a:	205b      	movs	r0, #91	; 0x5b
    451c:	4b19      	ldr	r3, [pc, #100]	; (4584 <board_init+0xc4>)
    451e:	4798      	blx	r3
    4520:	205b      	movs	r0, #91	; 0x5b
    4522:	4b19      	ldr	r3, [pc, #100]	; (4588 <board_init+0xc8>)
    4524:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_TWIMS0
	ioport_set_pin_peripheral_mode(PIN_PA23B_TWIMS0_TWD,
    4526:	2101      	movs	r1, #1
    4528:	2017      	movs	r0, #23
    452a:	4b16      	ldr	r3, [pc, #88]	; (4584 <board_init+0xc4>)
    452c:	4798      	blx	r3
    452e:	2017      	movs	r0, #23
    4530:	4b15      	ldr	r3, [pc, #84]	; (4588 <board_init+0xc8>)
    4532:	4798      	blx	r3
			MUX_PA23B_TWIMS0_TWD);
	ioport_set_pin_peripheral_mode(PIN_PA24B_TWIMS0_TWCK,
    4534:	2101      	movs	r1, #1
    4536:	2018      	movs	r0, #24
    4538:	4b12      	ldr	r3, [pc, #72]	; (4584 <board_init+0xc4>)
    453a:	4798      	blx	r3
    453c:	2018      	movs	r0, #24
    453e:	4b12      	ldr	r3, [pc, #72]	; (4588 <board_init+0xc8>)
    4540:	4798      	blx	r3
			MUX_PA24B_TWIMS0_TWCK);
#endif

#ifdef CONF_BOARD_TWIMS3
	ioport_set_pin_peripheral_mode(PIN_PB14C_TWIMS3_TWD,
    4542:	2102      	movs	r1, #2
    4544:	202e      	movs	r0, #46	; 0x2e
    4546:	4b0f      	ldr	r3, [pc, #60]	; (4584 <board_init+0xc4>)
    4548:	4798      	blx	r3
    454a:	202e      	movs	r0, #46	; 0x2e
    454c:	4b0e      	ldr	r3, [pc, #56]	; (4588 <board_init+0xc8>)
    454e:	4798      	blx	r3
			MUX_PB14C_TWIMS3_TWD);
	ioport_set_pin_peripheral_mode(PIN_PB15C_TWIMS3_TWCK,
    4550:	2102      	movs	r1, #2
    4552:	202f      	movs	r0, #47	; 0x2f
    4554:	4b0b      	ldr	r3, [pc, #44]	; (4584 <board_init+0xc4>)
    4556:	4798      	blx	r3
    4558:	202f      	movs	r0, #47	; 0x2f
    455a:	4b0b      	ldr	r3, [pc, #44]	; (4588 <board_init+0xc8>)
    455c:	4798      	blx	r3
	ioport_set_pin_dir(UG_2832HSWEG04_DATA_CMD_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(UG_2832HSWEG04_DATA_CMD_GPIO, IOPORT_MODE_PULLUP);
	ioport_set_pin_dir(UG_2832HSWEG04_RESET_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(UG_2832HSWEG04_RESET_GPIO, IOPORT_MODE_PULLUP);
#endif
}
    455e:	bf00      	nop
    4560:	3720      	adds	r7, #32
    4562:	46bd      	mov	sp, r7
    4564:	bd80      	pop	{r7, pc}
    4566:	bf00      	nop
    4568:	00004ba9 	.word	0x00004ba9
    456c:	400f0c00 	.word	0x400f0c00
    4570:	00004bed 	.word	0x00004bed
    4574:	00004cf1 	.word	0x00004cf1
    4578:	000041e9 	.word	0x000041e9
    457c:	0000434b 	.word	0x0000434b
    4580:	00004439 	.word	0x00004439
    4584:	00004249 	.word	0x00004249
    4588:	00004201 	.word	0x00004201

0000458c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    458c:	b480      	push	{r7}
    458e:	b083      	sub	sp, #12
    4590:	af00      	add	r7, sp, #0
    4592:	f3ef 8310 	mrs	r3, PRIMASK
    4596:	607b      	str	r3, [r7, #4]
  return(result);
    4598:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    459a:	2b00      	cmp	r3, #0
    459c:	bf0c      	ite	eq
    459e:	2301      	moveq	r3, #1
    45a0:	2300      	movne	r3, #0
    45a2:	b2db      	uxtb	r3, r3
    45a4:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    45a6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    45a8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    45ac:	4b04      	ldr	r3, [pc, #16]	; (45c0 <cpu_irq_save+0x34>)
    45ae:	2200      	movs	r2, #0
    45b0:	701a      	strb	r2, [r3, #0]
	return flags;
    45b2:	683b      	ldr	r3, [r7, #0]
}
    45b4:	4618      	mov	r0, r3
    45b6:	370c      	adds	r7, #12
    45b8:	46bd      	mov	sp, r7
    45ba:	bc80      	pop	{r7}
    45bc:	4770      	bx	lr
    45be:	bf00      	nop
    45c0:	20000074 	.word	0x20000074

000045c4 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    45c4:	b480      	push	{r7}
    45c6:	b083      	sub	sp, #12
    45c8:	af00      	add	r7, sp, #0
    45ca:	6078      	str	r0, [r7, #4]
	return (flags);
    45cc:	687b      	ldr	r3, [r7, #4]
    45ce:	2b00      	cmp	r3, #0
    45d0:	bf14      	ite	ne
    45d2:	2301      	movne	r3, #1
    45d4:	2300      	moveq	r3, #0
    45d6:	b2db      	uxtb	r3, r3
}
    45d8:	4618      	mov	r0, r3
    45da:	370c      	adds	r7, #12
    45dc:	46bd      	mov	sp, r7
    45de:	bc80      	pop	{r7}
    45e0:	4770      	bx	lr
	...

000045e4 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    45e4:	b580      	push	{r7, lr}
    45e6:	b082      	sub	sp, #8
    45e8:	af00      	add	r7, sp, #0
    45ea:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    45ec:	6878      	ldr	r0, [r7, #4]
    45ee:	4b07      	ldr	r3, [pc, #28]	; (460c <cpu_irq_restore+0x28>)
    45f0:	4798      	blx	r3
    45f2:	4603      	mov	r3, r0
    45f4:	2b00      	cmp	r3, #0
    45f6:	d005      	beq.n	4604 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    45f8:	4b05      	ldr	r3, [pc, #20]	; (4610 <cpu_irq_restore+0x2c>)
    45fa:	2201      	movs	r2, #1
    45fc:	701a      	strb	r2, [r3, #0]
    45fe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4602:	b662      	cpsie	i
}
    4604:	bf00      	nop
    4606:	3708      	adds	r7, #8
    4608:	46bd      	mov	sp, r7
    460a:	bd80      	pop	{r7, pc}
    460c:	000045c5 	.word	0x000045c5
    4610:	20000074 	.word	0x20000074

00004614 <bpm_power_scaling_cpu_failsafe>:
}


bool bpm_power_scaling_cpu_failsafe(Bpm *bpm, uint32_t ps_value,
	uint32_t timeout)
{
    4614:	b580      	push	{r7, lr}
    4616:	b08a      	sub	sp, #40	; 0x28
    4618:	af00      	add	r7, sp, #0
    461a:	60f8      	str	r0, [r7, #12]
    461c:	60b9      	str	r1, [r7, #8]
    461e:	607a      	str	r2, [r7, #4]
	uint32_t pmcon = 0;
    4620:	2300      	movs	r3, #0
    4622:	627b      	str	r3, [r7, #36]	; 0x24

	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    4624:	68fb      	ldr	r3, [r7, #12]
    4626:	69db      	ldr	r3, [r3, #28]
    4628:	627b      	str	r3, [r7, #36]	; 0x24

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
    462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    462c:	f023 0303 	bic.w	r3, r3, #3
    4630:	627b      	str	r3, [r7, #36]	; 0x24
	pmcon |= BPM_PMCON_PS(ps_value);
    4632:	68bb      	ldr	r3, [r7, #8]
    4634:	f003 0303 	and.w	r3, r3, #3
    4638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    463a:	4313      	orrs	r3, r2
    463c:	627b      	str	r3, [r7, #36]	; 0x24

	/* Set PSCM Value: PS change no halt */
	pmcon |= BPM_PMCON_PSCM;
    463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4640:	f043 0308 	orr.w	r3, r3, #8
    4644:	627b      	str	r3, [r7, #36]	; 0x24

	/* Power Scaling Change Request */
	pmcon |= BPM_PMCON_PSCREQ;
    4646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4648:	f043 0304 	orr.w	r3, r3, #4
    464c:	627b      	str	r3, [r7, #36]	; 0x24
	/* Execute power scaling no halt in RAM */
	irqflags_t flags;
	bool b_psok;
	uint32_t ctrl, load, val;
	/* Avoid interrupt while flash halt */
	flags = cpu_irq_save();
    464e:	4b16      	ldr	r3, [pc, #88]	; (46a8 <bpm_power_scaling_cpu_failsafe+0x94>)
    4650:	4798      	blx	r3
    4652:	6238      	str	r0, [r7, #32]

	/* Save SysTick */
	val = SysTick->VAL;
    4654:	4b15      	ldr	r3, [pc, #84]	; (46ac <bpm_power_scaling_cpu_failsafe+0x98>)
    4656:	689b      	ldr	r3, [r3, #8]
    4658:	61fb      	str	r3, [r7, #28]
	ctrl = SysTick->CTRL;
    465a:	4b14      	ldr	r3, [pc, #80]	; (46ac <bpm_power_scaling_cpu_failsafe+0x98>)
    465c:	681b      	ldr	r3, [r3, #0]
    465e:	61bb      	str	r3, [r7, #24]
	load = SysTick->LOAD;
    4660:	4b12      	ldr	r3, [pc, #72]	; (46ac <bpm_power_scaling_cpu_failsafe+0x98>)
    4662:	685b      	ldr	r3, [r3, #4]
    4664:	617b      	str	r3, [r7, #20]
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
    4666:	4a11      	ldr	r2, [pc, #68]	; (46ac <bpm_power_scaling_cpu_failsafe+0x98>)
    4668:	687b      	ldr	r3, [r7, #4]
    466a:	6053      	str	r3, [r2, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    466c:	4b0f      	ldr	r3, [pc, #60]	; (46ac <bpm_power_scaling_cpu_failsafe+0x98>)
    466e:	2205      	movs	r2, #5
    4670:	601a      	str	r2, [r3, #0]

	b_psok = bpm_ps_no_halt_exec(bpm, pmcon);
    4672:	6a79      	ldr	r1, [r7, #36]	; 0x24
    4674:	68f8      	ldr	r0, [r7, #12]
    4676:	4b0e      	ldr	r3, [pc, #56]	; (46b0 <bpm_power_scaling_cpu_failsafe+0x9c>)
    4678:	4798      	blx	r3
    467a:	4603      	mov	r3, r0
    467c:	74fb      	strb	r3, [r7, #19]

	/* Restore SysTick */
	SysTick->CTRL = 0;
    467e:	4b0b      	ldr	r3, [pc, #44]	; (46ac <bpm_power_scaling_cpu_failsafe+0x98>)
    4680:	2200      	movs	r2, #0
    4682:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = load;
    4684:	4a09      	ldr	r2, [pc, #36]	; (46ac <bpm_power_scaling_cpu_failsafe+0x98>)
    4686:	697b      	ldr	r3, [r7, #20]
    4688:	6053      	str	r3, [r2, #4]
	SysTick->VAL = val;
    468a:	4a08      	ldr	r2, [pc, #32]	; (46ac <bpm_power_scaling_cpu_failsafe+0x98>)
    468c:	69fb      	ldr	r3, [r7, #28]
    468e:	6093      	str	r3, [r2, #8]
	SysTick->CTRL = ctrl;
    4690:	4a06      	ldr	r2, [pc, #24]	; (46ac <bpm_power_scaling_cpu_failsafe+0x98>)
    4692:	69bb      	ldr	r3, [r7, #24]
    4694:	6013      	str	r3, [r2, #0]

	cpu_irq_restore(flags);
    4696:	6a38      	ldr	r0, [r7, #32]
    4698:	4b06      	ldr	r3, [pc, #24]	; (46b4 <bpm_power_scaling_cpu_failsafe+0xa0>)
    469a:	4798      	blx	r3
	return b_psok;
    469c:	7cfb      	ldrb	r3, [r7, #19]
}
    469e:	4618      	mov	r0, r3
    46a0:	3728      	adds	r7, #40	; 0x28
    46a2:	46bd      	mov	sp, r7
    46a4:	bd80      	pop	{r7, pc}
    46a6:	bf00      	nop
    46a8:	0000458d 	.word	0x0000458d
    46ac:	e000e010 	.word	0xe000e010
    46b0:	20000001 	.word	0x20000001
    46b4:	000045e5 	.word	0x000045e5

000046b8 <bpm_power_scaling_cpu>:

void bpm_power_scaling_cpu(Bpm *bpm, uint32_t ps_value)
{
    46b8:	b480      	push	{r7}
    46ba:	b085      	sub	sp, #20
    46bc:	af00      	add	r7, sp, #0
    46be:	6078      	str	r0, [r7, #4]
    46c0:	6039      	str	r1, [r7, #0]
	uint32_t pmcon = 0;
    46c2:	2300      	movs	r3, #0
    46c4:	60fb      	str	r3, [r7, #12]
	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    46c6:	687b      	ldr	r3, [r7, #4]
    46c8:	69db      	ldr	r3, [r3, #28]
    46ca:	60fb      	str	r3, [r7, #12]
	/* Clear last PS Value */
	pmcon &= ~BPM_PMCON_PS_Msk;
    46cc:	68fb      	ldr	r3, [r7, #12]
    46ce:	f023 0303 	bic.w	r3, r3, #3
    46d2:	60fb      	str	r3, [r7, #12]
	/* Write new PS Value */
	pmcon |= BPM_PMCON_PS(ps_value);
    46d4:	683b      	ldr	r3, [r7, #0]
    46d6:	f003 0303 	and.w	r3, r3, #3
    46da:	68fa      	ldr	r2, [r7, #12]
    46dc:	4313      	orrs	r3, r2
    46de:	60fb      	str	r3, [r7, #12]
	/* PSCM: without CPU halt */
	pmcon |= BPM_PMCON_PSCM;
    46e0:	68fb      	ldr	r3, [r7, #12]
    46e2:	f043 0308 	orr.w	r3, r3, #8
    46e6:	60fb      	str	r3, [r7, #12]
	/* Power Scaling Change Request */
	pmcon |= BPM_PMCON_PSCREQ;
    46e8:	68fb      	ldr	r3, [r7, #12]
    46ea:	f043 0304 	orr.w	r3, r3, #4
    46ee:	60fb      	str	r3, [r7, #12]
	/* Unlock PMCON register */
	BPM_UNLOCK(PMCON);
    46f0:	4b05      	ldr	r3, [pc, #20]	; (4708 <bpm_power_scaling_cpu+0x50>)
    46f2:	4a06      	ldr	r2, [pc, #24]	; (470c <bpm_power_scaling_cpu+0x54>)
    46f4:	619a      	str	r2, [r3, #24]
	/* Write back PM_CON value */
	bpm->BPM_PMCON = pmcon;
    46f6:	687b      	ldr	r3, [r7, #4]
    46f8:	68fa      	ldr	r2, [r7, #12]
    46fa:	61da      	str	r2, [r3, #28]
}
    46fc:	bf00      	nop
    46fe:	3714      	adds	r7, #20
    4700:	46bd      	mov	sp, r7
    4702:	bc80      	pop	{r7}
    4704:	4770      	bx	lr
    4706:	bf00      	nop
    4708:	400f0000 	.word	0x400f0000
    470c:	aa00001c 	.word	0xaa00001c

00004710 <bpm_set_clk32_source>:
	BPM_UNLOCK(PMCON);
	bpm->BPM_PMCON = pmcon;
}

void bpm_set_clk32_source(Bpm *bpm, uint32_t source)
{
    4710:	b480      	push	{r7}
    4712:	b085      	sub	sp, #20
    4714:	af00      	add	r7, sp, #0
    4716:	6078      	str	r0, [r7, #4]
    4718:	6039      	str	r1, [r7, #0]
	uint32_t pmcon;

	/* Read PMCON first */
	pmcon = bpm->BPM_PMCON;
    471a:	687b      	ldr	r3, [r7, #4]
    471c:	69db      	ldr	r3, [r3, #28]
    471e:	60fb      	str	r3, [r7, #12]
	if (source == BPM_CLK32_SOURCE_OSC32K) {
    4720:	683b      	ldr	r3, [r7, #0]
    4722:	2b00      	cmp	r3, #0
    4724:	d104      	bne.n	4730 <bpm_set_clk32_source+0x20>
		/* Clear CK32S for OSC32K */
		pmcon &= ~BPM_PMCON_CK32S;
    4726:	68fb      	ldr	r3, [r7, #12]
    4728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    472c:	60fb      	str	r3, [r7, #12]
    472e:	e003      	b.n	4738 <bpm_set_clk32_source+0x28>
	} else {
		/* Set CK32S for RC32K */
		pmcon |= BPM_PMCON_CK32S;
    4730:	68fb      	ldr	r3, [r7, #12]
    4732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4736:	60fb      	str	r3, [r7, #12]
	}

	/* Unlock PMCON register */
	BPM_UNLOCK(PMCON);
    4738:	4b05      	ldr	r3, [pc, #20]	; (4750 <bpm_set_clk32_source+0x40>)
    473a:	4a06      	ldr	r2, [pc, #24]	; (4754 <bpm_set_clk32_source+0x44>)
    473c:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
    473e:	687b      	ldr	r3, [r7, #4]
    4740:	68fa      	ldr	r2, [r7, #12]
    4742:	61da      	str	r2, [r3, #28]
}
    4744:	bf00      	nop
    4746:	3714      	adds	r7, #20
    4748:	46bd      	mov	sp, r7
    474a:	bc80      	pop	{r7}
    474c:	4770      	bx	lr
    474e:	bf00      	nop
    4750:	400f0000 	.word	0x400f0000
    4754:	aa00001c 	.word	0xaa00001c

00004758 <bpm_get_status>:
{
	bpm->BPM_ICR = sources;
}

uint32_t bpm_get_status(Bpm *bpm)
{
    4758:	b480      	push	{r7}
    475a:	b083      	sub	sp, #12
    475c:	af00      	add	r7, sp, #0
    475e:	6078      	str	r0, [r7, #4]
	return bpm->BPM_SR;
    4760:	687b      	ldr	r3, [r7, #4]
    4762:	695b      	ldr	r3, [r3, #20]
}
    4764:	4618      	mov	r0, r3
    4766:	370c      	adds	r7, #12
    4768:	46bd      	mov	sp, r7
    476a:	bc80      	pop	{r7}
    476c:	4770      	bx	lr
	...

00004770 <bpm_sleep>:
{
	return bpm->BPM_VERSION;
}

void bpm_sleep(Bpm *bpm, uint32_t sleep_mode)
{
    4770:	b480      	push	{r7}
    4772:	b085      	sub	sp, #20
    4774:	af00      	add	r7, sp, #0
    4776:	6078      	str	r0, [r7, #4]
    4778:	6039      	str	r1, [r7, #0]
	uint32_t pmcon;

	/* Read PMCON register */
	pmcon = bpm->BPM_PMCON;
    477a:	687b      	ldr	r3, [r7, #4]
    477c:	69db      	ldr	r3, [r3, #28]
    477e:	60fb      	str	r3, [r7, #12]
	pmcon &= ~BPM_PMCON_BKUP;
    4780:	68fb      	ldr	r3, [r7, #12]
    4782:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    4786:	60fb      	str	r3, [r7, #12]
	pmcon &= ~BPM_PMCON_RET;
    4788:	68fb      	ldr	r3, [r7, #12]
    478a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    478e:	60fb      	str	r3, [r7, #12]
	pmcon &= ~BPM_PMCON_SLEEP_Msk;
    4790:	68fb      	ldr	r3, [r7, #12]
    4792:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    4796:	60fb      	str	r3, [r7, #12]

	/* Unlock PMCON register */
	BPM_UNLOCK(PMCON);
    4798:	4b42      	ldr	r3, [pc, #264]	; (48a4 <bpm_sleep+0x134>)
    479a:	4a43      	ldr	r2, [pc, #268]	; (48a8 <bpm_sleep+0x138>)
    479c:	619a      	str	r2, [r3, #24]

	if (sleep_mode == BPM_SM_SLEEP_0) {
    479e:	683b      	ldr	r3, [r7, #0]
    47a0:	2b01      	cmp	r3, #1
    47a2:	d109      	bne.n	47b8 <bpm_sleep+0x48>
		pmcon |= BPM_PMCON_SLEEP(0);
		bpm->BPM_PMCON = pmcon;
    47a4:	687b      	ldr	r3, [r7, #4]
    47a6:	68fa      	ldr	r2, [r7, #12]
    47a8:	61da      	str	r2, [r3, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    47aa:	4a40      	ldr	r2, [pc, #256]	; (48ac <bpm_sleep+0x13c>)
    47ac:	4b3f      	ldr	r3, [pc, #252]	; (48ac <bpm_sleep+0x13c>)
    47ae:	691b      	ldr	r3, [r3, #16]
    47b0:	f023 0304 	bic.w	r3, r3, #4
    47b4:	6113      	str	r3, [r2, #16]
    47b6:	e060      	b.n	487a <bpm_sleep+0x10a>
	} else if (sleep_mode == BPM_SM_SLEEP_1) {
    47b8:	683b      	ldr	r3, [r7, #0]
    47ba:	2b02      	cmp	r3, #2
    47bc:	d10d      	bne.n	47da <bpm_sleep+0x6a>
		pmcon |= BPM_PMCON_SLEEP(1);
    47be:	68fb      	ldr	r3, [r7, #12]
    47c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    47c4:	60fb      	str	r3, [r7, #12]
		bpm->BPM_PMCON = pmcon;
    47c6:	687b      	ldr	r3, [r7, #4]
    47c8:	68fa      	ldr	r2, [r7, #12]
    47ca:	61da      	str	r2, [r3, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    47cc:	4a37      	ldr	r2, [pc, #220]	; (48ac <bpm_sleep+0x13c>)
    47ce:	4b37      	ldr	r3, [pc, #220]	; (48ac <bpm_sleep+0x13c>)
    47d0:	691b      	ldr	r3, [r3, #16]
    47d2:	f023 0304 	bic.w	r3, r3, #4
    47d6:	6113      	str	r3, [r2, #16]
    47d8:	e04f      	b.n	487a <bpm_sleep+0x10a>
	} else if (sleep_mode == BPM_SM_SLEEP_2) {
    47da:	683b      	ldr	r3, [r7, #0]
    47dc:	2b03      	cmp	r3, #3
    47de:	d10d      	bne.n	47fc <bpm_sleep+0x8c>
		pmcon |= BPM_PMCON_SLEEP(2);
    47e0:	68fb      	ldr	r3, [r7, #12]
    47e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    47e6:	60fb      	str	r3, [r7, #12]
		bpm->BPM_PMCON = pmcon;
    47e8:	687b      	ldr	r3, [r7, #4]
    47ea:	68fa      	ldr	r2, [r7, #12]
    47ec:	61da      	str	r2, [r3, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    47ee:	4a2f      	ldr	r2, [pc, #188]	; (48ac <bpm_sleep+0x13c>)
    47f0:	4b2e      	ldr	r3, [pc, #184]	; (48ac <bpm_sleep+0x13c>)
    47f2:	691b      	ldr	r3, [r3, #16]
    47f4:	f023 0304 	bic.w	r3, r3, #4
    47f8:	6113      	str	r3, [r2, #16]
    47fa:	e03e      	b.n	487a <bpm_sleep+0x10a>
	} else if (sleep_mode == BPM_SM_SLEEP_3) {
    47fc:	683b      	ldr	r3, [r7, #0]
    47fe:	2b04      	cmp	r3, #4
    4800:	d10d      	bne.n	481e <bpm_sleep+0xae>
		pmcon |= BPM_PMCON_SLEEP(3);
    4802:	68fb      	ldr	r3, [r7, #12]
    4804:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    4808:	60fb      	str	r3, [r7, #12]
		bpm->BPM_PMCON = pmcon;
    480a:	687b      	ldr	r3, [r7, #4]
    480c:	68fa      	ldr	r2, [r7, #12]
    480e:	61da      	str	r2, [r3, #28]
		SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    4810:	4a26      	ldr	r2, [pc, #152]	; (48ac <bpm_sleep+0x13c>)
    4812:	4b26      	ldr	r3, [pc, #152]	; (48ac <bpm_sleep+0x13c>)
    4814:	691b      	ldr	r3, [r3, #16]
    4816:	f023 0304 	bic.w	r3, r3, #4
    481a:	6113      	str	r3, [r2, #16]
    481c:	e02d      	b.n	487a <bpm_sleep+0x10a>
	} else if (sleep_mode == BPM_SM_WAIT) {
    481e:	683b      	ldr	r3, [r7, #0]
    4820:	2b05      	cmp	r3, #5
    4822:	d109      	bne.n	4838 <bpm_sleep+0xc8>
		bpm->BPM_PMCON = pmcon;
    4824:	687b      	ldr	r3, [r7, #4]
    4826:	68fa      	ldr	r2, [r7, #12]
    4828:	61da      	str	r2, [r3, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    482a:	4a20      	ldr	r2, [pc, #128]	; (48ac <bpm_sleep+0x13c>)
    482c:	4b1f      	ldr	r3, [pc, #124]	; (48ac <bpm_sleep+0x13c>)
    482e:	691b      	ldr	r3, [r3, #16]
    4830:	f043 0304 	orr.w	r3, r3, #4
    4834:	6113      	str	r3, [r2, #16]
    4836:	e020      	b.n	487a <bpm_sleep+0x10a>
	} else if (sleep_mode == BPM_SM_RET) {
    4838:	683b      	ldr	r3, [r7, #0]
    483a:	2b06      	cmp	r3, #6
    483c:	d10d      	bne.n	485a <bpm_sleep+0xea>
		pmcon |= BPM_PMCON_RET;
    483e:	68fb      	ldr	r3, [r7, #12]
    4840:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4844:	60fb      	str	r3, [r7, #12]
		bpm->BPM_PMCON = pmcon;
    4846:	687b      	ldr	r3, [r7, #4]
    4848:	68fa      	ldr	r2, [r7, #12]
    484a:	61da      	str	r2, [r3, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    484c:	4a17      	ldr	r2, [pc, #92]	; (48ac <bpm_sleep+0x13c>)
    484e:	4b17      	ldr	r3, [pc, #92]	; (48ac <bpm_sleep+0x13c>)
    4850:	691b      	ldr	r3, [r3, #16]
    4852:	f043 0304 	orr.w	r3, r3, #4
    4856:	6113      	str	r3, [r2, #16]
    4858:	e00f      	b.n	487a <bpm_sleep+0x10a>
	} else if (sleep_mode == BPM_SM_BACKUP) { 
    485a:	683b      	ldr	r3, [r7, #0]
    485c:	2b07      	cmp	r3, #7
    485e:	d11c      	bne.n	489a <bpm_sleep+0x12a>
		pmcon |= BPM_PMCON_BKUP;
    4860:	68fb      	ldr	r3, [r7, #12]
    4862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4866:	60fb      	str	r3, [r7, #12]
		bpm->BPM_PMCON = pmcon;
    4868:	687b      	ldr	r3, [r7, #4]
    486a:	68fa      	ldr	r2, [r7, #12]
    486c:	61da      	str	r2, [r3, #28]
		SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    486e:	4a0f      	ldr	r2, [pc, #60]	; (48ac <bpm_sleep+0x13c>)
    4870:	4b0e      	ldr	r3, [pc, #56]	; (48ac <bpm_sleep+0x13c>)
    4872:	691b      	ldr	r3, [r3, #16]
    4874:	f043 0304 	orr.w	r3, r3, #4
    4878:	6113      	str	r3, [r2, #16]
	} else {
		return;
	}

	/* Wait until vreg is ok. */
	while(!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_VREGOK));
    487a:	bf00      	nop
    487c:	4b0c      	ldr	r3, [pc, #48]	; (48b0 <bpm_sleep+0x140>)
    487e:	695b      	ldr	r3, [r3, #20]
    4880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4884:	2b00      	cmp	r3, #0
    4886:	d0f9      	beq.n	487c <bpm_sleep+0x10c>
	asm volatile ("wfi");
    4888:	bf30      	wfi
	/* ensure sleep request propagation to flash. */
	asm volatile ("nop");
    488a:	bf00      	nop
	 * masked since we are in the critical section thanks to the previous
	 * set_pri_mask(1). Thus, we need to leave the critical section.
	 * Please note that we should probably use something like
	 * cpu_leave_critical(), using set_pri_mask(0)
	 */
	cpu_irq_enable();
    488c:	4b09      	ldr	r3, [pc, #36]	; (48b4 <bpm_sleep+0x144>)
    488e:	2201      	movs	r2, #1
    4890:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    4892:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4896:	b662      	cpsie	i
    4898:	e000      	b.n	489c <bpm_sleep+0x12c>
		return;
    489a:	bf00      	nop
}
    489c:	3714      	adds	r7, #20
    489e:	46bd      	mov	sp, r7
    48a0:	bc80      	pop	{r7}
    48a2:	4770      	bx	lr
    48a4:	400f0000 	.word	0x400f0000
    48a8:	aa00001c 	.word	0xaa00001c
    48ac:	e000ed00 	.word	0xe000ed00
    48b0:	400f0400 	.word	0x400f0400
    48b4:	20000074 	.word	0x20000074

000048b8 <flashcalw_set_wait_state>:
 *
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
    48b8:	b480      	push	{r7}
    48ba:	b083      	sub	sp, #12
    48bc:	af00      	add	r7, sp, #0
    48be:	6078      	str	r0, [r7, #4]
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    48c0:	4908      	ldr	r1, [pc, #32]	; (48e4 <flashcalw_set_wait_state+0x2c>)
    48c2:	4b08      	ldr	r3, [pc, #32]	; (48e4 <flashcalw_set_wait_state+0x2c>)
    48c4:	681b      	ldr	r3, [r3, #0]
    48c6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
			| (wait_state ? FLASHCALW_FCR_FWS_1 :
    48ca:	687b      	ldr	r3, [r7, #4]
    48cc:	2b00      	cmp	r3, #0
    48ce:	d001      	beq.n	48d4 <flashcalw_set_wait_state+0x1c>
    48d0:	2340      	movs	r3, #64	; 0x40
    48d2:	e000      	b.n	48d6 <flashcalw_set_wait_state+0x1e>
    48d4:	2300      	movs	r3, #0
    48d6:	4313      	orrs	r3, r2
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    48d8:	600b      	str	r3, [r1, #0]
			FLASHCALW_FCR_FWS_0);
}
    48da:	bf00      	nop
    48dc:	370c      	adds	r7, #12
    48de:	46bd      	mov	sp, r7
    48e0:	bc80      	pop	{r7}
    48e2:	4770      	bx	lr
    48e4:	400a0000 	.word	0x400a0000

000048e8 <flashcalw_set_flash_waitstate_and_readmode>:
 * \param ps_value Power Scaling mode value (0, 1)
 * \param is_fwu_enabled (boolean), Is fast wakeup mode enabled or not
 */
void flashcalw_set_flash_waitstate_and_readmode(uint32_t cpu_f_hz,
		uint32_t ps_value, bool is_fwu_enabled)
{
    48e8:	b580      	push	{r7, lr}
    48ea:	b084      	sub	sp, #16
    48ec:	af00      	add	r7, sp, #0
    48ee:	60f8      	str	r0, [r7, #12]
    48f0:	60b9      	str	r1, [r7, #8]
    48f2:	4613      	mov	r3, r2
    48f4:	71fb      	strb	r3, [r7, #7]
	}

	/* Enable the high-speed read mode. */
	flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN, -1);
#else
	if (ps_value == 0) {
    48f6:	68bb      	ldr	r3, [r7, #8]
    48f8:	2b00      	cmp	r3, #0
    48fa:	d132      	bne.n	4962 <flashcalw_set_flash_waitstate_and_readmode+0x7a>
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) {
    48fc:	68fb      	ldr	r3, [r7, #12]
    48fe:	4a23      	ldr	r2, [pc, #140]	; (498c <flashcalw_set_flash_waitstate_and_readmode+0xa4>)
    4900:	4293      	cmp	r3, r2
    4902:	d915      	bls.n	4930 <flashcalw_set_flash_waitstate_and_readmode+0x48>
			// > 18MHz
			if (cpu_f_hz <= FLASH_FREQ_PS0_FWS_1_MAX_FREQ) {
    4904:	68fb      	ldr	r3, [r7, #12]
    4906:	4a22      	ldr	r2, [pc, #136]	; (4990 <flashcalw_set_flash_waitstate_and_readmode+0xa8>)
    4908:	4293      	cmp	r3, r2
    490a:	d808      	bhi.n	491e <flashcalw_set_flash_waitstate_and_readmode+0x36>
				// <= 36MHz
				/* Set a wait-state, disable the high-speed read
				 * mode. */
				flashcalw_set_wait_state(1);
    490c:	2001      	movs	r0, #1
    490e:	4b21      	ldr	r3, [pc, #132]	; (4994 <flashcalw_set_flash_waitstate_and_readmode+0xac>)
    4910:	4798      	blx	r3
				flashcalw_issue_command(
    4912:	f04f 31ff 	mov.w	r1, #4294967295
    4916:	2011      	movs	r0, #17
    4918:	4b1f      	ldr	r3, [pc, #124]	; (4998 <flashcalw_set_flash_waitstate_and_readmode+0xb0>)
    491a:	4798      	blx	r3

		/* Disable the high-speed read mode. */
		flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSDIS, -1);
	}
#endif
}
    491c:	e031      	b.n	4982 <flashcalw_set_flash_waitstate_and_readmode+0x9a>
				flashcalw_set_wait_state(1);
    491e:	2001      	movs	r0, #1
    4920:	4b1c      	ldr	r3, [pc, #112]	; (4994 <flashcalw_set_flash_waitstate_and_readmode+0xac>)
    4922:	4798      	blx	r3
				flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN,
    4924:	f04f 31ff 	mov.w	r1, #4294967295
    4928:	2010      	movs	r0, #16
    492a:	4b1b      	ldr	r3, [pc, #108]	; (4998 <flashcalw_set_flash_waitstate_and_readmode+0xb0>)
    492c:	4798      	blx	r3
}
    492e:	e028      	b.n	4982 <flashcalw_set_flash_waitstate_and_readmode+0x9a>
			if((is_fwu_enabled == true) &&
    4930:	79fb      	ldrb	r3, [r7, #7]
    4932:	2b00      	cmp	r3, #0
    4934:	d00c      	beq.n	4950 <flashcalw_set_flash_waitstate_and_readmode+0x68>
    4936:	68fb      	ldr	r3, [r7, #12]
    4938:	4a18      	ldr	r2, [pc, #96]	; (499c <flashcalw_set_flash_waitstate_and_readmode+0xb4>)
    493a:	4293      	cmp	r3, r2
    493c:	d808      	bhi.n	4950 <flashcalw_set_flash_waitstate_and_readmode+0x68>
				flashcalw_set_wait_state(1);
    493e:	2001      	movs	r0, #1
    4940:	4b14      	ldr	r3, [pc, #80]	; (4994 <flashcalw_set_flash_waitstate_and_readmode+0xac>)
    4942:	4798      	blx	r3
				flashcalw_issue_command(
    4944:	f04f 31ff 	mov.w	r1, #4294967295
    4948:	2011      	movs	r0, #17
    494a:	4b13      	ldr	r3, [pc, #76]	; (4998 <flashcalw_set_flash_waitstate_and_readmode+0xb0>)
    494c:	4798      	blx	r3
}
    494e:	e018      	b.n	4982 <flashcalw_set_flash_waitstate_and_readmode+0x9a>
				flashcalw_set_wait_state(0);
    4950:	2000      	movs	r0, #0
    4952:	4b10      	ldr	r3, [pc, #64]	; (4994 <flashcalw_set_flash_waitstate_and_readmode+0xac>)
    4954:	4798      	blx	r3
				flashcalw_issue_command(
    4956:	f04f 31ff 	mov.w	r1, #4294967295
    495a:	2011      	movs	r0, #17
    495c:	4b0e      	ldr	r3, [pc, #56]	; (4998 <flashcalw_set_flash_waitstate_and_readmode+0xb0>)
    495e:	4798      	blx	r3
}
    4960:	e00f      	b.n	4982 <flashcalw_set_flash_waitstate_and_readmode+0x9a>
		if (cpu_f_hz > FLASH_FREQ_PS1_FWS_0_MAX_FREQ) { /* > 8MHz */
    4962:	68fb      	ldr	r3, [r7, #12]
    4964:	4a0e      	ldr	r2, [pc, #56]	; (49a0 <flashcalw_set_flash_waitstate_and_readmode+0xb8>)
    4966:	4293      	cmp	r3, r2
    4968:	d903      	bls.n	4972 <flashcalw_set_flash_waitstate_and_readmode+0x8a>
			flashcalw_set_wait_state(1);
    496a:	2001      	movs	r0, #1
    496c:	4b09      	ldr	r3, [pc, #36]	; (4994 <flashcalw_set_flash_waitstate_and_readmode+0xac>)
    496e:	4798      	blx	r3
    4970:	e002      	b.n	4978 <flashcalw_set_flash_waitstate_and_readmode+0x90>
			flashcalw_set_wait_state(0);
    4972:	2000      	movs	r0, #0
    4974:	4b07      	ldr	r3, [pc, #28]	; (4994 <flashcalw_set_flash_waitstate_and_readmode+0xac>)
    4976:	4798      	blx	r3
		flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSDIS, -1);
    4978:	f04f 31ff 	mov.w	r1, #4294967295
    497c:	2011      	movs	r0, #17
    497e:	4b06      	ldr	r3, [pc, #24]	; (4998 <flashcalw_set_flash_waitstate_and_readmode+0xb0>)
    4980:	4798      	blx	r3
}
    4982:	bf00      	nop
    4984:	3710      	adds	r7, #16
    4986:	46bd      	mov	sp, r7
    4988:	bd80      	pop	{r7, pc}
    498a:	bf00      	nop
    498c:	0112a880 	.word	0x0112a880
    4990:	02255100 	.word	0x02255100
    4994:	000048b9 	.word	0x000048b9
    4998:	00004a01 	.word	0x00004a01
    499c:	00b71b00 	.word	0x00b71b00
    49a0:	007a1200 	.word	0x007a1200

000049a4 <flashcalw_is_ready>:
/*! \brief Tells whether the FLASHCALW is ready to run a new command.
 *
 * \return Whether the FLASHCALW is ready to run a new command.
 */
bool flashcalw_is_ready(void)
{
    49a4:	b480      	push	{r7}
    49a6:	af00      	add	r7, sp, #0
	return ((HFLASHC->FLASHCALW_FSR & FLASHCALW_FSR_FRDY) != 0);
    49a8:	4b06      	ldr	r3, [pc, #24]	; (49c4 <flashcalw_is_ready+0x20>)
    49aa:	689b      	ldr	r3, [r3, #8]
    49ac:	f003 0301 	and.w	r3, r3, #1
    49b0:	2b00      	cmp	r3, #0
    49b2:	bf14      	ite	ne
    49b4:	2301      	movne	r3, #1
    49b6:	2300      	moveq	r3, #0
    49b8:	b2db      	uxtb	r3, r3
}
    49ba:	4618      	mov	r0, r3
    49bc:	46bd      	mov	sp, r7
    49be:	bc80      	pop	{r7}
    49c0:	4770      	bx	lr
    49c2:	bf00      	nop
    49c4:	400a0000 	.word	0x400a0000

000049c8 <flashcalw_default_wait_until_ready>:
/*! \brief Waits actively until the FLASHCALW is ready to run a new command.
 *
 * This is the default function assigned to \ref flashcalw_wait_until_ready.
 */
void flashcalw_default_wait_until_ready(void)
{
    49c8:	b580      	push	{r7, lr}
    49ca:	af00      	add	r7, sp, #0
	while (!flashcalw_is_ready()) {
    49cc:	bf00      	nop
    49ce:	4b05      	ldr	r3, [pc, #20]	; (49e4 <flashcalw_default_wait_until_ready+0x1c>)
    49d0:	4798      	blx	r3
    49d2:	4603      	mov	r3, r0
    49d4:	f083 0301 	eor.w	r3, r3, #1
    49d8:	b2db      	uxtb	r3, r3
    49da:	2b00      	cmp	r3, #0
    49dc:	d1f7      	bne.n	49ce <flashcalw_default_wait_until_ready+0x6>
	}
}
    49de:	bf00      	nop
    49e0:	bd80      	pop	{r7, pc}
    49e2:	bf00      	nop
    49e4:	000049a5 	.word	0x000049a5

000049e8 <flashcalw_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashcalw_is_lock_error
 *          and \ref flashcalw_is_programming_error.
 */
static uint32_t flashcalw_get_error_status(void)
{
    49e8:	b480      	push	{r7}
    49ea:	af00      	add	r7, sp, #0
	return HFLASHC->FLASHCALW_FSR &
    49ec:	4b03      	ldr	r3, [pc, #12]	; (49fc <flashcalw_get_error_status+0x14>)
    49ee:	689b      	ldr	r3, [r3, #8]
    49f0:	f003 030c 	and.w	r3, r3, #12
	       (FLASHCALW_FSR_LOCKE | FLASHCALW_FSR_PROGE);
}
    49f4:	4618      	mov	r0, r3
    49f6:	46bd      	mov	sp, r7
    49f8:	bc80      	pop	{r7}
    49fa:	4770      	bx	lr
    49fc:	400a0000 	.word	0x400a0000

00004a00 <flashcalw_issue_command>:
 *
 * \note The FLASHCALW error status returned by \ref flashcalw_is_lock_error and
 *       \ref flashcalw_is_programming_error is updated.
 */
void flashcalw_issue_command(uint32_t command, int page_number)
{
    4a00:	b580      	push	{r7, lr}
    4a02:	b084      	sub	sp, #16
    4a04:	af00      	add	r7, sp, #0
    4a06:	6078      	str	r0, [r7, #4]
    4a08:	6039      	str	r1, [r7, #0]
	uint32_t tempo;

	flashcalw_wait_until_ready();
    4a0a:	4b17      	ldr	r3, [pc, #92]	; (4a68 <flashcalw_issue_command+0x68>)
    4a0c:	681b      	ldr	r3, [r3, #0]
    4a0e:	4798      	blx	r3
	tempo = HFLASHC->FLASHCALW_FCMD;
    4a10:	4b16      	ldr	r3, [pc, #88]	; (4a6c <flashcalw_issue_command+0x6c>)
    4a12:	685b      	ldr	r3, [r3, #4]
    4a14:	60fb      	str	r3, [r7, #12]
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
    4a16:	68fb      	ldr	r3, [r7, #12]
    4a18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    4a1c:	60fb      	str	r3, [r7, #12]
	if (page_number >= 0) {
    4a1e:	683b      	ldr	r3, [r7, #0]
    4a20:	2b00      	cmp	r3, #0
    4a22:	db0b      	blt.n	4a3c <flashcalw_issue_command+0x3c>
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
    4a24:	683b      	ldr	r3, [r7, #0]
    4a26:	021b      	lsls	r3, r3, #8
    4a28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    4a2c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    4a30:	687a      	ldr	r2, [r7, #4]
    4a32:	4313      	orrs	r3, r2
		tempo = (FLASHCALW_FCMD_KEY_KEY
    4a34:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
    4a38:	60fb      	str	r3, [r7, #12]
    4a3a:	e005      	b.n	4a48 <flashcalw_issue_command+0x48>
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
    4a3c:	687a      	ldr	r2, [r7, #4]
    4a3e:	68fb      	ldr	r3, [r7, #12]
    4a40:	4313      	orrs	r3, r2
    4a42:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
    4a46:	60fb      	str	r3, [r7, #12]
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
    4a48:	4a08      	ldr	r2, [pc, #32]	; (4a6c <flashcalw_issue_command+0x6c>)
    4a4a:	68fb      	ldr	r3, [r7, #12]
    4a4c:	6053      	str	r3, [r2, #4]
	flashcalw_error_status = flashcalw_get_error_status();
    4a4e:	4b08      	ldr	r3, [pc, #32]	; (4a70 <flashcalw_issue_command+0x70>)
    4a50:	4798      	blx	r3
    4a52:	4602      	mov	r2, r0
    4a54:	4b07      	ldr	r3, [pc, #28]	; (4a74 <flashcalw_issue_command+0x74>)
    4a56:	601a      	str	r2, [r3, #0]
	flashcalw_wait_until_ready();
    4a58:	4b03      	ldr	r3, [pc, #12]	; (4a68 <flashcalw_issue_command+0x68>)
    4a5a:	681b      	ldr	r3, [r3, #0]
    4a5c:	4798      	blx	r3
}
    4a5e:	bf00      	nop
    4a60:	3710      	adds	r7, #16
    4a62:	46bd      	mov	sp, r7
    4a64:	bd80      	pop	{r7, pc}
    4a66:	bf00      	nop
    4a68:	20000078 	.word	0x20000078
    4a6c:	400a0000 	.word	0x400a0000
    4a70:	000049e9 	.word	0x000049e9
    4a74:	20000348 	.word	0x20000348

00004a78 <dfll_priv_get_source_hz>:
{
    4a78:	b480      	push	{r7}
    4a7a:	b083      	sub	sp, #12
    4a7c:	af00      	add	r7, sp, #0
    4a7e:	4603      	mov	r3, r0
    4a80:	71fb      	strb	r3, [r7, #7]
	switch (src) {
    4a82:	79fb      	ldrb	r3, [r7, #7]
    4a84:	2b0d      	cmp	r3, #13
    4a86:	d82b      	bhi.n	4ae0 <dfll_priv_get_source_hz+0x68>
    4a88:	a201      	add	r2, pc, #4	; (adr r2, 4a90 <dfll_priv_get_source_hz+0x18>)
    4a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4a8e:	bf00      	nop
    4a90:	00004ac9 	.word	0x00004ac9
    4a94:	00004acd 	.word	0x00004acd
    4a98:	00004ae1 	.word	0x00004ae1
    4a9c:	00004ad3 	.word	0x00004ad3
    4aa0:	00004ad7 	.word	0x00004ad7
    4aa4:	00004ae1 	.word	0x00004ae1
    4aa8:	00004ae1 	.word	0x00004ae1
    4aac:	00004ae1 	.word	0x00004ae1
    4ab0:	00004ae1 	.word	0x00004ae1
    4ab4:	00004ae1 	.word	0x00004ae1
    4ab8:	00004ae1 	.word	0x00004ae1
    4abc:	00004ae1 	.word	0x00004ae1
    4ac0:	00004ae1 	.word	0x00004ae1
    4ac4:	00004adb 	.word	0x00004adb
		return OSC_RCSYS_NOMINAL_HZ;
    4ac8:	4b08      	ldr	r3, [pc, #32]	; (4aec <dfll_priv_get_source_hz+0x74>)
    4aca:	e00a      	b.n	4ae2 <dfll_priv_get_source_hz+0x6a>
		return BOARD_OSC32_HZ;
    4acc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    4ad0:	e007      	b.n	4ae2 <dfll_priv_get_source_hz+0x6a>
		return BOARD_OSC0_HZ;
    4ad2:	4b07      	ldr	r3, [pc, #28]	; (4af0 <dfll_priv_get_source_hz+0x78>)
    4ad4:	e005      	b.n	4ae2 <dfll_priv_get_source_hz+0x6a>
		return OSC_RC80M_NOMINAL_HZ;
    4ad6:	4b07      	ldr	r3, [pc, #28]	; (4af4 <dfll_priv_get_source_hz+0x7c>)
    4ad8:	e003      	b.n	4ae2 <dfll_priv_get_source_hz+0x6a>
		return OSC_RC32K_NOMINAL_HZ;
    4ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    4ade:	e000      	b.n	4ae2 <dfll_priv_get_source_hz+0x6a>
		return 0;
    4ae0:	2300      	movs	r3, #0
}
    4ae2:	4618      	mov	r0, r3
    4ae4:	370c      	adds	r7, #12
    4ae6:	46bd      	mov	sp, r7
    4ae8:	bc80      	pop	{r7}
    4aea:	4770      	bx	lr
    4aec:	0001c138 	.word	0x0001c138
    4af0:	00b71b00 	.word	0x00b71b00
    4af4:	04c4b400 	.word	0x04c4b400

00004af8 <sysclk_get_main_hz>:
{
    4af8:	b580      	push	{r7, lr}
    4afa:	af00      	add	r7, sp, #0
		return dfll_get_default_rate(0);
    4afc:	2001      	movs	r0, #1
    4afe:	4b04      	ldr	r3, [pc, #16]	; (4b10 <sysclk_get_main_hz+0x18>)
    4b00:	4798      	blx	r3
    4b02:	4602      	mov	r2, r0
    4b04:	f44f 63b7 	mov.w	r3, #1464	; 0x5b8
    4b08:	fb03 f302 	mul.w	r3, r3, r2
}
    4b0c:	4618      	mov	r0, r3
    4b0e:	bd80      	pop	{r7, pc}
    4b10:	00004a79 	.word	0x00004a79

00004b14 <sysclk_get_cpu_hz>:
{
    4b14:	b580      	push	{r7, lr}
    4b16:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
    4b18:	4b02      	ldr	r3, [pc, #8]	; (4b24 <sysclk_get_cpu_hz+0x10>)
    4b1a:	4798      	blx	r3
    4b1c:	4603      	mov	r3, r0
}
    4b1e:	4618      	mov	r0, r3
    4b20:	bd80      	pop	{r7, pc}
    4b22:	bf00      	nop
    4b24:	00004af9 	.word	0x00004af9

00004b28 <wdt_set_ctrl>:
 *        to the WatchDog Timer key.
 *
 * \param ctrl  Value to set the WatchDog Timer Control register to.
 */
static void wdt_set_ctrl(uint32_t ctrl)
{
    4b28:	b580      	push	{r7, lr}
    4b2a:	b084      	sub	sp, #16
    4b2c:	af00      	add	r7, sp, #0
    4b2e:	6078      	str	r0, [r7, #4]
	volatile uint32_t dly;

	/* Calculate delay for internal synchronization, see 44.1.2 WDT errata */
	if ((WDT->WDT_CTRL & WDT_CTRL_CSSEL) == WDT_CLK_SRC_RCSYS) {
    4b30:	4b1a      	ldr	r3, [pc, #104]	; (4b9c <wdt_set_ctrl+0x74>)
    4b32:	681b      	ldr	r3, [r3, #0]
    4b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    4b38:	2b00      	cmp	r3, #0
    4b3a:	d10e      	bne.n	4b5a <wdt_set_ctrl+0x32>
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RCSYS_NOMINAL_HZ);
    4b3c:	4b18      	ldr	r3, [pc, #96]	; (4ba0 <wdt_set_ctrl+0x78>)
    4b3e:	4798      	blx	r3
    4b40:	4603      	mov	r3, r0
    4b42:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    4b46:	339c      	adds	r3, #156	; 0x9c
    4b48:	005b      	lsls	r3, r3, #1
    4b4a:	3b01      	subs	r3, #1
    4b4c:	08db      	lsrs	r3, r3, #3
    4b4e:	4a15      	ldr	r2, [pc, #84]	; (4ba4 <wdt_set_ctrl+0x7c>)
    4b50:	fba2 2303 	umull	r2, r3, r2, r3
    4b54:	0a5b      	lsrs	r3, r3, #9
    4b56:	60fb      	str	r3, [r7, #12]
    4b58:	e008      	b.n	4b6c <wdt_set_ctrl+0x44>
	} else { /* WDT_CLK_SRC_32K */
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RC32K_NOMINAL_HZ);
    4b5a:	4b11      	ldr	r3, [pc, #68]	; (4ba0 <wdt_set_ctrl+0x78>)
    4b5c:	4798      	blx	r3
    4b5e:	4603      	mov	r3, r0
    4b60:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    4b64:	005b      	lsls	r3, r3, #1
    4b66:	3b01      	subs	r3, #1
    4b68:	0bdb      	lsrs	r3, r3, #15
    4b6a:	60fb      	str	r3, [r7, #12]
	}
	dly >>= 3; /* ~8 cycles for one while loop */
    4b6c:	68fb      	ldr	r3, [r7, #12]
    4b6e:	08db      	lsrs	r3, r3, #3
    4b70:	60fb      	str	r3, [r7, #12]
	while(dly--);
    4b72:	bf00      	nop
    4b74:	68fb      	ldr	r3, [r7, #12]
    4b76:	1e5a      	subs	r2, r3, #1
    4b78:	60fa      	str	r2, [r7, #12]
    4b7a:	2b00      	cmp	r3, #0
    4b7c:	d1fa      	bne.n	4b74 <wdt_set_ctrl+0x4c>
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_FIRST_KEY);
    4b7e:	4a07      	ldr	r2, [pc, #28]	; (4b9c <wdt_set_ctrl+0x74>)
    4b80:	687b      	ldr	r3, [r7, #4]
    4b82:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
    4b86:	6013      	str	r3, [r2, #0]
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_SECOND_KEY);
    4b88:	4a04      	ldr	r2, [pc, #16]	; (4b9c <wdt_set_ctrl+0x74>)
    4b8a:	687b      	ldr	r3, [r7, #4]
    4b8c:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
    4b90:	6013      	str	r3, [r2, #0]
}
    4b92:	bf00      	nop
    4b94:	3710      	adds	r7, #16
    4b96:	46bd      	mov	sp, r7
    4b98:	bd80      	pop	{r7, pc}
    4b9a:	bf00      	nop
    4b9c:	400f0c00 	.word	0x400f0c00
    4ba0:	00004b15 	.word	0x00004b15
    4ba4:	091e38ab 	.word	0x091e38ab

00004ba8 <wdt_get_config_defaults>:
 *  - No window period, so that the watchdog count can be reset at any time.
 *
 *  \param cfg    Configuration structure to initialize to default values.
 */
void wdt_get_config_defaults(struct wdt_config *const cfg)
{
    4ba8:	b480      	push	{r7}
    4baa:	b083      	sub	sp, #12
    4bac:	af00      	add	r7, sp, #0
    4bae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(cfg);

	/* Default configuration values */
	cfg->clk_src = WDT_CLK_SRC_RCSYS;
    4bb0:	687b      	ldr	r3, [r7, #4]
    4bb2:	2200      	movs	r2, #0
    4bb4:	601a      	str	r2, [r3, #0]
	cfg->wdt_mode = WDT_MODE_BASIC;
    4bb6:	687b      	ldr	r3, [r7, #4]
    4bb8:	2200      	movs	r2, #0
    4bba:	605a      	str	r2, [r3, #4]
	cfg->wdt_int = WDT_INT_DIS;
    4bbc:	687b      	ldr	r3, [r7, #4]
    4bbe:	2200      	movs	r2, #0
    4bc0:	609a      	str	r2, [r3, #8]
	cfg->timeout_period = WDT_PERIOD_131072_CLK;
    4bc2:	687b      	ldr	r3, [r7, #4]
    4bc4:	2210      	movs	r2, #16
    4bc6:	731a      	strb	r2, [r3, #12]
	cfg->window_period = WDT_PERIOD_NONE;
    4bc8:	687b      	ldr	r3, [r7, #4]
    4bca:	2200      	movs	r2, #0
    4bcc:	735a      	strb	r2, [r3, #13]
	cfg->disable_flash_cali = true;
    4bce:	687b      	ldr	r3, [r7, #4]
    4bd0:	2201      	movs	r2, #1
    4bd2:	739a      	strb	r2, [r3, #14]
	cfg->disable_wdt_after_reset = true;
    4bd4:	687b      	ldr	r3, [r7, #4]
    4bd6:	2201      	movs	r2, #1
    4bd8:	73da      	strb	r2, [r3, #15]
	cfg->always_on = false;
    4bda:	687b      	ldr	r3, [r7, #4]
    4bdc:	2200      	movs	r2, #0
    4bde:	741a      	strb	r2, [r3, #16]
}
    4be0:	bf00      	nop
    4be2:	370c      	adds	r7, #12
    4be4:	46bd      	mov	sp, r7
    4be6:	bc80      	pop	{r7}
    4be8:	4770      	bx	lr
	...

00004bec <wdt_init>:
 */
bool wdt_init(
		struct wdt_dev_inst *const dev_inst,
		Wdt *const wdt,
		struct wdt_config *const cfg)
{
    4bec:	b580      	push	{r7, lr}
    4bee:	b084      	sub	sp, #16
    4bf0:	af00      	add	r7, sp, #0
    4bf2:	60f8      	str	r0, [r7, #12]
    4bf4:	60b9      	str	r1, [r7, #8]
    4bf6:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(dev_inst);
	Assert(wdt);
	Assert(cfg);

	dev_inst->hw_dev = wdt;
    4bf8:	68fb      	ldr	r3, [r7, #12]
    4bfa:	68ba      	ldr	r2, [r7, #8]
    4bfc:	601a      	str	r2, [r3, #0]
	dev_inst->wdt_cfg = cfg;
    4bfe:	68fb      	ldr	r3, [r7, #12]
    4c00:	687a      	ldr	r2, [r7, #4]
    4c02:	605a      	str	r2, [r3, #4]

	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);
    4c04:	68b8      	ldr	r0, [r7, #8]
    4c06:	4b37      	ldr	r3, [pc, #220]	; (4ce4 <wdt_init+0xf8>)
    4c08:	4798      	blx	r3

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
    4c0a:	68bb      	ldr	r3, [r7, #8]
    4c0c:	681b      	ldr	r3, [r3, #0]
    4c0e:	f003 0308 	and.w	r3, r3, #8
    4c12:	2b00      	cmp	r3, #0
    4c14:	d001      	beq.n	4c1a <wdt_init+0x2e>
		return false;
    4c16:	2300      	movs	r3, #0
    4c18:	e060      	b.n	4cdc <wdt_init+0xf0>
	}

	/* Disable the WDT */
	if (wdt->WDT_CTRL & WDT_CTRL_EN) {
    4c1a:	68bb      	ldr	r3, [r7, #8]
    4c1c:	681b      	ldr	r3, [r3, #0]
    4c1e:	f003 0301 	and.w	r3, r3, #1
    4c22:	2b00      	cmp	r3, #0
    4c24:	d00d      	beq.n	4c42 <wdt_init+0x56>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    4c26:	68bb      	ldr	r3, [r7, #8]
    4c28:	681b      	ldr	r3, [r3, #0]
    4c2a:	f023 0301 	bic.w	r3, r3, #1
    4c2e:	4618      	mov	r0, r3
    4c30:	4b2d      	ldr	r3, [pc, #180]	; (4ce8 <wdt_init+0xfc>)
    4c32:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    4c34:	bf00      	nop
    4c36:	68bb      	ldr	r3, [r7, #8]
    4c38:	681b      	ldr	r3, [r3, #0]
    4c3a:	f003 0301 	and.w	r3, r3, #1
    4c3e:	2b00      	cmp	r3, #0
    4c40:	d1f9      	bne.n	4c36 <wdt_init+0x4a>
		}
	}
	/* Disable the WDT clock */
	if (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    4c42:	68bb      	ldr	r3, [r7, #8]
    4c44:	681b      	ldr	r3, [r3, #0]
    4c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    4c4a:	2b00      	cmp	r3, #0
    4c4c:	d00d      	beq.n	4c6a <wdt_init+0x7e>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_CEN);
    4c4e:	68bb      	ldr	r3, [r7, #8]
    4c50:	681b      	ldr	r3, [r3, #0]
    4c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    4c56:	4618      	mov	r0, r3
    4c58:	4b23      	ldr	r3, [pc, #140]	; (4ce8 <wdt_init+0xfc>)
    4c5a:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    4c5c:	bf00      	nop
    4c5e:	68bb      	ldr	r3, [r7, #8]
    4c60:	681b      	ldr	r3, [r3, #0]
    4c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    4c66:	2b00      	cmp	r3, #0
    4c68:	d1f9      	bne.n	4c5e <wdt_init+0x72>
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    4c6a:	687b      	ldr	r3, [r7, #4]
    4c6c:	681a      	ldr	r2, [r3, #0]
			cfg->wdt_mode |
    4c6e:	687b      	ldr	r3, [r7, #4]
    4c70:	685b      	ldr	r3, [r3, #4]
	wdt_set_ctrl(cfg->clk_src |
    4c72:	431a      	orrs	r2, r3
			cfg->wdt_int |
    4c74:	687b      	ldr	r3, [r7, #4]
    4c76:	689b      	ldr	r3, [r3, #8]
			cfg->wdt_mode |
    4c78:	431a      	orrs	r2, r3
			WDT_CTRL_PSEL(cfg->timeout_period) |
    4c7a:	687b      	ldr	r3, [r7, #4]
    4c7c:	7b1b      	ldrb	r3, [r3, #12]
    4c7e:	021b      	lsls	r3, r3, #8
    4c80:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
			cfg->wdt_int |
    4c84:	431a      	orrs	r2, r3
			WDT_CTRL_TBAN(cfg->window_period) |
    4c86:	687b      	ldr	r3, [r7, #4]
    4c88:	7b5b      	ldrb	r3, [r3, #13]
    4c8a:	049b      	lsls	r3, r3, #18
    4c8c:	f403 03f8 	and.w	r3, r3, #8126464	; 0x7c0000
			WDT_CTRL_PSEL(cfg->timeout_period) |
    4c90:	431a      	orrs	r2, r3
			(cfg->disable_flash_cali ? WDT_CTRL_FCD : 0) |
    4c92:	687b      	ldr	r3, [r7, #4]
    4c94:	7b9b      	ldrb	r3, [r3, #14]
    4c96:	2b00      	cmp	r3, #0
    4c98:	d001      	beq.n	4c9e <wdt_init+0xb2>
    4c9a:	2380      	movs	r3, #128	; 0x80
    4c9c:	e000      	b.n	4ca0 <wdt_init+0xb4>
    4c9e:	2300      	movs	r3, #0
			WDT_CTRL_TBAN(cfg->window_period) |
    4ca0:	431a      	orrs	r2, r3
			(cfg->disable_wdt_after_reset ? WDT_CTRL_DAR : 0)
    4ca2:	687b      	ldr	r3, [r7, #4]
    4ca4:	7bdb      	ldrb	r3, [r3, #15]
    4ca6:	2b00      	cmp	r3, #0
    4ca8:	d001      	beq.n	4cae <wdt_init+0xc2>
    4caa:	2302      	movs	r3, #2
    4cac:	e000      	b.n	4cb0 <wdt_init+0xc4>
    4cae:	2300      	movs	r3, #0
	wdt_set_ctrl(cfg->clk_src |
    4cb0:	4313      	orrs	r3, r2
    4cb2:	4618      	mov	r0, r3
    4cb4:	4b0c      	ldr	r3, [pc, #48]	; (4ce8 <wdt_init+0xfc>)
    4cb6:	4798      	blx	r3
	);
	wdt_set_ctrl(wdt->WDT_CTRL | WDT_CTRL_CEN);
    4cb8:	68bb      	ldr	r3, [r7, #8]
    4cba:	681b      	ldr	r3, [r3, #0]
    4cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4cc0:	4618      	mov	r0, r3
    4cc2:	4b09      	ldr	r3, [pc, #36]	; (4ce8 <wdt_init+0xfc>)
    4cc4:	4798      	blx	r3
	while (!(wdt->WDT_CTRL & WDT_CTRL_CEN)) {
    4cc6:	bf00      	nop
    4cc8:	68bb      	ldr	r3, [r7, #8]
    4cca:	681b      	ldr	r3, [r3, #0]
    4ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    4cd0:	2b00      	cmp	r3, #0
    4cd2:	d0f9      	beq.n	4cc8 <wdt_init+0xdc>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    4cd4:	68b8      	ldr	r0, [r7, #8]
    4cd6:	4b05      	ldr	r3, [pc, #20]	; (4cec <wdt_init+0x100>)
    4cd8:	4798      	blx	r3

	return true;
    4cda:	2301      	movs	r3, #1
}
    4cdc:	4618      	mov	r0, r3
    4cde:	3710      	adds	r7, #16
    4ce0:	46bd      	mov	sp, r7
    4ce2:	bd80      	pop	{r7, pc}
    4ce4:	00003899 	.word	0x00003899
    4ce8:	00004b29 	.word	0x00004b29
    4cec:	00003cc9 	.word	0x00003cc9

00004cf0 <wdt_disable>:
 * \brief Disable the WDT module.
 *
 * \param dev_inst    Device structure pointer.
 */
void wdt_disable(struct wdt_dev_inst *const dev_inst)
{
    4cf0:	b580      	push	{r7, lr}
    4cf2:	b084      	sub	sp, #16
    4cf4:	af00      	add	r7, sp, #0
    4cf6:	6078      	str	r0, [r7, #4]
	Wdt *wdt = dev_inst->hw_dev;
    4cf8:	687b      	ldr	r3, [r7, #4]
    4cfa:	681b      	ldr	r3, [r3, #0]
    4cfc:	60fb      	str	r3, [r7, #12]

	/* Disable the WDT */
	wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    4cfe:	68fb      	ldr	r3, [r7, #12]
    4d00:	681b      	ldr	r3, [r3, #0]
    4d02:	f023 0301 	bic.w	r3, r3, #1
    4d06:	4618      	mov	r0, r3
    4d08:	4b07      	ldr	r3, [pc, #28]	; (4d28 <wdt_disable+0x38>)
    4d0a:	4798      	blx	r3
	while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    4d0c:	bf00      	nop
    4d0e:	68fb      	ldr	r3, [r7, #12]
    4d10:	681b      	ldr	r3, [r3, #0]
    4d12:	f003 0301 	and.w	r3, r3, #1
    4d16:	2b00      	cmp	r3, #0
    4d18:	d1f9      	bne.n	4d0e <wdt_disable+0x1e>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    4d1a:	68f8      	ldr	r0, [r7, #12]
    4d1c:	4b03      	ldr	r3, [pc, #12]	; (4d2c <wdt_disable+0x3c>)
    4d1e:	4798      	blx	r3
}
    4d20:	bf00      	nop
    4d22:	3710      	adds	r7, #16
    4d24:	46bd      	mov	sp, r7
    4d26:	bd80      	pop	{r7, pc}
    4d28:	00004b29 	.word	0x00004b29
    4d2c:	00003cc9 	.word	0x00003cc9

00004d30 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4d30:	b480      	push	{r7}
    4d32:	af00      	add	r7, sp, #0
	while (1) {
    4d34:	e7fe      	b.n	4d34 <Dummy_Handler+0x4>
	...

00004d38 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    4d38:	b580      	push	{r7, lr}
    4d3a:	b082      	sub	sp, #8
    4d3c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
    4d3e:	4b16      	ldr	r3, [pc, #88]	; (4d98 <Reset_Handler+0x60>)
    4d40:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
    4d42:	4b16      	ldr	r3, [pc, #88]	; (4d9c <Reset_Handler+0x64>)
    4d44:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
    4d46:	687a      	ldr	r2, [r7, #4]
    4d48:	683b      	ldr	r3, [r7, #0]
    4d4a:	429a      	cmp	r2, r3
    4d4c:	d00c      	beq.n	4d68 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
    4d4e:	e007      	b.n	4d60 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
    4d50:	683b      	ldr	r3, [r7, #0]
    4d52:	1d1a      	adds	r2, r3, #4
    4d54:	603a      	str	r2, [r7, #0]
    4d56:	687a      	ldr	r2, [r7, #4]
    4d58:	1d11      	adds	r1, r2, #4
    4d5a:	6079      	str	r1, [r7, #4]
    4d5c:	6812      	ldr	r2, [r2, #0]
    4d5e:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
    4d60:	683b      	ldr	r3, [r7, #0]
    4d62:	4a0f      	ldr	r2, [pc, #60]	; (4da0 <Reset_Handler+0x68>)
    4d64:	4293      	cmp	r3, r2
    4d66:	d3f3      	bcc.n	4d50 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    4d68:	4b0e      	ldr	r3, [pc, #56]	; (4da4 <Reset_Handler+0x6c>)
    4d6a:	603b      	str	r3, [r7, #0]
    4d6c:	e004      	b.n	4d78 <Reset_Handler+0x40>
		*pDest++ = 0;
    4d6e:	683b      	ldr	r3, [r7, #0]
    4d70:	1d1a      	adds	r2, r3, #4
    4d72:	603a      	str	r2, [r7, #0]
    4d74:	2200      	movs	r2, #0
    4d76:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
    4d78:	683b      	ldr	r3, [r7, #0]
    4d7a:	4a0b      	ldr	r2, [pc, #44]	; (4da8 <Reset_Handler+0x70>)
    4d7c:	4293      	cmp	r3, r2
    4d7e:	d3f6      	bcc.n	4d6e <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) &_sfixed;
    4d80:	4b0a      	ldr	r3, [pc, #40]	; (4dac <Reset_Handler+0x74>)
    4d82:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4d84:	4a0a      	ldr	r2, [pc, #40]	; (4db0 <Reset_Handler+0x78>)
    4d86:	687b      	ldr	r3, [r7, #4]
    4d88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    4d8c:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
    4d8e:	4b09      	ldr	r3, [pc, #36]	; (4db4 <Reset_Handler+0x7c>)
    4d90:	4798      	blx	r3

	/* Branch to main function */
	main();
    4d92:	4b09      	ldr	r3, [pc, #36]	; (4db8 <Reset_Handler+0x80>)
    4d94:	4798      	blx	r3

	/* Infinite loop */
	while (1);
    4d96:	e7fe      	b.n	4d96 <Reset_Handler+0x5e>
    4d98:	0000c720 	.word	0x0000c720
    4d9c:	20000000 	.word	0x20000000
    4da0:	20000254 	.word	0x20000254
    4da4:	20000254 	.word	0x20000254
    4da8:	200003f8 	.word	0x200003f8
    4dac:	00000000 	.word	0x00000000
    4db0:	e000ed00 	.word	0xe000ed00
    4db4:	00008661 	.word	0x00008661
    4db8:	000065c1 	.word	0x000065c1

00004dbc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    4dbc:	b480      	push	{r7}
    4dbe:	b085      	sub	sp, #20
    4dc0:	af00      	add	r7, sp, #0
    4dc2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
    4dc4:	4b10      	ldr	r3, [pc, #64]	; (4e08 <_sbrk+0x4c>)
    4dc6:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
    4dc8:	4b10      	ldr	r3, [pc, #64]	; (4e0c <_sbrk+0x50>)
    4dca:	681b      	ldr	r3, [r3, #0]
    4dcc:	2b00      	cmp	r3, #0
    4dce:	d102      	bne.n	4dd6 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
    4dd0:	4b0e      	ldr	r3, [pc, #56]	; (4e0c <_sbrk+0x50>)
    4dd2:	4a0f      	ldr	r2, [pc, #60]	; (4e10 <_sbrk+0x54>)
    4dd4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    4dd6:	4b0d      	ldr	r3, [pc, #52]	; (4e0c <_sbrk+0x50>)
    4dd8:	681b      	ldr	r3, [r3, #0]
    4dda:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
    4ddc:	68ba      	ldr	r2, [r7, #8]
    4dde:	687b      	ldr	r3, [r7, #4]
    4de0:	441a      	add	r2, r3
    4de2:	68fb      	ldr	r3, [r7, #12]
    4de4:	429a      	cmp	r2, r3
    4de6:	dd02      	ble.n	4dee <_sbrk+0x32>
		return (caddr_t) -1;	
    4de8:	f04f 33ff 	mov.w	r3, #4294967295
    4dec:	e006      	b.n	4dfc <_sbrk+0x40>
	}

	heap += incr;
    4dee:	4b07      	ldr	r3, [pc, #28]	; (4e0c <_sbrk+0x50>)
    4df0:	681a      	ldr	r2, [r3, #0]
    4df2:	687b      	ldr	r3, [r7, #4]
    4df4:	4413      	add	r3, r2
    4df6:	4a05      	ldr	r2, [pc, #20]	; (4e0c <_sbrk+0x50>)
    4df8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
    4dfa:	68bb      	ldr	r3, [r7, #8]
}
    4dfc:	4618      	mov	r0, r3
    4dfe:	3714      	adds	r7, #20
    4e00:	46bd      	mov	sp, r7
    4e02:	bc80      	pop	{r7}
    4e04:	4770      	bx	lr
    4e06:	bf00      	nop
    4e08:	20007ffc 	.word	0x20007ffc
    4e0c:	2000034c 	.word	0x2000034c
    4e10:	200013f8 	.word	0x200013f8

00004e14 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    4e14:	b480      	push	{r7}
    4e16:	b083      	sub	sp, #12
    4e18:	af00      	add	r7, sp, #0
    4e1a:	6078      	str	r0, [r7, #4]
	return -1;
    4e1c:	f04f 33ff 	mov.w	r3, #4294967295
}
    4e20:	4618      	mov	r0, r3
    4e22:	370c      	adds	r7, #12
    4e24:	46bd      	mov	sp, r7
    4e26:	bc80      	pop	{r7}
    4e28:	4770      	bx	lr

00004e2a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    4e2a:	b480      	push	{r7}
    4e2c:	b083      	sub	sp, #12
    4e2e:	af00      	add	r7, sp, #0
    4e30:	6078      	str	r0, [r7, #4]
    4e32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    4e34:	683b      	ldr	r3, [r7, #0]
    4e36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    4e3a:	605a      	str	r2, [r3, #4]

	return 0;
    4e3c:	2300      	movs	r3, #0
}
    4e3e:	4618      	mov	r0, r3
    4e40:	370c      	adds	r7, #12
    4e42:	46bd      	mov	sp, r7
    4e44:	bc80      	pop	{r7}
    4e46:	4770      	bx	lr

00004e48 <_isatty>:

extern int _isatty(int file)
{
    4e48:	b480      	push	{r7}
    4e4a:	b083      	sub	sp, #12
    4e4c:	af00      	add	r7, sp, #0
    4e4e:	6078      	str	r0, [r7, #4]
	return 1;
    4e50:	2301      	movs	r3, #1
}
    4e52:	4618      	mov	r0, r3
    4e54:	370c      	adds	r7, #12
    4e56:	46bd      	mov	sp, r7
    4e58:	bc80      	pop	{r7}
    4e5a:	4770      	bx	lr

00004e5c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    4e5c:	b480      	push	{r7}
    4e5e:	b085      	sub	sp, #20
    4e60:	af00      	add	r7, sp, #0
    4e62:	60f8      	str	r0, [r7, #12]
    4e64:	60b9      	str	r1, [r7, #8]
    4e66:	607a      	str	r2, [r7, #4]
	return 0;
    4e68:	2300      	movs	r3, #0
}
    4e6a:	4618      	mov	r0, r3
    4e6c:	3714      	adds	r7, #20
    4e6e:	46bd      	mov	sp, r7
    4e70:	bc80      	pop	{r7}
    4e72:	4770      	bx	lr

00004e74 <__NVIC_SetPriority>:
{
    4e74:	b480      	push	{r7}
    4e76:	b083      	sub	sp, #12
    4e78:	af00      	add	r7, sp, #0
    4e7a:	4603      	mov	r3, r0
    4e7c:	6039      	str	r1, [r7, #0]
    4e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    4e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4e84:	2b00      	cmp	r3, #0
    4e86:	db0a      	blt.n	4e9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4e88:	490d      	ldr	r1, [pc, #52]	; (4ec0 <__NVIC_SetPriority+0x4c>)
    4e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4e8e:	683a      	ldr	r2, [r7, #0]
    4e90:	b2d2      	uxtb	r2, r2
    4e92:	0112      	lsls	r2, r2, #4
    4e94:	b2d2      	uxtb	r2, r2
    4e96:	440b      	add	r3, r1
    4e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    4e9c:	e00a      	b.n	4eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4e9e:	4909      	ldr	r1, [pc, #36]	; (4ec4 <__NVIC_SetPriority+0x50>)
    4ea0:	79fb      	ldrb	r3, [r7, #7]
    4ea2:	f003 030f 	and.w	r3, r3, #15
    4ea6:	3b04      	subs	r3, #4
    4ea8:	683a      	ldr	r2, [r7, #0]
    4eaa:	b2d2      	uxtb	r2, r2
    4eac:	0112      	lsls	r2, r2, #4
    4eae:	b2d2      	uxtb	r2, r2
    4eb0:	440b      	add	r3, r1
    4eb2:	761a      	strb	r2, [r3, #24]
}
    4eb4:	bf00      	nop
    4eb6:	370c      	adds	r7, #12
    4eb8:	46bd      	mov	sp, r7
    4eba:	bc80      	pop	{r7}
    4ebc:	4770      	bx	lr
    4ebe:	bf00      	nop
    4ec0:	e000e100 	.word	0xe000e100
    4ec4:	e000ed00 	.word	0xe000ed00

00004ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
    4ec8:	b580      	push	{r7, lr}
    4eca:	b082      	sub	sp, #8
    4ecc:	af00      	add	r7, sp, #0
    4ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    4ed0:	687b      	ldr	r3, [r7, #4]
    4ed2:	3b01      	subs	r3, #1
    4ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    4ed8:	d301      	bcc.n	4ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
    4eda:	2301      	movs	r3, #1
    4edc:	e00f      	b.n	4efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    4ede:	4a0a      	ldr	r2, [pc, #40]	; (4f08 <SysTick_Config+0x40>)
    4ee0:	687b      	ldr	r3, [r7, #4]
    4ee2:	3b01      	subs	r3, #1
    4ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
    4ee6:	210f      	movs	r1, #15
    4ee8:	f04f 30ff 	mov.w	r0, #4294967295
    4eec:	4b07      	ldr	r3, [pc, #28]	; (4f0c <SysTick_Config+0x44>)
    4eee:	4798      	blx	r3
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    4ef0:	4b05      	ldr	r3, [pc, #20]	; (4f08 <SysTick_Config+0x40>)
    4ef2:	2200      	movs	r2, #0
    4ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    4ef6:	4b04      	ldr	r3, [pc, #16]	; (4f08 <SysTick_Config+0x40>)
    4ef8:	2207      	movs	r2, #7
    4efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
    4efc:	2300      	movs	r3, #0
}
    4efe:	4618      	mov	r0, r3
    4f00:	3708      	adds	r7, #8
    4f02:	46bd      	mov	sp, r7
    4f04:	bd80      	pop	{r7, pc}
    4f06:	bf00      	nop
    4f08:	e000e010 	.word	0xe000e010
    4f0c:	00004e75 	.word	0x00004e75

00004f10 <dfll_priv_get_source_hz>:
{
    4f10:	b480      	push	{r7}
    4f12:	b083      	sub	sp, #12
    4f14:	af00      	add	r7, sp, #0
    4f16:	4603      	mov	r3, r0
    4f18:	71fb      	strb	r3, [r7, #7]
	switch (src) {
    4f1a:	79fb      	ldrb	r3, [r7, #7]
    4f1c:	2b0d      	cmp	r3, #13
    4f1e:	d82b      	bhi.n	4f78 <dfll_priv_get_source_hz+0x68>
    4f20:	a201      	add	r2, pc, #4	; (adr r2, 4f28 <dfll_priv_get_source_hz+0x18>)
    4f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4f26:	bf00      	nop
    4f28:	00004f61 	.word	0x00004f61
    4f2c:	00004f65 	.word	0x00004f65
    4f30:	00004f79 	.word	0x00004f79
    4f34:	00004f6b 	.word	0x00004f6b
    4f38:	00004f6f 	.word	0x00004f6f
    4f3c:	00004f79 	.word	0x00004f79
    4f40:	00004f79 	.word	0x00004f79
    4f44:	00004f79 	.word	0x00004f79
    4f48:	00004f79 	.word	0x00004f79
    4f4c:	00004f79 	.word	0x00004f79
    4f50:	00004f79 	.word	0x00004f79
    4f54:	00004f79 	.word	0x00004f79
    4f58:	00004f79 	.word	0x00004f79
    4f5c:	00004f73 	.word	0x00004f73
		return OSC_RCSYS_NOMINAL_HZ;
    4f60:	4b08      	ldr	r3, [pc, #32]	; (4f84 <dfll_priv_get_source_hz+0x74>)
    4f62:	e00a      	b.n	4f7a <dfll_priv_get_source_hz+0x6a>
		return BOARD_OSC32_HZ;
    4f64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    4f68:	e007      	b.n	4f7a <dfll_priv_get_source_hz+0x6a>
		return BOARD_OSC0_HZ;
    4f6a:	4b07      	ldr	r3, [pc, #28]	; (4f88 <dfll_priv_get_source_hz+0x78>)
    4f6c:	e005      	b.n	4f7a <dfll_priv_get_source_hz+0x6a>
		return OSC_RC80M_NOMINAL_HZ;
    4f6e:	4b07      	ldr	r3, [pc, #28]	; (4f8c <dfll_priv_get_source_hz+0x7c>)
    4f70:	e003      	b.n	4f7a <dfll_priv_get_source_hz+0x6a>
		return OSC_RC32K_NOMINAL_HZ;
    4f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    4f76:	e000      	b.n	4f7a <dfll_priv_get_source_hz+0x6a>
		return 0;
    4f78:	2300      	movs	r3, #0
}
    4f7a:	4618      	mov	r0, r3
    4f7c:	370c      	adds	r7, #12
    4f7e:	46bd      	mov	sp, r7
    4f80:	bc80      	pop	{r7}
    4f82:	4770      	bx	lr
    4f84:	0001c138 	.word	0x0001c138
    4f88:	00b71b00 	.word	0x00b71b00
    4f8c:	04c4b400 	.word	0x04c4b400

00004f90 <sysclk_get_main_hz>:
{
    4f90:	b580      	push	{r7, lr}
    4f92:	af00      	add	r7, sp, #0
		return dfll_get_default_rate(0);
    4f94:	2001      	movs	r0, #1
    4f96:	4b04      	ldr	r3, [pc, #16]	; (4fa8 <sysclk_get_main_hz+0x18>)
    4f98:	4798      	blx	r3
    4f9a:	4602      	mov	r2, r0
    4f9c:	f44f 63b7 	mov.w	r3, #1464	; 0x5b8
    4fa0:	fb03 f302 	mul.w	r3, r3, r2
}
    4fa4:	4618      	mov	r0, r3
    4fa6:	bd80      	pop	{r7, pc}
    4fa8:	00004f11 	.word	0x00004f11

00004fac <sysclk_get_cpu_hz>:
{
    4fac:	b580      	push	{r7, lr}
    4fae:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
    4fb0:	4b02      	ldr	r3, [pc, #8]	; (4fbc <sysclk_get_cpu_hz+0x10>)
    4fb2:	4798      	blx	r3
    4fb4:	4603      	mov	r3, r0
}
    4fb6:	4618      	mov	r0, r3
    4fb8:	bd80      	pop	{r7, pc}
    4fba:	bf00      	nop
    4fbc:	00004f91 	.word	0x00004f91

00004fc0 <ioport_set_pin_mode>:
{
    4fc0:	b480      	push	{r7}
    4fc2:	b08d      	sub	sp, #52	; 0x34
    4fc4:	af00      	add	r7, sp, #0
    4fc6:	6078      	str	r0, [r7, #4]
    4fc8:	6039      	str	r1, [r7, #0]
    4fca:	687b      	ldr	r3, [r7, #4]
    4fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    4fce:	683b      	ldr	r3, [r7, #0]
    4fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    4fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4fd4:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
    4fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4fd8:	095a      	lsrs	r2, r3, #5
    4fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4fdc:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
    4fde:	6a3b      	ldr	r3, [r7, #32]
    4fe0:	f003 031f 	and.w	r3, r3, #31
    4fe4:	2101      	movs	r1, #1
    4fe6:	fa01 f303 	lsl.w	r3, r1, r3
    4fea:	61fa      	str	r2, [r7, #28]
    4fec:	61bb      	str	r3, [r7, #24]
    4fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4ff0:	617b      	str	r3, [r7, #20]
    4ff2:	69fb      	ldr	r3, [r7, #28]
    4ff4:	613b      	str	r3, [r7, #16]
		+ port * sizeof(GpioPort));
    4ff6:	693b      	ldr	r3, [r7, #16]
    4ff8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    4ffc:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    5000:	025b      	lsls	r3, r3, #9
	volatile GpioPort *base = arch_ioport_port_to_base(port);
    5002:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
    5004:	697b      	ldr	r3, [r7, #20]
    5006:	f003 0308 	and.w	r3, r3, #8
    500a:	2b00      	cmp	r3, #0
    500c:	d003      	beq.n	5016 <ioport_set_pin_mode+0x56>
		base->GPIO_PUERS = mask;
    500e:	68fb      	ldr	r3, [r7, #12]
    5010:	69ba      	ldr	r2, [r7, #24]
    5012:	675a      	str	r2, [r3, #116]	; 0x74
    5014:	e002      	b.n	501c <ioport_set_pin_mode+0x5c>
		base->GPIO_PUERC = mask;
    5016:	68fb      	ldr	r3, [r7, #12]
    5018:	69ba      	ldr	r2, [r7, #24]
    501a:	679a      	str	r2, [r3, #120]	; 0x78
	if (mode & IOPORT_MODE_PULLDOWN) {
    501c:	697b      	ldr	r3, [r7, #20]
    501e:	f003 0310 	and.w	r3, r3, #16
    5022:	2b00      	cmp	r3, #0
    5024:	d004      	beq.n	5030 <ioport_set_pin_mode+0x70>
		base->GPIO_PDERS = mask;
    5026:	68fb      	ldr	r3, [r7, #12]
    5028:	69ba      	ldr	r2, [r7, #24]
    502a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    502e:	e003      	b.n	5038 <ioport_set_pin_mode+0x78>
		base->GPIO_PDERC = mask;
    5030:	68fb      	ldr	r3, [r7, #12]
    5032:	69ba      	ldr	r2, [r7, #24]
    5034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	if (mode & IOPORT_MODE_GLITCH_FILTER) {
    5038:	697b      	ldr	r3, [r7, #20]
    503a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    503e:	2b00      	cmp	r3, #0
    5040:	d004      	beq.n	504c <ioport_set_pin_mode+0x8c>
		base->GPIO_GFERS = mask;
    5042:	68fb      	ldr	r3, [r7, #12]
    5044:	69ba      	ldr	r2, [r7, #24]
    5046:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    504a:	e003      	b.n	5054 <ioport_set_pin_mode+0x94>
		base->GPIO_GFERC = mask;
    504c:	68fb      	ldr	r3, [r7, #12]
    504e:	69ba      	ldr	r2, [r7, #24]
    5050:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
    5054:	697b      	ldr	r3, [r7, #20]
    5056:	f003 0380 	and.w	r3, r3, #128	; 0x80
    505a:	2b00      	cmp	r3, #0
    505c:	d004      	beq.n	5068 <ioport_set_pin_mode+0xa8>
		base->GPIO_ODCR0S = mask;
    505e:	68fb      	ldr	r3, [r7, #12]
    5060:	69ba      	ldr	r2, [r7, #24]
    5062:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5066:	e003      	b.n	5070 <ioport_set_pin_mode+0xb0>
		base->GPIO_ODCR0C = mask;
    5068:	68fb      	ldr	r3, [r7, #12]
    506a:	69ba      	ldr	r2, [r7, #24]
    506c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	if (mode & IOPORT_MODE_MUX_BIT0) {
    5070:	697b      	ldr	r3, [r7, #20]
    5072:	f003 0301 	and.w	r3, r3, #1
    5076:	2b00      	cmp	r3, #0
    5078:	d003      	beq.n	5082 <ioport_set_pin_mode+0xc2>
		base->GPIO_PMR0S = mask;
    507a:	68fb      	ldr	r3, [r7, #12]
    507c:	69ba      	ldr	r2, [r7, #24]
    507e:	615a      	str	r2, [r3, #20]
    5080:	e002      	b.n	5088 <ioport_set_pin_mode+0xc8>
		base->GPIO_PMR0C = mask;
    5082:	68fb      	ldr	r3, [r7, #12]
    5084:	69ba      	ldr	r2, [r7, #24]
    5086:	619a      	str	r2, [r3, #24]
	if (mode & IOPORT_MODE_MUX_BIT1) {
    5088:	697b      	ldr	r3, [r7, #20]
    508a:	f003 0302 	and.w	r3, r3, #2
    508e:	2b00      	cmp	r3, #0
    5090:	d003      	beq.n	509a <ioport_set_pin_mode+0xda>
		base->GPIO_PMR1S = mask;
    5092:	68fb      	ldr	r3, [r7, #12]
    5094:	69ba      	ldr	r2, [r7, #24]
    5096:	625a      	str	r2, [r3, #36]	; 0x24
    5098:	e002      	b.n	50a0 <ioport_set_pin_mode+0xe0>
		base->GPIO_PMR1C = mask;
    509a:	68fb      	ldr	r3, [r7, #12]
    509c:	69ba      	ldr	r2, [r7, #24]
    509e:	629a      	str	r2, [r3, #40]	; 0x28
	if (mode & IOPORT_MODE_MUX_BIT2) {
    50a0:	697b      	ldr	r3, [r7, #20]
    50a2:	f003 0304 	and.w	r3, r3, #4
    50a6:	2b00      	cmp	r3, #0
    50a8:	d003      	beq.n	50b2 <ioport_set_pin_mode+0xf2>
		base->GPIO_PMR2S = mask;
    50aa:	68fb      	ldr	r3, [r7, #12]
    50ac:	69ba      	ldr	r2, [r7, #24]
    50ae:	635a      	str	r2, [r3, #52]	; 0x34
}
    50b0:	e002      	b.n	50b8 <ioport_set_pin_mode+0xf8>
		base->GPIO_PMR2C = mask;
    50b2:	68fb      	ldr	r3, [r7, #12]
    50b4:	69ba      	ldr	r2, [r7, #24]
    50b6:	639a      	str	r2, [r3, #56]	; 0x38
    50b8:	bf00      	nop
    50ba:	3734      	adds	r7, #52	; 0x34
    50bc:	46bd      	mov	sp, r7
    50be:	bc80      	pop	{r7}
    50c0:	4770      	bx	lr

000050c2 <ioport_set_pin_dir>:
{
    50c2:	b480      	push	{r7}
    50c4:	b095      	sub	sp, #84	; 0x54
    50c6:	af00      	add	r7, sp, #0
    50c8:	6078      	str	r0, [r7, #4]
    50ca:	460b      	mov	r3, r1
    50cc:	70fb      	strb	r3, [r7, #3]
    50ce:	687b      	ldr	r3, [r7, #4]
    50d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    50d2:	78fb      	ldrb	r3, [r7, #3]
    50d4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	if (dir == IOPORT_DIR_OUTPUT) {
    50d8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    50dc:	2b01      	cmp	r3, #1
    50de:	d12f      	bne.n	5140 <ioport_set_pin_dir+0x7e>
    50e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50e2:	647b      	str	r3, [r7, #68]	; 0x44
    50e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    50e6:	643b      	str	r3, [r7, #64]	; 0x40
	return pin >> 5;
    50e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    50ea:	095b      	lsrs	r3, r3, #5
    50ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		+ port * sizeof(GpioPort));
    50ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    50f0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    50f4:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    50f8:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    50fa:	4619      	mov	r1, r3
    50fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50fe:	63bb      	str	r3, [r7, #56]	; 0x38
	return 1U << (pin & 0x1F);
    5100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5102:	f003 031f 	and.w	r3, r3, #31
    5106:	2201      	movs	r2, #1
    5108:	fa02 f303 	lsl.w	r3, r2, r3
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    510c:	644b      	str	r3, [r1, #68]	; 0x44
    510e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5110:	637b      	str	r3, [r7, #52]	; 0x34
    5112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5114:	633b      	str	r3, [r7, #48]	; 0x30
	return pin >> 5;
    5116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5118:	095b      	lsrs	r3, r3, #5
    511a:	62fb      	str	r3, [r7, #44]	; 0x2c
		+ port * sizeof(GpioPort));
    511c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    511e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    5122:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    5126:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    5128:	4619      	mov	r1, r3
    512a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    512c:	62bb      	str	r3, [r7, #40]	; 0x28
	return 1U << (pin & 0x1F);
    512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5130:	f003 031f 	and.w	r3, r3, #31
    5134:	2201      	movs	r2, #1
    5136:	fa02 f303 	lsl.w	r3, r2, r3
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    513a:	f8c1 3168 	str.w	r3, [r1, #360]	; 0x168
}
    513e:	e032      	b.n	51a6 <ioport_set_pin_dir+0xe4>
	} else if (dir == IOPORT_DIR_INPUT) {
    5140:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    5144:	2b00      	cmp	r3, #0
    5146:	d12e      	bne.n	51a6 <ioport_set_pin_dir+0xe4>
    5148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    514a:	627b      	str	r3, [r7, #36]	; 0x24
    514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    514e:	623b      	str	r3, [r7, #32]
	return pin >> 5;
    5150:	6a3b      	ldr	r3, [r7, #32]
    5152:	095b      	lsrs	r3, r3, #5
    5154:	61fb      	str	r3, [r7, #28]
		+ port * sizeof(GpioPort));
    5156:	69fb      	ldr	r3, [r7, #28]
    5158:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    515c:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    5160:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    5162:	4619      	mov	r1, r3
    5164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5166:	61bb      	str	r3, [r7, #24]
	return 1U << (pin & 0x1F);
    5168:	69bb      	ldr	r3, [r7, #24]
    516a:	f003 031f 	and.w	r3, r3, #31
    516e:	2201      	movs	r2, #1
    5170:	fa02 f303 	lsl.w	r3, r2, r3
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    5174:	648b      	str	r3, [r1, #72]	; 0x48
    5176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5178:	617b      	str	r3, [r7, #20]
    517a:	697b      	ldr	r3, [r7, #20]
    517c:	613b      	str	r3, [r7, #16]
	return pin >> 5;
    517e:	693b      	ldr	r3, [r7, #16]
    5180:	095b      	lsrs	r3, r3, #5
    5182:	60fb      	str	r3, [r7, #12]
		+ port * sizeof(GpioPort));
    5184:	68fb      	ldr	r3, [r7, #12]
    5186:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    518a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    518e:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    5190:	4619      	mov	r1, r3
    5192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5194:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
    5196:	68bb      	ldr	r3, [r7, #8]
    5198:	f003 031f 	and.w	r3, r3, #31
    519c:	2201      	movs	r2, #1
    519e:	fa02 f303 	lsl.w	r3, r2, r3
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    51a2:	f8c1 3164 	str.w	r3, [r1, #356]	; 0x164
    51a6:	bf00      	nop
    51a8:	3754      	adds	r7, #84	; 0x54
    51aa:	46bd      	mov	sp, r7
    51ac:	bc80      	pop	{r7}
    51ae:	4770      	bx	lr

000051b0 <ioport_set_pin_level>:
{
    51b0:	b480      	push	{r7}
    51b2:	b08d      	sub	sp, #52	; 0x34
    51b4:	af00      	add	r7, sp, #0
    51b6:	6078      	str	r0, [r7, #4]
    51b8:	460b      	mov	r3, r1
    51ba:	70fb      	strb	r3, [r7, #3]
    51bc:	687b      	ldr	r3, [r7, #4]
    51be:	62fb      	str	r3, [r7, #44]	; 0x2c
    51c0:	78fb      	ldrb	r3, [r7, #3]
    51c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if (level) {
    51c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    51ca:	2b00      	cmp	r3, #0
    51cc:	d017      	beq.n	51fe <ioport_set_pin_level+0x4e>
    51ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    51d0:	627b      	str	r3, [r7, #36]	; 0x24
    51d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    51d4:	623b      	str	r3, [r7, #32]
	return pin >> 5;
    51d6:	6a3b      	ldr	r3, [r7, #32]
    51d8:	095b      	lsrs	r3, r3, #5
    51da:	61fb      	str	r3, [r7, #28]
		+ port * sizeof(GpioPort));
    51dc:	69fb      	ldr	r3, [r7, #28]
    51de:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    51e2:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    51e6:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    51e8:	4619      	mov	r1, r3
    51ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    51ec:	61bb      	str	r3, [r7, #24]
	return 1U << (pin & 0x1F);
    51ee:	69bb      	ldr	r3, [r7, #24]
    51f0:	f003 031f 	and.w	r3, r3, #31
    51f4:	2201      	movs	r2, #1
    51f6:	fa02 f303 	lsl.w	r3, r2, r3
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    51fa:	654b      	str	r3, [r1, #84]	; 0x54
}
    51fc:	e016      	b.n	522c <ioport_set_pin_level+0x7c>
    51fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5200:	617b      	str	r3, [r7, #20]
    5202:	697b      	ldr	r3, [r7, #20]
    5204:	613b      	str	r3, [r7, #16]
	return pin >> 5;
    5206:	693b      	ldr	r3, [r7, #16]
    5208:	095b      	lsrs	r3, r3, #5
    520a:	60fb      	str	r3, [r7, #12]
		+ port * sizeof(GpioPort));
    520c:	68fb      	ldr	r3, [r7, #12]
    520e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    5212:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    5216:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    5218:	4619      	mov	r1, r3
    521a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    521c:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
    521e:	68bb      	ldr	r3, [r7, #8]
    5220:	f003 031f 	and.w	r3, r3, #31
    5224:	2201      	movs	r2, #1
    5226:	fa02 f303 	lsl.w	r3, r2, r3
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    522a:	658b      	str	r3, [r1, #88]	; 0x58
    522c:	bf00      	nop
    522e:	3734      	adds	r7, #52	; 0x34
    5230:	46bd      	mov	sp, r7
    5232:	bc80      	pop	{r7}
    5234:	4770      	bx	lr

00005236 <ioport_get_pin_level>:
{
    5236:	b480      	push	{r7}
    5238:	b089      	sub	sp, #36	; 0x24
    523a:	af00      	add	r7, sp, #0
    523c:	6078      	str	r0, [r7, #4]
    523e:	687b      	ldr	r3, [r7, #4]
    5240:	61fb      	str	r3, [r7, #28]
    5242:	69fb      	ldr	r3, [r7, #28]
    5244:	61bb      	str	r3, [r7, #24]
    5246:	69bb      	ldr	r3, [r7, #24]
    5248:	617b      	str	r3, [r7, #20]
	return pin >> 5;
    524a:	697b      	ldr	r3, [r7, #20]
    524c:	095b      	lsrs	r3, r3, #5
    524e:	613b      	str	r3, [r7, #16]
		+ port * sizeof(GpioPort));
    5250:	693b      	ldr	r3, [r7, #16]
    5252:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    5256:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    525a:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->GPIO_PVR & arch_ioport_pin_to_mask(pin);
    525c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    525e:	69fb      	ldr	r3, [r7, #28]
    5260:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
    5262:	68fb      	ldr	r3, [r7, #12]
    5264:	f003 031f 	and.w	r3, r3, #31
    5268:	2101      	movs	r1, #1
    526a:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->GPIO_PVR & arch_ioport_pin_to_mask(pin);
    526e:	4013      	ands	r3, r2
    5270:	2b00      	cmp	r3, #0
    5272:	bf14      	ite	ne
    5274:	2301      	movne	r3, #1
    5276:	2300      	moveq	r3, #0
    5278:	b2db      	uxtb	r3, r3
}
    527a:	4618      	mov	r0, r3
    527c:	3724      	adds	r7, #36	; 0x24
    527e:	46bd      	mov	sp, r7
    5280:	bc80      	pop	{r7}
    5282:	4770      	bx	lr

00005284 <ioport_pin_to_port_id>:
{
    5284:	b480      	push	{r7}
    5286:	b085      	sub	sp, #20
    5288:	af00      	add	r7, sp, #0
    528a:	6078      	str	r0, [r7, #4]
    528c:	687b      	ldr	r3, [r7, #4]
    528e:	60fb      	str	r3, [r7, #12]
	return pin >> 5;
    5290:	68fb      	ldr	r3, [r7, #12]
    5292:	095b      	lsrs	r3, r3, #5
	return arch_ioport_pin_to_port_id(pin);
    5294:	bf00      	nop
}
    5296:	4618      	mov	r0, r3
    5298:	3714      	adds	r7, #20
    529a:	46bd      	mov	sp, r7
    529c:	bc80      	pop	{r7}
    529e:	4770      	bx	lr

000052a0 <ioport_pin_to_mask>:
{
    52a0:	b480      	push	{r7}
    52a2:	b085      	sub	sp, #20
    52a4:	af00      	add	r7, sp, #0
    52a6:	6078      	str	r0, [r7, #4]
    52a8:	687b      	ldr	r3, [r7, #4]
    52aa:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
    52ac:	68fb      	ldr	r3, [r7, #12]
    52ae:	f003 031f 	and.w	r3, r3, #31
    52b2:	2201      	movs	r2, #1
    52b4:	fa02 f303 	lsl.w	r3, r2, r3
	return arch_ioport_pin_to_mask(pin);
    52b8:	bf00      	nop
}
    52ba:	4618      	mov	r0, r3
    52bc:	3714      	adds	r7, #20
    52be:	46bd      	mov	sp, r7
    52c0:	bc80      	pop	{r7}
    52c2:	4770      	bx	lr

000052c4 <gpio_enable_pin_interrupt>:
 * \brief Enable the interrupt of a pin.
 *
 * \param [in] pin The pin number
 */
static inline void gpio_enable_pin_interrupt(ioport_pin_t pin)
{
    52c4:	b580      	push	{r7, lr}
    52c6:	b084      	sub	sp, #16
    52c8:	af00      	add	r7, sp, #0
    52ca:	6078      	str	r0, [r7, #4]
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[ioport_pin_to_port_id(pin)]);
    52cc:	6878      	ldr	r0, [r7, #4]
    52ce:	4b0a      	ldr	r3, [pc, #40]	; (52f8 <gpio_enable_pin_interrupt+0x34>)
    52d0:	4798      	blx	r3
    52d2:	4603      	mov	r3, r0
    52d4:	025b      	lsls	r3, r3, #9
    52d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    52da:	f503 2361 	add.w	r3, r3, #921600	; 0xe1000
    52de:	60fb      	str	r3, [r7, #12]
	gpio_port->GPIO_IERS = ioport_pin_to_mask(pin);
    52e0:	6878      	ldr	r0, [r7, #4]
    52e2:	4b06      	ldr	r3, [pc, #24]	; (52fc <gpio_enable_pin_interrupt+0x38>)
    52e4:	4798      	blx	r3
    52e6:	4602      	mov	r2, r0
    52e8:	68fb      	ldr	r3, [r7, #12]
    52ea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    52ee:	bf00      	nop
    52f0:	3710      	adds	r7, #16
    52f2:	46bd      	mov	sp, r7
    52f4:	bd80      	pop	{r7, pc}
    52f6:	bf00      	nop
    52f8:	00005285 	.word	0x00005285
    52fc:	000052a1 	.word	0x000052a1

00005300 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
    5300:	b580      	push	{r7, lr}
    5302:	b088      	sub	sp, #32
    5304:	af00      	add	r7, sp, #0
    5306:	6078      	str	r0, [r7, #4]
    5308:	6039      	str	r1, [r7, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
    530a:	683b      	ldr	r3, [r7, #0]
    530c:	681b      	ldr	r3, [r3, #0]
    530e:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
    5310:	683b      	ldr	r3, [r7, #0]
    5312:	685b      	ldr	r3, [r3, #4]
    5314:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
    5316:	683b      	ldr	r3, [r7, #0]
    5318:	689b      	ldr	r3, [r3, #8]
    531a:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
    531c:	683b      	ldr	r3, [r7, #0]
    531e:	68db      	ldr	r3, [r3, #12]
    5320:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
    5322:	2300      	movs	r3, #0
    5324:	61bb      	str	r3, [r7, #24]
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    5326:	687b      	ldr	r3, [r7, #4]
    5328:	4a2f      	ldr	r2, [pc, #188]	; (53e8 <usart_serial_init+0xe8>)
    532a:	4293      	cmp	r3, r2
    532c:	d112      	bne.n	5354 <usart_serial_init+0x54>
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    532e:	6878      	ldr	r0, [r7, #4]
    5330:	4b2e      	ldr	r3, [pc, #184]	; (53ec <usart_serial_init+0xec>)
    5332:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    5334:	6878      	ldr	r0, [r7, #4]
    5336:	4b2e      	ldr	r3, [pc, #184]	; (53f0 <usart_serial_init+0xf0>)
    5338:	4798      	blx	r3
    533a:	4602      	mov	r2, r0
    533c:	f107 0308 	add.w	r3, r7, #8
    5340:	4619      	mov	r1, r3
    5342:	6878      	ldr	r0, [r7, #4]
    5344:	4b2b      	ldr	r3, [pc, #172]	; (53f4 <usart_serial_init+0xf4>)
    5346:	4798      	blx	r3
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    5348:	6878      	ldr	r0, [r7, #4]
    534a:	4b2b      	ldr	r3, [pc, #172]	; (53f8 <usart_serial_init+0xf8>)
    534c:	4798      	blx	r3
		usart_enable_rx(p_usart);
    534e:	6878      	ldr	r0, [r7, #4]
    5350:	4b2a      	ldr	r3, [pc, #168]	; (53fc <usart_serial_init+0xfc>)
    5352:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    5354:	687b      	ldr	r3, [r7, #4]
    5356:	4a2a      	ldr	r2, [pc, #168]	; (5400 <usart_serial_init+0x100>)
    5358:	4293      	cmp	r3, r2
    535a:	d112      	bne.n	5382 <usart_serial_init+0x82>
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    535c:	6878      	ldr	r0, [r7, #4]
    535e:	4b23      	ldr	r3, [pc, #140]	; (53ec <usart_serial_init+0xec>)
    5360:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    5362:	6878      	ldr	r0, [r7, #4]
    5364:	4b22      	ldr	r3, [pc, #136]	; (53f0 <usart_serial_init+0xf0>)
    5366:	4798      	blx	r3
    5368:	4602      	mov	r2, r0
    536a:	f107 0308 	add.w	r3, r7, #8
    536e:	4619      	mov	r1, r3
    5370:	6878      	ldr	r0, [r7, #4]
    5372:	4b20      	ldr	r3, [pc, #128]	; (53f4 <usart_serial_init+0xf4>)
    5374:	4798      	blx	r3
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    5376:	6878      	ldr	r0, [r7, #4]
    5378:	4b1f      	ldr	r3, [pc, #124]	; (53f8 <usart_serial_init+0xf8>)
    537a:	4798      	blx	r3
		usart_enable_rx(p_usart);
    537c:	6878      	ldr	r0, [r7, #4]
    537e:	4b1f      	ldr	r3, [pc, #124]	; (53fc <usart_serial_init+0xfc>)
    5380:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    5382:	687b      	ldr	r3, [r7, #4]
    5384:	4a1f      	ldr	r2, [pc, #124]	; (5404 <usart_serial_init+0x104>)
    5386:	4293      	cmp	r3, r2
    5388:	d112      	bne.n	53b0 <usart_serial_init+0xb0>
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    538a:	6878      	ldr	r0, [r7, #4]
    538c:	4b17      	ldr	r3, [pc, #92]	; (53ec <usart_serial_init+0xec>)
    538e:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    5390:	6878      	ldr	r0, [r7, #4]
    5392:	4b17      	ldr	r3, [pc, #92]	; (53f0 <usart_serial_init+0xf0>)
    5394:	4798      	blx	r3
    5396:	4602      	mov	r2, r0
    5398:	f107 0308 	add.w	r3, r7, #8
    539c:	4619      	mov	r1, r3
    539e:	6878      	ldr	r0, [r7, #4]
    53a0:	4b14      	ldr	r3, [pc, #80]	; (53f4 <usart_serial_init+0xf4>)
    53a2:	4798      	blx	r3
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    53a4:	6878      	ldr	r0, [r7, #4]
    53a6:	4b14      	ldr	r3, [pc, #80]	; (53f8 <usart_serial_init+0xf8>)
    53a8:	4798      	blx	r3
		usart_enable_rx(p_usart);
    53aa:	6878      	ldr	r0, [r7, #4]
    53ac:	4b13      	ldr	r3, [pc, #76]	; (53fc <usart_serial_init+0xfc>)
    53ae:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    53b0:	687b      	ldr	r3, [r7, #4]
    53b2:	4a15      	ldr	r2, [pc, #84]	; (5408 <usart_serial_init+0x108>)
    53b4:	4293      	cmp	r3, r2
    53b6:	d112      	bne.n	53de <usart_serial_init+0xde>
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    53b8:	6878      	ldr	r0, [r7, #4]
    53ba:	4b0c      	ldr	r3, [pc, #48]	; (53ec <usart_serial_init+0xec>)
    53bc:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    53be:	6878      	ldr	r0, [r7, #4]
    53c0:	4b0b      	ldr	r3, [pc, #44]	; (53f0 <usart_serial_init+0xf0>)
    53c2:	4798      	blx	r3
    53c4:	4602      	mov	r2, r0
    53c6:	f107 0308 	add.w	r3, r7, #8
    53ca:	4619      	mov	r1, r3
    53cc:	6878      	ldr	r0, [r7, #4]
    53ce:	4b09      	ldr	r3, [pc, #36]	; (53f4 <usart_serial_init+0xf4>)
    53d0:	4798      	blx	r3
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    53d2:	6878      	ldr	r0, [r7, #4]
    53d4:	4b08      	ldr	r3, [pc, #32]	; (53f8 <usart_serial_init+0xf8>)
    53d6:	4798      	blx	r3
		usart_enable_rx(p_usart);
    53d8:	6878      	ldr	r0, [r7, #4]
    53da:	4b08      	ldr	r3, [pc, #32]	; (53fc <usart_serial_init+0xfc>)
    53dc:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
    53de:	bf00      	nop
    53e0:	3720      	adds	r7, #32
    53e2:	46bd      	mov	sp, r7
    53e4:	bd80      	pop	{r7, pc}
    53e6:	bf00      	nop
    53e8:	40024000 	.word	0x40024000
    53ec:	00003899 	.word	0x00003899
    53f0:	0000362d 	.word	0x0000362d
    53f4:	00001619 	.word	0x00001619
    53f8:	0000169d 	.word	0x0000169d
    53fc:	000016cd 	.word	0x000016cd
    5400:	40028000 	.word	0x40028000
    5404:	4002c000 	.word	0x4002c000
    5408:	40030000 	.word	0x40030000

0000540c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
    540c:	b580      	push	{r7, lr}
    540e:	b082      	sub	sp, #8
    5410:	af00      	add	r7, sp, #0
    5412:	6078      	str	r0, [r7, #4]
    5414:	460b      	mov	r3, r1
    5416:	70fb      	strb	r3, [r7, #3]
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    5418:	687b      	ldr	r3, [r7, #4]
    541a:	4a20      	ldr	r2, [pc, #128]	; (549c <usart_serial_putchar+0x90>)
    541c:	4293      	cmp	r3, r2
    541e:	d10a      	bne.n	5436 <usart_serial_putchar+0x2a>
		while (usart_write(p_usart, c)!=0);
    5420:	bf00      	nop
    5422:	78fb      	ldrb	r3, [r7, #3]
    5424:	4619      	mov	r1, r3
    5426:	6878      	ldr	r0, [r7, #4]
    5428:	4b1d      	ldr	r3, [pc, #116]	; (54a0 <usart_serial_putchar+0x94>)
    542a:	4798      	blx	r3
    542c:	4603      	mov	r3, r0
    542e:	2b00      	cmp	r3, #0
    5430:	d1f7      	bne.n	5422 <usart_serial_putchar+0x16>
		return 1;
    5432:	2301      	movs	r3, #1
    5434:	e02d      	b.n	5492 <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    5436:	687b      	ldr	r3, [r7, #4]
    5438:	4a1a      	ldr	r2, [pc, #104]	; (54a4 <usart_serial_putchar+0x98>)
    543a:	4293      	cmp	r3, r2
    543c:	d10a      	bne.n	5454 <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
    543e:	bf00      	nop
    5440:	78fb      	ldrb	r3, [r7, #3]
    5442:	4619      	mov	r1, r3
    5444:	6878      	ldr	r0, [r7, #4]
    5446:	4b16      	ldr	r3, [pc, #88]	; (54a0 <usart_serial_putchar+0x94>)
    5448:	4798      	blx	r3
    544a:	4603      	mov	r3, r0
    544c:	2b00      	cmp	r3, #0
    544e:	d1f7      	bne.n	5440 <usart_serial_putchar+0x34>
		return 1;
    5450:	2301      	movs	r3, #1
    5452:	e01e      	b.n	5492 <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    5454:	687b      	ldr	r3, [r7, #4]
    5456:	4a14      	ldr	r2, [pc, #80]	; (54a8 <usart_serial_putchar+0x9c>)
    5458:	4293      	cmp	r3, r2
    545a:	d10a      	bne.n	5472 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
    545c:	bf00      	nop
    545e:	78fb      	ldrb	r3, [r7, #3]
    5460:	4619      	mov	r1, r3
    5462:	6878      	ldr	r0, [r7, #4]
    5464:	4b0e      	ldr	r3, [pc, #56]	; (54a0 <usart_serial_putchar+0x94>)
    5466:	4798      	blx	r3
    5468:	4603      	mov	r3, r0
    546a:	2b00      	cmp	r3, #0
    546c:	d1f7      	bne.n	545e <usart_serial_putchar+0x52>
		return 1;
    546e:	2301      	movs	r3, #1
    5470:	e00f      	b.n	5492 <usart_serial_putchar+0x86>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    5472:	687b      	ldr	r3, [r7, #4]
    5474:	4a0d      	ldr	r2, [pc, #52]	; (54ac <usart_serial_putchar+0xa0>)
    5476:	4293      	cmp	r3, r2
    5478:	d10a      	bne.n	5490 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
    547a:	bf00      	nop
    547c:	78fb      	ldrb	r3, [r7, #3]
    547e:	4619      	mov	r1, r3
    5480:	6878      	ldr	r0, [r7, #4]
    5482:	4b07      	ldr	r3, [pc, #28]	; (54a0 <usart_serial_putchar+0x94>)
    5484:	4798      	blx	r3
    5486:	4603      	mov	r3, r0
    5488:	2b00      	cmp	r3, #0
    548a:	d1f7      	bne.n	547c <usart_serial_putchar+0x70>
		return 1;
    548c:	2301      	movs	r3, #1
    548e:	e000      	b.n	5492 <usart_serial_putchar+0x86>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
    5490:	2300      	movs	r3, #0
}
    5492:	4618      	mov	r0, r3
    5494:	3708      	adds	r7, #8
    5496:	46bd      	mov	sp, r7
    5498:	bd80      	pop	{r7, pc}
    549a:	bf00      	nop
    549c:	40024000 	.word	0x40024000
    54a0:	0000174b 	.word	0x0000174b
    54a4:	40028000 	.word	0x40028000
    54a8:	4002c000 	.word	0x4002c000
    54ac:	40030000 	.word	0x40030000

000054b0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
    54b0:	b580      	push	{r7, lr}
    54b2:	b084      	sub	sp, #16
    54b4:	af00      	add	r7, sp, #0
    54b6:	6078      	str	r0, [r7, #4]
    54b8:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
    54ba:	2300      	movs	r3, #0
    54bc:	60fb      	str	r3, [r7, #12]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    54be:	687b      	ldr	r3, [r7, #4]
    54c0:	4a25      	ldr	r2, [pc, #148]	; (5558 <usart_serial_getchar+0xa8>)
    54c2:	4293      	cmp	r3, r2
    54c4:	d10d      	bne.n	54e2 <usart_serial_getchar+0x32>
		while (usart_read(p_usart, &val));
    54c6:	bf00      	nop
    54c8:	f107 030c 	add.w	r3, r7, #12
    54cc:	4619      	mov	r1, r3
    54ce:	6878      	ldr	r0, [r7, #4]
    54d0:	4b22      	ldr	r3, [pc, #136]	; (555c <usart_serial_getchar+0xac>)
    54d2:	4798      	blx	r3
    54d4:	4603      	mov	r3, r0
    54d6:	2b00      	cmp	r3, #0
    54d8:	d1f6      	bne.n	54c8 <usart_serial_getchar+0x18>
		*data = (uint8_t)(val & 0xFF);
    54da:	68fb      	ldr	r3, [r7, #12]
    54dc:	b2da      	uxtb	r2, r3
    54de:	683b      	ldr	r3, [r7, #0]
    54e0:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    54e2:	687b      	ldr	r3, [r7, #4]
    54e4:	4a1e      	ldr	r2, [pc, #120]	; (5560 <usart_serial_getchar+0xb0>)
    54e6:	4293      	cmp	r3, r2
    54e8:	d10d      	bne.n	5506 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
    54ea:	bf00      	nop
    54ec:	f107 030c 	add.w	r3, r7, #12
    54f0:	4619      	mov	r1, r3
    54f2:	6878      	ldr	r0, [r7, #4]
    54f4:	4b19      	ldr	r3, [pc, #100]	; (555c <usart_serial_getchar+0xac>)
    54f6:	4798      	blx	r3
    54f8:	4603      	mov	r3, r0
    54fa:	2b00      	cmp	r3, #0
    54fc:	d1f6      	bne.n	54ec <usart_serial_getchar+0x3c>
		*data = (uint8_t)(val & 0xFF);
    54fe:	68fb      	ldr	r3, [r7, #12]
    5500:	b2da      	uxtb	r2, r3
    5502:	683b      	ldr	r3, [r7, #0]
    5504:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    5506:	687b      	ldr	r3, [r7, #4]
    5508:	4a16      	ldr	r2, [pc, #88]	; (5564 <usart_serial_getchar+0xb4>)
    550a:	4293      	cmp	r3, r2
    550c:	d10d      	bne.n	552a <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
    550e:	bf00      	nop
    5510:	f107 030c 	add.w	r3, r7, #12
    5514:	4619      	mov	r1, r3
    5516:	6878      	ldr	r0, [r7, #4]
    5518:	4b10      	ldr	r3, [pc, #64]	; (555c <usart_serial_getchar+0xac>)
    551a:	4798      	blx	r3
    551c:	4603      	mov	r3, r0
    551e:	2b00      	cmp	r3, #0
    5520:	d1f6      	bne.n	5510 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
    5522:	68fb      	ldr	r3, [r7, #12]
    5524:	b2da      	uxtb	r2, r3
    5526:	683b      	ldr	r3, [r7, #0]
    5528:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    552a:	687b      	ldr	r3, [r7, #4]
    552c:	4a0e      	ldr	r2, [pc, #56]	; (5568 <usart_serial_getchar+0xb8>)
    552e:	4293      	cmp	r3, r2
    5530:	d10d      	bne.n	554e <usart_serial_getchar+0x9e>
		while (usart_read(p_usart, &val));
    5532:	bf00      	nop
    5534:	f107 030c 	add.w	r3, r7, #12
    5538:	4619      	mov	r1, r3
    553a:	6878      	ldr	r0, [r7, #4]
    553c:	4b07      	ldr	r3, [pc, #28]	; (555c <usart_serial_getchar+0xac>)
    553e:	4798      	blx	r3
    5540:	4603      	mov	r3, r0
    5542:	2b00      	cmp	r3, #0
    5544:	d1f6      	bne.n	5534 <usart_serial_getchar+0x84>
		*data = (uint8_t)(val & 0xFF);
    5546:	68fb      	ldr	r3, [r7, #12]
    5548:	b2da      	uxtb	r2, r3
    554a:	683b      	ldr	r3, [r7, #0]
    554c:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
    554e:	bf00      	nop
    5550:	3710      	adds	r7, #16
    5552:	46bd      	mov	sp, r7
    5554:	bd80      	pop	{r7, pc}
    5556:	bf00      	nop
    5558:	40024000 	.word	0x40024000
    555c:	0000177b 	.word	0x0000177b
    5560:	40028000 	.word	0x40028000
    5564:	4002c000 	.word	0x4002c000
    5568:	40030000 	.word	0x40030000

0000556c <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
    556c:	b580      	push	{r7, lr}
    556e:	b082      	sub	sp, #8
    5570:	af00      	add	r7, sp, #0
    5572:	6078      	str	r0, [r7, #4]
    5574:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
    5576:	4a0f      	ldr	r2, [pc, #60]	; (55b4 <stdio_serial_init+0x48>)
    5578:	687b      	ldr	r3, [r7, #4]
    557a:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    557c:	4b0e      	ldr	r3, [pc, #56]	; (55b8 <stdio_serial_init+0x4c>)
    557e:	4a0f      	ldr	r2, [pc, #60]	; (55bc <stdio_serial_init+0x50>)
    5580:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    5582:	4b0f      	ldr	r3, [pc, #60]	; (55c0 <stdio_serial_init+0x54>)
    5584:	4a0f      	ldr	r2, [pc, #60]	; (55c4 <stdio_serial_init+0x58>)
    5586:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
    5588:	6839      	ldr	r1, [r7, #0]
    558a:	6878      	ldr	r0, [r7, #4]
    558c:	4b0e      	ldr	r3, [pc, #56]	; (55c8 <stdio_serial_init+0x5c>)
    558e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    5590:	4b0e      	ldr	r3, [pc, #56]	; (55cc <stdio_serial_init+0x60>)
    5592:	681b      	ldr	r3, [r3, #0]
    5594:	689b      	ldr	r3, [r3, #8]
    5596:	2100      	movs	r1, #0
    5598:	4618      	mov	r0, r3
    559a:	4b0d      	ldr	r3, [pc, #52]	; (55d0 <stdio_serial_init+0x64>)
    559c:	4798      	blx	r3
	setbuf(stdin, NULL);
    559e:	4b0b      	ldr	r3, [pc, #44]	; (55cc <stdio_serial_init+0x60>)
    55a0:	681b      	ldr	r3, [r3, #0]
    55a2:	685b      	ldr	r3, [r3, #4]
    55a4:	2100      	movs	r1, #0
    55a6:	4618      	mov	r0, r3
    55a8:	4b09      	ldr	r3, [pc, #36]	; (55d0 <stdio_serial_init+0x64>)
    55aa:	4798      	blx	r3
	// and AVR GCC library:
	// - //printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
    55ac:	bf00      	nop
    55ae:	3708      	adds	r7, #8
    55b0:	46bd      	mov	sp, r7
    55b2:	bd80      	pop	{r7, pc}
    55b4:	20000374 	.word	0x20000374
    55b8:	20000370 	.word	0x20000370
    55bc:	0000540d 	.word	0x0000540d
    55c0:	2000036c 	.word	0x2000036c
    55c4:	000054b1 	.word	0x000054b1
    55c8:	00005301 	.word	0x00005301
    55cc:	20000084 	.word	0x20000084
    55d0:	00008fa9 	.word	0x00008fa9

000055d4 <SysTick_Handler>:
// counts system time from when program begins
volatile uint32_t ticks = 0;

// update ticks on interrupt
void SysTick_Handler(void)
{
    55d4:	b480      	push	{r7}
    55d6:	af00      	add	r7, sp, #0
	ticks++;
    55d8:	4b04      	ldr	r3, [pc, #16]	; (55ec <SysTick_Handler+0x18>)
    55da:	681b      	ldr	r3, [r3, #0]
    55dc:	3301      	adds	r3, #1
    55de:	4a03      	ldr	r2, [pc, #12]	; (55ec <SysTick_Handler+0x18>)
    55e0:	6013      	str	r3, [r2, #0]
}
    55e2:	bf00      	nop
    55e4:	46bd      	mov	sp, r7
    55e6:	bc80      	pop	{r7}
    55e8:	4770      	bx	lr
    55ea:	bf00      	nop
    55ec:	20000360 	.word	0x20000360

000055f0 <mdelay>:
		c42412a_show_icon(C42412A_ICON_DOT_4);
	}
}

static void mdelay(uint32_t delay_ms)
{
    55f0:	b480      	push	{r7}
    55f2:	b085      	sub	sp, #20
    55f4:	af00      	add	r7, sp, #0
    55f6:	6078      	str	r0, [r7, #4]
	// time when function is called
	uint32_t start_time = ticks;
    55f8:	4b07      	ldr	r3, [pc, #28]	; (5618 <mdelay+0x28>)
    55fa:	681b      	ldr	r3, [r3, #0]
    55fc:	60fb      	str	r3, [r7, #12]
	
	// increment until amount of time specified by start_time has passed
	while(ticks <= start_time + delay_ms){}
    55fe:	bf00      	nop
    5600:	68fa      	ldr	r2, [r7, #12]
    5602:	687b      	ldr	r3, [r7, #4]
    5604:	441a      	add	r2, r3
    5606:	4b04      	ldr	r3, [pc, #16]	; (5618 <mdelay+0x28>)
    5608:	681b      	ldr	r3, [r3, #0]
    560a:	429a      	cmp	r2, r3
    560c:	d2f8      	bcs.n	5600 <mdelay+0x10>
}
    560e:	bf00      	nop
    5610:	3714      	adds	r7, #20
    5612:	46bd      	mov	sp, r7
    5614:	bc80      	pop	{r7}
    5616:	4770      	bx	lr
    5618:	20000360 	.word	0x20000360

0000561c <configure_console>:

static void configure_console(void)
{
    561c:	b590      	push	{r4, r7, lr}
    561e:	b085      	sub	sp, #20
    5620:	af00      	add	r7, sp, #0
	// initialize struct members for configuration
	const usart_serial_options_t uart_serial_options =
    5622:	4b07      	ldr	r3, [pc, #28]	; (5640 <configure_console+0x24>)
    5624:	463c      	mov	r4, r7
    5626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    5628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.stopbits = CONF_UART_STOP_BITS,

	};
	
	/* Configure console. */
	stdio_serial_init(CONF_UART, &uart_serial_options);
    562c:	463b      	mov	r3, r7
    562e:	4619      	mov	r1, r3
    5630:	4804      	ldr	r0, [pc, #16]	; (5644 <configure_console+0x28>)
    5632:	4b05      	ldr	r3, [pc, #20]	; (5648 <configure_console+0x2c>)
    5634:	4798      	blx	r3
}
    5636:	bf00      	nop
    5638:	3714      	adds	r7, #20
    563a:	46bd      	mov	sp, r7
    563c:	bd90      	pop	{r4, r7, pc}
    563e:	bf00      	nop
    5640:	0000bc40 	.word	0x0000bc40
    5644:	40028000 	.word	0x40028000
    5648:	0000556d 	.word	0x0000556d

0000564c <configure_twim>:

void configure_twim() {
    564c:	b590      	push	{r4, r7, lr}
    564e:	b087      	sub	sp, #28
    5650:	af00      	add	r7, sp, #0
	// initialize config struct members
	struct twim_config twim_conf;
	twim_conf.twim_clk = sysclk_get_cpu_hz();
    5652:	4b2d      	ldr	r3, [pc, #180]	; (5708 <configure_twim+0xbc>)
    5654:	4798      	blx	r3
    5656:	4603      	mov	r3, r0
    5658:	603b      	str	r3, [r7, #0]
	twim_conf.speed = TWI_STD_MODE_SPEED;
    565a:	4b2c      	ldr	r3, [pc, #176]	; (570c <configure_twim+0xc0>)
    565c:	607b      	str	r3, [r7, #4]
	twim_conf.smbus = false;
    565e:	2300      	movs	r3, #0
    5660:	73bb      	strb	r3, [r7, #14]
	twim_conf.hsmode_speed = 0;
    5662:	2300      	movs	r3, #0
    5664:	60bb      	str	r3, [r7, #8]
	twim_conf.data_setup_cycles = 4;
    5666:	2304      	movs	r3, #4
    5668:	733b      	strb	r3, [r7, #12]
	twim_conf.hsmode_data_setup_cycles = 0;
    566a:	2300      	movs	r3, #0
    566c:	737b      	strb	r3, [r7, #13]
	twim_conf.clock_slew_limit = 0;
    566e:	2300      	movs	r3, #0
    5670:	73fb      	strb	r3, [r7, #15]
	twim_conf.clock_drive_strength_low = 0;
    5672:	2300      	movs	r3, #0
    5674:	743b      	strb	r3, [r7, #16]
	twim_conf.data_slew_limit = 0;
    5676:	2300      	movs	r3, #0
    5678:	747b      	strb	r3, [r7, #17]
	twim_conf.data_drive_strength_low = 0;
    567a:	2300      	movs	r3, #0
    567c:	74bb      	strb	r3, [r7, #18]
	twim_conf.hs_clock_slew_limit = 0;
    567e:	2300      	movs	r3, #0
    5680:	74fb      	strb	r3, [r7, #19]
	twim_conf.hs_clock_drive_strength_high = 0;
    5682:	2300      	movs	r3, #0
    5684:	753b      	strb	r3, [r7, #20]
	twim_conf.hs_clock_drive_strength_low = 0;
    5686:	2300      	movs	r3, #0
    5688:	757b      	strb	r3, [r7, #21]
	twim_conf.hs_data_slew_limit = 0;
    568a:	2300      	movs	r3, #0
    568c:	75bb      	strb	r3, [r7, #22]
	twim_conf.hs_data_drive_strength_low = 0;
    568e:	2300      	movs	r3, #0
    5690:	75fb      	strb	r3, [r7, #23]
	
	// set config and callback
	twim_set_config(TWIM3, &twim_conf);
    5692:	463b      	mov	r3, r7
    5694:	4619      	mov	r1, r3
    5696:	481e      	ldr	r0, [pc, #120]	; (5710 <configure_twim+0xc4>)
    5698:	4b1e      	ldr	r3, [pc, #120]	; (5714 <configure_twim+0xc8>)
    569a:	4798      	blx	r3
	twim_set_callback(TWIM3, 0, twim_default_callback, 1);
    569c:	2301      	movs	r3, #1
    569e:	4a1e      	ldr	r2, [pc, #120]	; (5718 <configure_twim+0xcc>)
    56a0:	2100      	movs	r1, #0
    56a2:	481b      	ldr	r0, [pc, #108]	; (5710 <configure_twim+0xc4>)
    56a4:	4c1d      	ldr	r4, [pc, #116]	; (571c <configure_twim+0xd0>)
    56a6:	47a0      	blx	r4
	
	twim_conf.twim_clk = sysclk_get_cpu_hz();
    56a8:	4b17      	ldr	r3, [pc, #92]	; (5708 <configure_twim+0xbc>)
    56aa:	4798      	blx	r3
    56ac:	4603      	mov	r3, r0
    56ae:	603b      	str	r3, [r7, #0]
	twim_conf.speed = TWI_STD_MODE_SPEED;
    56b0:	4b16      	ldr	r3, [pc, #88]	; (570c <configure_twim+0xc0>)
    56b2:	607b      	str	r3, [r7, #4]
	twim_conf.smbus = false;
    56b4:	2300      	movs	r3, #0
    56b6:	73bb      	strb	r3, [r7, #14]
	twim_conf.hsmode_speed = 0;
    56b8:	2300      	movs	r3, #0
    56ba:	60bb      	str	r3, [r7, #8]
	twim_conf.data_setup_cycles = 0;
    56bc:	2300      	movs	r3, #0
    56be:	733b      	strb	r3, [r7, #12]
	twim_conf.hsmode_data_setup_cycles = 0;
    56c0:	2300      	movs	r3, #0
    56c2:	737b      	strb	r3, [r7, #13]
	twim_conf.clock_slew_limit = 0;
    56c4:	2300      	movs	r3, #0
    56c6:	73fb      	strb	r3, [r7, #15]
	twim_conf.clock_drive_strength_low = 0;
    56c8:	2300      	movs	r3, #0
    56ca:	743b      	strb	r3, [r7, #16]
	twim_conf.data_slew_limit = 0;
    56cc:	2300      	movs	r3, #0
    56ce:	747b      	strb	r3, [r7, #17]
	twim_conf.data_drive_strength_low = 0;
    56d0:	2300      	movs	r3, #0
    56d2:	74bb      	strb	r3, [r7, #18]
	twim_conf.hs_clock_slew_limit = 0;
    56d4:	2300      	movs	r3, #0
    56d6:	74fb      	strb	r3, [r7, #19]
	twim_conf.hs_clock_drive_strength_high = 0;
    56d8:	2300      	movs	r3, #0
    56da:	753b      	strb	r3, [r7, #20]
	twim_conf.hs_clock_drive_strength_low = 0;
    56dc:	2300      	movs	r3, #0
    56de:	757b      	strb	r3, [r7, #21]
	twim_conf.hs_data_slew_limit = 0;
    56e0:	2300      	movs	r3, #0
    56e2:	75bb      	strb	r3, [r7, #22]
	twim_conf.hs_data_drive_strength_low = 0;
    56e4:	2300      	movs	r3, #0
    56e6:	75fb      	strb	r3, [r7, #23]
	twim_set_config(TWIM0, &twim_conf);
    56e8:	463b      	mov	r3, r7
    56ea:	4619      	mov	r1, r3
    56ec:	480c      	ldr	r0, [pc, #48]	; (5720 <configure_twim+0xd4>)
    56ee:	4b09      	ldr	r3, [pc, #36]	; (5714 <configure_twim+0xc8>)
    56f0:	4798      	blx	r3
	twim_set_callback(TWIM0, 0, twim_default_callback, 1);
    56f2:	2301      	movs	r3, #1
    56f4:	4a08      	ldr	r2, [pc, #32]	; (5718 <configure_twim+0xcc>)
    56f6:	2100      	movs	r1, #0
    56f8:	4809      	ldr	r0, [pc, #36]	; (5720 <configure_twim+0xd4>)
    56fa:	4c08      	ldr	r4, [pc, #32]	; (571c <configure_twim+0xd0>)
    56fc:	47a0      	blx	r4
}
    56fe:	bf00      	nop
    5700:	371c      	adds	r7, #28
    5702:	46bd      	mov	sp, r7
    5704:	bd90      	pop	{r4, r7, pc}
    5706:	bf00      	nop
    5708:	00004fad 	.word	0x00004fad
    570c:	000186a0 	.word	0x000186a0
    5710:	4007c000 	.word	0x4007c000
    5714:	00000b4d 	.word	0x00000b4d
    5718:	000005bd 	.word	0x000005bd
    571c:	00001421 	.word	0x00001421
    5720:	40018000 	.word	0x40018000

00005724 <read_device_mode>:
 *  Parameters:
 *		none
 *  
 *  Return: void, should return 0x00 0x00 if device is operating
 */
void read_device_mode(void) {
    5724:	b580      	push	{r7, lr}
    5726:	b08c      	sub	sp, #48	; 0x30
    5728:	af00      	add	r7, sp, #0
	// Indicate read command
	uint8_t data_buf_tx[2] = {0x02,0x00};
    572a:	2302      	movs	r3, #2
    572c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    5730:	2300      	movs	r3, #0
    5732:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	twi_package_t packet_tx;
	packet_tx.chip = 0b1010101; //7 bits for chip address
    5736:	2355      	movs	r3, #85	; 0x55
    5738:	61bb      	str	r3, [r7, #24]
	packet_tx.addr[0] = 0;
    573a:	2300      	movs	r3, #0
    573c:	773b      	strb	r3, [r7, #28]
	packet_tx.addr[1] = 0;
    573e:	2300      	movs	r3, #0
    5740:	777b      	strb	r3, [r7, #29]
	packet_tx.addr_length = 0;
    5742:	2300      	movs	r3, #0
    5744:	77fb      	strb	r3, [r7, #31]
	packet_tx.buffer = (void *) data_buf_tx;
    5746:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    574a:	623b      	str	r3, [r7, #32]
	packet_tx.length = 2;
    574c:	2302      	movs	r3, #2
    574e:	627b      	str	r3, [r7, #36]	; 0x24
	packet_tx.high_speed = 0;
    5750:	2300      	movs	r3, #0
    5752:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	packet_tx.high_speed_code = 0;
    5756:	2300      	movs	r3, #0
    5758:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	packet_tx.ten_bit = 0;
    575c:	2300      	movs	r3, #0
    575e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	twi_master_write(TWIM0, &packet_tx);
    5762:	f107 0318 	add.w	r3, r7, #24
    5766:	4619      	mov	r1, r3
    5768:	481c      	ldr	r0, [pc, #112]	; (57dc <read_device_mode+0xb8>)
    576a:	4b1d      	ldr	r3, [pc, #116]	; (57e0 <read_device_mode+0xbc>)
    576c:	4798      	blx	r3
	
	mdelay(40);
    576e:	2028      	movs	r0, #40	; 0x28
    5770:	4b1c      	ldr	r3, [pc, #112]	; (57e4 <read_device_mode+0xc0>)
    5772:	4798      	blx	r3
	
	uint8_t data_buf_rx[2]; // 2 element array to hold 16 bytes
	twi_package_t packet_rx;
	packet_rx.chip = 0b1010101;
    5774:	2355      	movs	r3, #85	; 0x55
    5776:	603b      	str	r3, [r7, #0]
	packet_rx.addr[0] = 0;
    5778:	2300      	movs	r3, #0
    577a:	713b      	strb	r3, [r7, #4]
	packet_rx.addr[1] = 0;
    577c:	2300      	movs	r3, #0
    577e:	717b      	strb	r3, [r7, #5]
	packet_rx.addr_length = 0;
    5780:	2300      	movs	r3, #0
    5782:	71fb      	strb	r3, [r7, #7]
	packet_rx.buffer = (void *) data_buf_rx;
    5784:	f107 0314 	add.w	r3, r7, #20
    5788:	60bb      	str	r3, [r7, #8]
	packet_rx.length = 2;
    578a:	2302      	movs	r3, #2
    578c:	60fb      	str	r3, [r7, #12]
	packet_rx.high_speed = 0;
    578e:	2300      	movs	r3, #0
    5790:	747b      	strb	r3, [r7, #17]
	packet_rx.high_speed_code = 0;
    5792:	2300      	movs	r3, #0
    5794:	74bb      	strb	r3, [r7, #18]
	packet_rx.ten_bit = 0;
    5796:	2300      	movs	r3, #0
    5798:	743b      	strb	r3, [r7, #16]
	status_code_t status = twi_master_read(TWIM0, &packet_rx);
    579a:	463b      	mov	r3, r7
    579c:	4619      	mov	r1, r3
    579e:	480f      	ldr	r0, [pc, #60]	; (57dc <read_device_mode+0xb8>)
    57a0:	4b11      	ldr	r3, [pc, #68]	; (57e8 <read_device_mode+0xc4>)
    57a2:	4798      	blx	r3
    57a4:	4603      	mov	r3, r0
    57a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (status != STATUS_OK) {
    57aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
    57ae:	2b00      	cmp	r3, #0
    57b0:	d003      	beq.n	57ba <read_device_mode+0x96>
		printf("--- Failed to read device mode.\r\n");
    57b2:	480e      	ldr	r0, [pc, #56]	; (57ec <read_device_mode+0xc8>)
    57b4:	4b0e      	ldr	r3, [pc, #56]	; (57f0 <read_device_mode+0xcc>)
    57b6:	4798      	blx	r3
    57b8:	e002      	b.n	57c0 <read_device_mode+0x9c>
	}
	else {
		printf("+++ Device mode read.\r\n");
    57ba:	480e      	ldr	r0, [pc, #56]	; (57f4 <read_device_mode+0xd0>)
    57bc:	4b0c      	ldr	r3, [pc, #48]	; (57f0 <read_device_mode+0xcc>)
    57be:	4798      	blx	r3
	}
	printf("Byte 1: %X\r\n", (data_buf_rx[0]));
    57c0:	7d3b      	ldrb	r3, [r7, #20]
    57c2:	4619      	mov	r1, r3
    57c4:	480c      	ldr	r0, [pc, #48]	; (57f8 <read_device_mode+0xd4>)
    57c6:	4b0a      	ldr	r3, [pc, #40]	; (57f0 <read_device_mode+0xcc>)
    57c8:	4798      	blx	r3
	printf("Byte 2: %X\r\n", (data_buf_rx[1]));
    57ca:	7d7b      	ldrb	r3, [r7, #21]
    57cc:	4619      	mov	r1, r3
    57ce:	480b      	ldr	r0, [pc, #44]	; (57fc <read_device_mode+0xd8>)
    57d0:	4b07      	ldr	r3, [pc, #28]	; (57f0 <read_device_mode+0xcc>)
    57d2:	4798      	blx	r3
}
    57d4:	bf00      	nop
    57d6:	3730      	adds	r7, #48	; 0x30
    57d8:	46bd      	mov	sp, r7
    57da:	bd80      	pop	{r7, pc}
    57dc:	40018000 	.word	0x40018000
    57e0:	00001189 	.word	0x00001189
    57e4:	000055f1 	.word	0x000055f1
    57e8:	00000c99 	.word	0x00000c99
    57ec:	0000bc9c 	.word	0x0000bc9c
    57f0:	00008f79 	.word	0x00008f79
    57f4:	0000bcc0 	.word	0x0000bcc0
    57f8:	0000bc8c 	.word	0x0000bc8c
    57fc:	0000bcd8 	.word	0x0000bcd8

00005800 <get_register_attributes>:
 *  Parameters:
 *		none
 *  
 *  Return: void, should return 0x00 0x01 0x24 if device is operating
 */
void get_register_attributes(void) {
    5800:	b580      	push	{r7, lr}
    5802:	b08c      	sub	sp, #48	; 0x30
    5804:	af00      	add	r7, sp, #0
	uint8_t data_buf_tx[2] = {0x42,0x03};
    5806:	4b2d      	ldr	r3, [pc, #180]	; (58bc <get_register_attributes+0xbc>)
    5808:	881b      	ldrh	r3, [r3, #0]
    580a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	twi_package_t packet_tx;
	packet_tx.chip = 0b1010101;
    580c:	2355      	movs	r3, #85	; 0x55
    580e:	61bb      	str	r3, [r7, #24]
	packet_tx.addr[0] = 0;
    5810:	2300      	movs	r3, #0
    5812:	773b      	strb	r3, [r7, #28]
	packet_tx.addr[1] = 0;
    5814:	2300      	movs	r3, #0
    5816:	777b      	strb	r3, [r7, #29]
	packet_tx.addr_length = 0;
    5818:	2300      	movs	r3, #0
    581a:	77fb      	strb	r3, [r7, #31]
	packet_tx.buffer = (void *) data_buf_tx;
    581c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    5820:	623b      	str	r3, [r7, #32]
	packet_tx.length = 2;
    5822:	2302      	movs	r3, #2
    5824:	627b      	str	r3, [r7, #36]	; 0x24
	packet_tx.high_speed = 0;
    5826:	2300      	movs	r3, #0
    5828:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	packet_tx.high_speed_code = 0;
    582c:	2300      	movs	r3, #0
    582e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	packet_tx.ten_bit = 0;
    5832:	2300      	movs	r3, #0
    5834:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	twi_master_write(TWIM0, &packet_tx);
    5838:	f107 0318 	add.w	r3, r7, #24
    583c:	4619      	mov	r1, r3
    583e:	4820      	ldr	r0, [pc, #128]	; (58c0 <get_register_attributes+0xc0>)
    5840:	4b20      	ldr	r3, [pc, #128]	; (58c4 <get_register_attributes+0xc4>)
    5842:	4798      	blx	r3
	
	mdelay(40);
    5844:	2028      	movs	r0, #40	; 0x28
    5846:	4b20      	ldr	r3, [pc, #128]	; (58c8 <get_register_attributes+0xc8>)
    5848:	4798      	blx	r3
	
	uint8_t data_buf_rx[3]; // 4 element array to hold 32 bytes
	twi_package_t packet_rx;
	packet_rx.chip = 0b1010101; 
    584a:	2355      	movs	r3, #85	; 0x55
    584c:	603b      	str	r3, [r7, #0]
	packet_rx.addr[0] = 0; 
    584e:	2300      	movs	r3, #0
    5850:	713b      	strb	r3, [r7, #4]
	packet_rx.addr[1] = 0; 
    5852:	2300      	movs	r3, #0
    5854:	717b      	strb	r3, [r7, #5]
	packet_rx.addr_length = 0;
    5856:	2300      	movs	r3, #0
    5858:	71fb      	strb	r3, [r7, #7]
	packet_rx.buffer = (void *) data_buf_rx;
    585a:	f107 0314 	add.w	r3, r7, #20
    585e:	60bb      	str	r3, [r7, #8]
	packet_rx.length = 3;
    5860:	2303      	movs	r3, #3
    5862:	60fb      	str	r3, [r7, #12]
	packet_rx.high_speed = 0;
    5864:	2300      	movs	r3, #0
    5866:	747b      	strb	r3, [r7, #17]
	packet_rx.high_speed_code = 0;
    5868:	2300      	movs	r3, #0
    586a:	74bb      	strb	r3, [r7, #18]
	packet_rx.ten_bit = 0;
    586c:	2300      	movs	r3, #0
    586e:	743b      	strb	r3, [r7, #16]
	status_code_t status = twi_master_read(TWIM0, &packet_rx);
    5870:	463b      	mov	r3, r7
    5872:	4619      	mov	r1, r3
    5874:	4812      	ldr	r0, [pc, #72]	; (58c0 <get_register_attributes+0xc0>)
    5876:	4b15      	ldr	r3, [pc, #84]	; (58cc <get_register_attributes+0xcc>)
    5878:	4798      	blx	r3
    587a:	4603      	mov	r3, r0
    587c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (status != STATUS_OK) {
    5880:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
    5884:	2b00      	cmp	r3, #0
    5886:	d003      	beq.n	5890 <get_register_attributes+0x90>
		printf("--- Failed to read register attributes.\r\n");
    5888:	4811      	ldr	r0, [pc, #68]	; (58d0 <get_register_attributes+0xd0>)
    588a:	4b12      	ldr	r3, [pc, #72]	; (58d4 <get_register_attributes+0xd4>)
    588c:	4798      	blx	r3
    588e:	e002      	b.n	5896 <get_register_attributes+0x96>
	}
	else {
		printf("+++ Register attributes read.\r\n");
    5890:	4811      	ldr	r0, [pc, #68]	; (58d8 <get_register_attributes+0xd8>)
    5892:	4b10      	ldr	r3, [pc, #64]	; (58d4 <get_register_attributes+0xd4>)
    5894:	4798      	blx	r3
	}
	printf("Byte 1: %X\r\n", (data_buf_rx[0]));
    5896:	7d3b      	ldrb	r3, [r7, #20]
    5898:	4619      	mov	r1, r3
    589a:	4810      	ldr	r0, [pc, #64]	; (58dc <get_register_attributes+0xdc>)
    589c:	4b0d      	ldr	r3, [pc, #52]	; (58d4 <get_register_attributes+0xd4>)
    589e:	4798      	blx	r3
	printf("Byte 2: %X\r\n", (data_buf_rx[1]));
    58a0:	7d7b      	ldrb	r3, [r7, #21]
    58a2:	4619      	mov	r1, r3
    58a4:	480e      	ldr	r0, [pc, #56]	; (58e0 <get_register_attributes+0xe0>)
    58a6:	4b0b      	ldr	r3, [pc, #44]	; (58d4 <get_register_attributes+0xd4>)
    58a8:	4798      	blx	r3
	printf("Byte 3: %X\r\n", (data_buf_rx[2]));
    58aa:	7dbb      	ldrb	r3, [r7, #22]
    58ac:	4619      	mov	r1, r3
    58ae:	480d      	ldr	r0, [pc, #52]	; (58e4 <get_register_attributes+0xe4>)
    58b0:	4b08      	ldr	r3, [pc, #32]	; (58d4 <get_register_attributes+0xd4>)
    58b2:	4798      	blx	r3
}
    58b4:	bf00      	nop
    58b6:	3730      	adds	r7, #48	; 0x30
    58b8:	46bd      	mov	sp, r7
    58ba:	bd80      	pop	{r7, pc}
    58bc:	0000bd44 	.word	0x0000bd44
    58c0:	40018000 	.word	0x40018000
    58c4:	00001189 	.word	0x00001189
    58c8:	000055f1 	.word	0x000055f1
    58cc:	00000c99 	.word	0x00000c99
    58d0:	0000bce8 	.word	0x0000bce8
    58d4:	00008f79 	.word	0x00008f79
    58d8:	0000bd14 	.word	0x0000bd14
    58dc:	0000bc8c 	.word	0x0000bc8c
    58e0:	0000bcd8 	.word	0x0000bcd8
    58e4:	0000bd34 	.word	0x0000bd34

000058e8 <set_output_mode>:
 *  Parameters:
 *		none
 *  
 *  Return: void, should return 0x00 if device is operating
 */
void set_output_mode(void) {
    58e8:	b580      	push	{r7, lr}
    58ea:	b08c      	sub	sp, #48	; 0x30
    58ec:	af00      	add	r7, sp, #0
	uint8_t data_buf_tx[3] = {0x10,0x00,0x02};
    58ee:	4a2b      	ldr	r2, [pc, #172]	; (599c <set_output_mode+0xb4>)
    58f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    58f4:	6812      	ldr	r2, [r2, #0]
    58f6:	4611      	mov	r1, r2
    58f8:	8019      	strh	r1, [r3, #0]
    58fa:	3302      	adds	r3, #2
    58fc:	0c12      	lsrs	r2, r2, #16
    58fe:	701a      	strb	r2, [r3, #0]
	twi_package_t packet_tx;
	packet_tx.chip = 0b1010101;
    5900:	2355      	movs	r3, #85	; 0x55
    5902:	61bb      	str	r3, [r7, #24]
	packet_tx.addr[0] = 0;
    5904:	2300      	movs	r3, #0
    5906:	773b      	strb	r3, [r7, #28]
	packet_tx.addr[1] = 0;
    5908:	2300      	movs	r3, #0
    590a:	777b      	strb	r3, [r7, #29]
	packet_tx.addr_length = 0;
    590c:	2300      	movs	r3, #0
    590e:	77fb      	strb	r3, [r7, #31]
	packet_tx.buffer = (void *) data_buf_tx;
    5910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    5914:	623b      	str	r3, [r7, #32]
	packet_tx.length = 3;
    5916:	2303      	movs	r3, #3
    5918:	627b      	str	r3, [r7, #36]	; 0x24
	packet_tx.high_speed = 0;
    591a:	2300      	movs	r3, #0
    591c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	packet_tx.high_speed_code = 0;
    5920:	2300      	movs	r3, #0
    5922:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	packet_tx.ten_bit = 0;
    5926:	2300      	movs	r3, #0
    5928:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	twi_master_write(TWIM0, &packet_tx);
    592c:	f107 0318 	add.w	r3, r7, #24
    5930:	4619      	mov	r1, r3
    5932:	481b      	ldr	r0, [pc, #108]	; (59a0 <set_output_mode+0xb8>)
    5934:	4b1b      	ldr	r3, [pc, #108]	; (59a4 <set_output_mode+0xbc>)
    5936:	4798      	blx	r3
	
	mdelay(40);
    5938:	2028      	movs	r0, #40	; 0x28
    593a:	4b1b      	ldr	r3, [pc, #108]	; (59a8 <set_output_mode+0xc0>)
    593c:	4798      	blx	r3
	
	uint8_t data_buf_rx[1]; // 1 element array to hold 1 byte
	twi_package_t packet_rx;
	packet_rx.chip = 0b1010101; 
    593e:	2355      	movs	r3, #85	; 0x55
    5940:	603b      	str	r3, [r7, #0]
	packet_rx.addr[0] = 0;
    5942:	2300      	movs	r3, #0
    5944:	713b      	strb	r3, [r7, #4]
	packet_rx.addr[1] = 0;
    5946:	2300      	movs	r3, #0
    5948:	717b      	strb	r3, [r7, #5]
	packet_rx.addr_length = 0;
    594a:	2300      	movs	r3, #0
    594c:	71fb      	strb	r3, [r7, #7]
	packet_rx.buffer = (void *) data_buf_rx;
    594e:	f107 0314 	add.w	r3, r7, #20
    5952:	60bb      	str	r3, [r7, #8]
	packet_rx.length = 1;
    5954:	2301      	movs	r3, #1
    5956:	60fb      	str	r3, [r7, #12]
	packet_rx.high_speed = 0;
    5958:	2300      	movs	r3, #0
    595a:	747b      	strb	r3, [r7, #17]
	packet_rx.high_speed_code = 0;
    595c:	2300      	movs	r3, #0
    595e:	74bb      	strb	r3, [r7, #18]
	packet_rx.ten_bit = 0;
    5960:	2300      	movs	r3, #0
    5962:	743b      	strb	r3, [r7, #16]
	status_code_t status = twi_master_read(TWIM0, &packet_rx);
    5964:	463b      	mov	r3, r7
    5966:	4619      	mov	r1, r3
    5968:	480d      	ldr	r0, [pc, #52]	; (59a0 <set_output_mode+0xb8>)
    596a:	4b10      	ldr	r3, [pc, #64]	; (59ac <set_output_mode+0xc4>)
    596c:	4798      	blx	r3
    596e:	4603      	mov	r3, r0
    5970:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (status != STATUS_OK) {
    5974:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
    5978:	2b00      	cmp	r3, #0
    597a:	d003      	beq.n	5984 <set_output_mode+0x9c>
		printf("--- Output mode failed to be set.\r\n");
    597c:	480c      	ldr	r0, [pc, #48]	; (59b0 <set_output_mode+0xc8>)
    597e:	4b0d      	ldr	r3, [pc, #52]	; (59b4 <set_output_mode+0xcc>)
    5980:	4798      	blx	r3
    5982:	e002      	b.n	598a <set_output_mode+0xa2>
	}
	else {
		printf("+++ Output mode set.\r\n");
    5984:	480c      	ldr	r0, [pc, #48]	; (59b8 <set_output_mode+0xd0>)
    5986:	4b0b      	ldr	r3, [pc, #44]	; (59b4 <set_output_mode+0xcc>)
    5988:	4798      	blx	r3
	}
	printf("Byte 1: %X\r\n", (data_buf_rx[0]));
    598a:	7d3b      	ldrb	r3, [r7, #20]
    598c:	4619      	mov	r1, r3
    598e:	480b      	ldr	r0, [pc, #44]	; (59bc <set_output_mode+0xd4>)
    5990:	4b08      	ldr	r3, [pc, #32]	; (59b4 <set_output_mode+0xcc>)
    5992:	4798      	blx	r3
}
    5994:	bf00      	nop
    5996:	3730      	adds	r7, #48	; 0x30
    5998:	46bd      	mov	sp, r7
    599a:	bd80      	pop	{r7, pc}
    599c:	0000bd84 	.word	0x0000bd84
    59a0:	40018000 	.word	0x40018000
    59a4:	00001189 	.word	0x00001189
    59a8:	000055f1 	.word	0x000055f1
    59ac:	00000c99 	.word	0x00000c99
    59b0:	0000bd48 	.word	0x0000bd48
    59b4:	00008f79 	.word	0x00008f79
    59b8:	0000bd6c 	.word	0x0000bd6c
    59bc:	0000bc8c 	.word	0x0000bc8c

000059c0 <set_fifo>:
 *  Parameters:
 *		none
 *  
 *  Return: void, should return 0x00 if device is operating
 */
void set_fifo(void) {
    59c0:	b580      	push	{r7, lr}
    59c2:	b08c      	sub	sp, #48	; 0x30
    59c4:	af00      	add	r7, sp, #0
	uint8_t data_buf_tx[3] = {0x10,0x01,0x01};
    59c6:	4a2b      	ldr	r2, [pc, #172]	; (5a74 <set_fifo+0xb4>)
    59c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    59cc:	6812      	ldr	r2, [r2, #0]
    59ce:	4611      	mov	r1, r2
    59d0:	8019      	strh	r1, [r3, #0]
    59d2:	3302      	adds	r3, #2
    59d4:	0c12      	lsrs	r2, r2, #16
    59d6:	701a      	strb	r2, [r3, #0]
	twi_package_t packet_tx;
	packet_tx.chip = 0b1010101;
    59d8:	2355      	movs	r3, #85	; 0x55
    59da:	61bb      	str	r3, [r7, #24]
	packet_tx.addr[0] = 0;
    59dc:	2300      	movs	r3, #0
    59de:	773b      	strb	r3, [r7, #28]
	packet_tx.addr[1] = 0;
    59e0:	2300      	movs	r3, #0
    59e2:	777b      	strb	r3, [r7, #29]
	packet_tx.addr_length = 0;
    59e4:	2300      	movs	r3, #0
    59e6:	77fb      	strb	r3, [r7, #31]
	packet_tx.buffer = (void *) data_buf_tx;
    59e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    59ec:	623b      	str	r3, [r7, #32]
	packet_tx.length = 3;
    59ee:	2303      	movs	r3, #3
    59f0:	627b      	str	r3, [r7, #36]	; 0x24
	packet_tx.high_speed = 0;
    59f2:	2300      	movs	r3, #0
    59f4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	packet_tx.high_speed_code = 0;
    59f8:	2300      	movs	r3, #0
    59fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	packet_tx.ten_bit = 0;
    59fe:	2300      	movs	r3, #0
    5a00:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	status_code_t status = twi_master_write(TWIM0, &packet_tx);
    5a04:	f107 0318 	add.w	r3, r7, #24
    5a08:	4619      	mov	r1, r3
    5a0a:	481b      	ldr	r0, [pc, #108]	; (5a78 <set_fifo+0xb8>)
    5a0c:	4b1b      	ldr	r3, [pc, #108]	; (5a7c <set_fifo+0xbc>)
    5a0e:	4798      	blx	r3
    5a10:	4603      	mov	r3, r0
    5a12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (status != STATUS_OK) {
    5a16:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
    5a1a:	2b00      	cmp	r3, #0
    5a1c:	d003      	beq.n	5a26 <set_fifo+0x66>
		printf("--- FIFO threshold failed to be set.\r\n");
    5a1e:	4818      	ldr	r0, [pc, #96]	; (5a80 <set_fifo+0xc0>)
    5a20:	4b18      	ldr	r3, [pc, #96]	; (5a84 <set_fifo+0xc4>)
    5a22:	4798      	blx	r3
    5a24:	e002      	b.n	5a2c <set_fifo+0x6c>
	}
	else {
		printf("+++ FIFO threshold set.\r\n");
    5a26:	4818      	ldr	r0, [pc, #96]	; (5a88 <set_fifo+0xc8>)
    5a28:	4b16      	ldr	r3, [pc, #88]	; (5a84 <set_fifo+0xc4>)
    5a2a:	4798      	blx	r3
	}
	
	mdelay(40);
    5a2c:	2028      	movs	r0, #40	; 0x28
    5a2e:	4b17      	ldr	r3, [pc, #92]	; (5a8c <set_fifo+0xcc>)
    5a30:	4798      	blx	r3
	
	uint8_t data_buf_rx[1]; // 1 element array to hold 1 byte
	twi_package_t packet_rx;
	packet_rx.chip = 0b1010101;
    5a32:	2355      	movs	r3, #85	; 0x55
    5a34:	603b      	str	r3, [r7, #0]
	packet_rx.addr[0] = 0;
    5a36:	2300      	movs	r3, #0
    5a38:	713b      	strb	r3, [r7, #4]
	packet_rx.addr[1] = 0;
    5a3a:	2300      	movs	r3, #0
    5a3c:	717b      	strb	r3, [r7, #5]
	packet_rx.addr_length = 0;
    5a3e:	2300      	movs	r3, #0
    5a40:	71fb      	strb	r3, [r7, #7]
	packet_rx.buffer = (void *) data_buf_rx;
    5a42:	f107 0314 	add.w	r3, r7, #20
    5a46:	60bb      	str	r3, [r7, #8]
	packet_rx.length = 1;
    5a48:	2301      	movs	r3, #1
    5a4a:	60fb      	str	r3, [r7, #12]
	packet_rx.high_speed = 0;
    5a4c:	2300      	movs	r3, #0
    5a4e:	747b      	strb	r3, [r7, #17]
	packet_rx.high_speed_code = 0;
    5a50:	2300      	movs	r3, #0
    5a52:	74bb      	strb	r3, [r7, #18]
	packet_rx.ten_bit = 0;
    5a54:	2300      	movs	r3, #0
    5a56:	743b      	strb	r3, [r7, #16]
	twi_master_read(TWIM0, &packet_rx);
    5a58:	463b      	mov	r3, r7
    5a5a:	4619      	mov	r1, r3
    5a5c:	4806      	ldr	r0, [pc, #24]	; (5a78 <set_fifo+0xb8>)
    5a5e:	4b0c      	ldr	r3, [pc, #48]	; (5a90 <set_fifo+0xd0>)
    5a60:	4798      	blx	r3
	printf("Byte 1: %X\r\n", (data_buf_rx[0]));
    5a62:	7d3b      	ldrb	r3, [r7, #20]
    5a64:	4619      	mov	r1, r3
    5a66:	480b      	ldr	r0, [pc, #44]	; (5a94 <set_fifo+0xd4>)
    5a68:	4b06      	ldr	r3, [pc, #24]	; (5a84 <set_fifo+0xc4>)
    5a6a:	4798      	blx	r3
}
    5a6c:	bf00      	nop
    5a6e:	3730      	adds	r7, #48	; 0x30
    5a70:	46bd      	mov	sp, r7
    5a72:	bd80      	pop	{r7, pc}
    5a74:	0000bdcc 	.word	0x0000bdcc
    5a78:	40018000 	.word	0x40018000
    5a7c:	00001189 	.word	0x00001189
    5a80:	0000bd88 	.word	0x0000bd88
    5a84:	00008f79 	.word	0x00008f79
    5a88:	0000bdb0 	.word	0x0000bdb0
    5a8c:	000055f1 	.word	0x000055f1
    5a90:	00000c99 	.word	0x00000c99
    5a94:	0000bc8c 	.word	0x0000bc8c

00005a98 <enable_agc>:
 *  Parameters:
 *		none
 *  
 *  Return: void, should return 0x00 if device is operating
 */
void enable_agc(void) {
    5a98:	b580      	push	{r7, lr}
    5a9a:	b08c      	sub	sp, #48	; 0x30
    5a9c:	af00      	add	r7, sp, #0
	uint8_t data_buf_tx[3] = {0x52,0x00,0x01};
    5a9e:	4a2b      	ldr	r2, [pc, #172]	; (5b4c <enable_agc+0xb4>)
    5aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    5aa4:	6812      	ldr	r2, [r2, #0]
    5aa6:	4611      	mov	r1, r2
    5aa8:	8019      	strh	r1, [r3, #0]
    5aaa:	3302      	adds	r3, #2
    5aac:	0c12      	lsrs	r2, r2, #16
    5aae:	701a      	strb	r2, [r3, #0]
	twi_package_t packet_tx;
	packet_tx.chip = 0b1010101;
    5ab0:	2355      	movs	r3, #85	; 0x55
    5ab2:	61bb      	str	r3, [r7, #24]
	packet_tx.addr[0] = 0;
    5ab4:	2300      	movs	r3, #0
    5ab6:	773b      	strb	r3, [r7, #28]
	packet_tx.addr[1] = 0;
    5ab8:	2300      	movs	r3, #0
    5aba:	777b      	strb	r3, [r7, #29]
	packet_tx.addr_length = 0;
    5abc:	2300      	movs	r3, #0
    5abe:	77fb      	strb	r3, [r7, #31]
	packet_tx.buffer = (void *) data_buf_tx;
    5ac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    5ac4:	623b      	str	r3, [r7, #32]
	packet_tx.length = 3;
    5ac6:	2303      	movs	r3, #3
    5ac8:	627b      	str	r3, [r7, #36]	; 0x24
	packet_tx.high_speed = 0;
    5aca:	2300      	movs	r3, #0
    5acc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	packet_tx.high_speed_code = 0;
    5ad0:	2300      	movs	r3, #0
    5ad2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	packet_tx.ten_bit = 0;
    5ad6:	2300      	movs	r3, #0
    5ad8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	status_code_t status = twi_master_write(TWIM0, &packet_tx);
    5adc:	f107 0318 	add.w	r3, r7, #24
    5ae0:	4619      	mov	r1, r3
    5ae2:	481b      	ldr	r0, [pc, #108]	; (5b50 <enable_agc+0xb8>)
    5ae4:	4b1b      	ldr	r3, [pc, #108]	; (5b54 <enable_agc+0xbc>)
    5ae6:	4798      	blx	r3
    5ae8:	4603      	mov	r3, r0
    5aea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (status != STATUS_OK) {
    5aee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
    5af2:	2b00      	cmp	r3, #0
    5af4:	d003      	beq.n	5afe <enable_agc+0x66>
		printf("--- AGC failed to be enabled.\r\n");
    5af6:	4818      	ldr	r0, [pc, #96]	; (5b58 <enable_agc+0xc0>)
    5af8:	4b18      	ldr	r3, [pc, #96]	; (5b5c <enable_agc+0xc4>)
    5afa:	4798      	blx	r3
    5afc:	e002      	b.n	5b04 <enable_agc+0x6c>
	}
	else {
		printf("+++ AGC enabled.\r\n");
    5afe:	4818      	ldr	r0, [pc, #96]	; (5b60 <enable_agc+0xc8>)
    5b00:	4b16      	ldr	r3, [pc, #88]	; (5b5c <enable_agc+0xc4>)
    5b02:	4798      	blx	r3
	}
	
	mdelay(40);
    5b04:	2028      	movs	r0, #40	; 0x28
    5b06:	4b17      	ldr	r3, [pc, #92]	; (5b64 <enable_agc+0xcc>)
    5b08:	4798      	blx	r3
	
	uint8_t data_buf_rx[1]; // 1 element array to hold 1 byte
	twi_package_t packet_rx;
	packet_rx.chip = 0b1010101;
    5b0a:	2355      	movs	r3, #85	; 0x55
    5b0c:	603b      	str	r3, [r7, #0]
	packet_rx.addr[0] = 0;
    5b0e:	2300      	movs	r3, #0
    5b10:	713b      	strb	r3, [r7, #4]
	packet_rx.addr[1] = 0;
    5b12:	2300      	movs	r3, #0
    5b14:	717b      	strb	r3, [r7, #5]
	packet_rx.addr_length = 0;
    5b16:	2300      	movs	r3, #0
    5b18:	71fb      	strb	r3, [r7, #7]
	packet_rx.buffer = (void *) data_buf_rx;
    5b1a:	f107 0314 	add.w	r3, r7, #20
    5b1e:	60bb      	str	r3, [r7, #8]
	packet_rx.length = 1;
    5b20:	2301      	movs	r3, #1
    5b22:	60fb      	str	r3, [r7, #12]
	packet_rx.high_speed = 0;
    5b24:	2300      	movs	r3, #0
    5b26:	747b      	strb	r3, [r7, #17]
	packet_rx.high_speed_code = 0;
    5b28:	2300      	movs	r3, #0
    5b2a:	74bb      	strb	r3, [r7, #18]
	packet_rx.ten_bit = 0;
    5b2c:	2300      	movs	r3, #0
    5b2e:	743b      	strb	r3, [r7, #16]
	twi_master_read(TWIM0, &packet_rx);
    5b30:	463b      	mov	r3, r7
    5b32:	4619      	mov	r1, r3
    5b34:	4806      	ldr	r0, [pc, #24]	; (5b50 <enable_agc+0xb8>)
    5b36:	4b0c      	ldr	r3, [pc, #48]	; (5b68 <enable_agc+0xd0>)
    5b38:	4798      	blx	r3
	printf("Byte 1: %X\r\n", (data_buf_rx[0]));
    5b3a:	7d3b      	ldrb	r3, [r7, #20]
    5b3c:	4619      	mov	r1, r3
    5b3e:	480b      	ldr	r0, [pc, #44]	; (5b6c <enable_agc+0xd4>)
    5b40:	4b06      	ldr	r3, [pc, #24]	; (5b5c <enable_agc+0xc4>)
    5b42:	4798      	blx	r3
}
    5b44:	bf00      	nop
    5b46:	3730      	adds	r7, #48	; 0x30
    5b48:	46bd      	mov	sp, r7
    5b4a:	bd80      	pop	{r7, pc}
    5b4c:	0000be04 	.word	0x0000be04
    5b50:	40018000 	.word	0x40018000
    5b54:	00001189 	.word	0x00001189
    5b58:	0000bdd0 	.word	0x0000bdd0
    5b5c:	00008f79 	.word	0x00008f79
    5b60:	0000bdf0 	.word	0x0000bdf0
    5b64:	000055f1 	.word	0x000055f1
    5b68:	00000c99 	.word	0x00000c99
    5b6c:	0000bc8c 	.word	0x0000bc8c

00005b70 <enable_hr_sensor>:
 *  Parameters:
 *		none
 *  
 *  Return: void, should return 0x00 if device is operating
 */
void enable_hr_sensor(void) {
    5b70:	b580      	push	{r7, lr}
    5b72:	b08c      	sub	sp, #48	; 0x30
    5b74:	af00      	add	r7, sp, #0
	uint8_t data_buf_tx[3] = {0x44,0x03,0x01};
    5b76:	4a2b      	ldr	r2, [pc, #172]	; (5c24 <enable_hr_sensor+0xb4>)
    5b78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    5b7c:	6812      	ldr	r2, [r2, #0]
    5b7e:	4611      	mov	r1, r2
    5b80:	8019      	strh	r1, [r3, #0]
    5b82:	3302      	adds	r3, #2
    5b84:	0c12      	lsrs	r2, r2, #16
    5b86:	701a      	strb	r2, [r3, #0]
	twi_package_t packet_tx;
	packet_tx.chip = 0b1010101;
    5b88:	2355      	movs	r3, #85	; 0x55
    5b8a:	61bb      	str	r3, [r7, #24]
	packet_tx.addr[0] = 0;
    5b8c:	2300      	movs	r3, #0
    5b8e:	773b      	strb	r3, [r7, #28]
	packet_tx.addr[1] = 0;
    5b90:	2300      	movs	r3, #0
    5b92:	777b      	strb	r3, [r7, #29]
	packet_tx.addr_length = 0;
    5b94:	2300      	movs	r3, #0
    5b96:	77fb      	strb	r3, [r7, #31]
	packet_tx.buffer = (void *) data_buf_tx;
    5b98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    5b9c:	623b      	str	r3, [r7, #32]
	packet_tx.length = 3;
    5b9e:	2303      	movs	r3, #3
    5ba0:	627b      	str	r3, [r7, #36]	; 0x24
	packet_tx.high_speed = 0;
    5ba2:	2300      	movs	r3, #0
    5ba4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	packet_tx.high_speed_code = 0;
    5ba8:	2300      	movs	r3, #0
    5baa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	packet_tx.ten_bit = 0;
    5bae:	2300      	movs	r3, #0
    5bb0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	status_code_t status = twi_master_write(TWIM0, &packet_tx);
    5bb4:	f107 0318 	add.w	r3, r7, #24
    5bb8:	4619      	mov	r1, r3
    5bba:	481b      	ldr	r0, [pc, #108]	; (5c28 <enable_hr_sensor+0xb8>)
    5bbc:	4b1b      	ldr	r3, [pc, #108]	; (5c2c <enable_hr_sensor+0xbc>)
    5bbe:	4798      	blx	r3
    5bc0:	4603      	mov	r3, r0
    5bc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (status != STATUS_OK) {
    5bc6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
    5bca:	2b00      	cmp	r3, #0
    5bcc:	d003      	beq.n	5bd6 <enable_hr_sensor+0x66>
		printf("--- HR sensor failed to be enabled.\r\n");
    5bce:	4818      	ldr	r0, [pc, #96]	; (5c30 <enable_hr_sensor+0xc0>)
    5bd0:	4b18      	ldr	r3, [pc, #96]	; (5c34 <enable_hr_sensor+0xc4>)
    5bd2:	4798      	blx	r3
    5bd4:	e002      	b.n	5bdc <enable_hr_sensor+0x6c>
	}
	else {
		printf("+++ HR sensor enabled.\r\n");
    5bd6:	4818      	ldr	r0, [pc, #96]	; (5c38 <enable_hr_sensor+0xc8>)
    5bd8:	4b16      	ldr	r3, [pc, #88]	; (5c34 <enable_hr_sensor+0xc4>)
    5bda:	4798      	blx	r3
	}
	
	mdelay(40);
    5bdc:	2028      	movs	r0, #40	; 0x28
    5bde:	4b17      	ldr	r3, [pc, #92]	; (5c3c <enable_hr_sensor+0xcc>)
    5be0:	4798      	blx	r3
	
	uint8_t data_buf_rx[1]; // 1 element array to hold 1 byte
	twi_package_t packet_rx;
	packet_rx.chip = 0b1010101;
    5be2:	2355      	movs	r3, #85	; 0x55
    5be4:	603b      	str	r3, [r7, #0]
	packet_rx.addr[0] = 0;
    5be6:	2300      	movs	r3, #0
    5be8:	713b      	strb	r3, [r7, #4]
	packet_rx.addr[1] = 0;
    5bea:	2300      	movs	r3, #0
    5bec:	717b      	strb	r3, [r7, #5]
	packet_rx.addr_length = 0;
    5bee:	2300      	movs	r3, #0
    5bf0:	71fb      	strb	r3, [r7, #7]
	packet_rx.buffer = (void *) data_buf_rx;
    5bf2:	f107 0314 	add.w	r3, r7, #20
    5bf6:	60bb      	str	r3, [r7, #8]
	packet_rx.length = 1;
    5bf8:	2301      	movs	r3, #1
    5bfa:	60fb      	str	r3, [r7, #12]
	packet_rx.high_speed = 0;
    5bfc:	2300      	movs	r3, #0
    5bfe:	747b      	strb	r3, [r7, #17]
	packet_rx.high_speed_code = 0;
    5c00:	2300      	movs	r3, #0
    5c02:	74bb      	strb	r3, [r7, #18]
	packet_rx.ten_bit = 0;
    5c04:	2300      	movs	r3, #0
    5c06:	743b      	strb	r3, [r7, #16]
	twi_master_read(TWIM0, &packet_rx);
    5c08:	463b      	mov	r3, r7
    5c0a:	4619      	mov	r1, r3
    5c0c:	4806      	ldr	r0, [pc, #24]	; (5c28 <enable_hr_sensor+0xb8>)
    5c0e:	4b0c      	ldr	r3, [pc, #48]	; (5c40 <enable_hr_sensor+0xd0>)
    5c10:	4798      	blx	r3
	printf("Byte 1: %X\r\n", (data_buf_rx[0]));
    5c12:	7d3b      	ldrb	r3, [r7, #20]
    5c14:	4619      	mov	r1, r3
    5c16:	480b      	ldr	r0, [pc, #44]	; (5c44 <enable_hr_sensor+0xd4>)
    5c18:	4b06      	ldr	r3, [pc, #24]	; (5c34 <enable_hr_sensor+0xc4>)
    5c1a:	4798      	blx	r3
}
    5c1c:	bf00      	nop
    5c1e:	3730      	adds	r7, #48	; 0x30
    5c20:	46bd      	mov	sp, r7
    5c22:	bd80      	pop	{r7, pc}
    5c24:	0000be4c 	.word	0x0000be4c
    5c28:	40018000 	.word	0x40018000
    5c2c:	00001189 	.word	0x00001189
    5c30:	0000be08 	.word	0x0000be08
    5c34:	00008f79 	.word	0x00008f79
    5c38:	0000be30 	.word	0x0000be30
    5c3c:	000055f1 	.word	0x000055f1
    5c40:	00000c99 	.word	0x00000c99
    5c44:	0000bc8c 	.word	0x0000bc8c

00005c48 <enable_algo>:
 *  Parameters:
 *		none
 *  
 *  Return: void, should return 0x00 if device is operating
 */
void enable_algo(void) {
    5c48:	b580      	push	{r7, lr}
    5c4a:	b08c      	sub	sp, #48	; 0x30
    5c4c:	af00      	add	r7, sp, #0
	uint8_t data_buf_tx[3] = {0x52,0x02,0x01};
    5c4e:	4a2b      	ldr	r2, [pc, #172]	; (5cfc <enable_algo+0xb4>)
    5c50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    5c54:	6812      	ldr	r2, [r2, #0]
    5c56:	4611      	mov	r1, r2
    5c58:	8019      	strh	r1, [r3, #0]
    5c5a:	3302      	adds	r3, #2
    5c5c:	0c12      	lsrs	r2, r2, #16
    5c5e:	701a      	strb	r2, [r3, #0]
	twi_package_t packet_tx;
	packet_tx.chip = 0b1010101;
    5c60:	2355      	movs	r3, #85	; 0x55
    5c62:	61bb      	str	r3, [r7, #24]
	packet_tx.addr[0] = 0;
    5c64:	2300      	movs	r3, #0
    5c66:	773b      	strb	r3, [r7, #28]
	packet_tx.addr[1] = 0;
    5c68:	2300      	movs	r3, #0
    5c6a:	777b      	strb	r3, [r7, #29]
	packet_tx.addr_length = 0;
    5c6c:	2300      	movs	r3, #0
    5c6e:	77fb      	strb	r3, [r7, #31]
	packet_tx.buffer = (void *) data_buf_tx;
    5c70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    5c74:	623b      	str	r3, [r7, #32]
	packet_tx.length = 3;
    5c76:	2303      	movs	r3, #3
    5c78:	627b      	str	r3, [r7, #36]	; 0x24
	packet_tx.high_speed = 0;
    5c7a:	2300      	movs	r3, #0
    5c7c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	packet_tx.high_speed_code = 0;
    5c80:	2300      	movs	r3, #0
    5c82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	packet_tx.ten_bit = 0;
    5c86:	2300      	movs	r3, #0
    5c88:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	status_code_t status = twi_master_write(TWIM0, &packet_tx);
    5c8c:	f107 0318 	add.w	r3, r7, #24
    5c90:	4619      	mov	r1, r3
    5c92:	481b      	ldr	r0, [pc, #108]	; (5d00 <enable_algo+0xb8>)
    5c94:	4b1b      	ldr	r3, [pc, #108]	; (5d04 <enable_algo+0xbc>)
    5c96:	4798      	blx	r3
    5c98:	4603      	mov	r3, r0
    5c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (status != STATUS_OK) {
    5c9e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
    5ca2:	2b00      	cmp	r3, #0
    5ca4:	d003      	beq.n	5cae <enable_algo+0x66>
		printf("--- Algorithm failed to be set.\r\n");
    5ca6:	4818      	ldr	r0, [pc, #96]	; (5d08 <enable_algo+0xc0>)
    5ca8:	4b18      	ldr	r3, [pc, #96]	; (5d0c <enable_algo+0xc4>)
    5caa:	4798      	blx	r3
    5cac:	e002      	b.n	5cb4 <enable_algo+0x6c>
	}
	else {
		printf("+++ Algorithm set.\r\n");
    5cae:	4818      	ldr	r0, [pc, #96]	; (5d10 <enable_algo+0xc8>)
    5cb0:	4b16      	ldr	r3, [pc, #88]	; (5d0c <enable_algo+0xc4>)
    5cb2:	4798      	blx	r3
	}
	
	mdelay(100);
    5cb4:	2064      	movs	r0, #100	; 0x64
    5cb6:	4b17      	ldr	r3, [pc, #92]	; (5d14 <enable_algo+0xcc>)
    5cb8:	4798      	blx	r3
	
	uint8_t data_buf_rx[1]; // 1 element array to hold 1 byte
	twi_package_t packet_rx;
	packet_rx.chip = 0b1010101;
    5cba:	2355      	movs	r3, #85	; 0x55
    5cbc:	603b      	str	r3, [r7, #0]
	packet_rx.addr[0] = 0;
    5cbe:	2300      	movs	r3, #0
    5cc0:	713b      	strb	r3, [r7, #4]
	packet_rx.addr[1] = 0;
    5cc2:	2300      	movs	r3, #0
    5cc4:	717b      	strb	r3, [r7, #5]
	packet_rx.addr_length = 0;
    5cc6:	2300      	movs	r3, #0
    5cc8:	71fb      	strb	r3, [r7, #7]
	packet_rx.buffer = (void *) data_buf_rx;
    5cca:	f107 0314 	add.w	r3, r7, #20
    5cce:	60bb      	str	r3, [r7, #8]
	packet_rx.length = 1;
    5cd0:	2301      	movs	r3, #1
    5cd2:	60fb      	str	r3, [r7, #12]
	packet_rx.high_speed = 0;
    5cd4:	2300      	movs	r3, #0
    5cd6:	747b      	strb	r3, [r7, #17]
	packet_rx.high_speed_code = 0;
    5cd8:	2300      	movs	r3, #0
    5cda:	74bb      	strb	r3, [r7, #18]
	packet_rx.ten_bit = 0;
    5cdc:	2300      	movs	r3, #0
    5cde:	743b      	strb	r3, [r7, #16]
	twi_master_read(TWIM0, &packet_rx);
    5ce0:	463b      	mov	r3, r7
    5ce2:	4619      	mov	r1, r3
    5ce4:	4806      	ldr	r0, [pc, #24]	; (5d00 <enable_algo+0xb8>)
    5ce6:	4b0c      	ldr	r3, [pc, #48]	; (5d18 <enable_algo+0xd0>)
    5ce8:	4798      	blx	r3
	printf("Byte 1: %X\r\n", (data_buf_rx[0]));
    5cea:	7d3b      	ldrb	r3, [r7, #20]
    5cec:	4619      	mov	r1, r3
    5cee:	480b      	ldr	r0, [pc, #44]	; (5d1c <enable_algo+0xd4>)
    5cf0:	4b06      	ldr	r3, [pc, #24]	; (5d0c <enable_algo+0xc4>)
    5cf2:	4798      	blx	r3
}
    5cf4:	bf00      	nop
    5cf6:	3730      	adds	r7, #48	; 0x30
    5cf8:	46bd      	mov	sp, r7
    5cfa:	bd80      	pop	{r7, pc}
    5cfc:	0000be8c 	.word	0x0000be8c
    5d00:	40018000 	.word	0x40018000
    5d04:	00001189 	.word	0x00001189
    5d08:	0000be50 	.word	0x0000be50
    5d0c:	00008f79 	.word	0x00008f79
    5d10:	0000be74 	.word	0x0000be74
    5d14:	000055f1 	.word	0x000055f1
    5d18:	00000c99 	.word	0x00000c99
    5d1c:	0000bc8c 	.word	0x0000bc8c

00005d20 <algo_config_read>:
 *  Parameters:
 *		none
 *  
 *  Return: void, should return 0x00 if device is operating
 */
void algo_config_read(void) {
    5d20:	b580      	push	{r7, lr}
    5d22:	b08c      	sub	sp, #48	; 0x30
    5d24:	af00      	add	r7, sp, #0
	uint8_t data_buf_tx[3] = {0x51,0x00,0x03};
    5d26:	4a2b      	ldr	r2, [pc, #172]	; (5dd4 <algo_config_read+0xb4>)
    5d28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    5d2c:	6812      	ldr	r2, [r2, #0]
    5d2e:	4611      	mov	r1, r2
    5d30:	8019      	strh	r1, [r3, #0]
    5d32:	3302      	adds	r3, #2
    5d34:	0c12      	lsrs	r2, r2, #16
    5d36:	701a      	strb	r2, [r3, #0]
	twi_package_t packet_tx;
	packet_tx.chip = 0b1010101;
    5d38:	2355      	movs	r3, #85	; 0x55
    5d3a:	61bb      	str	r3, [r7, #24]
	packet_tx.addr[0] = 0;
    5d3c:	2300      	movs	r3, #0
    5d3e:	773b      	strb	r3, [r7, #28]
	packet_tx.addr[1] = 0;
    5d40:	2300      	movs	r3, #0
    5d42:	777b      	strb	r3, [r7, #29]
	packet_tx.addr_length = 0;
    5d44:	2300      	movs	r3, #0
    5d46:	77fb      	strb	r3, [r7, #31]
	packet_tx.buffer = (void *) data_buf_tx;
    5d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    5d4c:	623b      	str	r3, [r7, #32]
	packet_tx.length = 3;
    5d4e:	2303      	movs	r3, #3
    5d50:	627b      	str	r3, [r7, #36]	; 0x24
	packet_tx.high_speed = 0;
    5d52:	2300      	movs	r3, #0
    5d54:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	packet_tx.high_speed_code = 0;
    5d58:	2300      	movs	r3, #0
    5d5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	packet_tx.ten_bit = 0;
    5d5e:	2300      	movs	r3, #0
    5d60:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	status_code_t status = twi_master_write(TWIM0, &packet_tx);
    5d64:	f107 0318 	add.w	r3, r7, #24
    5d68:	4619      	mov	r1, r3
    5d6a:	481b      	ldr	r0, [pc, #108]	; (5dd8 <algo_config_read+0xb8>)
    5d6c:	4b1b      	ldr	r3, [pc, #108]	; (5ddc <algo_config_read+0xbc>)
    5d6e:	4798      	blx	r3
    5d70:	4603      	mov	r3, r0
    5d72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (status != STATUS_OK) {
    5d76:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
    5d7a:	2b00      	cmp	r3, #0
    5d7c:	d003      	beq.n	5d86 <algo_config_read+0x66>
		printf("--- Failed to read number of samples for AGC algorithm.\r\n");
    5d7e:	4818      	ldr	r0, [pc, #96]	; (5de0 <algo_config_read+0xc0>)
    5d80:	4b18      	ldr	r3, [pc, #96]	; (5de4 <algo_config_read+0xc4>)
    5d82:	4798      	blx	r3
    5d84:	e002      	b.n	5d8c <algo_config_read+0x6c>
	}
	else {
		printf("+++ Read number of samples for AGC algorithm.\r\n");
    5d86:	4818      	ldr	r0, [pc, #96]	; (5de8 <algo_config_read+0xc8>)
    5d88:	4b16      	ldr	r3, [pc, #88]	; (5de4 <algo_config_read+0xc4>)
    5d8a:	4798      	blx	r3
	}
	
	mdelay(100);
    5d8c:	2064      	movs	r0, #100	; 0x64
    5d8e:	4b17      	ldr	r3, [pc, #92]	; (5dec <algo_config_read+0xcc>)
    5d90:	4798      	blx	r3
	
	uint8_t data_buf_rx[1]; // 1 element array to hold 1 byte
	twi_package_t packet_rx;
	packet_rx.chip = 0b1010101;
    5d92:	2355      	movs	r3, #85	; 0x55
    5d94:	603b      	str	r3, [r7, #0]
	packet_rx.addr[0] = 0;
    5d96:	2300      	movs	r3, #0
    5d98:	713b      	strb	r3, [r7, #4]
	packet_rx.addr[1] = 0;
    5d9a:	2300      	movs	r3, #0
    5d9c:	717b      	strb	r3, [r7, #5]
	packet_rx.addr_length = 0;
    5d9e:	2300      	movs	r3, #0
    5da0:	71fb      	strb	r3, [r7, #7]
	packet_rx.buffer = (void *) data_buf_rx;
    5da2:	f107 0314 	add.w	r3, r7, #20
    5da6:	60bb      	str	r3, [r7, #8]
	packet_rx.length = 1;
    5da8:	2301      	movs	r3, #1
    5daa:	60fb      	str	r3, [r7, #12]
	packet_rx.high_speed = 0;
    5dac:	2300      	movs	r3, #0
    5dae:	747b      	strb	r3, [r7, #17]
	packet_rx.high_speed_code = 0;
    5db0:	2300      	movs	r3, #0
    5db2:	74bb      	strb	r3, [r7, #18]
	packet_rx.ten_bit = 0;
    5db4:	2300      	movs	r3, #0
    5db6:	743b      	strb	r3, [r7, #16]
	twi_master_read(TWIM0, &packet_rx);
    5db8:	463b      	mov	r3, r7
    5dba:	4619      	mov	r1, r3
    5dbc:	4806      	ldr	r0, [pc, #24]	; (5dd8 <algo_config_read+0xb8>)
    5dbe:	4b0c      	ldr	r3, [pc, #48]	; (5df0 <algo_config_read+0xd0>)
    5dc0:	4798      	blx	r3
	printf("Byte 1: %X\r\n", (data_buf_rx[0]));
    5dc2:	7d3b      	ldrb	r3, [r7, #20]
    5dc4:	4619      	mov	r1, r3
    5dc6:	480b      	ldr	r0, [pc, #44]	; (5df4 <algo_config_read+0xd4>)
    5dc8:	4b06      	ldr	r3, [pc, #24]	; (5de4 <algo_config_read+0xc4>)
    5dca:	4798      	blx	r3
}
    5dcc:	bf00      	nop
    5dce:	3730      	adds	r7, #48	; 0x30
    5dd0:	46bd      	mov	sp, r7
    5dd2:	bd80      	pop	{r7, pc}
    5dd4:	0000befc 	.word	0x0000befc
    5dd8:	40018000 	.word	0x40018000
    5ddc:	00001189 	.word	0x00001189
    5de0:	0000be90 	.word	0x0000be90
    5de4:	00008f79 	.word	0x00008f79
    5de8:	0000becc 	.word	0x0000becc
    5dec:	000055f1 	.word	0x000055f1
    5df0:	00000c99 	.word	0x00000c99
    5df4:	0000bc8c 	.word	0x0000bc8c

00005df8 <read_data>:
 *  Parameters:
 *		none
 *  
 *  Return: void
 */
int read_data(void) {
    5df8:	b590      	push	{r4, r7, lr}
    5dfa:	b093      	sub	sp, #76	; 0x4c
    5dfc:	af00      	add	r7, sp, #0
	// Indicate read command
	uint8_t data_buf_tx[2] = {0x12,0x01};
    5dfe:	4b3b      	ldr	r3, [pc, #236]	; (5eec <read_data+0xf4>)
    5e00:	881b      	ldrh	r3, [r3, #0]
    5e02:	863b      	strh	r3, [r7, #48]	; 0x30
	twi_package_t packet_tx;
	packet_tx.chip = 0b1010101; //7 bits for chip address
    5e04:	2355      	movs	r3, #85	; 0x55
    5e06:	61fb      	str	r3, [r7, #28]
	packet_tx.addr[0] = 0;
    5e08:	2300      	movs	r3, #0
    5e0a:	f887 3020 	strb.w	r3, [r7, #32]
	packet_tx.addr[1] = 0;
    5e0e:	2300      	movs	r3, #0
    5e10:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	packet_tx.addr_length = 0;
    5e14:	2300      	movs	r3, #0
    5e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	packet_tx.buffer = (void *) data_buf_tx;
    5e1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
    5e1e:	627b      	str	r3, [r7, #36]	; 0x24
	packet_tx.length = 2;
    5e20:	2302      	movs	r3, #2
    5e22:	62bb      	str	r3, [r7, #40]	; 0x28
	packet_tx.high_speed = 0;
    5e24:	2300      	movs	r3, #0
    5e26:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	packet_tx.high_speed_code = 0;
    5e2a:	2300      	movs	r3, #0
    5e2c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	packet_tx.ten_bit = 0;
    5e30:	2300      	movs	r3, #0
    5e32:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	twi_master_write(TWIM0, &packet_tx);
    5e36:	f107 031c 	add.w	r3, r7, #28
    5e3a:	4619      	mov	r1, r3
    5e3c:	482c      	ldr	r0, [pc, #176]	; (5ef0 <read_data+0xf8>)
    5e3e:	4b2d      	ldr	r3, [pc, #180]	; (5ef4 <read_data+0xfc>)
    5e40:	4798      	blx	r3
	
	mdelay(40);
    5e42:	2028      	movs	r0, #40	; 0x28
    5e44:	4b2c      	ldr	r3, [pc, #176]	; (5ef8 <read_data+0x100>)
    5e46:	4798      	blx	r3
	
	uint8_t data_buf_rx[7]; 
	twi_package_t packet_rx;
	packet_rx.chip = 0b1010101;
    5e48:	2355      	movs	r3, #85	; 0x55
    5e4a:	603b      	str	r3, [r7, #0]
	packet_rx.addr[0] = 0;
    5e4c:	2300      	movs	r3, #0
    5e4e:	713b      	strb	r3, [r7, #4]
	packet_rx.addr[1] = 0;
    5e50:	2300      	movs	r3, #0
    5e52:	717b      	strb	r3, [r7, #5]
	packet_rx.addr_length = 0;
    5e54:	2300      	movs	r3, #0
    5e56:	71fb      	strb	r3, [r7, #7]
	packet_rx.buffer = (void *) data_buf_rx;
    5e58:	f107 0314 	add.w	r3, r7, #20
    5e5c:	60bb      	str	r3, [r7, #8]
	packet_rx.length = 7;
    5e5e:	2307      	movs	r3, #7
    5e60:	60fb      	str	r3, [r7, #12]
	packet_rx.high_speed = 0;
    5e62:	2300      	movs	r3, #0
    5e64:	747b      	strb	r3, [r7, #17]
	packet_rx.high_speed_code = 0;
    5e66:	2300      	movs	r3, #0
    5e68:	74bb      	strb	r3, [r7, #18]
	packet_rx.ten_bit = 0;
    5e6a:	2300      	movs	r3, #0
    5e6c:	743b      	strb	r3, [r7, #16]
	status_code_t status = twi_master_read(TWIM0, &packet_rx);
    5e6e:	463b      	mov	r3, r7
    5e70:	4619      	mov	r1, r3
    5e72:	481f      	ldr	r0, [pc, #124]	; (5ef0 <read_data+0xf8>)
    5e74:	4b21      	ldr	r3, [pc, #132]	; (5efc <read_data+0x104>)
    5e76:	4798      	blx	r3
    5e78:	4603      	mov	r3, r0
    5e7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (status != STATUS_OK) {
    5e7e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
    5e82:	2b00      	cmp	r3, #0
    5e84:	d003      	beq.n	5e8e <read_data+0x96>
		printf("--- Failed to read data.\r\n");
    5e86:	481e      	ldr	r0, [pc, #120]	; (5f00 <read_data+0x108>)
    5e88:	4b1e      	ldr	r3, [pc, #120]	; (5f04 <read_data+0x10c>)
    5e8a:	4798      	blx	r3
    5e8c:	e002      	b.n	5e94 <read_data+0x9c>
	}
	else {
		printf("+++ Data read.\r\n");
    5e8e:	481e      	ldr	r0, [pc, #120]	; (5f08 <read_data+0x110>)
    5e90:	4b1c      	ldr	r3, [pc, #112]	; (5f04 <read_data+0x10c>)
    5e92:	4798      	blx	r3
	}
	
	uint16_t temp = (data_buf_rx[1] << 8 | data_buf_rx[2]);
    5e94:	7d7b      	ldrb	r3, [r7, #21]
    5e96:	021b      	lsls	r3, r3, #8
    5e98:	b21a      	sxth	r2, r3
    5e9a:	7dbb      	ldrb	r3, [r7, #22]
    5e9c:	b21b      	sxth	r3, r3
    5e9e:	4313      	orrs	r3, r2
    5ea0:	b21b      	sxth	r3, r3
    5ea2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	double HR = (double)temp / 10.0;
    5ea6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
    5eaa:	4b18      	ldr	r3, [pc, #96]	; (5f0c <read_data+0x114>)
    5eac:	4610      	mov	r0, r2
    5eae:	4798      	blx	r3
    5eb0:	4c17      	ldr	r4, [pc, #92]	; (5f10 <read_data+0x118>)
    5eb2:	f04f 0200 	mov.w	r2, #0
    5eb6:	4b17      	ldr	r3, [pc, #92]	; (5f14 <read_data+0x11c>)
    5eb8:	47a0      	blx	r4
    5eba:	4603      	mov	r3, r0
    5ebc:	460c      	mov	r4, r1
    5ebe:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	int intHR = HR;
    5ec2:	4b15      	ldr	r3, [pc, #84]	; (5f18 <read_data+0x120>)
    5ec4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
    5ec8:	4798      	blx	r3
    5eca:	4603      	mov	r3, r0
    5ecc:	637b      	str	r3, [r7, #52]	; 0x34
	printf("HR: %i\r\n", intHR);
    5ece:	6b79      	ldr	r1, [r7, #52]	; 0x34
    5ed0:	4812      	ldr	r0, [pc, #72]	; (5f1c <read_data+0x124>)
    5ed2:	4b0c      	ldr	r3, [pc, #48]	; (5f04 <read_data+0x10c>)
    5ed4:	4798      	blx	r3
	printf("Status: %x\r\n\r\n", data_buf_rx[6]);
    5ed6:	7ebb      	ldrb	r3, [r7, #26]
    5ed8:	4619      	mov	r1, r3
    5eda:	4811      	ldr	r0, [pc, #68]	; (5f20 <read_data+0x128>)
    5edc:	4b09      	ldr	r3, [pc, #36]	; (5f04 <read_data+0x10c>)
    5ede:	4798      	blx	r3
	return intHR;
    5ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    5ee2:	4618      	mov	r0, r3
    5ee4:	374c      	adds	r7, #76	; 0x4c
    5ee6:	46bd      	mov	sp, r7
    5ee8:	bd90      	pop	{r4, r7, pc}
    5eea:	bf00      	nop
    5eec:	0000bfc8 	.word	0x0000bfc8
    5ef0:	40018000 	.word	0x40018000
    5ef4:	00001189 	.word	0x00001189
    5ef8:	000055f1 	.word	0x000055f1
    5efc:	00000c99 	.word	0x00000c99
    5f00:	0000bf7c 	.word	0x0000bf7c
    5f04:	00008f79 	.word	0x00008f79
    5f08:	0000bf98 	.word	0x0000bf98
    5f0c:	0000b559 	.word	0x0000b559
    5f10:	0000b899 	.word	0x0000b899
    5f14:	40240000 	.word	0x40240000
    5f18:	0000bba5 	.word	0x0000bba5
    5f1c:	0000bfac 	.word	0x0000bfac
    5f20:	0000bfb8 	.word	0x0000bfb8

00005f24 <configure_hr>:
	packet_rx.high_speed_code = 0;
	packet_rx.ten_bit = 0;
	twi_master_read(TWIM0, &packet_rx);
}

void configure_hr(void) {
    5f24:	b580      	push	{r7, lr}
    5f26:	af00      	add	r7, sp, #0
	ioport_set_pin_dir(RST_PIN, IOPORT_DIR_OUTPUT);
    5f28:	2101      	movs	r1, #1
    5f2a:	202c      	movs	r0, #44	; 0x2c
    5f2c:	4b36      	ldr	r3, [pc, #216]	; (6008 <configure_hr+0xe4>)
    5f2e:	4798      	blx	r3
	ioport_set_pin_dir(MFIO_PIN, IOPORT_DIR_OUTPUT);
    5f30:	2101      	movs	r1, #1
    5f32:	2042      	movs	r0, #66	; 0x42
    5f34:	4b34      	ldr	r3, [pc, #208]	; (6008 <configure_hr+0xe4>)
    5f36:	4798      	blx	r3
	ioport_set_pin_level(RST_PIN, LOW);
    5f38:	2100      	movs	r1, #0
    5f3a:	202c      	movs	r0, #44	; 0x2c
    5f3c:	4b33      	ldr	r3, [pc, #204]	; (600c <configure_hr+0xe8>)
    5f3e:	4798      	blx	r3
	ioport_set_pin_level(MFIO_PIN, HIGH);
    5f40:	2101      	movs	r1, #1
    5f42:	2042      	movs	r0, #66	; 0x42
    5f44:	4b31      	ldr	r3, [pc, #196]	; (600c <configure_hr+0xe8>)
    5f46:	4798      	blx	r3
	mdelay(10);
    5f48:	200a      	movs	r0, #10
    5f4a:	4b31      	ldr	r3, [pc, #196]	; (6010 <configure_hr+0xec>)
    5f4c:	4798      	blx	r3
	ioport_set_pin_level(RST_PIN, HIGH);
    5f4e:	2101      	movs	r1, #1
    5f50:	202c      	movs	r0, #44	; 0x2c
    5f52:	4b2e      	ldr	r3, [pc, #184]	; (600c <configure_hr+0xe8>)
    5f54:	4798      	blx	r3
	mdelay(1000);
    5f56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5f5a:	4b2d      	ldr	r3, [pc, #180]	; (6010 <configure_hr+0xec>)
    5f5c:	4798      	blx	r3
	ioport_set_pin_dir(MFIO_PIN, IOPORT_DIR_INPUT);
    5f5e:	2100      	movs	r1, #0
    5f60:	2042      	movs	r0, #66	; 0x42
    5f62:	4b29      	ldr	r3, [pc, #164]	; (6008 <configure_hr+0xe4>)
    5f64:	4798      	blx	r3
	ioport_set_pin_mode(MFIO_PIN, IOPORT_MODE_PULLUP);
    5f66:	2108      	movs	r1, #8
    5f68:	2042      	movs	r0, #66	; 0x42
    5f6a:	4b2a      	ldr	r3, [pc, #168]	; (6014 <configure_hr+0xf0>)
    5f6c:	4798      	blx	r3
	
	printf("\r\n********** STARTING INITIALIZATION **********\r\n");
    5f6e:	482a      	ldr	r0, [pc, #168]	; (6018 <configure_hr+0xf4>)
    5f70:	4b2a      	ldr	r3, [pc, #168]	; (601c <configure_hr+0xf8>)
    5f72:	4798      	blx	r3
	
	
	// Read MAX32664 mode
	printf("\r\nDevice mode read:\r\n");
    5f74:	482a      	ldr	r0, [pc, #168]	; (6020 <configure_hr+0xfc>)
    5f76:	4b29      	ldr	r3, [pc, #164]	; (601c <configure_hr+0xf8>)
    5f78:	4798      	blx	r3
	read_device_mode();
    5f7a:	4b2a      	ldr	r3, [pc, #168]	; (6024 <configure_hr+0x100>)
    5f7c:	4798      	blx	r3
	mdelay(1000);
    5f7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5f82:	4b23      	ldr	r3, [pc, #140]	; (6010 <configure_hr+0xec>)
    5f84:	4798      	blx	r3
	
	// Get register attributes
	printf("\r\nRegister attributes: \r\n");
    5f86:	4828      	ldr	r0, [pc, #160]	; (6028 <configure_hr+0x104>)
    5f88:	4b24      	ldr	r3, [pc, #144]	; (601c <configure_hr+0xf8>)
    5f8a:	4798      	blx	r3
	get_register_attributes();
    5f8c:	4b27      	ldr	r3, [pc, #156]	; (602c <configure_hr+0x108>)
    5f8e:	4798      	blx	r3
	mdelay(1000);
    5f90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5f94:	4b1e      	ldr	r3, [pc, #120]	; (6010 <configure_hr+0xec>)
    5f96:	4798      	blx	r3
	
	// Set output mode of MAX32664.
	printf("\r\nSetting output mode: \r\n");
    5f98:	4825      	ldr	r0, [pc, #148]	; (6030 <configure_hr+0x10c>)
    5f9a:	4b20      	ldr	r3, [pc, #128]	; (601c <configure_hr+0xf8>)
    5f9c:	4798      	blx	r3
	set_output_mode();
    5f9e:	4b25      	ldr	r3, [pc, #148]	; (6034 <configure_hr+0x110>)
    5fa0:	4798      	blx	r3
	mdelay(1000);
    5fa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5fa6:	4b1a      	ldr	r3, [pc, #104]	; (6010 <configure_hr+0xec>)
    5fa8:	4798      	blx	r3
	
	// Set FIFO threshold
	printf("\r\nSetting threshold: \r\n");
    5faa:	4823      	ldr	r0, [pc, #140]	; (6038 <configure_hr+0x114>)
    5fac:	4b1b      	ldr	r3, [pc, #108]	; (601c <configure_hr+0xf8>)
    5fae:	4798      	blx	r3
	set_fifo();
    5fb0:	4b22      	ldr	r3, [pc, #136]	; (603c <configure_hr+0x118>)
    5fb2:	4798      	blx	r3
	mdelay(1000);
    5fb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5fb8:	4b15      	ldr	r3, [pc, #84]	; (6010 <configure_hr+0xec>)
    5fba:	4798      	blx	r3
	
	// Enable automatic gain control
	printf("\r\nEnabling agc: \r\n");
    5fbc:	4820      	ldr	r0, [pc, #128]	; (6040 <configure_hr+0x11c>)
    5fbe:	4b17      	ldr	r3, [pc, #92]	; (601c <configure_hr+0xf8>)
    5fc0:	4798      	blx	r3
	enable_agc();
    5fc2:	4b20      	ldr	r3, [pc, #128]	; (6044 <configure_hr+0x120>)
    5fc4:	4798      	blx	r3
	mdelay(1000);
    5fc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5fca:	4b11      	ldr	r3, [pc, #68]	; (6010 <configure_hr+0xec>)
    5fcc:	4798      	blx	r3
	
	// Enable HR sensor
	printf("\r\nEnabling HR sensor: \r\n");
    5fce:	481e      	ldr	r0, [pc, #120]	; (6048 <configure_hr+0x124>)
    5fd0:	4b12      	ldr	r3, [pc, #72]	; (601c <configure_hr+0xf8>)
    5fd2:	4798      	blx	r3
	enable_hr_sensor();
    5fd4:	4b1d      	ldr	r3, [pc, #116]	; (604c <configure_hr+0x128>)
    5fd6:	4798      	blx	r3
	mdelay(1000);
    5fd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5fdc:	4b0c      	ldr	r3, [pc, #48]	; (6010 <configure_hr+0xec>)
    5fde:	4798      	blx	r3
	
// 	// Enable algorithm
	printf("\r\nEnabling algorithm: \r\n");
    5fe0:	481b      	ldr	r0, [pc, #108]	; (6050 <configure_hr+0x12c>)
    5fe2:	4b0e      	ldr	r3, [pc, #56]	; (601c <configure_hr+0xf8>)
    5fe4:	4798      	blx	r3
	enable_algo();
    5fe6:	4b1b      	ldr	r3, [pc, #108]	; (6054 <configure_hr+0x130>)
    5fe8:	4798      	blx	r3
	
	// Configure algorithm samples
	printf("\r\nConfiguring algorithm samples: \r\n");
    5fea:	481b      	ldr	r0, [pc, #108]	; (6058 <configure_hr+0x134>)
    5fec:	4b0b      	ldr	r3, [pc, #44]	; (601c <configure_hr+0xf8>)
    5fee:	4798      	blx	r3
	algo_config_read();
    5ff0:	4b1a      	ldr	r3, [pc, #104]	; (605c <configure_hr+0x138>)
    5ff2:	4798      	blx	r3
	
	mdelay(1000);
    5ff4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5ff8:	4b05      	ldr	r3, [pc, #20]	; (6010 <configure_hr+0xec>)
    5ffa:	4798      	blx	r3
	
	printf("\r\n********** INITIALIZATION COMPLETE **********\r\n");
    5ffc:	4818      	ldr	r0, [pc, #96]	; (6060 <configure_hr+0x13c>)
    5ffe:	4b07      	ldr	r3, [pc, #28]	; (601c <configure_hr+0xf8>)
    6000:	4798      	blx	r3
}
    6002:	bf00      	nop
    6004:	bd80      	pop	{r7, pc}
    6006:	bf00      	nop
    6008:	000050c3 	.word	0x000050c3
    600c:	000051b1 	.word	0x000051b1
    6010:	000055f1 	.word	0x000055f1
    6014:	00004fc1 	.word	0x00004fc1
    6018:	0000c05c 	.word	0x0000c05c
    601c:	00008f79 	.word	0x00008f79
    6020:	0000c090 	.word	0x0000c090
    6024:	00005725 	.word	0x00005725
    6028:	0000c0a8 	.word	0x0000c0a8
    602c:	00005801 	.word	0x00005801
    6030:	0000c0c4 	.word	0x0000c0c4
    6034:	000058e9 	.word	0x000058e9
    6038:	0000c0e0 	.word	0x0000c0e0
    603c:	000059c1 	.word	0x000059c1
    6040:	0000c0f8 	.word	0x0000c0f8
    6044:	00005a99 	.word	0x00005a99
    6048:	0000c10c 	.word	0x0000c10c
    604c:	00005b71 	.word	0x00005b71
    6050:	0000c128 	.word	0x0000c128
    6054:	00005c49 	.word	0x00005c49
    6058:	0000c144 	.word	0x0000c144
    605c:	00005d21 	.word	0x00005d21
    6060:	0000c168 	.word	0x0000c168

00006064 <configure_buttons>:
void button_2_callback(void);
void button_3_callback(void);
void configure_buttons(void);

void configure_buttons(void)
{
    6064:	b580      	push	{r7, lr}
    6066:	af00      	add	r7, sp, #0
	// setup SW1 pin
	ioport_set_pin_dir(SW1_PIN, IOPORT_DIR_INPUT);
    6068:	2100      	movs	r1, #0
    606a:	2040      	movs	r0, #64	; 0x40
    606c:	4b17      	ldr	r3, [pc, #92]	; (60cc <configure_buttons+0x68>)
    606e:	4798      	blx	r3
	ioport_set_pin_mode(SW1_PIN, IOPORT_MODE_PULLDOWN);
    6070:	2110      	movs	r1, #16
    6072:	2040      	movs	r0, #64	; 0x40
    6074:	4b16      	ldr	r3, [pc, #88]	; (60d0 <configure_buttons+0x6c>)
    6076:	4798      	blx	r3
	gpio_enable_pin_interrupt(SW1_PIN);
    6078:	2040      	movs	r0, #64	; 0x40
    607a:	4b16      	ldr	r3, [pc, #88]	; (60d4 <configure_buttons+0x70>)
    607c:	4798      	blx	r3
	gpio_set_pin_callback(SW1_PIN, button_1_callback, 1);
    607e:	2201      	movs	r2, #1
    6080:	4915      	ldr	r1, [pc, #84]	; (60d8 <configure_buttons+0x74>)
    6082:	2040      	movs	r0, #64	; 0x40
    6084:	4b15      	ldr	r3, [pc, #84]	; (60dc <configure_buttons+0x78>)
    6086:	4798      	blx	r3
	
	// setup SW2 pin
	ioport_set_pin_dir(SW2_PIN, IOPORT_DIR_INPUT);
    6088:	2100      	movs	r1, #0
    608a:	2041      	movs	r0, #65	; 0x41
    608c:	4b0f      	ldr	r3, [pc, #60]	; (60cc <configure_buttons+0x68>)
    608e:	4798      	blx	r3
	ioport_set_pin_mode(SW2_PIN, IOPORT_MODE_PULLDOWN);
    6090:	2110      	movs	r1, #16
    6092:	2041      	movs	r0, #65	; 0x41
    6094:	4b0e      	ldr	r3, [pc, #56]	; (60d0 <configure_buttons+0x6c>)
    6096:	4798      	blx	r3
	gpio_enable_pin_interrupt(SW2_PIN);
    6098:	2041      	movs	r0, #65	; 0x41
    609a:	4b0e      	ldr	r3, [pc, #56]	; (60d4 <configure_buttons+0x70>)
    609c:	4798      	blx	r3
	gpio_set_pin_callback(SW2_PIN, button_2_callback, 1);
    609e:	2201      	movs	r2, #1
    60a0:	490f      	ldr	r1, [pc, #60]	; (60e0 <configure_buttons+0x7c>)
    60a2:	2041      	movs	r0, #65	; 0x41
    60a4:	4b0d      	ldr	r3, [pc, #52]	; (60dc <configure_buttons+0x78>)
    60a6:	4798      	blx	r3
	
	// setup SW3 pin
	ioport_set_pin_dir(SW3_PIN, IOPORT_DIR_INPUT);
    60a8:	2100      	movs	r1, #0
    60aa:	2059      	movs	r0, #89	; 0x59
    60ac:	4b07      	ldr	r3, [pc, #28]	; (60cc <configure_buttons+0x68>)
    60ae:	4798      	blx	r3
	ioport_set_pin_mode(SW3_PIN, IOPORT_MODE_PULLDOWN);
    60b0:	2110      	movs	r1, #16
    60b2:	2059      	movs	r0, #89	; 0x59
    60b4:	4b06      	ldr	r3, [pc, #24]	; (60d0 <configure_buttons+0x6c>)
    60b6:	4798      	blx	r3
	gpio_enable_pin_interrupt(SW3_PIN);
    60b8:	2059      	movs	r0, #89	; 0x59
    60ba:	4b06      	ldr	r3, [pc, #24]	; (60d4 <configure_buttons+0x70>)
    60bc:	4798      	blx	r3
	gpio_set_pin_callback(SW3_PIN, button_3_callback, 1);
    60be:	2201      	movs	r2, #1
    60c0:	4908      	ldr	r1, [pc, #32]	; (60e4 <configure_buttons+0x80>)
    60c2:	2059      	movs	r0, #89	; 0x59
    60c4:	4b05      	ldr	r3, [pc, #20]	; (60dc <configure_buttons+0x78>)
    60c6:	4798      	blx	r3
}
    60c8:	bf00      	nop
    60ca:	bd80      	pop	{r7, pc}
    60cc:	000050c3 	.word	0x000050c3
    60d0:	00004fc1 	.word	0x00004fc1
    60d4:	000052c5 	.word	0x000052c5
    60d8:	000060e9 	.word	0x000060e9
    60dc:	00001c0d 	.word	0x00001c0d
    60e0:	000061a1 	.word	0x000061a1
    60e4:	000061f5 	.word	0x000061f5

000060e8 <button_1_callback>:


// Controls watch state
void button_1_callback()
{	
    60e8:	b580      	push	{r7, lr}
    60ea:	af00      	add	r7, sp, #0
	// if SW1 is low (falling edge)
	if (ioport_get_pin_level(SW1_PIN) == GPIO_INPUT_LEVEL_LOW)
    60ec:	2040      	movs	r0, #64	; 0x40
    60ee:	4b22      	ldr	r3, [pc, #136]	; (6178 <button_1_callback+0x90>)
    60f0:	4798      	blx	r3
    60f2:	4603      	mov	r3, r0
    60f4:	f083 0301 	eor.w	r3, r3, #1
    60f8:	b2db      	uxtb	r3, r3
    60fa:	2b00      	cmp	r3, #0
    60fc:	d039      	beq.n	6172 <button_1_callback+0x8a>
	{
		// clear any previous LCD text
		c42412a_clear_all();
    60fe:	4b1f      	ldr	r3, [pc, #124]	; (617c <button_1_callback+0x94>)
    6100:	4798      	blx	r3
		
		switch(watchState) {
    6102:	4b1f      	ldr	r3, [pc, #124]	; (6180 <button_1_callback+0x98>)
    6104:	781b      	ldrb	r3, [r3, #0]
    6106:	2b01      	cmp	r3, #1
    6108:	d017      	beq.n	613a <button_1_callback+0x52>
    610a:	2b02      	cmp	r3, #2
    610c:	d01f      	beq.n	614e <button_1_callback+0x66>
    610e:	2b00      	cmp	r3, #0
    6110:	d000      	beq.n	6114 <button_1_callback+0x2c>
				watchState = RUNNING;
				printf("Watch state: %d\r\n", watchState);
				break;
			};
	}
}
    6112:	e02e      	b.n	6172 <button_1_callback+0x8a>
				c42412a_clear_text();				
    6114:	4b1b      	ldr	r3, [pc, #108]	; (6184 <button_1_callback+0x9c>)
    6116:	4798      	blx	r3
				watchState = RUNNING;
    6118:	4b19      	ldr	r3, [pc, #100]	; (6180 <button_1_callback+0x98>)
    611a:	2201      	movs	r2, #1
    611c:	701a      	strb	r2, [r3, #0]
				pressTime = ticks;
    611e:	4b1a      	ldr	r3, [pc, #104]	; (6188 <button_1_callback+0xa0>)
    6120:	681b      	ldr	r3, [r3, #0]
    6122:	4a1a      	ldr	r2, [pc, #104]	; (618c <button_1_callback+0xa4>)
    6124:	6013      	str	r3, [r2, #0]
				prevTime = 0;
    6126:	4b1a      	ldr	r3, [pc, #104]	; (6190 <button_1_callback+0xa8>)
    6128:	2200      	movs	r2, #0
    612a:	601a      	str	r2, [r3, #0]
				printf("Watch state: %d\r\n", watchState);
    612c:	4b14      	ldr	r3, [pc, #80]	; (6180 <button_1_callback+0x98>)
    612e:	781b      	ldrb	r3, [r3, #0]
    6130:	4619      	mov	r1, r3
    6132:	4818      	ldr	r0, [pc, #96]	; (6194 <button_1_callback+0xac>)
    6134:	4b18      	ldr	r3, [pc, #96]	; (6198 <button_1_callback+0xb0>)
    6136:	4798      	blx	r3
				break;
    6138:	e01b      	b.n	6172 <button_1_callback+0x8a>
				watchState = PAUSED;
    613a:	4b11      	ldr	r3, [pc, #68]	; (6180 <button_1_callback+0x98>)
    613c:	2202      	movs	r2, #2
    613e:	701a      	strb	r2, [r3, #0]
				printf("Watch state: %d\r\n", watchState);
    6140:	4b0f      	ldr	r3, [pc, #60]	; (6180 <button_1_callback+0x98>)
    6142:	781b      	ldrb	r3, [r3, #0]
    6144:	4619      	mov	r1, r3
    6146:	4813      	ldr	r0, [pc, #76]	; (6194 <button_1_callback+0xac>)
    6148:	4b13      	ldr	r3, [pc, #76]	; (6198 <button_1_callback+0xb0>)
    614a:	4798      	blx	r3
				break;
    614c:	e011      	b.n	6172 <button_1_callback+0x8a>
				pressTime = ticks;
    614e:	4b0e      	ldr	r3, [pc, #56]	; (6188 <button_1_callback+0xa0>)
    6150:	681b      	ldr	r3, [r3, #0]
    6152:	4a0e      	ldr	r2, [pc, #56]	; (618c <button_1_callback+0xa4>)
    6154:	6013      	str	r3, [r2, #0]
				prevTime = curTime;			
    6156:	4b11      	ldr	r3, [pc, #68]	; (619c <button_1_callback+0xb4>)
    6158:	681b      	ldr	r3, [r3, #0]
    615a:	4a0d      	ldr	r2, [pc, #52]	; (6190 <button_1_callback+0xa8>)
    615c:	6013      	str	r3, [r2, #0]
				watchState = RUNNING;
    615e:	4b08      	ldr	r3, [pc, #32]	; (6180 <button_1_callback+0x98>)
    6160:	2201      	movs	r2, #1
    6162:	701a      	strb	r2, [r3, #0]
				printf("Watch state: %d\r\n", watchState);
    6164:	4b06      	ldr	r3, [pc, #24]	; (6180 <button_1_callback+0x98>)
    6166:	781b      	ldrb	r3, [r3, #0]
    6168:	4619      	mov	r1, r3
    616a:	480a      	ldr	r0, [pc, #40]	; (6194 <button_1_callback+0xac>)
    616c:	4b0a      	ldr	r3, [pc, #40]	; (6198 <button_1_callback+0xb0>)
    616e:	4798      	blx	r3
				break;
    6170:	bf00      	nop
}
    6172:	bf00      	nop
    6174:	bd80      	pop	{r7, pc}
    6176:	bf00      	nop
    6178:	00005237 	.word	0x00005237
    617c:	000018a5 	.word	0x000018a5
    6180:	20000350 	.word	0x20000350
    6184:	000018f1 	.word	0x000018f1
    6188:	20000360 	.word	0x20000360
    618c:	20000358 	.word	0x20000358
    6190:	2000035c 	.word	0x2000035c
    6194:	0000c19c 	.word	0x0000c19c
    6198:	00008f79 	.word	0x00008f79
    619c:	20000354 	.word	0x20000354

000061a0 <button_2_callback>:


// switches state to DONE
void button_2_callback()
{
    61a0:	b580      	push	{r7, lr}
    61a2:	af00      	add	r7, sp, #0
	
	// if SW2 is low
	if (ioport_get_pin_level(SW2_PIN) == GPIO_INPUT_LEVEL_LOW)
    61a4:	2041      	movs	r0, #65	; 0x41
    61a6:	4b0e      	ldr	r3, [pc, #56]	; (61e0 <button_2_callback+0x40>)
    61a8:	4798      	blx	r3
    61aa:	4603      	mov	r3, r0
    61ac:	f083 0301 	eor.w	r3, r3, #1
    61b0:	b2db      	uxtb	r3, r3
    61b2:	2b00      	cmp	r3, #0
    61b4:	d012      	beq.n	61dc <button_2_callback+0x3c>
	{
		c42412a_clear_all();
    61b6:	4b0b      	ldr	r3, [pc, #44]	; (61e4 <button_2_callback+0x44>)
    61b8:	4798      	blx	r3
		// switch state to DONE if it is paused or running
		if (watchState == RUNNING || watchState == PAUSED) {			
    61ba:	4b0b      	ldr	r3, [pc, #44]	; (61e8 <button_2_callback+0x48>)
    61bc:	781b      	ldrb	r3, [r3, #0]
    61be:	2b01      	cmp	r3, #1
    61c0:	d003      	beq.n	61ca <button_2_callback+0x2a>
    61c2:	4b09      	ldr	r3, [pc, #36]	; (61e8 <button_2_callback+0x48>)
    61c4:	781b      	ldrb	r3, [r3, #0]
    61c6:	2b02      	cmp	r3, #2
    61c8:	d108      	bne.n	61dc <button_2_callback+0x3c>
			watchState = DONE;
    61ca:	4b07      	ldr	r3, [pc, #28]	; (61e8 <button_2_callback+0x48>)
    61cc:	2203      	movs	r2, #3
    61ce:	701a      	strb	r2, [r3, #0]
			printf("Watch state: %d\r\n", watchState);
    61d0:	4b05      	ldr	r3, [pc, #20]	; (61e8 <button_2_callback+0x48>)
    61d2:	781b      	ldrb	r3, [r3, #0]
    61d4:	4619      	mov	r1, r3
    61d6:	4805      	ldr	r0, [pc, #20]	; (61ec <button_2_callback+0x4c>)
    61d8:	4b05      	ldr	r3, [pc, #20]	; (61f0 <button_2_callback+0x50>)
    61da:	4798      	blx	r3
		}
	}
}
    61dc:	bf00      	nop
    61de:	bd80      	pop	{r7, pc}
    61e0:	00005237 	.word	0x00005237
    61e4:	000018a5 	.word	0x000018a5
    61e8:	20000350 	.word	0x20000350
    61ec:	0000c19c 	.word	0x0000c19c
    61f0:	00008f79 	.word	0x00008f79

000061f4 <button_3_callback>:

// controls display state
void button_3_callback() {
    61f4:	b580      	push	{r7, lr}
    61f6:	af00      	add	r7, sp, #0
	// if state is running or paused
	if (ioport_get_pin_level(SW3_PIN) == GPIO_INPUT_LEVEL_LOW && watchState != IDLE && watchState != DONE) {
    61f8:	2059      	movs	r0, #89	; 0x59
    61fa:	4b20      	ldr	r3, [pc, #128]	; (627c <button_3_callback+0x88>)
    61fc:	4798      	blx	r3
    61fe:	4603      	mov	r3, r0
    6200:	f083 0301 	eor.w	r3, r3, #1
    6204:	b2db      	uxtb	r3, r3
    6206:	2b00      	cmp	r3, #0
    6208:	d036      	beq.n	6278 <button_3_callback+0x84>
    620a:	4b1d      	ldr	r3, [pc, #116]	; (6280 <button_3_callback+0x8c>)
    620c:	781b      	ldrb	r3, [r3, #0]
    620e:	2b00      	cmp	r3, #0
    6210:	d032      	beq.n	6278 <button_3_callback+0x84>
    6212:	4b1b      	ldr	r3, [pc, #108]	; (6280 <button_3_callback+0x8c>)
    6214:	781b      	ldrb	r3, [r3, #0]
    6216:	2b03      	cmp	r3, #3
    6218:	d02e      	beq.n	6278 <button_3_callback+0x84>
		
		// clear previous input
		c42412a_clear_all();
    621a:	4b1a      	ldr	r3, [pc, #104]	; (6284 <button_3_callback+0x90>)
    621c:	4798      	blx	r3
		c42412a_clear_icon(C42412A_ICON_COLON);
    621e:	2101      	movs	r1, #1
    6220:	2003      	movs	r0, #3
    6222:	4b19      	ldr	r3, [pc, #100]	; (6288 <button_3_callback+0x94>)
    6224:	4798      	blx	r3
		
		switch (displayState) {
    6226:	4b19      	ldr	r3, [pc, #100]	; (628c <button_3_callback+0x98>)
    6228:	781b      	ldrb	r3, [r3, #0]
    622a:	2b01      	cmp	r3, #1
    622c:	d00e      	beq.n	624c <button_3_callback+0x58>
    622e:	2b02      	cmp	r3, #2
    6230:	d018      	beq.n	6264 <button_3_callback+0x70>
    6232:	2b00      	cmp	r3, #0
    6234:	d000      	beq.n	6238 <button_3_callback+0x44>
				printf("Display state: %d\r\n", displayState);
				displayState = TIMER;
				break;
		}
	} 
}
    6236:	e01f      	b.n	6278 <button_3_callback+0x84>
				printf("Display state: %d\r\n", displayState);
    6238:	4b14      	ldr	r3, [pc, #80]	; (628c <button_3_callback+0x98>)
    623a:	781b      	ldrb	r3, [r3, #0]
    623c:	4619      	mov	r1, r3
    623e:	4814      	ldr	r0, [pc, #80]	; (6290 <button_3_callback+0x9c>)
    6240:	4b14      	ldr	r3, [pc, #80]	; (6294 <button_3_callback+0xa0>)
    6242:	4798      	blx	r3
				displayState = HR;
    6244:	4b11      	ldr	r3, [pc, #68]	; (628c <button_3_callback+0x98>)
    6246:	2201      	movs	r2, #1
    6248:	701a      	strb	r2, [r3, #0]
				break;
    624a:	e015      	b.n	6278 <button_3_callback+0x84>
				printf("Display state: %d\r\n", displayState);
    624c:	4b0f      	ldr	r3, [pc, #60]	; (628c <button_3_callback+0x98>)
    624e:	781b      	ldrb	r3, [r3, #0]
    6250:	4619      	mov	r1, r3
    6252:	480f      	ldr	r0, [pc, #60]	; (6290 <button_3_callback+0x9c>)
    6254:	4b0f      	ldr	r3, [pc, #60]	; (6294 <button_3_callback+0xa0>)
    6256:	4798      	blx	r3
				c42412a_clear_text();
    6258:	4b0f      	ldr	r3, [pc, #60]	; (6298 <button_3_callback+0xa4>)
    625a:	4798      	blx	r3
				displayState = GPS;
    625c:	4b0b      	ldr	r3, [pc, #44]	; (628c <button_3_callback+0x98>)
    625e:	2202      	movs	r2, #2
    6260:	701a      	strb	r2, [r3, #0]
				break;
    6262:	e009      	b.n	6278 <button_3_callback+0x84>
				printf("Display state: %d\r\n", displayState);
    6264:	4b09      	ldr	r3, [pc, #36]	; (628c <button_3_callback+0x98>)
    6266:	781b      	ldrb	r3, [r3, #0]
    6268:	4619      	mov	r1, r3
    626a:	4809      	ldr	r0, [pc, #36]	; (6290 <button_3_callback+0x9c>)
    626c:	4b09      	ldr	r3, [pc, #36]	; (6294 <button_3_callback+0xa0>)
    626e:	4798      	blx	r3
				displayState = TIMER;
    6270:	4b06      	ldr	r3, [pc, #24]	; (628c <button_3_callback+0x98>)
    6272:	2200      	movs	r2, #0
    6274:	701a      	strb	r2, [r3, #0]
				break;
    6276:	bf00      	nop
}
    6278:	bf00      	nop
    627a:	bd80      	pop	{r7, pc}
    627c:	00005237 	.word	0x00005237
    6280:	20000350 	.word	0x20000350
    6284:	000018a5 	.word	0x000018a5
    6288:	00001965 	.word	0x00001965
    628c:	20000351 	.word	0x20000351
    6290:	0000c1b0 	.word	0x0000c1b0
    6294:	00008f79 	.word	0x00008f79
    6298:	000018f1 	.word	0x000018f1

0000629c <configure_gps>:
// function prototypes
void configure_gps(void);
void read_gps_data(int*, int*);

void configure_gps(void)
{
    629c:	b580      	push	{r7, lr}
    629e:	b098      	sub	sp, #96	; 0x60
    62a0:	af00      	add	r7, sp, #0
		
	
	// 9-byte array to initially write to the module
	uint8_t data_buf_tx9[9] = {0xB5, 0x62, 0x06, 0x00, 0x01, 0x00, 0x00, 0x07, 0x21};
    62a2:	4a3d      	ldr	r2, [pc, #244]	; (6398 <configure_gps+0xfc>)
    62a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
    62a8:	ca07      	ldmia	r2, {r0, r1, r2}
    62aa:	c303      	stmia	r3!, {r0, r1}
    62ac:	701a      	strb	r2, [r3, #0]
		
	// Initialize write package
	twi_package_t packet_tx;
	packet_tx.chip = 0x42;   // chip ID for GPS module
    62ae:	2342      	movs	r3, #66	; 0x42
    62b0:	643b      	str	r3, [r7, #64]	; 0x40
	packet_tx.addr[0] = 0;
    62b2:	2300      	movs	r3, #0
    62b4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	packet_tx.addr[1] = 0;
    62b8:	2300      	movs	r3, #0
    62ba:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	packet_tx.addr_length = 0;
    62be:	2300      	movs	r3, #0
    62c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	packet_tx.buffer = (void *) &data_buf_tx9;  // initial array to send
    62c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
    62c8:	64bb      	str	r3, [r7, #72]	; 0x48
	packet_tx.length = 0;
    62ca:	2300      	movs	r3, #0
    62cc:	64fb      	str	r3, [r7, #76]	; 0x4c
	packet_tx.high_speed = 0;
    62ce:	2300      	movs	r3, #0
    62d0:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	packet_tx.high_speed_code = 0;
    62d4:	2300      	movs	r3, #0
    62d6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	packet_tx.ten_bit = 0;
    62da:	2300      	movs	r3, #0
    62dc:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	
	// first execute "empty" write statement
	twi_master_write(TWIM3, &packet_tx);
    62e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
    62e4:	4619      	mov	r1, r3
    62e6:	482d      	ldr	r0, [pc, #180]	; (639c <configure_gps+0x100>)
    62e8:	4b2d      	ldr	r3, [pc, #180]	; (63a0 <configure_gps+0x104>)
    62ea:	4798      	blx	r3
	mdelay(50);
    62ec:	2032      	movs	r0, #50	; 0x32
    62ee:	4b2d      	ldr	r3, [pc, #180]	; (63a4 <configure_gps+0x108>)
    62f0:	4798      	blx	r3

	
	// set length to 9 so array can be sent
	packet_tx.length = 9;
    62f2:	2309      	movs	r3, #9
    62f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	// send array
	twi_master_write(TWIM3, &packet_tx);
    62f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
    62fa:	4619      	mov	r1, r3
    62fc:	4827      	ldr	r0, [pc, #156]	; (639c <configure_gps+0x100>)
    62fe:	4b28      	ldr	r3, [pc, #160]	; (63a0 <configure_gps+0x104>)
    6300:	4798      	blx	r3
	mdelay(50);
    6302:	2032      	movs	r0, #50	; 0x32
    6304:	4b27      	ldr	r3, [pc, #156]	; (63a4 <configure_gps+0x108>)
    6306:	4798      	blx	r3
	
	// 2-byte package to read
	uint8_t data_buf_rx2[2];
	twi_package_t packet_rx;
	packet_rx.chip = 0x42;   // chip address for temp sensor
    6308:	2342      	movs	r3, #66	; 0x42
    630a:	62bb      	str	r3, [r7, #40]	; 0x28
	packet_rx.addr[0] = 0xFD; // "write" byte for start-restart command
    630c:	23fd      	movs	r3, #253	; 0xfd
    630e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	packet_rx.addr[1] = 0;
    6312:	2300      	movs	r3, #0
    6314:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	packet_rx.addr_length = 1;
    6318:	2301      	movs	r3, #1
    631a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	packet_rx.buffer = (void *) &data_buf_rx2;
    631e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    6322:	633b      	str	r3, [r7, #48]	; 0x30
	packet_rx.length = 2;
    6324:	2302      	movs	r3, #2
    6326:	637b      	str	r3, [r7, #52]	; 0x34
	packet_rx.high_speed = 0;
    6328:	2300      	movs	r3, #0
    632a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	packet_rx.high_speed_code = 0;
    632e:	2300      	movs	r3, #0
    6330:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	packet_rx.ten_bit = 0;
    6334:	2300      	movs	r3, #0
    6336:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

	
	// read 2-byte array
	twi_master_read(TWIM3, &packet_rx);
    633a:	f107 0328 	add.w	r3, r7, #40	; 0x28
    633e:	4619      	mov	r1, r3
    6340:	4816      	ldr	r0, [pc, #88]	; (639c <configure_gps+0x100>)
    6342:	4b19      	ldr	r3, [pc, #100]	; (63a8 <configure_gps+0x10c>)
    6344:	4798      	blx	r3
	mdelay(50);
    6346:	2032      	movs	r0, #50	; 0x32
    6348:	4b16      	ldr	r3, [pc, #88]	; (63a4 <configure_gps+0x108>)
    634a:	4798      	blx	r3
	// 32-byte and 6-byte arrays into which to read, function does not work unless this data is read
	uint8_t data_buf_rx32[32];
	uint8_t data_buf_rx6[6];
	
	// read 32-byte and 6-byte arrays
	packet_rx.buffer = (void*) data_buf_rx32;
    634c:	f107 0308 	add.w	r3, r7, #8
    6350:	633b      	str	r3, [r7, #48]	; 0x30
	packet_rx.length = 32;
    6352:	2320      	movs	r3, #32
    6354:	637b      	str	r3, [r7, #52]	; 0x34
	packet_rx.addr[0] = 0;
    6356:	2300      	movs	r3, #0
    6358:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	packet_rx.addr_length = 0;
    635c:	2300      	movs	r3, #0
    635e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	twi_master_read(TWIM3, &packet_rx);
    6362:	f107 0328 	add.w	r3, r7, #40	; 0x28
    6366:	4619      	mov	r1, r3
    6368:	480c      	ldr	r0, [pc, #48]	; (639c <configure_gps+0x100>)
    636a:	4b0f      	ldr	r3, [pc, #60]	; (63a8 <configure_gps+0x10c>)
    636c:	4798      	blx	r3
	mdelay(50);
    636e:	2032      	movs	r0, #50	; 0x32
    6370:	4b0c      	ldr	r3, [pc, #48]	; (63a4 <configure_gps+0x108>)
    6372:	4798      	blx	r3
	packet_rx.buffer = data_buf_rx6;
    6374:	463b      	mov	r3, r7
    6376:	633b      	str	r3, [r7, #48]	; 0x30
	packet_rx.length = 6;
    6378:	2306      	movs	r3, #6
    637a:	637b      	str	r3, [r7, #52]	; 0x34
	twi_master_read(TWIM3, &packet_rx);
    637c:	f107 0328 	add.w	r3, r7, #40	; 0x28
    6380:	4619      	mov	r1, r3
    6382:	4806      	ldr	r0, [pc, #24]	; (639c <configure_gps+0x100>)
    6384:	4b08      	ldr	r3, [pc, #32]	; (63a8 <configure_gps+0x10c>)
    6386:	4798      	blx	r3
	mdelay(50);
    6388:	2032      	movs	r0, #50	; 0x32
    638a:	4b06      	ldr	r3, [pc, #24]	; (63a4 <configure_gps+0x108>)
    638c:	4798      	blx	r3
	
	
}
    638e:	bf00      	nop
    6390:	3760      	adds	r7, #96	; 0x60
    6392:	46bd      	mov	sp, r7
    6394:	bd80      	pop	{r7, pc}
    6396:	bf00      	nop
    6398:	0000c1c4 	.word	0x0000c1c4
    639c:	4007c000 	.word	0x4007c000
    63a0:	00001189 	.word	0x00001189
    63a4:	000055f1 	.word	0x000055f1
    63a8:	00000c99 	.word	0x00000c99

000063ac <read_gps_data>:

void read_gps_data(int* lat, int* lon)
{
    63ac:	b580      	push	{r7, lr}
    63ae:	b0ac      	sub	sp, #176	; 0xb0
    63b0:	af00      	add	r7, sp, #0
    63b2:	6078      	str	r0, [r7, #4]
    63b4:	6039      	str	r1, [r7, #0]
	bool timeoutReached = false;
    63b6:	2300      	movs	r3, #0
    63b8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	// Send following 8-byte array to initialize data transfer
	uint8_t data_buf_tx8[8] = {0xB5, 0x62, 0x01, 0x07, 0x00, 0x00, 0x08, 0x19};
    63bc:	4a78      	ldr	r2, [pc, #480]	; (65a0 <read_gps_data+0x1f4>)
    63be:	f107 0398 	add.w	r3, r7, #152	; 0x98
    63c2:	e892 0003 	ldmia.w	r2, {r0, r1}
    63c6:	e883 0003 	stmia.w	r3, {r0, r1}
		
	// Address of register containing number of bytes available
	uint8_t data_bux_tx1 = 0xFD;
    63ca:	23fd      	movs	r3, #253	; 0xfd
    63cc:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
	twi_package_t packet_tx;
	packet_tx.chip = 0x42;
    63d0:	2342      	movs	r3, #66	; 0x42
    63d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	packet_tx.addr[0] = 0;
    63d6:	2300      	movs	r3, #0
    63d8:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
	packet_tx.addr[1] = 0;
    63dc:	2300      	movs	r3, #0
    63de:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
	packet_tx.addr_length = 0;
    63e2:	2300      	movs	r3, #0
    63e4:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	packet_tx.buffer = (void *) &data_buf_tx8;
    63e8:	f107 0398 	add.w	r3, r7, #152	; 0x98
    63ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	packet_tx.length = 8;
    63f0:	2308      	movs	r3, #8
    63f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	packet_tx.high_speed = 0;
    63f6:	2300      	movs	r3, #0
    63f8:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
	packet_tx.high_speed_code = 0;
    63fc:	2300      	movs	r3, #0
    63fe:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
	packet_tx.ten_bit = 0;
    6402:	2300      	movs	r3, #0
    6404:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	
	// Send 8-byte array
	twi_master_write(TWIM3, &packet_tx);
    6408:	f107 0384 	add.w	r3, r7, #132	; 0x84
    640c:	4619      	mov	r1, r3
    640e:	4865      	ldr	r0, [pc, #404]	; (65a4 <read_gps_data+0x1f8>)
    6410:	4b65      	ldr	r3, [pc, #404]	; (65a8 <read_gps_data+0x1fc>)
    6412:	4798      	blx	r3
	
	// set up packet to read number of bytes available
	uint8_t data_buf_rx2[2];
	data_buf_rx2[1] = 0x00;
    6414:	2300      	movs	r3, #0
    6416:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
	twi_package_t packet_rx;
	packet_rx.chip = 0x42; 
    641a:	2342      	movs	r3, #66	; 0x42
    641c:	66fb      	str	r3, [r7, #108]	; 0x6c
	packet_rx.addr[0] = 0xFD;
    641e:	23fd      	movs	r3, #253	; 0xfd
    6420:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	packet_rx.addr[1] = 0;
    6424:	2300      	movs	r3, #0
    6426:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
	packet_rx.addr_length = 1;
    642a:	2301      	movs	r3, #1
    642c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	packet_rx.buffer = (void *) &data_buf_rx2;
    6430:	f107 0380 	add.w	r3, r7, #128	; 0x80
    6434:	677b      	str	r3, [r7, #116]	; 0x74
	packet_rx.length = 2;
    6436:	2302      	movs	r3, #2
    6438:	67bb      	str	r3, [r7, #120]	; 0x78
	packet_rx.high_speed = 0;
    643a:	2300      	movs	r3, #0
    643c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	packet_rx.high_speed_code = 0;
    6440:	2300      	movs	r3, #0
    6442:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	packet_rx.ten_bit = 0;
    6446:	2300      	movs	r3, #0
    6448:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	
	// Check number of bytes available until device returns 100 (64 in hex)
	uint32_t start = ticks;
    644c:	4b57      	ldr	r3, [pc, #348]	; (65ac <read_gps_data+0x200>)
    644e:	681b      	ldr	r3, [r3, #0]
    6450:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	do {
		twi_master_read(TWIM3, &packet_rx);
    6454:	f107 036c 	add.w	r3, r7, #108	; 0x6c
    6458:	4619      	mov	r1, r3
    645a:	4852      	ldr	r0, [pc, #328]	; (65a4 <read_gps_data+0x1f8>)
    645c:	4b54      	ldr	r3, [pc, #336]	; (65b0 <read_gps_data+0x204>)
    645e:	4798      	blx	r3
		mdelay(100);
    6460:	2064      	movs	r0, #100	; 0x64
    6462:	4b54      	ldr	r3, [pc, #336]	; (65b4 <read_gps_data+0x208>)
    6464:	4798      	blx	r3
		if (ticks - start >= 1000) {
    6466:	4b51      	ldr	r3, [pc, #324]	; (65ac <read_gps_data+0x200>)
    6468:	681a      	ldr	r2, [r3, #0]
    646a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
    646e:	1ad3      	subs	r3, r2, r3
    6470:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    6474:	d307      	bcc.n	6486 <read_gps_data+0xda>
			timeoutReached = true;
    6476:	2301      	movs	r3, #1
    6478:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			c42412a_show_icon(C42412A_ICON_WLESS_LEVEL_0);
    647c:	2103      	movs	r1, #3
    647e:	2003      	movs	r0, #3
    6480:	4b4d      	ldr	r3, [pc, #308]	; (65b8 <read_gps_data+0x20c>)
    6482:	4798      	blx	r3
			break;
    6484:	e003      	b.n	648e <read_gps_data+0xe2>

		}
	} while(data_buf_rx2[1] != 0x64);
    6486:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
    648a:	2b64      	cmp	r3, #100	; 0x64
    648c:	d1e2      	bne.n	6454 <read_gps_data+0xa8>
	if (!timeoutReached) {
    648e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
    6492:	f083 0301 	eor.w	r3, r3, #1
    6496:	b2db      	uxtb	r3, r3
    6498:	2b00      	cmp	r3, #0
    649a:	d003      	beq.n	64a4 <read_gps_data+0xf8>
		c42412a_clear_icon(C42412A_ICON_WLESS_LEVEL_0);
    649c:	2103      	movs	r1, #3
    649e:	2003      	movs	r0, #3
    64a0:	4b46      	ldr	r3, [pc, #280]	; (65bc <read_gps_data+0x210>)
    64a2:	4798      	blx	r3
	uint8_t data_buf_rx32_2[32];
	uint8_t data_buf_rx32_3[32];
	uint8_t data_buf_rx4[4];
	
	// read data into 4 arrays
	packet_rx.buffer = (void*) data_buf_rx32_1;
    64a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    64a8:	677b      	str	r3, [r7, #116]	; 0x74
	packet_rx.length = 32;
    64aa:	2320      	movs	r3, #32
    64ac:	67bb      	str	r3, [r7, #120]	; 0x78
	packet_rx.addr_length = 0;
    64ae:	2300      	movs	r3, #0
    64b0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	twi_master_read(TWIM3, &packet_rx);
    64b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
    64b8:	4619      	mov	r1, r3
    64ba:	483a      	ldr	r0, [pc, #232]	; (65a4 <read_gps_data+0x1f8>)
    64bc:	4b3c      	ldr	r3, [pc, #240]	; (65b0 <read_gps_data+0x204>)
    64be:	4798      	blx	r3
/*	mdelay(50);*/
	packet_rx.buffer = data_buf_rx32_2;
    64c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    64c4:	677b      	str	r3, [r7, #116]	; 0x74
	twi_master_read(TWIM3, &packet_rx);
    64c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
    64ca:	4619      	mov	r1, r3
    64cc:	4835      	ldr	r0, [pc, #212]	; (65a4 <read_gps_data+0x1f8>)
    64ce:	4b38      	ldr	r3, [pc, #224]	; (65b0 <read_gps_data+0x204>)
    64d0:	4798      	blx	r3
/*	mdelay(50);*/
	packet_rx.buffer = data_buf_rx32_3;
    64d2:	f107 030c 	add.w	r3, r7, #12
    64d6:	677b      	str	r3, [r7, #116]	; 0x74
	twi_master_read(TWIM3, &packet_rx);
    64d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
    64dc:	4619      	mov	r1, r3
    64de:	4831      	ldr	r0, [pc, #196]	; (65a4 <read_gps_data+0x1f8>)
    64e0:	4b33      	ldr	r3, [pc, #204]	; (65b0 <read_gps_data+0x204>)
    64e2:	4798      	blx	r3
/*	mdelay(50);*/
	packet_rx.buffer = data_buf_rx4;
    64e4:	f107 0308 	add.w	r3, r7, #8
    64e8:	677b      	str	r3, [r7, #116]	; 0x74
	packet_rx.length = 4;
    64ea:	2304      	movs	r3, #4
    64ec:	67bb      	str	r3, [r7, #120]	; 0x78
	twi_master_read(TWIM3, &packet_rx);
    64ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
    64f2:	4619      	mov	r1, r3
    64f4:	482b      	ldr	r0, [pc, #172]	; (65a4 <read_gps_data+0x1f8>)
    64f6:	4b2e      	ldr	r3, [pc, #184]	; (65b0 <read_gps_data+0x204>)
    64f8:	4798      	blx	r3
/*	mdelay(50);*/
	
	// longitude = last two bytes from first array (MSB's) and first two from second array (LSB's)
	uint32_t lon_int = 0;
    64fa:	2300      	movs	r3, #0
    64fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	lon_int |= (uint32_t)data_buf_rx32_1[30];
    6500:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
    6504:	461a      	mov	r2, r3
    6506:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
    650a:	4313      	orrs	r3, r2
    650c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	lon_int |= (uint32_t)data_buf_rx32_1[31] << 8;
    6510:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
    6514:	021b      	lsls	r3, r3, #8
    6516:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
    651a:	4313      	orrs	r3, r2
    651c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	lon_int |= (uint32_t)data_buf_rx32_2[0] << 16;
    6520:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    6524:	041b      	lsls	r3, r3, #16
    6526:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
    652a:	4313      	orrs	r3, r2
    652c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	lon_int |= (uint32_t)data_buf_rx32_2[1] << 24;
    6530:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    6534:	061b      	lsls	r3, r3, #24
    6536:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
    653a:	4313      	orrs	r3, r2
    653c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	
	// latitude = bytes 2 through 5 from 2nd array
	uint32_t lat_int = 0;
    6540:	2300      	movs	r3, #0
    6542:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	lat_int |= (uint32_t)data_buf_rx32_2[2];
    6546:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    654a:	461a      	mov	r2, r3
    654c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    6550:	4313      	orrs	r3, r2
    6552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	lat_int |= (uint32_t)data_buf_rx32_2[3] << 8;
    6556:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    655a:	021b      	lsls	r3, r3, #8
    655c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
    6560:	4313      	orrs	r3, r2
    6562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	lat_int |= (uint32_t)data_buf_rx32_2[4] << 16;
    6566:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    656a:	041b      	lsls	r3, r3, #16
    656c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
    6570:	4313      	orrs	r3, r2
    6572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	lat_int |= (uint32_t)data_buf_rx32_2[5] << 24;
    6576:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
    657a:	061b      	lsls	r3, r3, #24
    657c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
    6580:	4313      	orrs	r3, r2
    6582:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	
	// convert to signed int
	*lon = (int)lon_int;
    6586:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
    658a:	683b      	ldr	r3, [r7, #0]
    658c:	601a      	str	r2, [r3, #0]
	*lat = (int)lat_int;
    658e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
    6592:	687b      	ldr	r3, [r7, #4]
    6594:	601a      	str	r2, [r3, #0]
}
    6596:	bf00      	nop
    6598:	37b0      	adds	r7, #176	; 0xb0
    659a:	46bd      	mov	sp, r7
    659c:	bd80      	pop	{r7, pc}
    659e:	bf00      	nop
    65a0:	0000c1d0 	.word	0x0000c1d0
    65a4:	4007c000 	.word	0x4007c000
    65a8:	00001189 	.word	0x00001189
    65ac:	20000360 	.word	0x20000360
    65b0:	00000c99 	.word	0x00000c99
    65b4:	000055f1 	.word	0x000055f1
    65b8:	00001925 	.word	0x00001925
    65bc:	00001965 	.word	0x00001965

000065c0 <main>:
#include "utilities_hr.h"
#include "interrupt_buttons.h"
#include "utilities_gps.h"

int main (void)
{
    65c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    65c4:	b0ab      	sub	sp, #172	; 0xac
    65c6:	af00      	add	r7, sp, #0
	// initialize board
	board_init();
    65c8:	4b31      	ldr	r3, [pc, #196]	; (6690 <main+0xd0>)
    65ca:	4798      	blx	r3
	
	// initialize and configure sysclk
	sysclk_init();	
    65cc:	4b31      	ldr	r3, [pc, #196]	; (6694 <main+0xd4>)
    65ce:	4798      	blx	r3
	SysTick_Config(sysclk_get_cpu_hz() / 1000);
    65d0:	4b31      	ldr	r3, [pc, #196]	; (6698 <main+0xd8>)
    65d2:	4798      	blx	r3
    65d4:	4602      	mov	r2, r0
    65d6:	4b31      	ldr	r3, [pc, #196]	; (669c <main+0xdc>)
    65d8:	fba3 2302 	umull	r2, r3, r3, r2
    65dc:	099b      	lsrs	r3, r3, #6
    65de:	4618      	mov	r0, r3
    65e0:	4b2f      	ldr	r3, [pc, #188]	; (66a0 <main+0xe0>)
    65e2:	4798      	blx	r3
	
	// initialize lcd
	c42412a_init();
    65e4:	4b2f      	ldr	r3, [pc, #188]	; (66a4 <main+0xe4>)
    65e6:	4798      	blx	r3
	
	// initialize EIC
	//eic_setup();
	
	// configure Putty console output
	configure_console();
    65e8:	4b2f      	ldr	r3, [pc, #188]	; (66a8 <main+0xe8>)
    65ea:	4798      	blx	r3
	// set up twim, gps and HR sensor
	configure_twim();
    65ec:	4b2f      	ldr	r3, [pc, #188]	; (66ac <main+0xec>)
    65ee:	4798      	blx	r3
	configure_gps();
    65f0:	4b2f      	ldr	r3, [pc, #188]	; (66b0 <main+0xf0>)
    65f2:	4798      	blx	r3
	mdelay(20);
    65f4:	2014      	movs	r0, #20
    65f6:	4b2f      	ldr	r3, [pc, #188]	; (66b4 <main+0xf4>)
    65f8:	4798      	blx	r3
	configure_hr();
    65fa:	4b2f      	ldr	r3, [pc, #188]	; (66b8 <main+0xf8>)
    65fc:	4798      	blx	r3
	
	configure_buttons();
    65fe:	4b2f      	ldr	r3, [pc, #188]	; (66bc <main+0xfc>)
    6600:	4798      	blx	r3
	// highest priority for systick IRQ
	NVIC_SetPriority(SysTick_IRQn, 1);
    6602:	2101      	movs	r1, #1
    6604:	f04f 30ff 	mov.w	r0, #4294967295
    6608:	4b2d      	ldr	r3, [pc, #180]	; (66c0 <main+0x100>)
    660a:	4798      	blx	r3
	NVIC_SetPriority(TWIM3_IRQn, 2);
    660c:	2102      	movs	r1, #2
    660e:	204e      	movs	r0, #78	; 0x4e
    6610:	4b2b      	ldr	r3, [pc, #172]	; (66c0 <main+0x100>)
    6612:	4798      	blx	r3
	
	// second highest priority for GPIO IRQ
	NVIC_SetPriority(GPIO_0_IRQn, 3);
    6614:	2103      	movs	r1, #3
    6616:	2019      	movs	r0, #25
    6618:	4b29      	ldr	r3, [pc, #164]	; (66c0 <main+0x100>)
    661a:	4798      	blx	r3
	NVIC_SetPriority(GPIO_1_IRQn, 4);
    661c:	2104      	movs	r1, #4
    661e:	201a      	movs	r0, #26
    6620:	4b27      	ldr	r3, [pc, #156]	; (66c0 <main+0x100>)
    6622:	4798      	blx	r3
	NVIC_SetPriority(GPIO_2_IRQn, 5);
    6624:	2105      	movs	r1, #5
    6626:	201b      	movs	r0, #27
    6628:	4b25      	ldr	r3, [pc, #148]	; (66c0 <main+0x100>)
    662a:	4798      	blx	r3
	
	// distance between current and previous lat and lon points
	double distance;
	
	// total distance traveled
	double totalDist = 0.0;
    662c:	f04f 0300 	mov.w	r3, #0
    6630:	f04f 0400 	mov.w	r4, #0
    6634:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
	
	// value to convert degrees to radians
	double p = 0.017453292519943295;
    6638:	a413      	add	r4, pc, #76	; (adr r4, 6688 <main+0xc8>)
    663a:	e9d4 3400 	ldrd	r3, r4, [r4]
    663e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	
	// heartrate value
	int hr;
	
	// indicates whether current run is the first run
	bool firstRun = true;
    6642:	2301      	movs	r3, #1
    6644:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	
	// minute and second values
	uint32_t minutes, seconds;
	
	
	c42412a_show_text("START");		
    6648:	481e      	ldr	r0, [pc, #120]	; (66c4 <main+0x104>)
    664a:	4b1f      	ldr	r3, [pc, #124]	; (66c8 <main+0x108>)
    664c:	4798      	blx	r3
	
	
	
	while(1) 
	{
			if (watchState == RUNNING || watchState == PAUSED) {
    664e:	4b1f      	ldr	r3, [pc, #124]	; (66cc <main+0x10c>)
    6650:	781b      	ldrb	r3, [r3, #0]
    6652:	2b01      	cmp	r3, #1
    6654:	d003      	beq.n	665e <main+0x9e>
    6656:	4b1d      	ldr	r3, [pc, #116]	; (66cc <main+0x10c>)
    6658:	781b      	ldrb	r3, [r3, #0]
    665a:	2b02      	cmp	r3, #2
    665c:	d109      	bne.n	6672 <main+0xb2>
				// read HR data
				hr = read_data();
    665e:	4b1c      	ldr	r3, [pc, #112]	; (66d0 <main+0x110>)
    6660:	4798      	blx	r3
    6662:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
				// read GPS data
 				read_gps_data(&curLat, &curLon);
    6666:	463a      	mov	r2, r7
    6668:	1d3b      	adds	r3, r7, #4
    666a:	4611      	mov	r1, r2
    666c:	4618      	mov	r0, r3
    666e:	4b19      	ldr	r3, [pc, #100]	; (66d4 <main+0x114>)
    6670:	4798      	blx	r3
			}
		
			switch (watchState) {
    6672:	4b16      	ldr	r3, [pc, #88]	; (66cc <main+0x10c>)
    6674:	781b      	ldrb	r3, [r3, #0]
    6676:	2b02      	cmp	r3, #2
    6678:	f000 8218 	beq.w	6aac <main+0x4ec>
    667c:	2b03      	cmp	r3, #3
    667e:	f000 820d 	beq.w	6a9c <main+0x4dc>
    6682:	2b01      	cmp	r3, #1
    6684:	d028      	beq.n	66d8 <main+0x118>
							break;
					}
	
					break;
				default:
					break;
    6686:	e256      	b.n	6b36 <main+0x576>
    6688:	a2529d39 	.word	0xa2529d39
    668c:	3f91df46 	.word	0x3f91df46
    6690:	000044c1 	.word	0x000044c1
    6694:	0000411d 	.word	0x0000411d
    6698:	00004fad 	.word	0x00004fad
    669c:	10624dd3 	.word	0x10624dd3
    66a0:	00004ec9 	.word	0x00004ec9
    66a4:	00001839 	.word	0x00001839
    66a8:	0000561d 	.word	0x0000561d
    66ac:	0000564d 	.word	0x0000564d
    66b0:	0000629d 	.word	0x0000629d
    66b4:	000055f1 	.word	0x000055f1
    66b8:	00005f25 	.word	0x00005f25
    66bc:	00006065 	.word	0x00006065
    66c0:	00004e75 	.word	0x00004e75
    66c4:	0000c1d8 	.word	0x0000c1d8
    66c8:	000018cd 	.word	0x000018cd
    66cc:	20000350 	.word	0x20000350
    66d0:	00005df9 	.word	0x00005df9
    66d4:	000063ad 	.word	0x000063ad
					curLonF = (double)curLon / 10000000.0;
    66d8:	683a      	ldr	r2, [r7, #0]
    66da:	4b99      	ldr	r3, [pc, #612]	; (6940 <main+0x380>)
    66dc:	4610      	mov	r0, r2
    66de:	4798      	blx	r3
    66e0:	4c98      	ldr	r4, [pc, #608]	; (6944 <main+0x384>)
    66e2:	a395      	add	r3, pc, #596	; (adr r3, 6938 <main+0x378>)
    66e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    66e8:	47a0      	blx	r4
    66ea:	4603      	mov	r3, r0
    66ec:	460c      	mov	r4, r1
    66ee:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
					curLatF = (double)curLat / 10000000.0;
    66f2:	687a      	ldr	r2, [r7, #4]
    66f4:	4b92      	ldr	r3, [pc, #584]	; (6940 <main+0x380>)
    66f6:	4610      	mov	r0, r2
    66f8:	4798      	blx	r3
    66fa:	4c92      	ldr	r4, [pc, #584]	; (6944 <main+0x384>)
    66fc:	a38e      	add	r3, pc, #568	; (adr r3, 6938 <main+0x378>)
    66fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    6702:	47a0      	blx	r4
    6704:	4603      	mov	r3, r0
    6706:	460c      	mov	r4, r1
    6708:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
					prevLonF = (double)prevLon / 10000000.0;
    670c:	4b8c      	ldr	r3, [pc, #560]	; (6940 <main+0x380>)
    670e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
    6712:	4798      	blx	r3
    6714:	4c8b      	ldr	r4, [pc, #556]	; (6944 <main+0x384>)
    6716:	a388      	add	r3, pc, #544	; (adr r3, 6938 <main+0x378>)
    6718:	e9d3 2300 	ldrd	r2, r3, [r3]
    671c:	47a0      	blx	r4
    671e:	4603      	mov	r3, r0
    6720:	460c      	mov	r4, r1
    6722:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
					prevLatF = (double)prevLat / 10000000.0;
    6726:	4b86      	ldr	r3, [pc, #536]	; (6940 <main+0x380>)
    6728:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
    672c:	4798      	blx	r3
    672e:	4c85      	ldr	r4, [pc, #532]	; (6944 <main+0x384>)
    6730:	a381      	add	r3, pc, #516	; (adr r3, 6938 <main+0x378>)
    6732:	e9d3 2300 	ldrd	r2, r3, [r3]
    6736:	47a0      	blx	r4
    6738:	4603      	mov	r3, r0
    673a:	460c      	mov	r4, r1
    673c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
					printf("lat: %d\r\n", curLat);
    6740:	687b      	ldr	r3, [r7, #4]
    6742:	4619      	mov	r1, r3
    6744:	4880      	ldr	r0, [pc, #512]	; (6948 <main+0x388>)
    6746:	4b81      	ldr	r3, [pc, #516]	; (694c <main+0x38c>)
    6748:	4798      	blx	r3
					printf("lon: %d\r\n", curLon);
    674a:	683b      	ldr	r3, [r7, #0]
    674c:	4619      	mov	r1, r3
    674e:	4880      	ldr	r0, [pc, #512]	; (6950 <main+0x390>)
    6750:	4b7e      	ldr	r3, [pc, #504]	; (694c <main+0x38c>)
    6752:	4798      	blx	r3
					changeLat = abs(curLat - prevLat);
    6754:	687a      	ldr	r2, [r7, #4]
    6756:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
    675a:	1ad3      	subs	r3, r2, r3
    675c:	2b00      	cmp	r3, #0
    675e:	bfb8      	it	lt
    6760:	425b      	neglt	r3, r3
    6762:	65fb      	str	r3, [r7, #92]	; 0x5c
					changeLon = abs(curLon - prevLon);
    6764:	683a      	ldr	r2, [r7, #0]
    6766:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    676a:	1ad3      	subs	r3, r2, r3
    676c:	2b00      	cmp	r3, #0
    676e:	bfb8      	it	lt
    6770:	425b      	neglt	r3, r3
    6772:	65bb      	str	r3, [r7, #88]	; 0x58
					changeLatF = (double)changeLat / 10000000.0;
    6774:	4b72      	ldr	r3, [pc, #456]	; (6940 <main+0x380>)
    6776:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    6778:	4798      	blx	r3
    677a:	4c72      	ldr	r4, [pc, #456]	; (6944 <main+0x384>)
    677c:	a36e      	add	r3, pc, #440	; (adr r3, 6938 <main+0x378>)
    677e:	e9d3 2300 	ldrd	r2, r3, [r3]
    6782:	47a0      	blx	r4
    6784:	4603      	mov	r3, r0
    6786:	460c      	mov	r4, r1
    6788:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
					changeLonF = (double)changeLon / 10000000.0;
    678c:	4b6c      	ldr	r3, [pc, #432]	; (6940 <main+0x380>)
    678e:	6db8      	ldr	r0, [r7, #88]	; 0x58
    6790:	4798      	blx	r3
    6792:	4c6c      	ldr	r4, [pc, #432]	; (6944 <main+0x384>)
    6794:	a368      	add	r3, pc, #416	; (adr r3, 6938 <main+0x378>)
    6796:	e9d3 2300 	ldrd	r2, r3, [r3]
    679a:	47a0      	blx	r4
    679c:	4603      	mov	r3, r0
    679e:	460c      	mov	r4, r1
    67a0:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
					curLonR = p * curLonF;
    67a4:	4c6b      	ldr	r4, [pc, #428]	; (6954 <main+0x394>)
    67a6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    67aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
    67ae:	47a0      	blx	r4
    67b0:	4603      	mov	r3, r0
    67b2:	460c      	mov	r4, r1
    67b4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
					curLatR = p * curLatF;
    67b8:	4c66      	ldr	r4, [pc, #408]	; (6954 <main+0x394>)
    67ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
    67be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
    67c2:	47a0      	blx	r4
    67c4:	4603      	mov	r3, r0
    67c6:	460c      	mov	r4, r1
    67c8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
					prevLonR = p * prevLonF;
    67cc:	4c61      	ldr	r4, [pc, #388]	; (6954 <main+0x394>)
    67ce:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
    67d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
    67d6:	47a0      	blx	r4
    67d8:	4603      	mov	r3, r0
    67da:	460c      	mov	r4, r1
    67dc:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
					prevLatR = p * prevLatF;
    67e0:	4c5c      	ldr	r4, [pc, #368]	; (6954 <main+0x394>)
    67e2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    67e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
    67ea:	47a0      	blx	r4
    67ec:	4603      	mov	r3, r0
    67ee:	460c      	mov	r4, r1
    67f0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
					changeLatR = p * changeLatF;
    67f4:	4c57      	ldr	r4, [pc, #348]	; (6954 <main+0x394>)
    67f6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    67fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
    67fe:	47a0      	blx	r4
    6800:	4603      	mov	r3, r0
    6802:	460c      	mov	r4, r1
    6804:	e9c7 3408 	strd	r3, r4, [r7, #32]
					changeLonR = p * changeLonF;
    6808:	4c52      	ldr	r4, [pc, #328]	; (6954 <main+0x394>)
    680a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
    680e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
    6812:	47a0      	blx	r4
    6814:	4603      	mov	r3, r0
    6816:	460c      	mov	r4, r1
    6818:	e9c7 3406 	strd	r3, r4, [r7, #24]
					printf("changeLat: %d\r\n", changeLat);
    681c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    681e:	484e      	ldr	r0, [pc, #312]	; (6958 <main+0x398>)
    6820:	4b4a      	ldr	r3, [pc, #296]	; (694c <main+0x38c>)
    6822:	4798      	blx	r3
					a = 0.5 - cos((changeLatR))/2.0 + cos(prevLatR) * cos(curLatR) * ((1-cos(changeLonR))/2);
    6824:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    6828:	4b4c      	ldr	r3, [pc, #304]	; (695c <main+0x39c>)
    682a:	4798      	blx	r3
    682c:	4c45      	ldr	r4, [pc, #276]	; (6944 <main+0x384>)
    682e:	f04f 0200 	mov.w	r2, #0
    6832:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6836:	47a0      	blx	r4
    6838:	4603      	mov	r3, r0
    683a:	460c      	mov	r4, r1
    683c:	461a      	mov	r2, r3
    683e:	4623      	mov	r3, r4
    6840:	4c47      	ldr	r4, [pc, #284]	; (6960 <main+0x3a0>)
    6842:	f04f 0000 	mov.w	r0, #0
    6846:	4947      	ldr	r1, [pc, #284]	; (6964 <main+0x3a4>)
    6848:	47a0      	blx	r4
    684a:	4603      	mov	r3, r0
    684c:	460c      	mov	r4, r1
    684e:	461d      	mov	r5, r3
    6850:	4626      	mov	r6, r4
    6852:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
    6856:	4b41      	ldr	r3, [pc, #260]	; (695c <main+0x39c>)
    6858:	4798      	blx	r3
    685a:	4680      	mov	r8, r0
    685c:	4689      	mov	r9, r1
    685e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
    6862:	4b3e      	ldr	r3, [pc, #248]	; (695c <main+0x39c>)
    6864:	4798      	blx	r3
    6866:	4602      	mov	r2, r0
    6868:	460b      	mov	r3, r1
    686a:	4c3a      	ldr	r4, [pc, #232]	; (6954 <main+0x394>)
    686c:	4640      	mov	r0, r8
    686e:	4649      	mov	r1, r9
    6870:	47a0      	blx	r4
    6872:	4603      	mov	r3, r0
    6874:	460c      	mov	r4, r1
    6876:	4698      	mov	r8, r3
    6878:	46a1      	mov	r9, r4
    687a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
    687e:	4b37      	ldr	r3, [pc, #220]	; (695c <main+0x39c>)
    6880:	4798      	blx	r3
    6882:	4602      	mov	r2, r0
    6884:	460b      	mov	r3, r1
    6886:	4c36      	ldr	r4, [pc, #216]	; (6960 <main+0x3a0>)
    6888:	f04f 0000 	mov.w	r0, #0
    688c:	4936      	ldr	r1, [pc, #216]	; (6968 <main+0x3a8>)
    688e:	47a0      	blx	r4
    6890:	4603      	mov	r3, r0
    6892:	460c      	mov	r4, r1
    6894:	4618      	mov	r0, r3
    6896:	4621      	mov	r1, r4
    6898:	4c2a      	ldr	r4, [pc, #168]	; (6944 <main+0x384>)
    689a:	f04f 0200 	mov.w	r2, #0
    689e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    68a2:	47a0      	blx	r4
    68a4:	4603      	mov	r3, r0
    68a6:	460c      	mov	r4, r1
    68a8:	461a      	mov	r2, r3
    68aa:	4623      	mov	r3, r4
    68ac:	4c29      	ldr	r4, [pc, #164]	; (6954 <main+0x394>)
    68ae:	4640      	mov	r0, r8
    68b0:	4649      	mov	r1, r9
    68b2:	47a0      	blx	r4
    68b4:	4603      	mov	r3, r0
    68b6:	460c      	mov	r4, r1
    68b8:	461a      	mov	r2, r3
    68ba:	4623      	mov	r3, r4
    68bc:	4c2b      	ldr	r4, [pc, #172]	; (696c <main+0x3ac>)
    68be:	4628      	mov	r0, r5
    68c0:	4631      	mov	r1, r6
    68c2:	47a0      	blx	r4
    68c4:	4603      	mov	r3, r0
    68c6:	460c      	mov	r4, r1
    68c8:	e9c7 3404 	strd	r3, r4, [r7, #16]
					printf("a: %3.5f\r\n", a);
    68cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    68d0:	4827      	ldr	r0, [pc, #156]	; (6970 <main+0x3b0>)
    68d2:	491e      	ldr	r1, [pc, #120]	; (694c <main+0x38c>)
    68d4:	4788      	blx	r1
					distance = 2 * radius * asin(sqrt(a));
    68d6:	4b27      	ldr	r3, [pc, #156]	; (6974 <main+0x3b4>)
    68d8:	681b      	ldr	r3, [r3, #0]
    68da:	005a      	lsls	r2, r3, #1
    68dc:	4b26      	ldr	r3, [pc, #152]	; (6978 <main+0x3b8>)
    68de:	4610      	mov	r0, r2
    68e0:	4798      	blx	r3
    68e2:	4605      	mov	r5, r0
    68e4:	460e      	mov	r6, r1
    68e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    68ea:	4b24      	ldr	r3, [pc, #144]	; (697c <main+0x3bc>)
    68ec:	4798      	blx	r3
    68ee:	4603      	mov	r3, r0
    68f0:	460c      	mov	r4, r1
    68f2:	4618      	mov	r0, r3
    68f4:	4621      	mov	r1, r4
    68f6:	4b22      	ldr	r3, [pc, #136]	; (6980 <main+0x3c0>)
    68f8:	4798      	blx	r3
    68fa:	4602      	mov	r2, r0
    68fc:	460b      	mov	r3, r1
    68fe:	4c15      	ldr	r4, [pc, #84]	; (6954 <main+0x394>)
    6900:	4628      	mov	r0, r5
    6902:	4631      	mov	r1, r6
    6904:	47a0      	blx	r4
    6906:	4603      	mov	r3, r0
    6908:	460c      	mov	r4, r1
    690a:	e9c7 3402 	strd	r3, r4, [r7, #8]
					printf("Distance: %3.2f\r\n", distance);
    690e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    6912:	481c      	ldr	r0, [pc, #112]	; (6984 <main+0x3c4>)
    6914:	490d      	ldr	r1, [pc, #52]	; (694c <main+0x38c>)
    6916:	4788      	blx	r1
					prevLat = curLat;
    6918:	687b      	ldr	r3, [r7, #4]
    691a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					prevLon = curLon;
    691e:	683b      	ldr	r3, [r7, #0]
    6920:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					if (firstRun) {
    6924:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
    6928:	2b00      	cmp	r3, #0
    692a:	d02d      	beq.n	6988 <main+0x3c8>
						firstRun = false;
    692c:	2300      	movs	r3, #0
    692e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
    6932:	e033      	b.n	699c <main+0x3dc>
    6934:	f3af 8000 	nop.w
    6938:	00000000 	.word	0x00000000
    693c:	416312d0 	.word	0x416312d0
    6940:	0000b579 	.word	0x0000b579
    6944:	0000b899 	.word	0x0000b899
    6948:	0000c1e0 	.word	0x0000c1e0
    694c:	00008f79 	.word	0x00008f79
    6950:	0000c1ec 	.word	0x0000c1ec
    6954:	0000b645 	.word	0x0000b645
    6958:	0000c1f8 	.word	0x0000c1f8
    695c:	00006ba5 	.word	0x00006ba5
    6960:	0000b2dd 	.word	0x0000b2dd
    6964:	3fe00000 	.word	0x3fe00000
    6968:	3ff00000 	.word	0x3ff00000
    696c:	0000b2e1 	.word	0x0000b2e1
    6970:	0000c208 	.word	0x0000c208
    6974:	2000007c 	.word	0x2000007c
    6978:	0000b559 	.word	0x0000b559
    697c:	00006ce1 	.word	0x00006ce1
    6980:	00006c39 	.word	0x00006c39
    6984:	0000c214 	.word	0x0000c214
						totalDist += distance;
    6988:	4c6d      	ldr	r4, [pc, #436]	; (6b40 <main+0x580>)
    698a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    698e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
    6992:	47a0      	blx	r4
    6994:	4603      	mov	r3, r0
    6996:	460c      	mov	r4, r1
    6998:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
					printf("Total distance: %10.10f\r\n", totalDist);
    699c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
    69a0:	4868      	ldr	r0, [pc, #416]	; (6b44 <main+0x584>)
    69a2:	4969      	ldr	r1, [pc, #420]	; (6b48 <main+0x588>)
    69a4:	4788      	blx	r1
					prevLat = curLat;
    69a6:	687b      	ldr	r3, [r7, #4]
    69a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					prevLon = curLon;
    69ac:	683b      	ldr	r3, [r7, #0]
    69ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					curTime = prevTime + (ticks - pressTime);
    69b2:	4b66      	ldr	r3, [pc, #408]	; (6b4c <main+0x58c>)
    69b4:	681a      	ldr	r2, [r3, #0]
    69b6:	4b66      	ldr	r3, [pc, #408]	; (6b50 <main+0x590>)
    69b8:	681b      	ldr	r3, [r3, #0]
    69ba:	1ad2      	subs	r2, r2, r3
    69bc:	4b65      	ldr	r3, [pc, #404]	; (6b54 <main+0x594>)
    69be:	681b      	ldr	r3, [r3, #0]
    69c0:	4413      	add	r3, r2
    69c2:	4a65      	ldr	r2, [pc, #404]	; (6b58 <main+0x598>)
    69c4:	6013      	str	r3, [r2, #0]
					minutes = (curTime / 1000) / 60.0;
    69c6:	4b64      	ldr	r3, [pc, #400]	; (6b58 <main+0x598>)
    69c8:	681b      	ldr	r3, [r3, #0]
    69ca:	4a64      	ldr	r2, [pc, #400]	; (6b5c <main+0x59c>)
    69cc:	fba2 2303 	umull	r2, r3, r2, r3
    69d0:	099a      	lsrs	r2, r3, #6
    69d2:	4b63      	ldr	r3, [pc, #396]	; (6b60 <main+0x5a0>)
    69d4:	4610      	mov	r0, r2
    69d6:	4798      	blx	r3
    69d8:	4c62      	ldr	r4, [pc, #392]	; (6b64 <main+0x5a4>)
    69da:	f04f 0200 	mov.w	r2, #0
    69de:	4b62      	ldr	r3, [pc, #392]	; (6b68 <main+0x5a8>)
    69e0:	47a0      	blx	r4
    69e2:	4603      	mov	r3, r0
    69e4:	460c      	mov	r4, r1
    69e6:	4619      	mov	r1, r3
    69e8:	4622      	mov	r2, r4
    69ea:	4b60      	ldr	r3, [pc, #384]	; (6b6c <main+0x5ac>)
    69ec:	4608      	mov	r0, r1
    69ee:	4611      	mov	r1, r2
    69f0:	4798      	blx	r3
    69f2:	4603      	mov	r3, r0
    69f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					seconds = (curTime / 1000) % 60;
    69f8:	4b57      	ldr	r3, [pc, #348]	; (6b58 <main+0x598>)
    69fa:	681b      	ldr	r3, [r3, #0]
    69fc:	4a57      	ldr	r2, [pc, #348]	; (6b5c <main+0x59c>)
    69fe:	fba2 2303 	umull	r2, r3, r2, r3
    6a02:	099a      	lsrs	r2, r3, #6
    6a04:	4b5a      	ldr	r3, [pc, #360]	; (6b70 <main+0x5b0>)
    6a06:	fba3 1302 	umull	r1, r3, r3, r2
    6a0a:	0959      	lsrs	r1, r3, #5
    6a0c:	460b      	mov	r3, r1
    6a0e:	011b      	lsls	r3, r3, #4
    6a10:	1a5b      	subs	r3, r3, r1
    6a12:	009b      	lsls	r3, r3, #2
    6a14:	1ad3      	subs	r3, r2, r3
    6a16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					switch (displayState) {
    6a1a:	4b56      	ldr	r3, [pc, #344]	; (6b74 <main+0x5b4>)
    6a1c:	781b      	ldrb	r3, [r3, #0]
    6a1e:	2b01      	cmp	r3, #1
    6a20:	d014      	beq.n	6a4c <main+0x48c>
    6a22:	2b02      	cmp	r3, #2
    6a24:	d021      	beq.n	6a6a <main+0x4aa>
    6a26:	2b00      	cmp	r3, #0
    6a28:	d000      	beq.n	6a2c <main+0x46c>
					break;
    6a2a:	e084      	b.n	6b36 <main+0x576>
							c42412a_show_numeric_dec(100*minutes + seconds);
    6a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
    6a30:	2264      	movs	r2, #100	; 0x64
    6a32:	fb02 f203 	mul.w	r2, r2, r3
    6a36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    6a3a:	4413      	add	r3, r2
    6a3c:	4618      	mov	r0, r3
    6a3e:	4b4e      	ldr	r3, [pc, #312]	; (6b78 <main+0x5b8>)
    6a40:	4798      	blx	r3
							c42412a_show_icon(C42412A_ICON_COLON);
    6a42:	2101      	movs	r1, #1
    6a44:	2003      	movs	r0, #3
    6a46:	4b4d      	ldr	r3, [pc, #308]	; (6b7c <main+0x5bc>)
    6a48:	4798      	blx	r3
							break;
    6a4a:	e026      	b.n	6a9a <main+0x4da>
							if (hr == 0) {
    6a4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    6a50:	2b00      	cmp	r3, #0
    6a52:	d103      	bne.n	6a5c <main+0x49c>
								c42412a_show_text("RDING");
    6a54:	484a      	ldr	r0, [pc, #296]	; (6b80 <main+0x5c0>)
    6a56:	4b4b      	ldr	r3, [pc, #300]	; (6b84 <main+0x5c4>)
    6a58:	4798      	blx	r3
							break;
    6a5a:	e01e      	b.n	6a9a <main+0x4da>
								c42412a_clear_text();
    6a5c:	4b4a      	ldr	r3, [pc, #296]	; (6b88 <main+0x5c8>)
    6a5e:	4798      	blx	r3
								c42412a_show_numeric_dec(hr);	
    6a60:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
    6a64:	4b44      	ldr	r3, [pc, #272]	; (6b78 <main+0x5b8>)
    6a66:	4798      	blx	r3
							break;
    6a68:	e017      	b.n	6a9a <main+0x4da>
							c42412a_show_numeric_dec((int)(totalDist * 100.0));
    6a6a:	4c48      	ldr	r4, [pc, #288]	; (6b8c <main+0x5cc>)
    6a6c:	f04f 0200 	mov.w	r2, #0
    6a70:	4b47      	ldr	r3, [pc, #284]	; (6b90 <main+0x5d0>)
    6a72:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
    6a76:	47a0      	blx	r4
    6a78:	4603      	mov	r3, r0
    6a7a:	460c      	mov	r4, r1
    6a7c:	4619      	mov	r1, r3
    6a7e:	4622      	mov	r2, r4
    6a80:	4b44      	ldr	r3, [pc, #272]	; (6b94 <main+0x5d4>)
    6a82:	4608      	mov	r0, r1
    6a84:	4611      	mov	r1, r2
    6a86:	4798      	blx	r3
    6a88:	4603      	mov	r3, r0
    6a8a:	4618      	mov	r0, r3
    6a8c:	4b3a      	ldr	r3, [pc, #232]	; (6b78 <main+0x5b8>)
    6a8e:	4798      	blx	r3
							c42412a_show_icon(C42412A_ICON_DOT_3);
    6a90:	210a      	movs	r1, #10
    6a92:	2003      	movs	r0, #3
    6a94:	4b39      	ldr	r3, [pc, #228]	; (6b7c <main+0x5bc>)
    6a96:	4798      	blx	r3
							break;
    6a98:	bf00      	nop
					break;
    6a9a:	e04c      	b.n	6b36 <main+0x576>
					c42412a_clear_icon(C42412A_ICON_COLON);
    6a9c:	2101      	movs	r1, #1
    6a9e:	2003      	movs	r0, #3
    6aa0:	4b3d      	ldr	r3, [pc, #244]	; (6b98 <main+0x5d8>)
    6aa2:	4798      	blx	r3
					c42412a_show_text("DONE");
    6aa4:	483d      	ldr	r0, [pc, #244]	; (6b9c <main+0x5dc>)
    6aa6:	4b37      	ldr	r3, [pc, #220]	; (6b84 <main+0x5c4>)
    6aa8:	4798      	blx	r3
					break;
    6aaa:	e044      	b.n	6b36 <main+0x576>
					switch (displayState) {
    6aac:	4b31      	ldr	r3, [pc, #196]	; (6b74 <main+0x5b4>)
    6aae:	781b      	ldrb	r3, [r3, #0]
    6ab0:	2b01      	cmp	r3, #1
    6ab2:	d014      	beq.n	6ade <main+0x51e>
    6ab4:	2b02      	cmp	r3, #2
    6ab6:	d025      	beq.n	6b04 <main+0x544>
    6ab8:	2b00      	cmp	r3, #0
    6aba:	d000      	beq.n	6abe <main+0x4fe>
					break;
    6abc:	e03a      	b.n	6b34 <main+0x574>
							c42412a_show_numeric_dec(100*minutes + seconds);
    6abe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
    6ac2:	2264      	movs	r2, #100	; 0x64
    6ac4:	fb02 f203 	mul.w	r2, r2, r3
    6ac8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    6acc:	4413      	add	r3, r2
    6ace:	4618      	mov	r0, r3
    6ad0:	4b29      	ldr	r3, [pc, #164]	; (6b78 <main+0x5b8>)
    6ad2:	4798      	blx	r3
							c42412a_show_icon(C42412A_ICON_COLON);
    6ad4:	2101      	movs	r1, #1
    6ad6:	2003      	movs	r0, #3
    6ad8:	4b28      	ldr	r3, [pc, #160]	; (6b7c <main+0x5bc>)
    6ada:	4798      	blx	r3
							break;
    6adc:	e02a      	b.n	6b34 <main+0x574>
							c42412a_clear_icon(C42412A_ICON_COLON);
    6ade:	2101      	movs	r1, #1
    6ae0:	2003      	movs	r0, #3
    6ae2:	4b2d      	ldr	r3, [pc, #180]	; (6b98 <main+0x5d8>)
    6ae4:	4798      	blx	r3
							if (hr == 0) {
    6ae6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    6aea:	2b00      	cmp	r3, #0
    6aec:	d103      	bne.n	6af6 <main+0x536>
								c42412a_show_text("RDING");
    6aee:	4824      	ldr	r0, [pc, #144]	; (6b80 <main+0x5c0>)
    6af0:	4b24      	ldr	r3, [pc, #144]	; (6b84 <main+0x5c4>)
    6af2:	4798      	blx	r3
							break;
    6af4:	e01e      	b.n	6b34 <main+0x574>
								c42412a_clear_text();
    6af6:	4b24      	ldr	r3, [pc, #144]	; (6b88 <main+0x5c8>)
    6af8:	4798      	blx	r3
								c42412a_show_numeric_dec(hr);
    6afa:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
    6afe:	4b1e      	ldr	r3, [pc, #120]	; (6b78 <main+0x5b8>)
    6b00:	4798      	blx	r3
							break;
    6b02:	e017      	b.n	6b34 <main+0x574>
							c42412a_show_numeric_dec((int)(totalDist * 100.0));
    6b04:	4c21      	ldr	r4, [pc, #132]	; (6b8c <main+0x5cc>)
    6b06:	f04f 0200 	mov.w	r2, #0
    6b0a:	4b21      	ldr	r3, [pc, #132]	; (6b90 <main+0x5d0>)
    6b0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
    6b10:	47a0      	blx	r4
    6b12:	4603      	mov	r3, r0
    6b14:	460c      	mov	r4, r1
    6b16:	4619      	mov	r1, r3
    6b18:	4622      	mov	r2, r4
    6b1a:	4b1e      	ldr	r3, [pc, #120]	; (6b94 <main+0x5d4>)
    6b1c:	4608      	mov	r0, r1
    6b1e:	4611      	mov	r1, r2
    6b20:	4798      	blx	r3
    6b22:	4603      	mov	r3, r0
    6b24:	4618      	mov	r0, r3
    6b26:	4b14      	ldr	r3, [pc, #80]	; (6b78 <main+0x5b8>)
    6b28:	4798      	blx	r3
							c42412a_show_icon(C42412A_ICON_DOT_3);;
    6b2a:	210a      	movs	r1, #10
    6b2c:	2003      	movs	r0, #3
    6b2e:	4b13      	ldr	r3, [pc, #76]	; (6b7c <main+0x5bc>)
    6b30:	4798      	blx	r3
							break;
    6b32:	bf00      	nop
					break;
    6b34:	bf00      	nop
			}
			mdelay(10);		
    6b36:	200a      	movs	r0, #10
    6b38:	4b19      	ldr	r3, [pc, #100]	; (6ba0 <main+0x5e0>)
    6b3a:	4798      	blx	r3
			if (watchState == RUNNING || watchState == PAUSED) {
    6b3c:	e587      	b.n	664e <main+0x8e>
    6b3e:	bf00      	nop
    6b40:	0000b2e1 	.word	0x0000b2e1
    6b44:	0000c228 	.word	0x0000c228
    6b48:	00008f79 	.word	0x00008f79
    6b4c:	20000360 	.word	0x20000360
    6b50:	20000358 	.word	0x20000358
    6b54:	2000035c 	.word	0x2000035c
    6b58:	20000354 	.word	0x20000354
    6b5c:	10624dd3 	.word	0x10624dd3
    6b60:	0000b559 	.word	0x0000b559
    6b64:	0000b899 	.word	0x0000b899
    6b68:	404e0000 	.word	0x404e0000
    6b6c:	0000bbf5 	.word	0x0000bbf5
    6b70:	88888889 	.word	0x88888889
    6b74:	20000351 	.word	0x20000351
    6b78:	0000198d 	.word	0x0000198d
    6b7c:	00001925 	.word	0x00001925
    6b80:	0000c244 	.word	0x0000c244
    6b84:	000018cd 	.word	0x000018cd
    6b88:	000018f1 	.word	0x000018f1
    6b8c:	0000b645 	.word	0x0000b645
    6b90:	40590000 	.word	0x40590000
    6b94:	0000bba5 	.word	0x0000bba5
    6b98:	00001965 	.word	0x00001965
    6b9c:	0000c24c 	.word	0x0000c24c
    6ba0:	000055f1 	.word	0x000055f1

00006ba4 <cos>:
    6ba4:	b530      	push	{r4, r5, lr}
    6ba6:	4a22      	ldr	r2, [pc, #136]	; (6c30 <cos+0x8c>)
    6ba8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    6bac:	4293      	cmp	r3, r2
    6bae:	b087      	sub	sp, #28
    6bb0:	dd1b      	ble.n	6bea <cos+0x46>
    6bb2:	4a20      	ldr	r2, [pc, #128]	; (6c34 <cos+0x90>)
    6bb4:	4293      	cmp	r3, r2
    6bb6:	dd05      	ble.n	6bc4 <cos+0x20>
    6bb8:	4602      	mov	r2, r0
    6bba:	460b      	mov	r3, r1
    6bbc:	f004 fb8e 	bl	b2dc <__aeabi_dsub>
    6bc0:	b007      	add	sp, #28
    6bc2:	bd30      	pop	{r4, r5, pc}
    6bc4:	aa02      	add	r2, sp, #8
    6bc6:	f000 fb23 	bl	7210 <__ieee754_rem_pio2>
    6bca:	f000 0303 	and.w	r3, r0, #3
    6bce:	2b01      	cmp	r3, #1
    6bd0:	d01a      	beq.n	6c08 <cos+0x64>
    6bd2:	2b02      	cmp	r3, #2
    6bd4:	d00f      	beq.n	6bf6 <cos+0x52>
    6bd6:	b31b      	cbz	r3, 6c20 <cos+0x7c>
    6bd8:	2401      	movs	r4, #1
    6bda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    6bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    6be2:	9400      	str	r4, [sp, #0]
    6be4:	f001 fb60 	bl	82a8 <__kernel_sin>
    6be8:	e7ea      	b.n	6bc0 <cos+0x1c>
    6bea:	2200      	movs	r2, #0
    6bec:	2300      	movs	r3, #0
    6bee:	f000 fdef 	bl	77d0 <__kernel_cos>
    6bf2:	b007      	add	sp, #28
    6bf4:	bd30      	pop	{r4, r5, pc}
    6bf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    6bfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    6bfe:	f000 fde7 	bl	77d0 <__kernel_cos>
    6c02:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    6c06:	e7db      	b.n	6bc0 <cos+0x1c>
    6c08:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    6c0c:	9300      	str	r3, [sp, #0]
    6c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    6c12:	4622      	mov	r2, r4
    6c14:	462b      	mov	r3, r5
    6c16:	f001 fb47 	bl	82a8 <__kernel_sin>
    6c1a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    6c1e:	e7cf      	b.n	6bc0 <cos+0x1c>
    6c20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    6c24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    6c28:	f000 fdd2 	bl	77d0 <__kernel_cos>
    6c2c:	e7c8      	b.n	6bc0 <cos+0x1c>
    6c2e:	bf00      	nop
    6c30:	3fe921fb 	.word	0x3fe921fb
    6c34:	7fefffff 	.word	0x7fefffff

00006c38 <asin>:
    6c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6c3c:	f8df 809c 	ldr.w	r8, [pc, #156]	; 6cdc <asin+0xa4>
    6c40:	b08b      	sub	sp, #44	; 0x2c
    6c42:	4604      	mov	r4, r0
    6c44:	460d      	mov	r5, r1
    6c46:	f000 f8ab 	bl	6da0 <__ieee754_asin>
    6c4a:	f998 3000 	ldrsb.w	r3, [r8]
    6c4e:	3301      	adds	r3, #1
    6c50:	4606      	mov	r6, r0
    6c52:	460f      	mov	r7, r1
    6c54:	d02b      	beq.n	6cae <asin+0x76>
    6c56:	4622      	mov	r2, r4
    6c58:	462b      	mov	r3, r5
    6c5a:	4620      	mov	r0, r4
    6c5c:	4629      	mov	r1, r5
    6c5e:	f004 ff8b 	bl	bb78 <__aeabi_dcmpun>
    6c62:	4681      	mov	r9, r0
    6c64:	bb18      	cbnz	r0, 6cae <asin+0x76>
    6c66:	4620      	mov	r0, r4
    6c68:	4629      	mov	r1, r5
    6c6a:	f001 fbd3 	bl	8414 <fabs>
    6c6e:	2200      	movs	r2, #0
    6c70:	4b17      	ldr	r3, [pc, #92]	; (6cd0 <asin+0x98>)
    6c72:	f004 ff77 	bl	bb64 <__aeabi_dcmpgt>
    6c76:	b1d0      	cbz	r0, 6cae <asin+0x76>
    6c78:	4b16      	ldr	r3, [pc, #88]	; (6cd4 <asin+0x9c>)
    6c7a:	4817      	ldr	r0, [pc, #92]	; (6cd8 <asin+0xa0>)
    6c7c:	f8cd 9020 	str.w	r9, [sp, #32]
    6c80:	2201      	movs	r2, #1
    6c82:	e88d 000c 	stmia.w	sp, {r2, r3}
    6c86:	e9cd 4504 	strd	r4, r5, [sp, #16]
    6c8a:	e9cd 4502 	strd	r4, r5, [sp, #8]
    6c8e:	f001 fc55 	bl	853c <nan>
    6c92:	f998 3000 	ldrsb.w	r3, [r8]
    6c96:	2b02      	cmp	r3, #2
    6c98:	e9cd 0106 	strd	r0, r1, [sp, #24]
    6c9c:	d00c      	beq.n	6cb8 <asin+0x80>
    6c9e:	4668      	mov	r0, sp
    6ca0:	f001 fc4a 	bl	8538 <matherr>
    6ca4:	b140      	cbz	r0, 6cb8 <asin+0x80>
    6ca6:	9b08      	ldr	r3, [sp, #32]
    6ca8:	b96b      	cbnz	r3, 6cc6 <asin+0x8e>
    6caa:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    6cae:	4630      	mov	r0, r6
    6cb0:	4639      	mov	r1, r7
    6cb2:	b00b      	add	sp, #44	; 0x2c
    6cb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6cb8:	f001 fccc 	bl	8654 <__errno>
    6cbc:	2321      	movs	r3, #33	; 0x21
    6cbe:	6003      	str	r3, [r0, #0]
    6cc0:	9b08      	ldr	r3, [sp, #32]
    6cc2:	2b00      	cmp	r3, #0
    6cc4:	d0f1      	beq.n	6caa <asin+0x72>
    6cc6:	f001 fcc5 	bl	8654 <__errno>
    6cca:	9b08      	ldr	r3, [sp, #32]
    6ccc:	6003      	str	r3, [r0, #0]
    6cce:	e7ec      	b.n	6caa <asin+0x72>
    6cd0:	3ff00000 	.word	0x3ff00000
    6cd4:	0000c254 	.word	0x0000c254
    6cd8:	0000c258 	.word	0x0000c258
    6cdc:	20000080 	.word	0x20000080

00006ce0 <sqrt>:
    6ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ce4:	b08b      	sub	sp, #44	; 0x2c
    6ce6:	4604      	mov	r4, r0
    6ce8:	460d      	mov	r5, r1
    6cea:	f000 fcb3 	bl	7654 <__ieee754_sqrt>
    6cee:	4b29      	ldr	r3, [pc, #164]	; (6d94 <sqrt+0xb4>)
    6cf0:	f993 a000 	ldrsb.w	sl, [r3]
    6cf4:	f1ba 3fff 	cmp.w	sl, #4294967295
    6cf8:	4606      	mov	r6, r0
    6cfa:	460f      	mov	r7, r1
    6cfc:	d012      	beq.n	6d24 <sqrt+0x44>
    6cfe:	4622      	mov	r2, r4
    6d00:	462b      	mov	r3, r5
    6d02:	4620      	mov	r0, r4
    6d04:	4629      	mov	r1, r5
    6d06:	f004 ff37 	bl	bb78 <__aeabi_dcmpun>
    6d0a:	4683      	mov	fp, r0
    6d0c:	b950      	cbnz	r0, 6d24 <sqrt+0x44>
    6d0e:	f04f 0800 	mov.w	r8, #0
    6d12:	f04f 0900 	mov.w	r9, #0
    6d16:	4642      	mov	r2, r8
    6d18:	464b      	mov	r3, r9
    6d1a:	4620      	mov	r0, r4
    6d1c:	4629      	mov	r1, r5
    6d1e:	f004 ff03 	bl	bb28 <__aeabi_dcmplt>
    6d22:	b920      	cbnz	r0, 6d2e <sqrt+0x4e>
    6d24:	4630      	mov	r0, r6
    6d26:	4639      	mov	r1, r7
    6d28:	b00b      	add	sp, #44	; 0x2c
    6d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d2e:	4b1a      	ldr	r3, [pc, #104]	; (6d98 <sqrt+0xb8>)
    6d30:	f8cd b020 	str.w	fp, [sp, #32]
    6d34:	2201      	movs	r2, #1
    6d36:	e9cd 4504 	strd	r4, r5, [sp, #16]
    6d3a:	e9cd 4502 	strd	r4, r5, [sp, #8]
    6d3e:	e88d 000c 	stmia.w	sp, {r2, r3}
    6d42:	f1ba 0f00 	cmp.w	sl, #0
    6d46:	d017      	beq.n	6d78 <sqrt+0x98>
    6d48:	4642      	mov	r2, r8
    6d4a:	464b      	mov	r3, r9
    6d4c:	4640      	mov	r0, r8
    6d4e:	4649      	mov	r1, r9
    6d50:	f004 fda2 	bl	b898 <__aeabi_ddiv>
    6d54:	f1ba 0f02 	cmp.w	sl, #2
    6d58:	e9cd 0106 	strd	r0, r1, [sp, #24]
    6d5c:	d10e      	bne.n	6d7c <sqrt+0x9c>
    6d5e:	f001 fc79 	bl	8654 <__errno>
    6d62:	2321      	movs	r3, #33	; 0x21
    6d64:	6003      	str	r3, [r0, #0]
    6d66:	9b08      	ldr	r3, [sp, #32]
    6d68:	b973      	cbnz	r3, 6d88 <sqrt+0xa8>
    6d6a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    6d6e:	4630      	mov	r0, r6
    6d70:	4639      	mov	r1, r7
    6d72:	b00b      	add	sp, #44	; 0x2c
    6d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d78:	e9cd 8906 	strd	r8, r9, [sp, #24]
    6d7c:	4668      	mov	r0, sp
    6d7e:	f001 fbdb 	bl	8538 <matherr>
    6d82:	2800      	cmp	r0, #0
    6d84:	d1ef      	bne.n	6d66 <sqrt+0x86>
    6d86:	e7ea      	b.n	6d5e <sqrt+0x7e>
    6d88:	f001 fc64 	bl	8654 <__errno>
    6d8c:	9b08      	ldr	r3, [sp, #32]
    6d8e:	6003      	str	r3, [r0, #0]
    6d90:	e7eb      	b.n	6d6a <sqrt+0x8a>
    6d92:	bf00      	nop
    6d94:	20000080 	.word	0x20000080
    6d98:	0000c25c 	.word	0x0000c25c
    6d9c:	00000000 	.word	0x00000000

00006da0 <__ieee754_asin>:
    6da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6da4:	4bc4      	ldr	r3, [pc, #784]	; (70b8 <__ieee754_asin+0x318>)
    6da6:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
    6daa:	4598      	cmp	r8, r3
    6dac:	b084      	sub	sp, #16
    6dae:	460d      	mov	r5, r1
    6db0:	4604      	mov	r4, r0
    6db2:	dd16      	ble.n	6de2 <__ieee754_asin+0x42>
    6db4:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
    6db8:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
    6dbc:	4603      	mov	r3, r0
    6dbe:	ea58 0303 	orrs.w	r3, r8, r3
    6dc2:	d026      	beq.n	6e12 <__ieee754_asin+0x72>
    6dc4:	4602      	mov	r2, r0
    6dc6:	460b      	mov	r3, r1
    6dc8:	f004 fa88 	bl	b2dc <__aeabi_dsub>
    6dcc:	460b      	mov	r3, r1
    6dce:	4602      	mov	r2, r0
    6dd0:	f004 fd62 	bl	b898 <__aeabi_ddiv>
    6dd4:	4604      	mov	r4, r0
    6dd6:	460b      	mov	r3, r1
    6dd8:	4620      	mov	r0, r4
    6dda:	4619      	mov	r1, r3
    6ddc:	b004      	add	sp, #16
    6dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6de2:	4bb6      	ldr	r3, [pc, #728]	; (70bc <__ieee754_asin+0x31c>)
    6de4:	4598      	cmp	r8, r3
    6de6:	468a      	mov	sl, r1
    6de8:	dc2e      	bgt.n	6e48 <__ieee754_asin+0xa8>
    6dea:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
    6dee:	f280 816d 	bge.w	70cc <__ieee754_asin+0x32c>
    6df2:	a395      	add	r3, pc, #596	; (adr r3, 7048 <__ieee754_asin+0x2a8>)
    6df4:	e9d3 2300 	ldrd	r2, r3, [r3]
    6df8:	f004 fa72 	bl	b2e0 <__adddf3>
    6dfc:	2200      	movs	r2, #0
    6dfe:	4bb0      	ldr	r3, [pc, #704]	; (70c0 <__ieee754_asin+0x320>)
    6e00:	f004 feb0 	bl	bb64 <__aeabi_dcmpgt>
    6e04:	b300      	cbz	r0, 6e48 <__ieee754_asin+0xa8>
    6e06:	462b      	mov	r3, r5
    6e08:	4620      	mov	r0, r4
    6e0a:	4619      	mov	r1, r3
    6e0c:	b004      	add	sp, #16
    6e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e12:	a38f      	add	r3, pc, #572	; (adr r3, 7050 <__ieee754_asin+0x2b0>)
    6e14:	e9d3 2300 	ldrd	r2, r3, [r3]
    6e18:	f004 fc14 	bl	b644 <__aeabi_dmul>
    6e1c:	a38e      	add	r3, pc, #568	; (adr r3, 7058 <__ieee754_asin+0x2b8>)
    6e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    6e22:	4606      	mov	r6, r0
    6e24:	460f      	mov	r7, r1
    6e26:	4620      	mov	r0, r4
    6e28:	4629      	mov	r1, r5
    6e2a:	f004 fc0b 	bl	b644 <__aeabi_dmul>
    6e2e:	4602      	mov	r2, r0
    6e30:	460b      	mov	r3, r1
    6e32:	4630      	mov	r0, r6
    6e34:	4639      	mov	r1, r7
    6e36:	f004 fa53 	bl	b2e0 <__adddf3>
    6e3a:	4604      	mov	r4, r0
    6e3c:	460b      	mov	r3, r1
    6e3e:	4620      	mov	r0, r4
    6e40:	4619      	mov	r1, r3
    6e42:	b004      	add	sp, #16
    6e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e48:	4620      	mov	r0, r4
    6e4a:	4629      	mov	r1, r5
    6e4c:	f001 fae2 	bl	8414 <fabs>
    6e50:	4602      	mov	r2, r0
    6e52:	460b      	mov	r3, r1
    6e54:	2000      	movs	r0, #0
    6e56:	499a      	ldr	r1, [pc, #616]	; (70c0 <__ieee754_asin+0x320>)
    6e58:	f004 fa40 	bl	b2dc <__aeabi_dsub>
    6e5c:	2200      	movs	r2, #0
    6e5e:	4b99      	ldr	r3, [pc, #612]	; (70c4 <__ieee754_asin+0x324>)
    6e60:	f004 fbf0 	bl	b644 <__aeabi_dmul>
    6e64:	a37e      	add	r3, pc, #504	; (adr r3, 7060 <__ieee754_asin+0x2c0>)
    6e66:	e9d3 2300 	ldrd	r2, r3, [r3]
    6e6a:	4604      	mov	r4, r0
    6e6c:	460d      	mov	r5, r1
    6e6e:	f004 fbe9 	bl	b644 <__aeabi_dmul>
    6e72:	a37d      	add	r3, pc, #500	; (adr r3, 7068 <__ieee754_asin+0x2c8>)
    6e74:	e9d3 2300 	ldrd	r2, r3, [r3]
    6e78:	f004 fa32 	bl	b2e0 <__adddf3>
    6e7c:	4622      	mov	r2, r4
    6e7e:	462b      	mov	r3, r5
    6e80:	f004 fbe0 	bl	b644 <__aeabi_dmul>
    6e84:	a37a      	add	r3, pc, #488	; (adr r3, 7070 <__ieee754_asin+0x2d0>)
    6e86:	e9d3 2300 	ldrd	r2, r3, [r3]
    6e8a:	f004 fa27 	bl	b2dc <__aeabi_dsub>
    6e8e:	4622      	mov	r2, r4
    6e90:	462b      	mov	r3, r5
    6e92:	f004 fbd7 	bl	b644 <__aeabi_dmul>
    6e96:	a378      	add	r3, pc, #480	; (adr r3, 7078 <__ieee754_asin+0x2d8>)
    6e98:	e9d3 2300 	ldrd	r2, r3, [r3]
    6e9c:	f004 fa20 	bl	b2e0 <__adddf3>
    6ea0:	4622      	mov	r2, r4
    6ea2:	462b      	mov	r3, r5
    6ea4:	f004 fbce 	bl	b644 <__aeabi_dmul>
    6ea8:	a375      	add	r3, pc, #468	; (adr r3, 7080 <__ieee754_asin+0x2e0>)
    6eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
    6eae:	f004 fa15 	bl	b2dc <__aeabi_dsub>
    6eb2:	4622      	mov	r2, r4
    6eb4:	462b      	mov	r3, r5
    6eb6:	f004 fbc5 	bl	b644 <__aeabi_dmul>
    6eba:	a373      	add	r3, pc, #460	; (adr r3, 7088 <__ieee754_asin+0x2e8>)
    6ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
    6ec0:	f004 fa0e 	bl	b2e0 <__adddf3>
    6ec4:	4622      	mov	r2, r4
    6ec6:	462b      	mov	r3, r5
    6ec8:	f004 fbbc 	bl	b644 <__aeabi_dmul>
    6ecc:	a370      	add	r3, pc, #448	; (adr r3, 7090 <__ieee754_asin+0x2f0>)
    6ece:	e9d3 2300 	ldrd	r2, r3, [r3]
    6ed2:	e9cd 0100 	strd	r0, r1, [sp]
    6ed6:	4620      	mov	r0, r4
    6ed8:	4629      	mov	r1, r5
    6eda:	f004 fbb3 	bl	b644 <__aeabi_dmul>
    6ede:	a36e      	add	r3, pc, #440	; (adr r3, 7098 <__ieee754_asin+0x2f8>)
    6ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
    6ee4:	f004 f9fa 	bl	b2dc <__aeabi_dsub>
    6ee8:	4622      	mov	r2, r4
    6eea:	462b      	mov	r3, r5
    6eec:	f004 fbaa 	bl	b644 <__aeabi_dmul>
    6ef0:	a36b      	add	r3, pc, #428	; (adr r3, 70a0 <__ieee754_asin+0x300>)
    6ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
    6ef6:	f004 f9f3 	bl	b2e0 <__adddf3>
    6efa:	4622      	mov	r2, r4
    6efc:	462b      	mov	r3, r5
    6efe:	f004 fba1 	bl	b644 <__aeabi_dmul>
    6f02:	a369      	add	r3, pc, #420	; (adr r3, 70a8 <__ieee754_asin+0x308>)
    6f04:	e9d3 2300 	ldrd	r2, r3, [r3]
    6f08:	f004 f9e8 	bl	b2dc <__aeabi_dsub>
    6f0c:	4622      	mov	r2, r4
    6f0e:	462b      	mov	r3, r5
    6f10:	f004 fb98 	bl	b644 <__aeabi_dmul>
    6f14:	4b6a      	ldr	r3, [pc, #424]	; (70c0 <__ieee754_asin+0x320>)
    6f16:	2200      	movs	r2, #0
    6f18:	f004 f9e2 	bl	b2e0 <__adddf3>
    6f1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    6f20:	4620      	mov	r0, r4
    6f22:	4629      	mov	r1, r5
    6f24:	f000 fb96 	bl	7654 <__ieee754_sqrt>
    6f28:	4b67      	ldr	r3, [pc, #412]	; (70c8 <__ieee754_asin+0x328>)
    6f2a:	4598      	cmp	r8, r3
    6f2c:	4606      	mov	r6, r0
    6f2e:	460f      	mov	r7, r1
    6f30:	dc67      	bgt.n	7002 <__ieee754_asin+0x262>
    6f32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6f36:	e9dd 0100 	ldrd	r0, r1, [sp]
    6f3a:	f004 fcad 	bl	b898 <__aeabi_ddiv>
    6f3e:	4632      	mov	r2, r6
    6f40:	e9cd 0100 	strd	r0, r1, [sp]
    6f44:	463b      	mov	r3, r7
    6f46:	4630      	mov	r0, r6
    6f48:	4639      	mov	r1, r7
    6f4a:	f004 f9c9 	bl	b2e0 <__adddf3>
    6f4e:	4602      	mov	r2, r0
    6f50:	460b      	mov	r3, r1
    6f52:	e9dd 0100 	ldrd	r0, r1, [sp]
    6f56:	f004 fb75 	bl	b644 <__aeabi_dmul>
    6f5a:	f04f 0800 	mov.w	r8, #0
    6f5e:	e9cd 0100 	strd	r0, r1, [sp]
    6f62:	4642      	mov	r2, r8
    6f64:	463b      	mov	r3, r7
    6f66:	4640      	mov	r0, r8
    6f68:	4639      	mov	r1, r7
    6f6a:	f004 fb6b 	bl	b644 <__aeabi_dmul>
    6f6e:	4602      	mov	r2, r0
    6f70:	460b      	mov	r3, r1
    6f72:	4620      	mov	r0, r4
    6f74:	4629      	mov	r1, r5
    6f76:	f004 f9b1 	bl	b2dc <__aeabi_dsub>
    6f7a:	4642      	mov	r2, r8
    6f7c:	4604      	mov	r4, r0
    6f7e:	460d      	mov	r5, r1
    6f80:	463b      	mov	r3, r7
    6f82:	4630      	mov	r0, r6
    6f84:	4639      	mov	r1, r7
    6f86:	f004 f9ab 	bl	b2e0 <__adddf3>
    6f8a:	4602      	mov	r2, r0
    6f8c:	460b      	mov	r3, r1
    6f8e:	4620      	mov	r0, r4
    6f90:	4629      	mov	r1, r5
    6f92:	f004 fc81 	bl	b898 <__aeabi_ddiv>
    6f96:	4602      	mov	r2, r0
    6f98:	460b      	mov	r3, r1
    6f9a:	f004 f9a1 	bl	b2e0 <__adddf3>
    6f9e:	4602      	mov	r2, r0
    6fa0:	460b      	mov	r3, r1
    6fa2:	a12d      	add	r1, pc, #180	; (adr r1, 7058 <__ieee754_asin+0x2b8>)
    6fa4:	e9d1 0100 	ldrd	r0, r1, [r1]
    6fa8:	f004 f998 	bl	b2dc <__aeabi_dsub>
    6fac:	4602      	mov	r2, r0
    6fae:	460b      	mov	r3, r1
    6fb0:	e9dd 0100 	ldrd	r0, r1, [sp]
    6fb4:	f004 f992 	bl	b2dc <__aeabi_dsub>
    6fb8:	4642      	mov	r2, r8
    6fba:	4604      	mov	r4, r0
    6fbc:	460d      	mov	r5, r1
    6fbe:	463b      	mov	r3, r7
    6fc0:	4640      	mov	r0, r8
    6fc2:	4639      	mov	r1, r7
    6fc4:	f004 f98c 	bl	b2e0 <__adddf3>
    6fc8:	4602      	mov	r2, r0
    6fca:	460b      	mov	r3, r1
    6fcc:	a138      	add	r1, pc, #224	; (adr r1, 70b0 <__ieee754_asin+0x310>)
    6fce:	e9d1 0100 	ldrd	r0, r1, [r1]
    6fd2:	f004 f983 	bl	b2dc <__aeabi_dsub>
    6fd6:	4602      	mov	r2, r0
    6fd8:	460b      	mov	r3, r1
    6fda:	4620      	mov	r0, r4
    6fdc:	4629      	mov	r1, r5
    6fde:	f004 f97d 	bl	b2dc <__aeabi_dsub>
    6fe2:	460b      	mov	r3, r1
    6fe4:	4602      	mov	r2, r0
    6fe6:	a132      	add	r1, pc, #200	; (adr r1, 70b0 <__ieee754_asin+0x310>)
    6fe8:	e9d1 0100 	ldrd	r0, r1, [r1]
    6fec:	f004 f976 	bl	b2dc <__aeabi_dsub>
    6ff0:	4604      	mov	r4, r0
    6ff2:	460b      	mov	r3, r1
    6ff4:	f1ba 0f00 	cmp.w	sl, #0
    6ff8:	f73f aeee 	bgt.w	6dd8 <__ieee754_asin+0x38>
    6ffc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    7000:	e6ea      	b.n	6dd8 <__ieee754_asin+0x38>
    7002:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    7006:	e9dd 0100 	ldrd	r0, r1, [sp]
    700a:	f004 fc45 	bl	b898 <__aeabi_ddiv>
    700e:	4632      	mov	r2, r6
    7010:	463b      	mov	r3, r7
    7012:	f004 fb17 	bl	b644 <__aeabi_dmul>
    7016:	4632      	mov	r2, r6
    7018:	463b      	mov	r3, r7
    701a:	f004 f961 	bl	b2e0 <__adddf3>
    701e:	4602      	mov	r2, r0
    7020:	460b      	mov	r3, r1
    7022:	f004 f95d 	bl	b2e0 <__adddf3>
    7026:	a30c      	add	r3, pc, #48	; (adr r3, 7058 <__ieee754_asin+0x2b8>)
    7028:	e9d3 2300 	ldrd	r2, r3, [r3]
    702c:	f004 f956 	bl	b2dc <__aeabi_dsub>
    7030:	460b      	mov	r3, r1
    7032:	4602      	mov	r2, r0
    7034:	a106      	add	r1, pc, #24	; (adr r1, 7050 <__ieee754_asin+0x2b0>)
    7036:	e9d1 0100 	ldrd	r0, r1, [r1]
    703a:	f004 f94f 	bl	b2dc <__aeabi_dsub>
    703e:	4604      	mov	r4, r0
    7040:	460b      	mov	r3, r1
    7042:	e7d7      	b.n	6ff4 <__ieee754_asin+0x254>
    7044:	f3af 8000 	nop.w
    7048:	8800759c 	.word	0x8800759c
    704c:	7e37e43c 	.word	0x7e37e43c
    7050:	54442d18 	.word	0x54442d18
    7054:	3ff921fb 	.word	0x3ff921fb
    7058:	33145c07 	.word	0x33145c07
    705c:	3c91a626 	.word	0x3c91a626
    7060:	0dfdf709 	.word	0x0dfdf709
    7064:	3f023de1 	.word	0x3f023de1
    7068:	7501b288 	.word	0x7501b288
    706c:	3f49efe0 	.word	0x3f49efe0
    7070:	b5688f3b 	.word	0xb5688f3b
    7074:	3fa48228 	.word	0x3fa48228
    7078:	0e884455 	.word	0x0e884455
    707c:	3fc9c155 	.word	0x3fc9c155
    7080:	03eb6f7d 	.word	0x03eb6f7d
    7084:	3fd4d612 	.word	0x3fd4d612
    7088:	55555555 	.word	0x55555555
    708c:	3fc55555 	.word	0x3fc55555
    7090:	b12e9282 	.word	0xb12e9282
    7094:	3fb3b8c5 	.word	0x3fb3b8c5
    7098:	1b8d0159 	.word	0x1b8d0159
    709c:	3fe6066c 	.word	0x3fe6066c
    70a0:	9c598ac8 	.word	0x9c598ac8
    70a4:	40002ae5 	.word	0x40002ae5
    70a8:	1c8a2d4b 	.word	0x1c8a2d4b
    70ac:	40033a27 	.word	0x40033a27
    70b0:	54442d18 	.word	0x54442d18
    70b4:	3fe921fb 	.word	0x3fe921fb
    70b8:	3fefffff 	.word	0x3fefffff
    70bc:	3fdfffff 	.word	0x3fdfffff
    70c0:	3ff00000 	.word	0x3ff00000
    70c4:	3fe00000 	.word	0x3fe00000
    70c8:	3fef3332 	.word	0x3fef3332
    70cc:	4602      	mov	r2, r0
    70ce:	460b      	mov	r3, r1
    70d0:	f004 fab8 	bl	b644 <__aeabi_dmul>
    70d4:	a338      	add	r3, pc, #224	; (adr r3, 71b8 <__ieee754_asin+0x418>)
    70d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    70da:	4606      	mov	r6, r0
    70dc:	460f      	mov	r7, r1
    70de:	f004 fab1 	bl	b644 <__aeabi_dmul>
    70e2:	a337      	add	r3, pc, #220	; (adr r3, 71c0 <__ieee754_asin+0x420>)
    70e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    70e8:	f004 f8fa 	bl	b2e0 <__adddf3>
    70ec:	4632      	mov	r2, r6
    70ee:	463b      	mov	r3, r7
    70f0:	f004 faa8 	bl	b644 <__aeabi_dmul>
    70f4:	a334      	add	r3, pc, #208	; (adr r3, 71c8 <__ieee754_asin+0x428>)
    70f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    70fa:	f004 f8ef 	bl	b2dc <__aeabi_dsub>
    70fe:	4632      	mov	r2, r6
    7100:	463b      	mov	r3, r7
    7102:	f004 fa9f 	bl	b644 <__aeabi_dmul>
    7106:	a332      	add	r3, pc, #200	; (adr r3, 71d0 <__ieee754_asin+0x430>)
    7108:	e9d3 2300 	ldrd	r2, r3, [r3]
    710c:	f004 f8e8 	bl	b2e0 <__adddf3>
    7110:	4632      	mov	r2, r6
    7112:	463b      	mov	r3, r7
    7114:	f004 fa96 	bl	b644 <__aeabi_dmul>
    7118:	a32f      	add	r3, pc, #188	; (adr r3, 71d8 <__ieee754_asin+0x438>)
    711a:	e9d3 2300 	ldrd	r2, r3, [r3]
    711e:	f004 f8dd 	bl	b2dc <__aeabi_dsub>
    7122:	4632      	mov	r2, r6
    7124:	463b      	mov	r3, r7
    7126:	f004 fa8d 	bl	b644 <__aeabi_dmul>
    712a:	a32d      	add	r3, pc, #180	; (adr r3, 71e0 <__ieee754_asin+0x440>)
    712c:	e9d3 2300 	ldrd	r2, r3, [r3]
    7130:	f004 f8d6 	bl	b2e0 <__adddf3>
    7134:	4632      	mov	r2, r6
    7136:	463b      	mov	r3, r7
    7138:	f004 fa84 	bl	b644 <__aeabi_dmul>
    713c:	a32a      	add	r3, pc, #168	; (adr r3, 71e8 <__ieee754_asin+0x448>)
    713e:	e9d3 2300 	ldrd	r2, r3, [r3]
    7142:	4680      	mov	r8, r0
    7144:	4689      	mov	r9, r1
    7146:	4630      	mov	r0, r6
    7148:	4639      	mov	r1, r7
    714a:	f004 fa7b 	bl	b644 <__aeabi_dmul>
    714e:	a328      	add	r3, pc, #160	; (adr r3, 71f0 <__ieee754_asin+0x450>)
    7150:	e9d3 2300 	ldrd	r2, r3, [r3]
    7154:	f004 f8c2 	bl	b2dc <__aeabi_dsub>
    7158:	4632      	mov	r2, r6
    715a:	463b      	mov	r3, r7
    715c:	f004 fa72 	bl	b644 <__aeabi_dmul>
    7160:	a325      	add	r3, pc, #148	; (adr r3, 71f8 <__ieee754_asin+0x458>)
    7162:	e9d3 2300 	ldrd	r2, r3, [r3]
    7166:	f004 f8bb 	bl	b2e0 <__adddf3>
    716a:	4632      	mov	r2, r6
    716c:	463b      	mov	r3, r7
    716e:	f004 fa69 	bl	b644 <__aeabi_dmul>
    7172:	a323      	add	r3, pc, #140	; (adr r3, 7200 <__ieee754_asin+0x460>)
    7174:	e9d3 2300 	ldrd	r2, r3, [r3]
    7178:	f004 f8b0 	bl	b2dc <__aeabi_dsub>
    717c:	4632      	mov	r2, r6
    717e:	463b      	mov	r3, r7
    7180:	f004 fa60 	bl	b644 <__aeabi_dmul>
    7184:	2200      	movs	r2, #0
    7186:	4b20      	ldr	r3, [pc, #128]	; (7208 <__ieee754_asin+0x468>)
    7188:	f004 f8aa 	bl	b2e0 <__adddf3>
    718c:	4602      	mov	r2, r0
    718e:	460b      	mov	r3, r1
    7190:	4640      	mov	r0, r8
    7192:	4649      	mov	r1, r9
    7194:	f004 fb80 	bl	b898 <__aeabi_ddiv>
    7198:	4622      	mov	r2, r4
    719a:	462b      	mov	r3, r5
    719c:	f004 fa52 	bl	b644 <__aeabi_dmul>
    71a0:	4622      	mov	r2, r4
    71a2:	462b      	mov	r3, r5
    71a4:	f004 f89c 	bl	b2e0 <__adddf3>
    71a8:	4604      	mov	r4, r0
    71aa:	460b      	mov	r3, r1
    71ac:	4620      	mov	r0, r4
    71ae:	4619      	mov	r1, r3
    71b0:	b004      	add	sp, #16
    71b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    71b6:	bf00      	nop
    71b8:	0dfdf709 	.word	0x0dfdf709
    71bc:	3f023de1 	.word	0x3f023de1
    71c0:	7501b288 	.word	0x7501b288
    71c4:	3f49efe0 	.word	0x3f49efe0
    71c8:	b5688f3b 	.word	0xb5688f3b
    71cc:	3fa48228 	.word	0x3fa48228
    71d0:	0e884455 	.word	0x0e884455
    71d4:	3fc9c155 	.word	0x3fc9c155
    71d8:	03eb6f7d 	.word	0x03eb6f7d
    71dc:	3fd4d612 	.word	0x3fd4d612
    71e0:	55555555 	.word	0x55555555
    71e4:	3fc55555 	.word	0x3fc55555
    71e8:	b12e9282 	.word	0xb12e9282
    71ec:	3fb3b8c5 	.word	0x3fb3b8c5
    71f0:	1b8d0159 	.word	0x1b8d0159
    71f4:	3fe6066c 	.word	0x3fe6066c
    71f8:	9c598ac8 	.word	0x9c598ac8
    71fc:	40002ae5 	.word	0x40002ae5
    7200:	1c8a2d4b 	.word	0x1c8a2d4b
    7204:	40033a27 	.word	0x40033a27
    7208:	3ff00000 	.word	0x3ff00000
    720c:	00000000 	.word	0x00000000

00007210 <__ieee754_rem_pio2>:
    7210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7214:	4e9a      	ldr	r6, [pc, #616]	; (7480 <__ieee754_rem_pio2+0x270>)
    7216:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    721a:	42b7      	cmp	r7, r6
    721c:	b091      	sub	sp, #68	; 0x44
    721e:	f340 808e 	ble.w	733e <__ieee754_rem_pio2+0x12e>
    7222:	4692      	mov	sl, r2
    7224:	4a97      	ldr	r2, [pc, #604]	; (7484 <__ieee754_rem_pio2+0x274>)
    7226:	4297      	cmp	r7, r2
    7228:	460c      	mov	r4, r1
    722a:	dc26      	bgt.n	727a <__ieee754_rem_pio2+0x6a>
    722c:	2900      	cmp	r1, #0
    722e:	a38a      	add	r3, pc, #552	; (adr r3, 7458 <__ieee754_rem_pio2+0x248>)
    7230:	e9d3 2300 	ldrd	r2, r3, [r3]
    7234:	f340 81b4 	ble.w	75a0 <__ieee754_rem_pio2+0x390>
    7238:	f004 f850 	bl	b2dc <__aeabi_dsub>
    723c:	4b92      	ldr	r3, [pc, #584]	; (7488 <__ieee754_rem_pio2+0x278>)
    723e:	429f      	cmp	r7, r3
    7240:	4604      	mov	r4, r0
    7242:	460d      	mov	r5, r1
    7244:	f000 8090 	beq.w	7368 <__ieee754_rem_pio2+0x158>
    7248:	a385      	add	r3, pc, #532	; (adr r3, 7460 <__ieee754_rem_pio2+0x250>)
    724a:	e9d3 2300 	ldrd	r2, r3, [r3]
    724e:	f004 f845 	bl	b2dc <__aeabi_dsub>
    7252:	4602      	mov	r2, r0
    7254:	460b      	mov	r3, r1
    7256:	e9ca 2300 	strd	r2, r3, [sl]
    725a:	4620      	mov	r0, r4
    725c:	4629      	mov	r1, r5
    725e:	f004 f83d 	bl	b2dc <__aeabi_dsub>
    7262:	a37f      	add	r3, pc, #508	; (adr r3, 7460 <__ieee754_rem_pio2+0x250>)
    7264:	e9d3 2300 	ldrd	r2, r3, [r3]
    7268:	f004 f838 	bl	b2dc <__aeabi_dsub>
    726c:	2501      	movs	r5, #1
    726e:	e9ca 0102 	strd	r0, r1, [sl, #8]
    7272:	4628      	mov	r0, r5
    7274:	b011      	add	sp, #68	; 0x44
    7276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    727a:	4a84      	ldr	r2, [pc, #528]	; (748c <__ieee754_rem_pio2+0x27c>)
    727c:	4297      	cmp	r7, r2
    727e:	f340 8090 	ble.w	73a2 <__ieee754_rem_pio2+0x192>
    7282:	4a83      	ldr	r2, [pc, #524]	; (7490 <__ieee754_rem_pio2+0x280>)
    7284:	4297      	cmp	r7, r2
    7286:	dc65      	bgt.n	7354 <__ieee754_rem_pio2+0x144>
    7288:	153d      	asrs	r5, r7, #20
    728a:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
    728e:	eba7 5305 	sub.w	r3, r7, r5, lsl #20
    7292:	4619      	mov	r1, r3
    7294:	461f      	mov	r7, r3
    7296:	4606      	mov	r6, r0
    7298:	f004 fc84 	bl	bba4 <__aeabi_d2iz>
    729c:	f004 f96c 	bl	b578 <__aeabi_i2d>
    72a0:	4680      	mov	r8, r0
    72a2:	4689      	mov	r9, r1
    72a4:	4602      	mov	r2, r0
    72a6:	460b      	mov	r3, r1
    72a8:	4630      	mov	r0, r6
    72aa:	4639      	mov	r1, r7
    72ac:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    72b0:	f004 f814 	bl	b2dc <__aeabi_dsub>
    72b4:	2200      	movs	r2, #0
    72b6:	4b77      	ldr	r3, [pc, #476]	; (7494 <__ieee754_rem_pio2+0x284>)
    72b8:	f004 f9c4 	bl	b644 <__aeabi_dmul>
    72bc:	4689      	mov	r9, r1
    72be:	4680      	mov	r8, r0
    72c0:	f004 fc70 	bl	bba4 <__aeabi_d2iz>
    72c4:	f004 f958 	bl	b578 <__aeabi_i2d>
    72c8:	4602      	mov	r2, r0
    72ca:	460b      	mov	r3, r1
    72cc:	4606      	mov	r6, r0
    72ce:	460f      	mov	r7, r1
    72d0:	4640      	mov	r0, r8
    72d2:	4649      	mov	r1, r9
    72d4:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
    72d8:	f004 f800 	bl	b2dc <__aeabi_dsub>
    72dc:	2200      	movs	r2, #0
    72de:	4b6d      	ldr	r3, [pc, #436]	; (7494 <__ieee754_rem_pio2+0x284>)
    72e0:	f004 f9b0 	bl	b644 <__aeabi_dmul>
    72e4:	2200      	movs	r2, #0
    72e6:	2300      	movs	r3, #0
    72e8:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    72ec:	f004 fc12 	bl	bb14 <__aeabi_dcmpeq>
    72f0:	2800      	cmp	r0, #0
    72f2:	f000 8173 	beq.w	75dc <__ieee754_rem_pio2+0x3cc>
    72f6:	2300      	movs	r3, #0
    72f8:	4630      	mov	r0, r6
    72fa:	4639      	mov	r1, r7
    72fc:	2200      	movs	r2, #0
    72fe:	f004 fc09 	bl	bb14 <__aeabi_dcmpeq>
    7302:	2800      	cmp	r0, #0
    7304:	bf14      	ite	ne
    7306:	2301      	movne	r3, #1
    7308:	2302      	moveq	r3, #2
    730a:	4a63      	ldr	r2, [pc, #396]	; (7498 <__ieee754_rem_pio2+0x288>)
    730c:	9201      	str	r2, [sp, #4]
    730e:	2102      	movs	r1, #2
    7310:	462a      	mov	r2, r5
    7312:	9100      	str	r1, [sp, #0]
    7314:	a80a      	add	r0, sp, #40	; 0x28
    7316:	4651      	mov	r1, sl
    7318:	f000 fb7e 	bl	7a18 <__kernel_rem_pio2>
    731c:	2c00      	cmp	r4, #0
    731e:	4605      	mov	r5, r0
    7320:	da14      	bge.n	734c <__ieee754_rem_pio2+0x13c>
    7322:	f8da 2004 	ldr.w	r2, [sl, #4]
    7326:	f8da 300c 	ldr.w	r3, [sl, #12]
    732a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
    732e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    7332:	4245      	negs	r5, r0
    7334:	f8ca 2004 	str.w	r2, [sl, #4]
    7338:	f8ca 300c 	str.w	r3, [sl, #12]
    733c:	e006      	b.n	734c <__ieee754_rem_pio2+0x13c>
    733e:	e9c2 0100 	strd	r0, r1, [r2]
    7342:	2500      	movs	r5, #0
    7344:	2400      	movs	r4, #0
    7346:	e9c2 4502 	strd	r4, r5, [r2, #8]
    734a:	2500      	movs	r5, #0
    734c:	4628      	mov	r0, r5
    734e:	b011      	add	sp, #68	; 0x44
    7350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7354:	4602      	mov	r2, r0
    7356:	460b      	mov	r3, r1
    7358:	f003 ffc0 	bl	b2dc <__aeabi_dsub>
    735c:	2500      	movs	r5, #0
    735e:	e9ca 0102 	strd	r0, r1, [sl, #8]
    7362:	e9ca 0100 	strd	r0, r1, [sl]
    7366:	e7f1      	b.n	734c <__ieee754_rem_pio2+0x13c>
    7368:	a33f      	add	r3, pc, #252	; (adr r3, 7468 <__ieee754_rem_pio2+0x258>)
    736a:	e9d3 2300 	ldrd	r2, r3, [r3]
    736e:	f003 ffb5 	bl	b2dc <__aeabi_dsub>
    7372:	a33f      	add	r3, pc, #252	; (adr r3, 7470 <__ieee754_rem_pio2+0x260>)
    7374:	e9d3 2300 	ldrd	r2, r3, [r3]
    7378:	460d      	mov	r5, r1
    737a:	4604      	mov	r4, r0
    737c:	f003 ffae 	bl	b2dc <__aeabi_dsub>
    7380:	4602      	mov	r2, r0
    7382:	460b      	mov	r3, r1
    7384:	e9ca 2300 	strd	r2, r3, [sl]
    7388:	4629      	mov	r1, r5
    738a:	4620      	mov	r0, r4
    738c:	f003 ffa6 	bl	b2dc <__aeabi_dsub>
    7390:	a337      	add	r3, pc, #220	; (adr r3, 7470 <__ieee754_rem_pio2+0x260>)
    7392:	e9d3 2300 	ldrd	r2, r3, [r3]
    7396:	f003 ffa1 	bl	b2dc <__aeabi_dsub>
    739a:	2501      	movs	r5, #1
    739c:	e9ca 0102 	strd	r0, r1, [sl, #8]
    73a0:	e7d4      	b.n	734c <__ieee754_rem_pio2+0x13c>
    73a2:	f001 f837 	bl	8414 <fabs>
    73a6:	a334      	add	r3, pc, #208	; (adr r3, 7478 <__ieee754_rem_pio2+0x268>)
    73a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    73ac:	4680      	mov	r8, r0
    73ae:	4689      	mov	r9, r1
    73b0:	f004 f948 	bl	b644 <__aeabi_dmul>
    73b4:	2200      	movs	r2, #0
    73b6:	4b39      	ldr	r3, [pc, #228]	; (749c <__ieee754_rem_pio2+0x28c>)
    73b8:	f003 ff92 	bl	b2e0 <__adddf3>
    73bc:	f004 fbf2 	bl	bba4 <__aeabi_d2iz>
    73c0:	4605      	mov	r5, r0
    73c2:	f004 f8d9 	bl	b578 <__aeabi_i2d>
    73c6:	a324      	add	r3, pc, #144	; (adr r3, 7458 <__ieee754_rem_pio2+0x248>)
    73c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    73cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    73d0:	f004 f938 	bl	b644 <__aeabi_dmul>
    73d4:	4602      	mov	r2, r0
    73d6:	460b      	mov	r3, r1
    73d8:	4640      	mov	r0, r8
    73da:	4649      	mov	r1, r9
    73dc:	f003 ff7e 	bl	b2dc <__aeabi_dsub>
    73e0:	a31f      	add	r3, pc, #124	; (adr r3, 7460 <__ieee754_rem_pio2+0x250>)
    73e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    73e6:	4680      	mov	r8, r0
    73e8:	4689      	mov	r9, r1
    73ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    73ee:	f004 f929 	bl	b644 <__aeabi_dmul>
    73f2:	2d1f      	cmp	r5, #31
    73f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    73f8:	dc54      	bgt.n	74a4 <__ieee754_rem_pio2+0x294>
    73fa:	4b29      	ldr	r3, [pc, #164]	; (74a0 <__ieee754_rem_pio2+0x290>)
    73fc:	1e6a      	subs	r2, r5, #1
    73fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7402:	429f      	cmp	r7, r3
    7404:	d04e      	beq.n	74a4 <__ieee754_rem_pio2+0x294>
    7406:	4602      	mov	r2, r0
    7408:	460b      	mov	r3, r1
    740a:	4640      	mov	r0, r8
    740c:	4649      	mov	r1, r9
    740e:	f003 ff65 	bl	b2dc <__aeabi_dsub>
    7412:	4602      	mov	r2, r0
    7414:	460b      	mov	r3, r1
    7416:	e9ca 2300 	strd	r2, r3, [sl]
    741a:	4683      	mov	fp, r0
    741c:	460e      	mov	r6, r1
    741e:	465a      	mov	r2, fp
    7420:	4633      	mov	r3, r6
    7422:	4640      	mov	r0, r8
    7424:	4649      	mov	r1, r9
    7426:	f003 ff59 	bl	b2dc <__aeabi_dsub>
    742a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    742e:	f003 ff55 	bl	b2dc <__aeabi_dsub>
    7432:	2c00      	cmp	r4, #0
    7434:	4602      	mov	r2, r0
    7436:	460b      	mov	r3, r1
    7438:	e9ca 2302 	strd	r2, r3, [sl, #8]
    743c:	da86      	bge.n	734c <__ieee754_rem_pio2+0x13c>
    743e:	465b      	mov	r3, fp
    7440:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
    7444:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    7448:	e88a 0048 	stmia.w	sl, {r3, r6}
    744c:	f8ca 100c 	str.w	r1, [sl, #12]
    7450:	f8ca 0008 	str.w	r0, [sl, #8]
    7454:	426d      	negs	r5, r5
    7456:	e779      	b.n	734c <__ieee754_rem_pio2+0x13c>
    7458:	54400000 	.word	0x54400000
    745c:	3ff921fb 	.word	0x3ff921fb
    7460:	1a626331 	.word	0x1a626331
    7464:	3dd0b461 	.word	0x3dd0b461
    7468:	1a600000 	.word	0x1a600000
    746c:	3dd0b461 	.word	0x3dd0b461
    7470:	2e037073 	.word	0x2e037073
    7474:	3ba3198a 	.word	0x3ba3198a
    7478:	6dc9c883 	.word	0x6dc9c883
    747c:	3fe45f30 	.word	0x3fe45f30
    7480:	3fe921fb 	.word	0x3fe921fb
    7484:	4002d97b 	.word	0x4002d97b
    7488:	3ff921fb 	.word	0x3ff921fb
    748c:	413921fb 	.word	0x413921fb
    7490:	7fefffff 	.word	0x7fefffff
    7494:	41700000 	.word	0x41700000
    7498:	0000c2e4 	.word	0x0000c2e4
    749c:	3fe00000 	.word	0x3fe00000
    74a0:	0000c264 	.word	0x0000c264
    74a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    74a8:	4640      	mov	r0, r8
    74aa:	4649      	mov	r1, r9
    74ac:	f003 ff16 	bl	b2dc <__aeabi_dsub>
    74b0:	153a      	asrs	r2, r7, #20
    74b2:	f3c1 530a 	ubfx	r3, r1, #20, #11
    74b6:	1ad3      	subs	r3, r2, r3
    74b8:	2b10      	cmp	r3, #16
    74ba:	4683      	mov	fp, r0
    74bc:	460e      	mov	r6, r1
    74be:	9209      	str	r2, [sp, #36]	; 0x24
    74c0:	e9ca 0100 	strd	r0, r1, [sl]
    74c4:	ddab      	ble.n	741e <__ieee754_rem_pio2+0x20e>
    74c6:	a358      	add	r3, pc, #352	; (adr r3, 7628 <__ieee754_rem_pio2+0x418>)
    74c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    74cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    74d0:	f004 f8b8 	bl	b644 <__aeabi_dmul>
    74d4:	4606      	mov	r6, r0
    74d6:	460f      	mov	r7, r1
    74d8:	4602      	mov	r2, r0
    74da:	460b      	mov	r3, r1
    74dc:	4640      	mov	r0, r8
    74de:	4649      	mov	r1, r9
    74e0:	f003 fefc 	bl	b2dc <__aeabi_dsub>
    74e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
    74e8:	4602      	mov	r2, r0
    74ea:	460b      	mov	r3, r1
    74ec:	4640      	mov	r0, r8
    74ee:	4649      	mov	r1, r9
    74f0:	f003 fef4 	bl	b2dc <__aeabi_dsub>
    74f4:	4632      	mov	r2, r6
    74f6:	463b      	mov	r3, r7
    74f8:	f003 fef0 	bl	b2dc <__aeabi_dsub>
    74fc:	a34c      	add	r3, pc, #304	; (adr r3, 7630 <__ieee754_rem_pio2+0x420>)
    74fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    7502:	4606      	mov	r6, r0
    7504:	460f      	mov	r7, r1
    7506:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    750a:	f004 f89b 	bl	b644 <__aeabi_dmul>
    750e:	4632      	mov	r2, r6
    7510:	463b      	mov	r3, r7
    7512:	f003 fee3 	bl	b2dc <__aeabi_dsub>
    7516:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
    751a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    751e:	4602      	mov	r2, r0
    7520:	460b      	mov	r3, r1
    7522:	4640      	mov	r0, r8
    7524:	4649      	mov	r1, r9
    7526:	f003 fed9 	bl	b2dc <__aeabi_dsub>
    752a:	460b      	mov	r3, r1
    752c:	f3c1 570a 	ubfx	r7, r1, #20, #11
    7530:	460e      	mov	r6, r1
    7532:	9909      	ldr	r1, [sp, #36]	; 0x24
    7534:	1bcf      	subs	r7, r1, r7
    7536:	4602      	mov	r2, r0
    7538:	2f31      	cmp	r7, #49	; 0x31
    753a:	4683      	mov	fp, r0
    753c:	e9ca 2300 	strd	r2, r3, [sl]
    7540:	dd6c      	ble.n	761c <__ieee754_rem_pio2+0x40c>
    7542:	a33d      	add	r3, pc, #244	; (adr r3, 7638 <__ieee754_rem_pio2+0x428>)
    7544:	e9d3 2300 	ldrd	r2, r3, [r3]
    7548:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    754c:	f004 f87a 	bl	b644 <__aeabi_dmul>
    7550:	4606      	mov	r6, r0
    7552:	460f      	mov	r7, r1
    7554:	4602      	mov	r2, r0
    7556:	460b      	mov	r3, r1
    7558:	4640      	mov	r0, r8
    755a:	4649      	mov	r1, r9
    755c:	e9cd 8906 	strd	r8, r9, [sp, #24]
    7560:	f003 febc 	bl	b2dc <__aeabi_dsub>
    7564:	4602      	mov	r2, r0
    7566:	460b      	mov	r3, r1
    7568:	4680      	mov	r8, r0
    756a:	4689      	mov	r9, r1
    756c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    7570:	f003 feb4 	bl	b2dc <__aeabi_dsub>
    7574:	4632      	mov	r2, r6
    7576:	463b      	mov	r3, r7
    7578:	f003 feb0 	bl	b2dc <__aeabi_dsub>
    757c:	a330      	add	r3, pc, #192	; (adr r3, 7640 <__ieee754_rem_pio2+0x430>)
    757e:	e9d3 2300 	ldrd	r2, r3, [r3]
    7582:	4606      	mov	r6, r0
    7584:	460f      	mov	r7, r1
    7586:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    758a:	f004 f85b 	bl	b644 <__aeabi_dmul>
    758e:	4632      	mov	r2, r6
    7590:	463b      	mov	r3, r7
    7592:	f003 fea3 	bl	b2dc <__aeabi_dsub>
    7596:	4602      	mov	r2, r0
    7598:	460b      	mov	r3, r1
    759a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    759e:	e734      	b.n	740a <__ieee754_rem_pio2+0x1fa>
    75a0:	f003 fe9e 	bl	b2e0 <__adddf3>
    75a4:	4b2a      	ldr	r3, [pc, #168]	; (7650 <__ieee754_rem_pio2+0x440>)
    75a6:	429f      	cmp	r7, r3
    75a8:	4604      	mov	r4, r0
    75aa:	460d      	mov	r5, r1
    75ac:	d018      	beq.n	75e0 <__ieee754_rem_pio2+0x3d0>
    75ae:	a326      	add	r3, pc, #152	; (adr r3, 7648 <__ieee754_rem_pio2+0x438>)
    75b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    75b4:	f003 fe94 	bl	b2e0 <__adddf3>
    75b8:	4602      	mov	r2, r0
    75ba:	460b      	mov	r3, r1
    75bc:	e9ca 2300 	strd	r2, r3, [sl]
    75c0:	4629      	mov	r1, r5
    75c2:	4620      	mov	r0, r4
    75c4:	f003 fe8a 	bl	b2dc <__aeabi_dsub>
    75c8:	a31f      	add	r3, pc, #124	; (adr r3, 7648 <__ieee754_rem_pio2+0x438>)
    75ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    75ce:	f003 fe87 	bl	b2e0 <__adddf3>
    75d2:	f04f 35ff 	mov.w	r5, #4294967295
    75d6:	e9ca 0102 	strd	r0, r1, [sl, #8]
    75da:	e6b7      	b.n	734c <__ieee754_rem_pio2+0x13c>
    75dc:	2303      	movs	r3, #3
    75de:	e694      	b.n	730a <__ieee754_rem_pio2+0xfa>
    75e0:	a311      	add	r3, pc, #68	; (adr r3, 7628 <__ieee754_rem_pio2+0x418>)
    75e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    75e6:	f003 fe7b 	bl	b2e0 <__adddf3>
    75ea:	a311      	add	r3, pc, #68	; (adr r3, 7630 <__ieee754_rem_pio2+0x420>)
    75ec:	e9d3 2300 	ldrd	r2, r3, [r3]
    75f0:	460d      	mov	r5, r1
    75f2:	4604      	mov	r4, r0
    75f4:	f003 fe74 	bl	b2e0 <__adddf3>
    75f8:	4602      	mov	r2, r0
    75fa:	460b      	mov	r3, r1
    75fc:	e9ca 2300 	strd	r2, r3, [sl]
    7600:	4629      	mov	r1, r5
    7602:	4620      	mov	r0, r4
    7604:	f003 fe6a 	bl	b2dc <__aeabi_dsub>
    7608:	a309      	add	r3, pc, #36	; (adr r3, 7630 <__ieee754_rem_pio2+0x420>)
    760a:	e9d3 2300 	ldrd	r2, r3, [r3]
    760e:	f003 fe67 	bl	b2e0 <__adddf3>
    7612:	f04f 35ff 	mov.w	r5, #4294967295
    7616:	e9ca 0102 	strd	r0, r1, [sl, #8]
    761a:	e697      	b.n	734c <__ieee754_rem_pio2+0x13c>
    761c:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
    7620:	e6fd      	b.n	741e <__ieee754_rem_pio2+0x20e>
    7622:	bf00      	nop
    7624:	f3af 8000 	nop.w
    7628:	1a600000 	.word	0x1a600000
    762c:	3dd0b461 	.word	0x3dd0b461
    7630:	2e037073 	.word	0x2e037073
    7634:	3ba3198a 	.word	0x3ba3198a
    7638:	2e000000 	.word	0x2e000000
    763c:	3ba3198a 	.word	0x3ba3198a
    7640:	252049c1 	.word	0x252049c1
    7644:	397b839a 	.word	0x397b839a
    7648:	1a626331 	.word	0x1a626331
    764c:	3dd0b461 	.word	0x3dd0b461
    7650:	3ff921fb 	.word	0x3ff921fb

00007654 <__ieee754_sqrt>:
    7654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7658:	4f5b      	ldr	r7, [pc, #364]	; (77c8 <__ieee754_sqrt+0x174>)
    765a:	438f      	bics	r7, r1
    765c:	4605      	mov	r5, r0
    765e:	460c      	mov	r4, r1
    7660:	f000 8092 	beq.w	7788 <__ieee754_sqrt+0x134>
    7664:	2900      	cmp	r1, #0
    7666:	460b      	mov	r3, r1
    7668:	4602      	mov	r2, r0
    766a:	dd6f      	ble.n	774c <__ieee754_sqrt+0xf8>
    766c:	150f      	asrs	r7, r1, #20
    766e:	d07b      	beq.n	7768 <__ieee754_sqrt+0x114>
    7670:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
    7674:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7678:	07f8      	lsls	r0, r7, #31
    767a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    767e:	d45c      	bmi.n	773a <__ieee754_sqrt+0xe6>
    7680:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
    7684:	2600      	movs	r6, #0
    7686:	440b      	add	r3, r1
    7688:	107f      	asrs	r7, r7, #1
    768a:	0052      	lsls	r2, r2, #1
    768c:	46b6      	mov	lr, r6
    768e:	2016      	movs	r0, #22
    7690:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    7694:	eb0e 0401 	add.w	r4, lr, r1
    7698:	429c      	cmp	r4, r3
    769a:	ea4f 75d2 	mov.w	r5, r2, lsr #31
    769e:	ea4f 0242 	mov.w	r2, r2, lsl #1
    76a2:	dc03      	bgt.n	76ac <__ieee754_sqrt+0x58>
    76a4:	1b1b      	subs	r3, r3, r4
    76a6:	eb04 0e01 	add.w	lr, r4, r1
    76aa:	440e      	add	r6, r1
    76ac:	3801      	subs	r0, #1
    76ae:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    76b2:	ea4f 0151 	mov.w	r1, r1, lsr #1
    76b6:	d1ed      	bne.n	7694 <__ieee754_sqrt+0x40>
    76b8:	4684      	mov	ip, r0
    76ba:	2420      	movs	r4, #32
    76bc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    76c0:	e009      	b.n	76d6 <__ieee754_sqrt+0x82>
    76c2:	d020      	beq.n	7706 <__ieee754_sqrt+0xb2>
    76c4:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
    76c8:	3c01      	subs	r4, #1
    76ca:	ea4f 0151 	mov.w	r1, r1, lsr #1
    76ce:	442b      	add	r3, r5
    76d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    76d4:	d020      	beq.n	7718 <__ieee754_sqrt+0xc4>
    76d6:	4573      	cmp	r3, lr
    76d8:	eb01 050c 	add.w	r5, r1, ip
    76dc:	ddf1      	ble.n	76c2 <__ieee754_sqrt+0x6e>
    76de:	2d00      	cmp	r5, #0
    76e0:	eb05 0c01 	add.w	ip, r5, r1
    76e4:	db09      	blt.n	76fa <__ieee754_sqrt+0xa6>
    76e6:	46f0      	mov	r8, lr
    76e8:	4295      	cmp	r5, r2
    76ea:	eba3 030e 	sub.w	r3, r3, lr
    76ee:	d900      	bls.n	76f2 <__ieee754_sqrt+0x9e>
    76f0:	3b01      	subs	r3, #1
    76f2:	1b52      	subs	r2, r2, r5
    76f4:	4408      	add	r0, r1
    76f6:	46c6      	mov	lr, r8
    76f8:	e7e4      	b.n	76c4 <__ieee754_sqrt+0x70>
    76fa:	f1bc 0f00 	cmp.w	ip, #0
    76fe:	dbf2      	blt.n	76e6 <__ieee754_sqrt+0x92>
    7700:	f10e 0801 	add.w	r8, lr, #1
    7704:	e7f0      	b.n	76e8 <__ieee754_sqrt+0x94>
    7706:	4295      	cmp	r5, r2
    7708:	d8dc      	bhi.n	76c4 <__ieee754_sqrt+0x70>
    770a:	2d00      	cmp	r5, #0
    770c:	eb05 0c01 	add.w	ip, r5, r1
    7710:	db44      	blt.n	779c <__ieee754_sqrt+0x148>
    7712:	4698      	mov	r8, r3
    7714:	2300      	movs	r3, #0
    7716:	e7ec      	b.n	76f2 <__ieee754_sqrt+0x9e>
    7718:	4313      	orrs	r3, r2
    771a:	d113      	bne.n	7744 <__ieee754_sqrt+0xf0>
    771c:	0840      	lsrs	r0, r0, #1
    771e:	1073      	asrs	r3, r6, #1
    7720:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
    7724:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    7728:	07f2      	lsls	r2, r6, #31
    772a:	eb03 5907 	add.w	r9, r3, r7, lsl #20
    772e:	bf48      	it	mi
    7730:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
    7734:	4649      	mov	r1, r9
    7736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    773a:	005b      	lsls	r3, r3, #1
    773c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
    7740:	0052      	lsls	r2, r2, #1
    7742:	e79d      	b.n	7680 <__ieee754_sqrt+0x2c>
    7744:	1c41      	adds	r1, r0, #1
    7746:	d02d      	beq.n	77a4 <__ieee754_sqrt+0x150>
    7748:	3001      	adds	r0, #1
    774a:	e7e7      	b.n	771c <__ieee754_sqrt+0xc8>
    774c:	4606      	mov	r6, r0
    774e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    7752:	433e      	orrs	r6, r7
    7754:	d0ef      	beq.n	7736 <__ieee754_sqrt+0xe2>
    7756:	bb69      	cbnz	r1, 77b4 <__ieee754_sqrt+0x160>
    7758:	460f      	mov	r7, r1
    775a:	0ad3      	lsrs	r3, r2, #11
    775c:	3f15      	subs	r7, #21
    775e:	0552      	lsls	r2, r2, #21
    7760:	2b00      	cmp	r3, #0
    7762:	d0fa      	beq.n	775a <__ieee754_sqrt+0x106>
    7764:	02de      	lsls	r6, r3, #11
    7766:	d420      	bmi.n	77aa <__ieee754_sqrt+0x156>
    7768:	2400      	movs	r4, #0
    776a:	e000      	b.n	776e <__ieee754_sqrt+0x11a>
    776c:	4604      	mov	r4, r0
    776e:	005b      	lsls	r3, r3, #1
    7770:	02dd      	lsls	r5, r3, #11
    7772:	f104 0001 	add.w	r0, r4, #1
    7776:	d5f9      	bpl.n	776c <__ieee754_sqrt+0x118>
    7778:	f1c0 0120 	rsb	r1, r0, #32
    777c:	fa22 f101 	lsr.w	r1, r2, r1
    7780:	430b      	orrs	r3, r1
    7782:	1b3f      	subs	r7, r7, r4
    7784:	4082      	lsls	r2, r0
    7786:	e773      	b.n	7670 <__ieee754_sqrt+0x1c>
    7788:	4602      	mov	r2, r0
    778a:	460b      	mov	r3, r1
    778c:	f003 ff5a 	bl	b644 <__aeabi_dmul>
    7790:	462a      	mov	r2, r5
    7792:	4623      	mov	r3, r4
    7794:	f003 fda4 	bl	b2e0 <__adddf3>
    7798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    779c:	f1bc 0f00 	cmp.w	ip, #0
    77a0:	daae      	bge.n	7700 <__ieee754_sqrt+0xac>
    77a2:	e7b6      	b.n	7712 <__ieee754_sqrt+0xbe>
    77a4:	3601      	adds	r6, #1
    77a6:	4620      	mov	r0, r4
    77a8:	e7b9      	b.n	771e <__ieee754_sqrt+0xca>
    77aa:	2000      	movs	r0, #0
    77ac:	2120      	movs	r1, #32
    77ae:	f04f 34ff 	mov.w	r4, #4294967295
    77b2:	e7e3      	b.n	777c <__ieee754_sqrt+0x128>
    77b4:	4602      	mov	r2, r0
    77b6:	460b      	mov	r3, r1
    77b8:	f003 fd90 	bl	b2dc <__aeabi_dsub>
    77bc:	4602      	mov	r2, r0
    77be:	460b      	mov	r3, r1
    77c0:	f004 f86a 	bl	b898 <__aeabi_ddiv>
    77c4:	e7b7      	b.n	7736 <__ieee754_sqrt+0xe2>
    77c6:	bf00      	nop
    77c8:	7ff00000 	.word	0x7ff00000
    77cc:	00000000 	.word	0x00000000

000077d0 <__kernel_cos>:
    77d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    77d4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    77d8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
    77dc:	b085      	sub	sp, #20
    77de:	460c      	mov	r4, r1
    77e0:	4692      	mov	sl, r2
    77e2:	469b      	mov	fp, r3
    77e4:	4605      	mov	r5, r0
    77e6:	da6b      	bge.n	78c0 <__kernel_cos+0xf0>
    77e8:	f004 f9dc 	bl	bba4 <__aeabi_d2iz>
    77ec:	2800      	cmp	r0, #0
    77ee:	f000 80e8 	beq.w	79c2 <__kernel_cos+0x1f2>
    77f2:	462a      	mov	r2, r5
    77f4:	4623      	mov	r3, r4
    77f6:	4628      	mov	r0, r5
    77f8:	4621      	mov	r1, r4
    77fa:	f003 ff23 	bl	b644 <__aeabi_dmul>
    77fe:	a374      	add	r3, pc, #464	; (adr r3, 79d0 <__kernel_cos+0x200>)
    7800:	e9d3 2300 	ldrd	r2, r3, [r3]
    7804:	4680      	mov	r8, r0
    7806:	4689      	mov	r9, r1
    7808:	f003 ff1c 	bl	b644 <__aeabi_dmul>
    780c:	a372      	add	r3, pc, #456	; (adr r3, 79d8 <__kernel_cos+0x208>)
    780e:	e9d3 2300 	ldrd	r2, r3, [r3]
    7812:	f003 fd65 	bl	b2e0 <__adddf3>
    7816:	4642      	mov	r2, r8
    7818:	464b      	mov	r3, r9
    781a:	f003 ff13 	bl	b644 <__aeabi_dmul>
    781e:	a370      	add	r3, pc, #448	; (adr r3, 79e0 <__kernel_cos+0x210>)
    7820:	e9d3 2300 	ldrd	r2, r3, [r3]
    7824:	f003 fd5a 	bl	b2dc <__aeabi_dsub>
    7828:	4642      	mov	r2, r8
    782a:	464b      	mov	r3, r9
    782c:	f003 ff0a 	bl	b644 <__aeabi_dmul>
    7830:	a36d      	add	r3, pc, #436	; (adr r3, 79e8 <__kernel_cos+0x218>)
    7832:	e9d3 2300 	ldrd	r2, r3, [r3]
    7836:	f003 fd53 	bl	b2e0 <__adddf3>
    783a:	4642      	mov	r2, r8
    783c:	464b      	mov	r3, r9
    783e:	f003 ff01 	bl	b644 <__aeabi_dmul>
    7842:	a36b      	add	r3, pc, #428	; (adr r3, 79f0 <__kernel_cos+0x220>)
    7844:	e9d3 2300 	ldrd	r2, r3, [r3]
    7848:	f003 fd48 	bl	b2dc <__aeabi_dsub>
    784c:	4642      	mov	r2, r8
    784e:	464b      	mov	r3, r9
    7850:	f003 fef8 	bl	b644 <__aeabi_dmul>
    7854:	a368      	add	r3, pc, #416	; (adr r3, 79f8 <__kernel_cos+0x228>)
    7856:	e9d3 2300 	ldrd	r2, r3, [r3]
    785a:	f003 fd41 	bl	b2e0 <__adddf3>
    785e:	4642      	mov	r2, r8
    7860:	464b      	mov	r3, r9
    7862:	f003 feef 	bl	b644 <__aeabi_dmul>
    7866:	e9cd 0100 	strd	r0, r1, [sp]
    786a:	2200      	movs	r2, #0
    786c:	4b64      	ldr	r3, [pc, #400]	; (7a00 <__kernel_cos+0x230>)
    786e:	4640      	mov	r0, r8
    7870:	4649      	mov	r1, r9
    7872:	f003 fee7 	bl	b644 <__aeabi_dmul>
    7876:	e9dd 2300 	ldrd	r2, r3, [sp]
    787a:	4606      	mov	r6, r0
    787c:	460f      	mov	r7, r1
    787e:	4640      	mov	r0, r8
    7880:	4649      	mov	r1, r9
    7882:	f003 fedf 	bl	b644 <__aeabi_dmul>
    7886:	4652      	mov	r2, sl
    7888:	4680      	mov	r8, r0
    788a:	4689      	mov	r9, r1
    788c:	465b      	mov	r3, fp
    788e:	4628      	mov	r0, r5
    7890:	4621      	mov	r1, r4
    7892:	f003 fed7 	bl	b644 <__aeabi_dmul>
    7896:	4602      	mov	r2, r0
    7898:	460b      	mov	r3, r1
    789a:	4640      	mov	r0, r8
    789c:	4649      	mov	r1, r9
    789e:	f003 fd1d 	bl	b2dc <__aeabi_dsub>
    78a2:	4602      	mov	r2, r0
    78a4:	460b      	mov	r3, r1
    78a6:	4630      	mov	r0, r6
    78a8:	4639      	mov	r1, r7
    78aa:	f003 fd17 	bl	b2dc <__aeabi_dsub>
    78ae:	4602      	mov	r2, r0
    78b0:	460b      	mov	r3, r1
    78b2:	2000      	movs	r0, #0
    78b4:	4953      	ldr	r1, [pc, #332]	; (7a04 <__kernel_cos+0x234>)
    78b6:	f003 fd11 	bl	b2dc <__aeabi_dsub>
    78ba:	b005      	add	sp, #20
    78bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    78c0:	4602      	mov	r2, r0
    78c2:	460b      	mov	r3, r1
    78c4:	f003 febe 	bl	b644 <__aeabi_dmul>
    78c8:	a341      	add	r3, pc, #260	; (adr r3, 79d0 <__kernel_cos+0x200>)
    78ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    78ce:	4680      	mov	r8, r0
    78d0:	4689      	mov	r9, r1
    78d2:	f003 feb7 	bl	b644 <__aeabi_dmul>
    78d6:	a340      	add	r3, pc, #256	; (adr r3, 79d8 <__kernel_cos+0x208>)
    78d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    78dc:	f003 fd00 	bl	b2e0 <__adddf3>
    78e0:	4642      	mov	r2, r8
    78e2:	464b      	mov	r3, r9
    78e4:	f003 feae 	bl	b644 <__aeabi_dmul>
    78e8:	a33d      	add	r3, pc, #244	; (adr r3, 79e0 <__kernel_cos+0x210>)
    78ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    78ee:	f003 fcf5 	bl	b2dc <__aeabi_dsub>
    78f2:	4642      	mov	r2, r8
    78f4:	464b      	mov	r3, r9
    78f6:	f003 fea5 	bl	b644 <__aeabi_dmul>
    78fa:	a33b      	add	r3, pc, #236	; (adr r3, 79e8 <__kernel_cos+0x218>)
    78fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    7900:	f003 fcee 	bl	b2e0 <__adddf3>
    7904:	4642      	mov	r2, r8
    7906:	464b      	mov	r3, r9
    7908:	f003 fe9c 	bl	b644 <__aeabi_dmul>
    790c:	a338      	add	r3, pc, #224	; (adr r3, 79f0 <__kernel_cos+0x220>)
    790e:	e9d3 2300 	ldrd	r2, r3, [r3]
    7912:	f003 fce3 	bl	b2dc <__aeabi_dsub>
    7916:	4642      	mov	r2, r8
    7918:	464b      	mov	r3, r9
    791a:	f003 fe93 	bl	b644 <__aeabi_dmul>
    791e:	a336      	add	r3, pc, #216	; (adr r3, 79f8 <__kernel_cos+0x228>)
    7920:	e9d3 2300 	ldrd	r2, r3, [r3]
    7924:	f003 fcdc 	bl	b2e0 <__adddf3>
    7928:	464b      	mov	r3, r9
    792a:	4642      	mov	r2, r8
    792c:	f003 fe8a 	bl	b644 <__aeabi_dmul>
    7930:	4b35      	ldr	r3, [pc, #212]	; (7a08 <__kernel_cos+0x238>)
    7932:	429e      	cmp	r6, r3
    7934:	e9cd 0100 	strd	r0, r1, [sp]
    7938:	dd97      	ble.n	786a <__kernel_cos+0x9a>
    793a:	4b34      	ldr	r3, [pc, #208]	; (7a0c <__kernel_cos+0x23c>)
    793c:	429e      	cmp	r6, r3
    793e:	f04f 0200 	mov.w	r2, #0
    7942:	dc38      	bgt.n	79b6 <__kernel_cos+0x1e6>
    7944:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
    7948:	2000      	movs	r0, #0
    794a:	492e      	ldr	r1, [pc, #184]	; (7a04 <__kernel_cos+0x234>)
    794c:	4616      	mov	r6, r2
    794e:	461f      	mov	r7, r3
    7950:	f003 fcc4 	bl	b2dc <__aeabi_dsub>
    7954:	e9cd 0102 	strd	r0, r1, [sp, #8]
    7958:	2200      	movs	r2, #0
    795a:	4b29      	ldr	r3, [pc, #164]	; (7a00 <__kernel_cos+0x230>)
    795c:	4640      	mov	r0, r8
    795e:	4649      	mov	r1, r9
    7960:	f003 fe70 	bl	b644 <__aeabi_dmul>
    7964:	4632      	mov	r2, r6
    7966:	463b      	mov	r3, r7
    7968:	f003 fcb8 	bl	b2dc <__aeabi_dsub>
    796c:	e9dd 2300 	ldrd	r2, r3, [sp]
    7970:	4606      	mov	r6, r0
    7972:	460f      	mov	r7, r1
    7974:	4640      	mov	r0, r8
    7976:	4649      	mov	r1, r9
    7978:	f003 fe64 	bl	b644 <__aeabi_dmul>
    797c:	4652      	mov	r2, sl
    797e:	4680      	mov	r8, r0
    7980:	4689      	mov	r9, r1
    7982:	465b      	mov	r3, fp
    7984:	4628      	mov	r0, r5
    7986:	4621      	mov	r1, r4
    7988:	f003 fe5c 	bl	b644 <__aeabi_dmul>
    798c:	4602      	mov	r2, r0
    798e:	460b      	mov	r3, r1
    7990:	4640      	mov	r0, r8
    7992:	4649      	mov	r1, r9
    7994:	f003 fca2 	bl	b2dc <__aeabi_dsub>
    7998:	4602      	mov	r2, r0
    799a:	460b      	mov	r3, r1
    799c:	4630      	mov	r0, r6
    799e:	4639      	mov	r1, r7
    79a0:	f003 fc9c 	bl	b2dc <__aeabi_dsub>
    79a4:	4602      	mov	r2, r0
    79a6:	460b      	mov	r3, r1
    79a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    79ac:	f003 fc96 	bl	b2dc <__aeabi_dsub>
    79b0:	b005      	add	sp, #20
    79b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    79b6:	4b16      	ldr	r3, [pc, #88]	; (7a10 <__kernel_cos+0x240>)
    79b8:	4f16      	ldr	r7, [pc, #88]	; (7a14 <__kernel_cos+0x244>)
    79ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
    79be:	2600      	movs	r6, #0
    79c0:	e7ca      	b.n	7958 <__kernel_cos+0x188>
    79c2:	4910      	ldr	r1, [pc, #64]	; (7a04 <__kernel_cos+0x234>)
    79c4:	2000      	movs	r0, #0
    79c6:	b005      	add	sp, #20
    79c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    79cc:	f3af 8000 	nop.w
    79d0:	be8838d4 	.word	0xbe8838d4
    79d4:	bda8fae9 	.word	0xbda8fae9
    79d8:	bdb4b1c4 	.word	0xbdb4b1c4
    79dc:	3e21ee9e 	.word	0x3e21ee9e
    79e0:	809c52ad 	.word	0x809c52ad
    79e4:	3e927e4f 	.word	0x3e927e4f
    79e8:	19cb1590 	.word	0x19cb1590
    79ec:	3efa01a0 	.word	0x3efa01a0
    79f0:	16c15177 	.word	0x16c15177
    79f4:	3f56c16c 	.word	0x3f56c16c
    79f8:	5555554c 	.word	0x5555554c
    79fc:	3fa55555 	.word	0x3fa55555
    7a00:	3fe00000 	.word	0x3fe00000
    7a04:	3ff00000 	.word	0x3ff00000
    7a08:	3fd33332 	.word	0x3fd33332
    7a0c:	3fe90000 	.word	0x3fe90000
    7a10:	3fe70000 	.word	0x3fe70000
    7a14:	3fd20000 	.word	0x3fd20000

00007a18 <__kernel_rem_pio2>:
    7a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a1c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
    7a20:	4c9c      	ldr	r4, [pc, #624]	; (7c94 <__kernel_rem_pio2+0x27c>)
    7a22:	9ea2      	ldr	r6, [sp, #648]	; 0x288
    7a24:	4d9c      	ldr	r5, [pc, #624]	; (7c98 <__kernel_rem_pio2+0x280>)
    7a26:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
    7a2a:	9405      	str	r4, [sp, #20]
    7a2c:	4626      	mov	r6, r4
    7a2e:	1ed4      	subs	r4, r2, #3
    7a30:	fb85 7504 	smull	r7, r5, r5, r4
    7a34:	17e4      	asrs	r4, r4, #31
    7a36:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
    7a3a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    7a3e:	461d      	mov	r5, r3
    7a40:	9308      	str	r3, [sp, #32]
    7a42:	1c63      	adds	r3, r4, #1
    7a44:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
    7a48:	3d01      	subs	r5, #1
    7a4a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7a4e:	9304      	str	r3, [sp, #16]
    7a50:	462b      	mov	r3, r5
    7a52:	9409      	str	r4, [sp, #36]	; 0x24
    7a54:	9502      	str	r5, [sp, #8]
    7a56:	1b65      	subs	r5, r4, r5
    7a58:	18f4      	adds	r4, r6, r3
    7a5a:	9003      	str	r0, [sp, #12]
    7a5c:	9106      	str	r1, [sp, #24]
    7a5e:	d41a      	bmi.n	7a96 <__kernel_rem_pio2+0x7e>
    7a60:	442c      	add	r4, r5
    7a62:	3401      	adds	r4, #1
    7a64:	f10d 0878 	add.w	r8, sp, #120	; 0x78
    7a68:	2600      	movs	r6, #0
    7a6a:	2700      	movs	r7, #0
    7a6c:	f8dd 928c 	ldr.w	r9, [sp, #652]	; 0x28c
    7a70:	e008      	b.n	7a84 <__kernel_rem_pio2+0x6c>
    7a72:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
    7a76:	f003 fd7f 	bl	b578 <__aeabi_i2d>
    7a7a:	3501      	adds	r5, #1
    7a7c:	42a5      	cmp	r5, r4
    7a7e:	e9e8 0102 	strd	r0, r1, [r8, #8]!
    7a82:	d008      	beq.n	7a96 <__kernel_rem_pio2+0x7e>
    7a84:	2d00      	cmp	r5, #0
    7a86:	daf4      	bge.n	7a72 <__kernel_rem_pio2+0x5a>
    7a88:	3501      	adds	r5, #1
    7a8a:	4630      	mov	r0, r6
    7a8c:	4639      	mov	r1, r7
    7a8e:	42a5      	cmp	r5, r4
    7a90:	e9e8 0102 	strd	r0, r1, [r8, #8]!
    7a94:	d1f6      	bne.n	7a84 <__kernel_rem_pio2+0x6c>
    7a96:	9b05      	ldr	r3, [sp, #20]
    7a98:	2b00      	cmp	r3, #0
    7a9a:	db2e      	blt.n	7afa <__kernel_rem_pio2+0xe2>
    7a9c:	9b08      	ldr	r3, [sp, #32]
    7a9e:	ea4f 09c3 	mov.w	r9, r3, lsl #3
    7aa2:	9b03      	ldr	r3, [sp, #12]
    7aa4:	f1a9 0808 	sub.w	r8, r9, #8
    7aa8:	4498      	add	r8, r3
    7aaa:	ab20      	add	r3, sp, #128	; 0x80
    7aac:	4499      	add	r9, r3
    7aae:	9b05      	ldr	r3, [sp, #20]
    7ab0:	aa70      	add	r2, sp, #448	; 0x1c0
    7ab2:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
    7ab6:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
    7aba:	9b02      	ldr	r3, [sp, #8]
    7abc:	2b00      	cmp	r3, #0
    7abe:	f2c0 830f 	blt.w	80e0 <__kernel_rem_pio2+0x6c8>
    7ac2:	9b03      	ldr	r3, [sp, #12]
    7ac4:	464d      	mov	r5, r9
    7ac6:	f1a3 0408 	sub.w	r4, r3, #8
    7aca:	2600      	movs	r6, #0
    7acc:	2700      	movs	r7, #0
    7ace:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
    7ad2:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
    7ad6:	f003 fdb5 	bl	b644 <__aeabi_dmul>
    7ada:	4602      	mov	r2, r0
    7adc:	460b      	mov	r3, r1
    7ade:	4630      	mov	r0, r6
    7ae0:	4639      	mov	r1, r7
    7ae2:	f003 fbfd 	bl	b2e0 <__adddf3>
    7ae6:	4544      	cmp	r4, r8
    7ae8:	4606      	mov	r6, r0
    7aea:	460f      	mov	r7, r1
    7aec:	d1ef      	bne.n	7ace <__kernel_rem_pio2+0xb6>
    7aee:	e9ea 6702 	strd	r6, r7, [sl, #8]!
    7af2:	45da      	cmp	sl, fp
    7af4:	f109 0908 	add.w	r9, r9, #8
    7af8:	d1df      	bne.n	7aba <__kernel_rem_pio2+0xa2>
    7afa:	9805      	ldr	r0, [sp, #20]
    7afc:	9a08      	ldr	r2, [sp, #32]
    7afe:	9000      	str	r0, [sp, #0]
    7b00:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    7b04:	3b01      	subs	r3, #1
    7b06:	009b      	lsls	r3, r3, #2
    7b08:	ac0c      	add	r4, sp, #48	; 0x30
    7b0a:	1f19      	subs	r1, r3, #4
    7b0c:	4423      	add	r3, r4
    7b0e:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
    7b12:	930b      	str	r3, [sp, #44]	; 0x2c
    7b14:	9b03      	ldr	r3, [sp, #12]
    7b16:	3a01      	subs	r2, #1
    7b18:	4421      	add	r1, r4
    7b1a:	910a      	str	r1, [sp, #40]	; 0x28
    7b1c:	eb03 0bc2 	add.w	fp, r3, r2, lsl #3
    7b20:	9a00      	ldr	r2, [sp, #0]
    7b22:	a998      	add	r1, sp, #608	; 0x260
    7b24:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
    7b28:	2a00      	cmp	r2, #0
    7b2a:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
    7b2e:	4613      	mov	r3, r2
    7b30:	dd2b      	ble.n	7b8a <__kernel_rem_pio2+0x172>
    7b32:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
    7b36:	f1a8 08a8 	sub.w	r8, r8, #168	; 0xa8
    7b3a:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
    7b3e:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
    7b42:	2200      	movs	r2, #0
    7b44:	4b55      	ldr	r3, [pc, #340]	; (7c9c <__kernel_rem_pio2+0x284>)
    7b46:	4620      	mov	r0, r4
    7b48:	4629      	mov	r1, r5
    7b4a:	f003 fd7b 	bl	b644 <__aeabi_dmul>
    7b4e:	f004 f829 	bl	bba4 <__aeabi_d2iz>
    7b52:	f003 fd11 	bl	b578 <__aeabi_i2d>
    7b56:	2200      	movs	r2, #0
    7b58:	4b51      	ldr	r3, [pc, #324]	; (7ca0 <__kernel_rem_pio2+0x288>)
    7b5a:	4606      	mov	r6, r0
    7b5c:	460f      	mov	r7, r1
    7b5e:	f003 fd71 	bl	b644 <__aeabi_dmul>
    7b62:	4602      	mov	r2, r0
    7b64:	460b      	mov	r3, r1
    7b66:	4620      	mov	r0, r4
    7b68:	4629      	mov	r1, r5
    7b6a:	f003 fbb7 	bl	b2dc <__aeabi_dsub>
    7b6e:	f004 f819 	bl	bba4 <__aeabi_d2iz>
    7b72:	e878 2302 	ldrd	r2, r3, [r8], #-8
    7b76:	f849 0f04 	str.w	r0, [r9, #4]!
    7b7a:	4639      	mov	r1, r7
    7b7c:	4630      	mov	r0, r6
    7b7e:	f003 fbaf 	bl	b2e0 <__adddf3>
    7b82:	45d0      	cmp	r8, sl
    7b84:	4604      	mov	r4, r0
    7b86:	460d      	mov	r5, r1
    7b88:	d1db      	bne.n	7b42 <__kernel_rem_pio2+0x12a>
    7b8a:	f8dd 9010 	ldr.w	r9, [sp, #16]
    7b8e:	4620      	mov	r0, r4
    7b90:	4629      	mov	r1, r5
    7b92:	464a      	mov	r2, r9
    7b94:	f000 fcd8 	bl	8548 <scalbn>
    7b98:	2200      	movs	r2, #0
    7b9a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    7b9e:	4604      	mov	r4, r0
    7ba0:	460d      	mov	r5, r1
    7ba2:	f003 fd4f 	bl	b644 <__aeabi_dmul>
    7ba6:	f000 fc3b 	bl	8420 <floor>
    7baa:	2200      	movs	r2, #0
    7bac:	4b3d      	ldr	r3, [pc, #244]	; (7ca4 <__kernel_rem_pio2+0x28c>)
    7bae:	f003 fd49 	bl	b644 <__aeabi_dmul>
    7bb2:	4602      	mov	r2, r0
    7bb4:	460b      	mov	r3, r1
    7bb6:	4620      	mov	r0, r4
    7bb8:	4629      	mov	r1, r5
    7bba:	f003 fb8f 	bl	b2dc <__aeabi_dsub>
    7bbe:	460d      	mov	r5, r1
    7bc0:	4604      	mov	r4, r0
    7bc2:	f003 ffef 	bl	bba4 <__aeabi_d2iz>
    7bc6:	4680      	mov	r8, r0
    7bc8:	f003 fcd6 	bl	b578 <__aeabi_i2d>
    7bcc:	460b      	mov	r3, r1
    7bce:	4602      	mov	r2, r0
    7bd0:	4629      	mov	r1, r5
    7bd2:	4620      	mov	r0, r4
    7bd4:	f003 fb82 	bl	b2dc <__aeabi_dsub>
    7bd8:	464b      	mov	r3, r9
    7bda:	2b00      	cmp	r3, #0
    7bdc:	4606      	mov	r6, r0
    7bde:	460f      	mov	r7, r1
    7be0:	f340 80f7 	ble.w	7dd2 <__kernel_rem_pio2+0x3ba>
    7be4:	9a00      	ldr	r2, [sp, #0]
    7be6:	a90c      	add	r1, sp, #48	; 0x30
    7be8:	3a01      	subs	r2, #1
    7bea:	f1c9 0318 	rsb	r3, r9, #24
    7bee:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
    7bf2:	fa45 f103 	asr.w	r1, r5, r3
    7bf6:	fa01 f303 	lsl.w	r3, r1, r3
    7bfa:	a80c      	add	r0, sp, #48	; 0x30
    7bfc:	1aeb      	subs	r3, r5, r3
    7bfe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    7c02:	f1c9 0517 	rsb	r5, r9, #23
    7c06:	4488      	add	r8, r1
    7c08:	fa43 f505 	asr.w	r5, r3, r5
    7c0c:	2d00      	cmp	r5, #0
    7c0e:	dd63      	ble.n	7cd8 <__kernel_rem_pio2+0x2c0>
    7c10:	9b00      	ldr	r3, [sp, #0]
    7c12:	2b00      	cmp	r3, #0
    7c14:	f108 0801 	add.w	r8, r8, #1
    7c18:	f340 8281 	ble.w	811e <__kernel_rem_pio2+0x706>
    7c1c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    7c1e:	2c00      	cmp	r4, #0
    7c20:	f000 8318 	beq.w	8254 <__kernel_rem_pio2+0x83c>
    7c24:	2001      	movs	r0, #1
    7c26:	2300      	movs	r3, #0
    7c28:	aa0c      	add	r2, sp, #48	; 0x30
    7c2a:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
    7c2e:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
    7c32:	9a00      	ldr	r2, [sp, #0]
    7c34:	4282      	cmp	r2, r0
    7c36:	dd19      	ble.n	7c6c <__kernel_rem_pio2+0x254>
    7c38:	aa0c      	add	r2, sp, #48	; 0x30
    7c3a:	ac0c      	add	r4, sp, #48	; 0x30
    7c3c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    7c40:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    7c44:	1a51      	subs	r1, r2, r1
    7c46:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
    7c4a:	9900      	ldr	r1, [sp, #0]
    7c4c:	3302      	adds	r3, #2
    7c4e:	4299      	cmp	r1, r3
    7c50:	dd0c      	ble.n	7c6c <__kernel_rem_pio2+0x254>
    7c52:	4610      	mov	r0, r2
    7c54:	9a00      	ldr	r2, [sp, #0]
    7c56:	a90c      	add	r1, sp, #48	; 0x30
    7c58:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    7c5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    7c60:	681a      	ldr	r2, [r3, #0]
    7c62:	1a82      	subs	r2, r0, r2
    7c64:	f843 2b04 	str.w	r2, [r3], #4
    7c68:	428b      	cmp	r3, r1
    7c6a:	d1f9      	bne.n	7c60 <__kernel_rem_pio2+0x248>
    7c6c:	9b04      	ldr	r3, [sp, #16]
    7c6e:	2b00      	cmp	r3, #0
    7c70:	dd1a      	ble.n	7ca8 <__kernel_rem_pio2+0x290>
    7c72:	9b04      	ldr	r3, [sp, #16]
    7c74:	2b01      	cmp	r3, #1
    7c76:	f04f 0401 	mov.w	r4, #1
    7c7a:	f040 8258 	bne.w	812e <__kernel_rem_pio2+0x716>
    7c7e:	9b00      	ldr	r3, [sp, #0]
    7c80:	1e5a      	subs	r2, r3, #1
    7c82:	ab0c      	add	r3, sp, #48	; 0x30
    7c84:	a90c      	add	r1, sp, #48	; 0x30
    7c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7c8a:	f3c3 0316 	ubfx	r3, r3, #0, #23
    7c8e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    7c92:	e258      	b.n	8146 <__kernel_rem_pio2+0x72e>
    7c94:	0000c430 	.word	0x0000c430
    7c98:	2aaaaaab 	.word	0x2aaaaaab
    7c9c:	3e700000 	.word	0x3e700000
    7ca0:	41700000 	.word	0x41700000
    7ca4:	40200000 	.word	0x40200000
    7ca8:	2d02      	cmp	r5, #2
    7caa:	d115      	bne.n	7cd8 <__kernel_rem_pio2+0x2c0>
    7cac:	4632      	mov	r2, r6
    7cae:	463b      	mov	r3, r7
    7cb0:	2000      	movs	r0, #0
    7cb2:	4997      	ldr	r1, [pc, #604]	; (7f10 <__kernel_rem_pio2+0x4f8>)
    7cb4:	f003 fb12 	bl	b2dc <__aeabi_dsub>
    7cb8:	4606      	mov	r6, r0
    7cba:	460f      	mov	r7, r1
    7cbc:	9a04      	ldr	r2, [sp, #16]
    7cbe:	4994      	ldr	r1, [pc, #592]	; (7f10 <__kernel_rem_pio2+0x4f8>)
    7cc0:	2000      	movs	r0, #0
    7cc2:	f000 fc41 	bl	8548 <scalbn>
    7cc6:	4602      	mov	r2, r0
    7cc8:	460b      	mov	r3, r1
    7cca:	4630      	mov	r0, r6
    7ccc:	4639      	mov	r1, r7
    7cce:	f003 fb05 	bl	b2dc <__aeabi_dsub>
    7cd2:	2502      	movs	r5, #2
    7cd4:	4606      	mov	r6, r0
    7cd6:	460f      	mov	r7, r1
    7cd8:	2200      	movs	r2, #0
    7cda:	2300      	movs	r3, #0
    7cdc:	4630      	mov	r0, r6
    7cde:	4639      	mov	r1, r7
    7ce0:	f003 ff18 	bl	bb14 <__aeabi_dcmpeq>
    7ce4:	2800      	cmp	r0, #0
    7ce6:	f000 8252 	beq.w	818e <__kernel_rem_pio2+0x776>
    7cea:	9a00      	ldr	r2, [sp, #0]
    7cec:	9b05      	ldr	r3, [sp, #20]
    7cee:	1e50      	subs	r0, r2, #1
    7cf0:	4283      	cmp	r3, r0
    7cf2:	dc0f      	bgt.n	7d14 <__kernel_rem_pio2+0x2fc>
    7cf4:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    7cf8:	3b01      	subs	r3, #1
    7cfa:	aa0c      	add	r2, sp, #48	; 0x30
    7cfc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    7cfe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7d02:	2200      	movs	r2, #0
    7d04:	f853 1904 	ldr.w	r1, [r3], #-4
    7d08:	42a3      	cmp	r3, r4
    7d0a:	ea42 0201 	orr.w	r2, r2, r1
    7d0e:	d1f9      	bne.n	7d04 <__kernel_rem_pio2+0x2ec>
    7d10:	2a00      	cmp	r2, #0
    7d12:	d16f      	bne.n	7df4 <__kernel_rem_pio2+0x3dc>
    7d14:	9b05      	ldr	r3, [sp, #20]
    7d16:	aa0c      	add	r2, sp, #48	; 0x30
    7d18:	3b01      	subs	r3, #1
    7d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d1e:	2b00      	cmp	r3, #0
    7d20:	f040 8233 	bne.w	818a <__kernel_rem_pio2+0x772>
    7d24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7d26:	2301      	movs	r3, #1
    7d28:	f852 1904 	ldr.w	r1, [r2], #-4
    7d2c:	3301      	adds	r3, #1
    7d2e:	2900      	cmp	r1, #0
    7d30:	d0fa      	beq.n	7d28 <__kernel_rem_pio2+0x310>
    7d32:	9a00      	ldr	r2, [sp, #0]
    7d34:	18d3      	adds	r3, r2, r3
    7d36:	f102 0a01 	add.w	sl, r2, #1
    7d3a:	459a      	cmp	sl, r3
    7d3c:	9307      	str	r3, [sp, #28]
    7d3e:	dc3d      	bgt.n	7dbc <__kernel_rem_pio2+0x3a4>
    7d40:	9b00      	ldr	r3, [sp, #0]
    7d42:	9908      	ldr	r1, [sp, #32]
    7d44:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7d46:	440b      	add	r3, r1
    7d48:	9907      	ldr	r1, [sp, #28]
    7d4a:	eb0a 0802 	add.w	r8, sl, r2
    7d4e:	4699      	mov	r9, r3
    7d50:	ab20      	add	r3, sp, #128	; 0x80
    7d52:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    7d56:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
    7d5a:	188b      	adds	r3, r1, r2
    7d5c:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
    7d5e:	f108 38ff 	add.w	r8, r8, #4294967295
    7d62:	eb02 0888 	add.w	r8, r2, r8, lsl #2
    7d66:	aa70      	add	r2, sp, #448	; 0x1c0
    7d68:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
    7d6c:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
    7d6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7d72:	9300      	str	r3, [sp, #0]
    7d74:	f858 0f04 	ldr.w	r0, [r8, #4]!
    7d78:	f003 fbfe 	bl	b578 <__aeabi_i2d>
    7d7c:	9b02      	ldr	r3, [sp, #8]
    7d7e:	2b00      	cmp	r3, #0
    7d80:	e8e9 0102 	strd	r0, r1, [r9], #8
    7d84:	db1d      	blt.n	7dc2 <__kernel_rem_pio2+0x3aa>
    7d86:	9b03      	ldr	r3, [sp, #12]
    7d88:	464d      	mov	r5, r9
    7d8a:	f1a3 0408 	sub.w	r4, r3, #8
    7d8e:	2600      	movs	r6, #0
    7d90:	2700      	movs	r7, #0
    7d92:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
    7d96:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
    7d9a:	f003 fc53 	bl	b644 <__aeabi_dmul>
    7d9e:	4602      	mov	r2, r0
    7da0:	460b      	mov	r3, r1
    7da2:	4630      	mov	r0, r6
    7da4:	4639      	mov	r1, r7
    7da6:	f003 fa9b 	bl	b2e0 <__adddf3>
    7daa:	455c      	cmp	r4, fp
    7dac:	4606      	mov	r6, r0
    7dae:	460f      	mov	r7, r1
    7db0:	d1ef      	bne.n	7d92 <__kernel_rem_pio2+0x37a>
    7db2:	9b00      	ldr	r3, [sp, #0]
    7db4:	4598      	cmp	r8, r3
    7db6:	e8ea 6702 	strd	r6, r7, [sl], #8
    7dba:	d1db      	bne.n	7d74 <__kernel_rem_pio2+0x35c>
    7dbc:	9b07      	ldr	r3, [sp, #28]
    7dbe:	9300      	str	r3, [sp, #0]
    7dc0:	e6ae      	b.n	7b20 <__kernel_rem_pio2+0x108>
    7dc2:	9b00      	ldr	r3, [sp, #0]
    7dc4:	2600      	movs	r6, #0
    7dc6:	2700      	movs	r7, #0
    7dc8:	4598      	cmp	r8, r3
    7dca:	e8ea 6702 	strd	r6, r7, [sl], #8
    7dce:	d1d1      	bne.n	7d74 <__kernel_rem_pio2+0x35c>
    7dd0:	e7f4      	b.n	7dbc <__kernel_rem_pio2+0x3a4>
    7dd2:	d106      	bne.n	7de2 <__kernel_rem_pio2+0x3ca>
    7dd4:	9b00      	ldr	r3, [sp, #0]
    7dd6:	aa0c      	add	r2, sp, #48	; 0x30
    7dd8:	3b01      	subs	r3, #1
    7dda:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    7dde:	15ed      	asrs	r5, r5, #23
    7de0:	e714      	b.n	7c0c <__kernel_rem_pio2+0x1f4>
    7de2:	2200      	movs	r2, #0
    7de4:	4b4b      	ldr	r3, [pc, #300]	; (7f14 <__kernel_rem_pio2+0x4fc>)
    7de6:	f003 feb3 	bl	bb50 <__aeabi_dcmpge>
    7dea:	2800      	cmp	r0, #0
    7dec:	f040 8182 	bne.w	80f4 <__kernel_rem_pio2+0x6dc>
    7df0:	4605      	mov	r5, r0
    7df2:	e771      	b.n	7cd8 <__kernel_rem_pio2+0x2c0>
    7df4:	a90c      	add	r1, sp, #48	; 0x30
    7df6:	9502      	str	r5, [sp, #8]
    7df8:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    7dfc:	9904      	ldr	r1, [sp, #16]
    7dfe:	f8cd 801c 	str.w	r8, [sp, #28]
    7e02:	3918      	subs	r1, #24
    7e04:	4602      	mov	r2, r0
    7e06:	9000      	str	r0, [sp, #0]
    7e08:	9104      	str	r1, [sp, #16]
    7e0a:	b96b      	cbnz	r3, 7e28 <__kernel_rem_pio2+0x410>
    7e0c:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    7e10:	3b01      	subs	r3, #1
    7e12:	a80c      	add	r0, sp, #48	; 0x30
    7e14:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    7e18:	f853 0904 	ldr.w	r0, [r3], #-4
    7e1c:	3a01      	subs	r2, #1
    7e1e:	3918      	subs	r1, #24
    7e20:	2800      	cmp	r0, #0
    7e22:	d0f9      	beq.n	7e18 <__kernel_rem_pio2+0x400>
    7e24:	9200      	str	r2, [sp, #0]
    7e26:	9104      	str	r1, [sp, #16]
    7e28:	9a04      	ldr	r2, [sp, #16]
    7e2a:	4939      	ldr	r1, [pc, #228]	; (7f10 <__kernel_rem_pio2+0x4f8>)
    7e2c:	2000      	movs	r0, #0
    7e2e:	f000 fb8b 	bl	8548 <scalbn>
    7e32:	9b00      	ldr	r3, [sp, #0]
    7e34:	2b00      	cmp	r3, #0
    7e36:	4604      	mov	r4, r0
    7e38:	460d      	mov	r5, r1
    7e3a:	f2c0 8203 	blt.w	8244 <__kernel_rem_pio2+0x82c>
    7e3e:	00da      	lsls	r2, r3, #3
    7e40:	a970      	add	r1, sp, #448	; 0x1c0
    7e42:	eb01 0b02 	add.w	fp, r1, r2
    7e46:	9204      	str	r2, [sp, #16]
    7e48:	aa0c      	add	r2, sp, #48	; 0x30
    7e4a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
    7e4e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 7f18 <__kernel_rem_pio2+0x500>
    7e52:	f10b 0708 	add.w	r7, fp, #8
    7e56:	3604      	adds	r6, #4
    7e58:	f04f 0800 	mov.w	r8, #0
    7e5c:	f856 0d04 	ldr.w	r0, [r6, #-4]!
    7e60:	f003 fb8a 	bl	b578 <__aeabi_i2d>
    7e64:	4622      	mov	r2, r4
    7e66:	462b      	mov	r3, r5
    7e68:	f003 fbec 	bl	b644 <__aeabi_dmul>
    7e6c:	464b      	mov	r3, r9
    7e6e:	e967 0102 	strd	r0, r1, [r7, #-8]!
    7e72:	4642      	mov	r2, r8
    7e74:	4620      	mov	r0, r4
    7e76:	4629      	mov	r1, r5
    7e78:	f003 fbe4 	bl	b644 <__aeabi_dmul>
    7e7c:	ab0c      	add	r3, sp, #48	; 0x30
    7e7e:	429e      	cmp	r6, r3
    7e80:	4604      	mov	r4, r0
    7e82:	460d      	mov	r5, r1
    7e84:	d1ea      	bne.n	7e5c <__kernel_rem_pio2+0x444>
    7e86:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
    7e8a:	f8cd a00c 	str.w	sl, [sp, #12]
    7e8e:	f8dd a014 	ldr.w	sl, [sp, #20]
    7e92:	f04f 0900 	mov.w	r9, #0
    7e96:	f1ba 0f00 	cmp.w	sl, #0
    7e9a:	f2c0 813d 	blt.w	8118 <__kernel_rem_pio2+0x700>
    7e9e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 7f1c <__kernel_rem_pio2+0x504>
    7ea2:	465d      	mov	r5, fp
    7ea4:	a118      	add	r1, pc, #96	; (adr r1, 7f08 <__kernel_rem_pio2+0x4f0>)
    7ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
    7eaa:	2600      	movs	r6, #0
    7eac:	2700      	movs	r7, #0
    7eae:	2400      	movs	r4, #0
    7eb0:	e003      	b.n	7eba <__kernel_rem_pio2+0x4a2>
    7eb2:	454c      	cmp	r4, r9
    7eb4:	dc10      	bgt.n	7ed8 <__kernel_rem_pio2+0x4c0>
    7eb6:	e8f8 0102 	ldrd	r0, r1, [r8], #8
    7eba:	e8f5 2302 	ldrd	r2, r3, [r5], #8
    7ebe:	f003 fbc1 	bl	b644 <__aeabi_dmul>
    7ec2:	4602      	mov	r2, r0
    7ec4:	460b      	mov	r3, r1
    7ec6:	4630      	mov	r0, r6
    7ec8:	4639      	mov	r1, r7
    7eca:	f003 fa09 	bl	b2e0 <__adddf3>
    7ece:	3401      	adds	r4, #1
    7ed0:	45a2      	cmp	sl, r4
    7ed2:	4606      	mov	r6, r0
    7ed4:	460f      	mov	r7, r1
    7ed6:	daec      	bge.n	7eb2 <__kernel_rem_pio2+0x49a>
    7ed8:	9b03      	ldr	r3, [sp, #12]
    7eda:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
    7ede:	f1ab 0b08 	sub.w	fp, fp, #8
    7ee2:	e9c3 6700 	strd	r6, r7, [r3]
    7ee6:	ab6e      	add	r3, sp, #440	; 0x1b8
    7ee8:	455b      	cmp	r3, fp
    7eea:	f109 0901 	add.w	r9, r9, #1
    7eee:	d1d2      	bne.n	7e96 <__kernel_rem_pio2+0x47e>
    7ef0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
    7ef2:	f8dd a00c 	ldr.w	sl, [sp, #12]
    7ef6:	2b03      	cmp	r3, #3
    7ef8:	f200 808b 	bhi.w	8012 <__kernel_rem_pio2+0x5fa>
    7efc:	e8df f013 	tbh	[pc, r3, lsl #1]
    7f00:	009000d1 	.word	0x009000d1
    7f04:	00100090 	.word	0x00100090
    7f08:	40000000 	.word	0x40000000
    7f0c:	3ff921fb 	.word	0x3ff921fb
    7f10:	3ff00000 	.word	0x3ff00000
    7f14:	3fe00000 	.word	0x3fe00000
    7f18:	3e700000 	.word	0x3e700000
    7f1c:	0000c3f8 	.word	0x0000c3f8
    7f20:	9b00      	ldr	r3, [sp, #0]
    7f22:	2b00      	cmp	r3, #0
    7f24:	f340 81a4 	ble.w	8270 <__kernel_rem_pio2+0x858>
    7f28:	9b04      	ldr	r3, [sp, #16]
    7f2a:	eb0a 0803 	add.w	r8, sl, r3
    7f2e:	e9d8 6700 	ldrd	r6, r7, [r8]
    7f32:	46d3      	mov	fp, sl
    7f34:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
    7f38:	4632      	mov	r2, r6
    7f3a:	463b      	mov	r3, r7
    7f3c:	4648      	mov	r0, r9
    7f3e:	4651      	mov	r1, sl
    7f40:	f003 f9ce 	bl	b2e0 <__adddf3>
    7f44:	4604      	mov	r4, r0
    7f46:	460d      	mov	r5, r1
    7f48:	4602      	mov	r2, r0
    7f4a:	460b      	mov	r3, r1
    7f4c:	4648      	mov	r0, r9
    7f4e:	4651      	mov	r1, sl
    7f50:	f003 f9c4 	bl	b2dc <__aeabi_dsub>
    7f54:	4632      	mov	r2, r6
    7f56:	463b      	mov	r3, r7
    7f58:	f003 f9c2 	bl	b2e0 <__adddf3>
    7f5c:	e9c8 0100 	strd	r0, r1, [r8]
    7f60:	e968 4502 	strd	r4, r5, [r8, #-8]!
    7f64:	45c3      	cmp	fp, r8
    7f66:	4626      	mov	r6, r4
    7f68:	462f      	mov	r7, r5
    7f6a:	d1e3      	bne.n	7f34 <__kernel_rem_pio2+0x51c>
    7f6c:	9b00      	ldr	r3, [sp, #0]
    7f6e:	2b01      	cmp	r3, #1
    7f70:	46da      	mov	sl, fp
    7f72:	f340 817d 	ble.w	8270 <__kernel_rem_pio2+0x858>
    7f76:	9b04      	ldr	r3, [sp, #16]
    7f78:	445b      	add	r3, fp
    7f7a:	e9d3 6700 	ldrd	r6, r7, [r3]
    7f7e:	4698      	mov	r8, r3
    7f80:	4699      	mov	r9, r3
    7f82:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
    7f86:	e959 3402 	ldrd	r3, r4, [r9, #-8]
    7f8a:	4632      	mov	r2, r6
    7f8c:	4618      	mov	r0, r3
    7f8e:	4621      	mov	r1, r4
    7f90:	463b      	mov	r3, r7
    7f92:	e9cd 0100 	strd	r0, r1, [sp]
    7f96:	f003 f9a3 	bl	b2e0 <__adddf3>
    7f9a:	4604      	mov	r4, r0
    7f9c:	460d      	mov	r5, r1
    7f9e:	4602      	mov	r2, r0
    7fa0:	460b      	mov	r3, r1
    7fa2:	e9dd 0100 	ldrd	r0, r1, [sp]
    7fa6:	f003 f999 	bl	b2dc <__aeabi_dsub>
    7faa:	4632      	mov	r2, r6
    7fac:	463b      	mov	r3, r7
    7fae:	f003 f997 	bl	b2e0 <__adddf3>
    7fb2:	e9c9 0100 	strd	r0, r1, [r9]
    7fb6:	e969 4502 	strd	r4, r5, [r9, #-8]!
    7fba:	45cb      	cmp	fp, r9
    7fbc:	4626      	mov	r6, r4
    7fbe:	462f      	mov	r7, r5
    7fc0:	d1e1      	bne.n	7f86 <__kernel_rem_pio2+0x56e>
    7fc2:	2300      	movs	r3, #0
    7fc4:	f108 0808 	add.w	r8, r8, #8
    7fc8:	461d      	mov	r5, r3
    7fca:	ac4c      	add	r4, sp, #304	; 0x130
    7fcc:	4618      	mov	r0, r3
    7fce:	4629      	mov	r1, r5
    7fd0:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
    7fd4:	f003 f984 	bl	b2e0 <__adddf3>
    7fd8:	4544      	cmp	r4, r8
    7fda:	4603      	mov	r3, r0
    7fdc:	460d      	mov	r5, r1
    7fde:	d1f5      	bne.n	7fcc <__kernel_rem_pio2+0x5b4>
    7fe0:	9a02      	ldr	r2, [sp, #8]
    7fe2:	2a00      	cmp	r2, #0
    7fe4:	f000 8120 	beq.w	8228 <__kernel_rem_pio2+0x810>
    7fe8:	f8da 4004 	ldr.w	r4, [sl, #4]
    7fec:	f8da 200c 	ldr.w	r2, [sl, #12]
    7ff0:	9f06      	ldr	r7, [sp, #24]
    7ff2:	f8da 1000 	ldr.w	r1, [sl]
    7ff6:	f8da 0008 	ldr.w	r0, [sl, #8]
    7ffa:	613b      	str	r3, [r7, #16]
    7ffc:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    8000:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
    8004:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
    8008:	617d      	str	r5, [r7, #20]
    800a:	607c      	str	r4, [r7, #4]
    800c:	60fa      	str	r2, [r7, #12]
    800e:	6039      	str	r1, [r7, #0]
    8010:	60b8      	str	r0, [r7, #8]
    8012:	9b07      	ldr	r3, [sp, #28]
    8014:	f003 0007 	and.w	r0, r3, #7
    8018:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
    801c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8020:	9c04      	ldr	r4, [sp, #16]
    8022:	2600      	movs	r6, #0
    8024:	3408      	adds	r4, #8
    8026:	4454      	add	r4, sl
    8028:	4633      	mov	r3, r6
    802a:	4630      	mov	r0, r6
    802c:	4619      	mov	r1, r3
    802e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    8032:	f003 f955 	bl	b2e0 <__adddf3>
    8036:	4554      	cmp	r4, sl
    8038:	4606      	mov	r6, r0
    803a:	460b      	mov	r3, r1
    803c:	d1f5      	bne.n	802a <__kernel_rem_pio2+0x612>
    803e:	9a02      	ldr	r2, [sp, #8]
    8040:	4630      	mov	r0, r6
    8042:	4619      	mov	r1, r3
    8044:	2a00      	cmp	r2, #0
    8046:	f000 80da 	beq.w	81fe <__kernel_rem_pio2+0x7e6>
    804a:	9806      	ldr	r0, [sp, #24]
    804c:	f103 4400 	add.w	r4, r3, #2147483648	; 0x80000000
    8050:	4632      	mov	r2, r6
    8052:	6044      	str	r4, [r0, #4]
    8054:	6006      	str	r6, [r0, #0]
    8056:	e9da 0100 	ldrd	r0, r1, [sl]
    805a:	f003 f93f 	bl	b2dc <__aeabi_dsub>
    805e:	460b      	mov	r3, r1
    8060:	9900      	ldr	r1, [sp, #0]
    8062:	2900      	cmp	r1, #0
    8064:	4602      	mov	r2, r0
    8066:	dd0e      	ble.n	8086 <__kernel_rem_pio2+0x66e>
    8068:	2401      	movs	r4, #1
    806a:	4610      	mov	r0, r2
    806c:	4619      	mov	r1, r3
    806e:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
    8072:	f003 f935 	bl	b2e0 <__adddf3>
    8076:	460b      	mov	r3, r1
    8078:	9900      	ldr	r1, [sp, #0]
    807a:	3401      	adds	r4, #1
    807c:	42a1      	cmp	r1, r4
    807e:	4602      	mov	r2, r0
    8080:	daf3      	bge.n	806a <__kernel_rem_pio2+0x652>
    8082:	9902      	ldr	r1, [sp, #8]
    8084:	b109      	cbz	r1, 808a <__kernel_rem_pio2+0x672>
    8086:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    808a:	4619      	mov	r1, r3
    808c:	9b06      	ldr	r3, [sp, #24]
    808e:	4610      	mov	r0, r2
    8090:	e9c3 0102 	strd	r0, r1, [r3, #8]
    8094:	9b07      	ldr	r3, [sp, #28]
    8096:	f003 0007 	and.w	r0, r3, #7
    809a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
    809e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    80a2:	9c04      	ldr	r4, [sp, #16]
    80a4:	2200      	movs	r2, #0
    80a6:	3408      	adds	r4, #8
    80a8:	4454      	add	r4, sl
    80aa:	4613      	mov	r3, r2
    80ac:	4610      	mov	r0, r2
    80ae:	4619      	mov	r1, r3
    80b0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    80b4:	f003 f914 	bl	b2e0 <__adddf3>
    80b8:	45a2      	cmp	sl, r4
    80ba:	4602      	mov	r2, r0
    80bc:	460b      	mov	r3, r1
    80be:	d1f5      	bne.n	80ac <__kernel_rem_pio2+0x694>
    80c0:	9902      	ldr	r1, [sp, #8]
    80c2:	b109      	cbz	r1, 80c8 <__kernel_rem_pio2+0x6b0>
    80c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    80c8:	4619      	mov	r1, r3
    80ca:	9b06      	ldr	r3, [sp, #24]
    80cc:	4610      	mov	r0, r2
    80ce:	e9c3 0100 	strd	r0, r1, [r3]
    80d2:	9b07      	ldr	r3, [sp, #28]
    80d4:	f003 0007 	and.w	r0, r3, #7
    80d8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
    80dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    80e0:	2600      	movs	r6, #0
    80e2:	2700      	movs	r7, #0
    80e4:	e9ea 6702 	strd	r6, r7, [sl, #8]!
    80e8:	45da      	cmp	sl, fp
    80ea:	f109 0908 	add.w	r9, r9, #8
    80ee:	f47f ace4 	bne.w	7aba <__kernel_rem_pio2+0xa2>
    80f2:	e502      	b.n	7afa <__kernel_rem_pio2+0xe2>
    80f4:	9b00      	ldr	r3, [sp, #0]
    80f6:	2b00      	cmp	r3, #0
    80f8:	f108 0801 	add.w	r8, r8, #1
    80fc:	bfc8      	it	gt
    80fe:	2502      	movgt	r5, #2
    8100:	f73f ad8c 	bgt.w	7c1c <__kernel_rem_pio2+0x204>
    8104:	4632      	mov	r2, r6
    8106:	463b      	mov	r3, r7
    8108:	2000      	movs	r0, #0
    810a:	4963      	ldr	r1, [pc, #396]	; (8298 <__kernel_rem_pio2+0x880>)
    810c:	f003 f8e6 	bl	b2dc <__aeabi_dsub>
    8110:	2502      	movs	r5, #2
    8112:	4606      	mov	r6, r0
    8114:	460f      	mov	r7, r1
    8116:	e5df      	b.n	7cd8 <__kernel_rem_pio2+0x2c0>
    8118:	2600      	movs	r6, #0
    811a:	2700      	movs	r7, #0
    811c:	e6dc      	b.n	7ed8 <__kernel_rem_pio2+0x4c0>
    811e:	9b04      	ldr	r3, [sp, #16]
    8120:	2b00      	cmp	r3, #0
    8122:	dd26      	ble.n	8172 <__kernel_rem_pio2+0x75a>
    8124:	2400      	movs	r4, #0
    8126:	9b04      	ldr	r3, [sp, #16]
    8128:	2b01      	cmp	r3, #1
    812a:	f43f ada8 	beq.w	7c7e <__kernel_rem_pio2+0x266>
    812e:	2b02      	cmp	r3, #2
    8130:	d109      	bne.n	8146 <__kernel_rem_pio2+0x72e>
    8132:	9b00      	ldr	r3, [sp, #0]
    8134:	1e5a      	subs	r2, r3, #1
    8136:	ab0c      	add	r3, sp, #48	; 0x30
    8138:	a90c      	add	r1, sp, #48	; 0x30
    813a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    813e:	f3c3 0315 	ubfx	r3, r3, #0, #22
    8142:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    8146:	2d02      	cmp	r5, #2
    8148:	f47f adc6 	bne.w	7cd8 <__kernel_rem_pio2+0x2c0>
    814c:	4632      	mov	r2, r6
    814e:	463b      	mov	r3, r7
    8150:	2000      	movs	r0, #0
    8152:	4951      	ldr	r1, [pc, #324]	; (8298 <__kernel_rem_pio2+0x880>)
    8154:	f003 f8c2 	bl	b2dc <__aeabi_dsub>
    8158:	4606      	mov	r6, r0
    815a:	460f      	mov	r7, r1
    815c:	2c00      	cmp	r4, #0
    815e:	f43f adbb 	beq.w	7cd8 <__kernel_rem_pio2+0x2c0>
    8162:	e5ab      	b.n	7cbc <__kernel_rem_pio2+0x2a4>
    8164:	9900      	ldr	r1, [sp, #0]
    8166:	3301      	adds	r3, #1
    8168:	4299      	cmp	r1, r3
    816a:	d178      	bne.n	825e <__kernel_rem_pio2+0x846>
    816c:	9b04      	ldr	r3, [sp, #16]
    816e:	2b00      	cmp	r3, #0
    8170:	dcd9      	bgt.n	8126 <__kernel_rem_pio2+0x70e>
    8172:	2d02      	cmp	r5, #2
    8174:	f47f adb0 	bne.w	7cd8 <__kernel_rem_pio2+0x2c0>
    8178:	4632      	mov	r2, r6
    817a:	463b      	mov	r3, r7
    817c:	2000      	movs	r0, #0
    817e:	4946      	ldr	r1, [pc, #280]	; (8298 <__kernel_rem_pio2+0x880>)
    8180:	f003 f8ac 	bl	b2dc <__aeabi_dsub>
    8184:	4606      	mov	r6, r0
    8186:	460f      	mov	r7, r1
    8188:	e5a6      	b.n	7cd8 <__kernel_rem_pio2+0x2c0>
    818a:	2301      	movs	r3, #1
    818c:	e5d1      	b.n	7d32 <__kernel_rem_pio2+0x31a>
    818e:	4639      	mov	r1, r7
    8190:	9f04      	ldr	r7, [sp, #16]
    8192:	9502      	str	r5, [sp, #8]
    8194:	427a      	negs	r2, r7
    8196:	4630      	mov	r0, r6
    8198:	f8cd 801c 	str.w	r8, [sp, #28]
    819c:	f000 f9d4 	bl	8548 <scalbn>
    81a0:	2200      	movs	r2, #0
    81a2:	4b3e      	ldr	r3, [pc, #248]	; (829c <__kernel_rem_pio2+0x884>)
    81a4:	4604      	mov	r4, r0
    81a6:	460d      	mov	r5, r1
    81a8:	f003 fcd2 	bl	bb50 <__aeabi_dcmpge>
    81ac:	2800      	cmp	r0, #0
    81ae:	d062      	beq.n	8276 <__kernel_rem_pio2+0x85e>
    81b0:	2200      	movs	r2, #0
    81b2:	4b3b      	ldr	r3, [pc, #236]	; (82a0 <__kernel_rem_pio2+0x888>)
    81b4:	4620      	mov	r0, r4
    81b6:	4629      	mov	r1, r5
    81b8:	f003 fa44 	bl	b644 <__aeabi_dmul>
    81bc:	f003 fcf2 	bl	bba4 <__aeabi_d2iz>
    81c0:	4606      	mov	r6, r0
    81c2:	f003 f9d9 	bl	b578 <__aeabi_i2d>
    81c6:	2200      	movs	r2, #0
    81c8:	4b34      	ldr	r3, [pc, #208]	; (829c <__kernel_rem_pio2+0x884>)
    81ca:	f003 fa3b 	bl	b644 <__aeabi_dmul>
    81ce:	4602      	mov	r2, r0
    81d0:	460b      	mov	r3, r1
    81d2:	4620      	mov	r0, r4
    81d4:	4629      	mov	r1, r5
    81d6:	f003 f881 	bl	b2dc <__aeabi_dsub>
    81da:	f003 fce3 	bl	bba4 <__aeabi_d2iz>
    81de:	9900      	ldr	r1, [sp, #0]
    81e0:	460b      	mov	r3, r1
    81e2:	3301      	adds	r3, #1
    81e4:	461a      	mov	r2, r3
    81e6:	9300      	str	r3, [sp, #0]
    81e8:	463b      	mov	r3, r7
    81ea:	3318      	adds	r3, #24
    81ec:	9304      	str	r3, [sp, #16]
    81ee:	460b      	mov	r3, r1
    81f0:	a90c      	add	r1, sp, #48	; 0x30
    81f2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    81f6:	4613      	mov	r3, r2
    81f8:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    81fc:	e614      	b.n	7e28 <__kernel_rem_pio2+0x410>
    81fe:	9b06      	ldr	r3, [sp, #24]
    8200:	4632      	mov	r2, r6
    8202:	e9c3 0100 	strd	r0, r1, [r3]
    8206:	460b      	mov	r3, r1
    8208:	e9da 0100 	ldrd	r0, r1, [sl]
    820c:	f003 f866 	bl	b2dc <__aeabi_dsub>
    8210:	460b      	mov	r3, r1
    8212:	9900      	ldr	r1, [sp, #0]
    8214:	2900      	cmp	r1, #0
    8216:	4602      	mov	r2, r0
    8218:	f73f af26 	bgt.w	8068 <__kernel_rem_pio2+0x650>
    821c:	4619      	mov	r1, r3
    821e:	9b06      	ldr	r3, [sp, #24]
    8220:	4610      	mov	r0, r2
    8222:	e9c3 0102 	strd	r0, r1, [r3, #8]
    8226:	e735      	b.n	8094 <__kernel_rem_pio2+0x67c>
    8228:	4618      	mov	r0, r3
    822a:	4629      	mov	r1, r5
    822c:	e9da 2300 	ldrd	r2, r3, [sl]
    8230:	e9da 4502 	ldrd	r4, r5, [sl, #8]
    8234:	9f06      	ldr	r7, [sp, #24]
    8236:	e9c7 0104 	strd	r0, r1, [r7, #16]
    823a:	e9c7 2300 	strd	r2, r3, [r7]
    823e:	e9c7 4502 	strd	r4, r5, [r7, #8]
    8242:	e6e6      	b.n	8012 <__kernel_rem_pio2+0x5fa>
    8244:	9ba2      	ldr	r3, [sp, #648]	; 0x288
    8246:	2b03      	cmp	r3, #3
    8248:	f63f aee3 	bhi.w	8012 <__kernel_rem_pio2+0x5fa>
    824c:	e8df f003 	tbb	[pc, r3]
    8250:	0e1c1c21 	.word	0x0e1c1c21
    8254:	9b00      	ldr	r3, [sp, #0]
    8256:	2b01      	cmp	r3, #1
    8258:	dd88      	ble.n	816c <__kernel_rem_pio2+0x754>
    825a:	aa0c      	add	r2, sp, #48	; 0x30
    825c:	2301      	movs	r3, #1
    825e:	f852 4f04 	ldr.w	r4, [r2, #4]!
    8262:	2c00      	cmp	r4, #0
    8264:	f43f af7e 	beq.w	8164 <__kernel_rem_pio2+0x74c>
    8268:	1c58      	adds	r0, r3, #1
    826a:	e4dd      	b.n	7c28 <__kernel_rem_pio2+0x210>
    826c:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
    8270:	2300      	movs	r3, #0
    8272:	461d      	mov	r5, r3
    8274:	e6b4      	b.n	7fe0 <__kernel_rem_pio2+0x5c8>
    8276:	4629      	mov	r1, r5
    8278:	4620      	mov	r0, r4
    827a:	f003 fc93 	bl	bba4 <__aeabi_d2iz>
    827e:	9a00      	ldr	r2, [sp, #0]
    8280:	a90c      	add	r1, sp, #48	; 0x30
    8282:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
    8286:	e5cf      	b.n	7e28 <__kernel_rem_pio2+0x410>
    8288:	2600      	movs	r6, #0
    828a:	4633      	mov	r3, r6
    828c:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
    8290:	e6d5      	b.n	803e <__kernel_rem_pio2+0x626>
    8292:	2200      	movs	r2, #0
    8294:	4613      	mov	r3, r2
    8296:	e713      	b.n	80c0 <__kernel_rem_pio2+0x6a8>
    8298:	3ff00000 	.word	0x3ff00000
    829c:	41700000 	.word	0x41700000
    82a0:	3e700000 	.word	0x3e700000
    82a4:	00000000 	.word	0x00000000

000082a8 <__kernel_sin>:
    82a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    82ac:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    82b0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
    82b4:	b085      	sub	sp, #20
    82b6:	460c      	mov	r4, r1
    82b8:	4690      	mov	r8, r2
    82ba:	4699      	mov	r9, r3
    82bc:	4605      	mov	r5, r0
    82be:	da04      	bge.n	82ca <__kernel_sin+0x22>
    82c0:	f003 fc70 	bl	bba4 <__aeabi_d2iz>
    82c4:	2800      	cmp	r0, #0
    82c6:	f000 8085 	beq.w	83d4 <__kernel_sin+0x12c>
    82ca:	462a      	mov	r2, r5
    82cc:	4623      	mov	r3, r4
    82ce:	4628      	mov	r0, r5
    82d0:	4621      	mov	r1, r4
    82d2:	f003 f9b7 	bl	b644 <__aeabi_dmul>
    82d6:	4606      	mov	r6, r0
    82d8:	460f      	mov	r7, r1
    82da:	4602      	mov	r2, r0
    82dc:	460b      	mov	r3, r1
    82de:	4628      	mov	r0, r5
    82e0:	4621      	mov	r1, r4
    82e2:	f003 f9af 	bl	b644 <__aeabi_dmul>
    82e6:	a33e      	add	r3, pc, #248	; (adr r3, 83e0 <__kernel_sin+0x138>)
    82e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    82ec:	4682      	mov	sl, r0
    82ee:	468b      	mov	fp, r1
    82f0:	4630      	mov	r0, r6
    82f2:	4639      	mov	r1, r7
    82f4:	f003 f9a6 	bl	b644 <__aeabi_dmul>
    82f8:	a33b      	add	r3, pc, #236	; (adr r3, 83e8 <__kernel_sin+0x140>)
    82fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    82fe:	f002 ffed 	bl	b2dc <__aeabi_dsub>
    8302:	4632      	mov	r2, r6
    8304:	463b      	mov	r3, r7
    8306:	f003 f99d 	bl	b644 <__aeabi_dmul>
    830a:	a339      	add	r3, pc, #228	; (adr r3, 83f0 <__kernel_sin+0x148>)
    830c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8310:	f002 ffe6 	bl	b2e0 <__adddf3>
    8314:	4632      	mov	r2, r6
    8316:	463b      	mov	r3, r7
    8318:	f003 f994 	bl	b644 <__aeabi_dmul>
    831c:	a336      	add	r3, pc, #216	; (adr r3, 83f8 <__kernel_sin+0x150>)
    831e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8322:	f002 ffdb 	bl	b2dc <__aeabi_dsub>
    8326:	4632      	mov	r2, r6
    8328:	463b      	mov	r3, r7
    832a:	f003 f98b 	bl	b644 <__aeabi_dmul>
    832e:	a334      	add	r3, pc, #208	; (adr r3, 8400 <__kernel_sin+0x158>)
    8330:	e9d3 2300 	ldrd	r2, r3, [r3]
    8334:	f002 ffd4 	bl	b2e0 <__adddf3>
    8338:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    833a:	e9cd 0100 	strd	r0, r1, [sp]
    833e:	b39b      	cbz	r3, 83a8 <__kernel_sin+0x100>
    8340:	2200      	movs	r2, #0
    8342:	4b33      	ldr	r3, [pc, #204]	; (8410 <__kernel_sin+0x168>)
    8344:	4640      	mov	r0, r8
    8346:	4649      	mov	r1, r9
    8348:	f003 f97c 	bl	b644 <__aeabi_dmul>
    834c:	e9dd 2300 	ldrd	r2, r3, [sp]
    8350:	e9cd 0102 	strd	r0, r1, [sp, #8]
    8354:	4650      	mov	r0, sl
    8356:	4659      	mov	r1, fp
    8358:	f003 f974 	bl	b644 <__aeabi_dmul>
    835c:	4602      	mov	r2, r0
    835e:	460b      	mov	r3, r1
    8360:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    8364:	f002 ffba 	bl	b2dc <__aeabi_dsub>
    8368:	4632      	mov	r2, r6
    836a:	463b      	mov	r3, r7
    836c:	f003 f96a 	bl	b644 <__aeabi_dmul>
    8370:	4642      	mov	r2, r8
    8372:	464b      	mov	r3, r9
    8374:	f002 ffb2 	bl	b2dc <__aeabi_dsub>
    8378:	a323      	add	r3, pc, #140	; (adr r3, 8408 <__kernel_sin+0x160>)
    837a:	e9d3 2300 	ldrd	r2, r3, [r3]
    837e:	4606      	mov	r6, r0
    8380:	460f      	mov	r7, r1
    8382:	4650      	mov	r0, sl
    8384:	4659      	mov	r1, fp
    8386:	f003 f95d 	bl	b644 <__aeabi_dmul>
    838a:	4602      	mov	r2, r0
    838c:	460b      	mov	r3, r1
    838e:	4630      	mov	r0, r6
    8390:	4639      	mov	r1, r7
    8392:	f002 ffa5 	bl	b2e0 <__adddf3>
    8396:	4602      	mov	r2, r0
    8398:	460b      	mov	r3, r1
    839a:	4628      	mov	r0, r5
    839c:	4621      	mov	r1, r4
    839e:	f002 ff9d 	bl	b2dc <__aeabi_dsub>
    83a2:	b005      	add	sp, #20
    83a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83a8:	4602      	mov	r2, r0
    83aa:	460b      	mov	r3, r1
    83ac:	4630      	mov	r0, r6
    83ae:	4639      	mov	r1, r7
    83b0:	f003 f948 	bl	b644 <__aeabi_dmul>
    83b4:	a314      	add	r3, pc, #80	; (adr r3, 8408 <__kernel_sin+0x160>)
    83b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    83ba:	f002 ff8f 	bl	b2dc <__aeabi_dsub>
    83be:	4652      	mov	r2, sl
    83c0:	465b      	mov	r3, fp
    83c2:	f003 f93f 	bl	b644 <__aeabi_dmul>
    83c6:	462a      	mov	r2, r5
    83c8:	4623      	mov	r3, r4
    83ca:	f002 ff89 	bl	b2e0 <__adddf3>
    83ce:	b005      	add	sp, #20
    83d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83d4:	4628      	mov	r0, r5
    83d6:	4621      	mov	r1, r4
    83d8:	b005      	add	sp, #20
    83da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83de:	bf00      	nop
    83e0:	5acfd57c 	.word	0x5acfd57c
    83e4:	3de5d93a 	.word	0x3de5d93a
    83e8:	8a2b9ceb 	.word	0x8a2b9ceb
    83ec:	3e5ae5e6 	.word	0x3e5ae5e6
    83f0:	57b1fe7d 	.word	0x57b1fe7d
    83f4:	3ec71de3 	.word	0x3ec71de3
    83f8:	19c161d5 	.word	0x19c161d5
    83fc:	3f2a01a0 	.word	0x3f2a01a0
    8400:	1110f8a6 	.word	0x1110f8a6
    8404:	3f811111 	.word	0x3f811111
    8408:	55555549 	.word	0x55555549
    840c:	3fc55555 	.word	0x3fc55555
    8410:	3fe00000 	.word	0x3fe00000

00008414 <fabs>:
    8414:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8418:	4770      	bx	lr
    841a:	bf00      	nop
    841c:	0000      	movs	r0, r0
	...

00008420 <floor>:
    8420:	f3c1 520a 	ubfx	r2, r1, #20, #11
    8424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8428:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
    842c:	2e13      	cmp	r6, #19
    842e:	460b      	mov	r3, r1
    8430:	460d      	mov	r5, r1
    8432:	4604      	mov	r4, r0
    8434:	4688      	mov	r8, r1
    8436:	4607      	mov	r7, r0
    8438:	dc1d      	bgt.n	8476 <floor+0x56>
    843a:	2e00      	cmp	r6, #0
    843c:	db40      	blt.n	84c0 <floor+0xa0>
    843e:	4a3c      	ldr	r2, [pc, #240]	; (8530 <floor+0x110>)
    8440:	fa42 f906 	asr.w	r9, r2, r6
    8444:	ea01 0209 	and.w	r2, r1, r9
    8448:	4302      	orrs	r2, r0
    844a:	4686      	mov	lr, r0
    844c:	d018      	beq.n	8480 <floor+0x60>
    844e:	a336      	add	r3, pc, #216	; (adr r3, 8528 <floor+0x108>)
    8450:	e9d3 2300 	ldrd	r2, r3, [r3]
    8454:	f002 ff44 	bl	b2e0 <__adddf3>
    8458:	2200      	movs	r2, #0
    845a:	2300      	movs	r3, #0
    845c:	f003 fb82 	bl	bb64 <__aeabi_dcmpgt>
    8460:	b120      	cbz	r0, 846c <floor+0x4c>
    8462:	2d00      	cmp	r5, #0
    8464:	db42      	blt.n	84ec <floor+0xcc>
    8466:	ea28 0509 	bic.w	r5, r8, r9
    846a:	2700      	movs	r7, #0
    846c:	463c      	mov	r4, r7
    846e:	4629      	mov	r1, r5
    8470:	4620      	mov	r0, r4
    8472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8476:	2e33      	cmp	r6, #51	; 0x33
    8478:	dd06      	ble.n	8488 <floor+0x68>
    847a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    847e:	d02f      	beq.n	84e0 <floor+0xc0>
    8480:	4619      	mov	r1, r3
    8482:	4620      	mov	r0, r4
    8484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8488:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
    848c:	f04f 39ff 	mov.w	r9, #4294967295
    8490:	fa29 f902 	lsr.w	r9, r9, r2
    8494:	ea10 0f09 	tst.w	r0, r9
    8498:	d0f2      	beq.n	8480 <floor+0x60>
    849a:	a323      	add	r3, pc, #140	; (adr r3, 8528 <floor+0x108>)
    849c:	e9d3 2300 	ldrd	r2, r3, [r3]
    84a0:	f002 ff1e 	bl	b2e0 <__adddf3>
    84a4:	2200      	movs	r2, #0
    84a6:	2300      	movs	r3, #0
    84a8:	f003 fb5c 	bl	bb64 <__aeabi_dcmpgt>
    84ac:	2800      	cmp	r0, #0
    84ae:	d0dd      	beq.n	846c <floor+0x4c>
    84b0:	2d00      	cmp	r5, #0
    84b2:	db21      	blt.n	84f8 <floor+0xd8>
    84b4:	4645      	mov	r5, r8
    84b6:	ea27 0709 	bic.w	r7, r7, r9
    84ba:	463c      	mov	r4, r7
    84bc:	4629      	mov	r1, r5
    84be:	e7d7      	b.n	8470 <floor+0x50>
    84c0:	a319      	add	r3, pc, #100	; (adr r3, 8528 <floor+0x108>)
    84c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    84c6:	f002 ff0b 	bl	b2e0 <__adddf3>
    84ca:	2200      	movs	r2, #0
    84cc:	2300      	movs	r3, #0
    84ce:	f003 fb49 	bl	bb64 <__aeabi_dcmpgt>
    84d2:	2800      	cmp	r0, #0
    84d4:	d0ca      	beq.n	846c <floor+0x4c>
    84d6:	2d00      	cmp	r5, #0
    84d8:	db19      	blt.n	850e <floor+0xee>
    84da:	2700      	movs	r7, #0
    84dc:	463d      	mov	r5, r7
    84de:	e7c5      	b.n	846c <floor+0x4c>
    84e0:	4602      	mov	r2, r0
    84e2:	460b      	mov	r3, r1
    84e4:	f002 fefc 	bl	b2e0 <__adddf3>
    84e8:	4604      	mov	r4, r0
    84ea:	e7ca      	b.n	8482 <floor+0x62>
    84ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    84f0:	fa43 f606 	asr.w	r6, r3, r6
    84f4:	44b0      	add	r8, r6
    84f6:	e7b6      	b.n	8466 <floor+0x46>
    84f8:	2e14      	cmp	r6, #20
    84fa:	d010      	beq.n	851e <floor+0xfe>
    84fc:	2301      	movs	r3, #1
    84fe:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
    8502:	fa03 f606 	lsl.w	r6, r3, r6
    8506:	1937      	adds	r7, r6, r4
    8508:	bf28      	it	cs
    850a:	4498      	addcs	r8, r3
    850c:	e7d2      	b.n	84b4 <floor+0x94>
    850e:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
    8512:	4b08      	ldr	r3, [pc, #32]	; (8534 <floor+0x114>)
    8514:	4322      	orrs	r2, r4
    8516:	bf18      	it	ne
    8518:	461d      	movne	r5, r3
    851a:	2700      	movs	r7, #0
    851c:	e7a6      	b.n	846c <floor+0x4c>
    851e:	f105 0801 	add.w	r8, r5, #1
    8522:	e7c7      	b.n	84b4 <floor+0x94>
    8524:	f3af 8000 	nop.w
    8528:	8800759c 	.word	0x8800759c
    852c:	7e37e43c 	.word	0x7e37e43c
    8530:	000fffff 	.word	0x000fffff
    8534:	bff00000 	.word	0xbff00000

00008538 <matherr>:
    8538:	2000      	movs	r0, #0
    853a:	4770      	bx	lr

0000853c <nan>:
    853c:	2000      	movs	r0, #0
    853e:	4901      	ldr	r1, [pc, #4]	; (8544 <nan+0x8>)
    8540:	4770      	bx	lr
    8542:	bf00      	nop
    8544:	7ff80000 	.word	0x7ff80000

00008548 <scalbn>:
    8548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    854a:	f3c1 560a 	ubfx	r6, r1, #20, #11
    854e:	4604      	mov	r4, r0
    8550:	460d      	mov	r5, r1
    8552:	460b      	mov	r3, r1
    8554:	4617      	mov	r7, r2
    8556:	bb0e      	cbnz	r6, 859c <scalbn+0x54>
    8558:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    855c:	4303      	orrs	r3, r0
    855e:	4686      	mov	lr, r0
    8560:	d025      	beq.n	85ae <scalbn+0x66>
    8562:	2200      	movs	r2, #0
    8564:	4b34      	ldr	r3, [pc, #208]	; (8638 <scalbn+0xf0>)
    8566:	f003 f86d 	bl	b644 <__aeabi_dmul>
    856a:	4a34      	ldr	r2, [pc, #208]	; (863c <scalbn+0xf4>)
    856c:	4297      	cmp	r7, r2
    856e:	4604      	mov	r4, r0
    8570:	460d      	mov	r5, r1
    8572:	460b      	mov	r3, r1
    8574:	db2a      	blt.n	85cc <scalbn+0x84>
    8576:	f3c1 560a 	ubfx	r6, r1, #20, #11
    857a:	3e36      	subs	r6, #54	; 0x36
    857c:	443e      	add	r6, r7
    857e:	f240 72fe 	movw	r2, #2046	; 0x7fe
    8582:	4296      	cmp	r6, r2
    8584:	dc28      	bgt.n	85d8 <scalbn+0x90>
    8586:	2e00      	cmp	r6, #0
    8588:	dd12      	ble.n	85b0 <scalbn+0x68>
    858a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    858e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    8592:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
    8596:	4620      	mov	r0, r4
    8598:	4629      	mov	r1, r5
    859a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    859c:	f240 72ff 	movw	r2, #2047	; 0x7ff
    85a0:	4296      	cmp	r6, r2
    85a2:	d1eb      	bne.n	857c <scalbn+0x34>
    85a4:	4602      	mov	r2, r0
    85a6:	460b      	mov	r3, r1
    85a8:	f002 fe9a 	bl	b2e0 <__adddf3>
    85ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    85ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    85b0:	f116 0f35 	cmn.w	r6, #53	; 0x35
    85b4:	da1d      	bge.n	85f2 <scalbn+0xaa>
    85b6:	f24c 3350 	movw	r3, #50000	; 0xc350
    85ba:	429f      	cmp	r7, r3
    85bc:	4622      	mov	r2, r4
    85be:	462b      	mov	r3, r5
    85c0:	dc25      	bgt.n	860e <scalbn+0xc6>
    85c2:	a119      	add	r1, pc, #100	; (adr r1, 8628 <scalbn+0xe0>)
    85c4:	e9d1 0100 	ldrd	r0, r1, [r1]
    85c8:	f000 f83c 	bl	8644 <copysign>
    85cc:	a316      	add	r3, pc, #88	; (adr r3, 8628 <scalbn+0xe0>)
    85ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    85d2:	f003 f837 	bl	b644 <__aeabi_dmul>
    85d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    85d8:	4622      	mov	r2, r4
    85da:	462b      	mov	r3, r5
    85dc:	a114      	add	r1, pc, #80	; (adr r1, 8630 <scalbn+0xe8>)
    85de:	e9d1 0100 	ldrd	r0, r1, [r1]
    85e2:	f000 f82f 	bl	8644 <copysign>
    85e6:	a312      	add	r3, pc, #72	; (adr r3, 8630 <scalbn+0xe8>)
    85e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    85ec:	f003 f82a 	bl	b644 <__aeabi_dmul>
    85f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    85f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    85f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    85fa:	3636      	adds	r6, #54	; 0x36
    85fc:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
    8600:	4620      	mov	r0, r4
    8602:	4629      	mov	r1, r5
    8604:	2200      	movs	r2, #0
    8606:	4b0e      	ldr	r3, [pc, #56]	; (8640 <scalbn+0xf8>)
    8608:	f003 f81c 	bl	b644 <__aeabi_dmul>
    860c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    860e:	a108      	add	r1, pc, #32	; (adr r1, 8630 <scalbn+0xe8>)
    8610:	e9d1 0100 	ldrd	r0, r1, [r1]
    8614:	f000 f816 	bl	8644 <copysign>
    8618:	a305      	add	r3, pc, #20	; (adr r3, 8630 <scalbn+0xe8>)
    861a:	e9d3 2300 	ldrd	r2, r3, [r3]
    861e:	f003 f811 	bl	b644 <__aeabi_dmul>
    8622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8624:	f3af 8000 	nop.w
    8628:	c2f8f359 	.word	0xc2f8f359
    862c:	01a56e1f 	.word	0x01a56e1f
    8630:	8800759c 	.word	0x8800759c
    8634:	7e37e43c 	.word	0x7e37e43c
    8638:	43500000 	.word	0x43500000
    863c:	ffff3cb0 	.word	0xffff3cb0
    8640:	3c900000 	.word	0x3c900000

00008644 <copysign>:
    8644:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    8648:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
    864c:	ea42 0103 	orr.w	r1, r2, r3
    8650:	4770      	bx	lr
    8652:	bf00      	nop

00008654 <__errno>:
    8654:	4b01      	ldr	r3, [pc, #4]	; (865c <__errno+0x8>)
    8656:	6818      	ldr	r0, [r3, #0]
    8658:	4770      	bx	lr
    865a:	bf00      	nop
    865c:	20000084 	.word	0x20000084

00008660 <__libc_init_array>:
    8660:	b570      	push	{r4, r5, r6, lr}
    8662:	4e0d      	ldr	r6, [pc, #52]	; (8698 <__libc_init_array+0x38>)
    8664:	4c0d      	ldr	r4, [pc, #52]	; (869c <__libc_init_array+0x3c>)
    8666:	1ba4      	subs	r4, r4, r6
    8668:	10a4      	asrs	r4, r4, #2
    866a:	2500      	movs	r5, #0
    866c:	42a5      	cmp	r5, r4
    866e:	d109      	bne.n	8684 <__libc_init_array+0x24>
    8670:	4e0b      	ldr	r6, [pc, #44]	; (86a0 <__libc_init_array+0x40>)
    8672:	4c0c      	ldr	r4, [pc, #48]	; (86a4 <__libc_init_array+0x44>)
    8674:	f004 f844 	bl	c700 <_init>
    8678:	1ba4      	subs	r4, r4, r6
    867a:	10a4      	asrs	r4, r4, #2
    867c:	2500      	movs	r5, #0
    867e:	42a5      	cmp	r5, r4
    8680:	d105      	bne.n	868e <__libc_init_array+0x2e>
    8682:	bd70      	pop	{r4, r5, r6, pc}
    8684:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    8688:	4798      	blx	r3
    868a:	3501      	adds	r5, #1
    868c:	e7ee      	b.n	866c <__libc_init_array+0xc>
    868e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    8692:	4798      	blx	r3
    8694:	3501      	adds	r5, #1
    8696:	e7f2      	b.n	867e <__libc_init_array+0x1e>
    8698:	0000c70c 	.word	0x0000c70c
    869c:	0000c70c 	.word	0x0000c70c
    86a0:	0000c70c 	.word	0x0000c70c
    86a4:	0000c710 	.word	0x0000c710

000086a8 <memset>:
    86a8:	4402      	add	r2, r0
    86aa:	4603      	mov	r3, r0
    86ac:	4293      	cmp	r3, r2
    86ae:	d100      	bne.n	86b2 <memset+0xa>
    86b0:	4770      	bx	lr
    86b2:	f803 1b01 	strb.w	r1, [r3], #1
    86b6:	e7f9      	b.n	86ac <memset+0x4>

000086b8 <__cvt>:
    86b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    86bc:	b088      	sub	sp, #32
    86be:	2b00      	cmp	r3, #0
    86c0:	9f14      	ldr	r7, [sp, #80]	; 0x50
    86c2:	9912      	ldr	r1, [sp, #72]	; 0x48
    86c4:	9d10      	ldr	r5, [sp, #64]	; 0x40
    86c6:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    86ca:	461e      	mov	r6, r3
    86cc:	f027 0720 	bic.w	r7, r7, #32
    86d0:	bfbb      	ittet	lt
    86d2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
    86d6:	461e      	movlt	r6, r3
    86d8:	2300      	movge	r3, #0
    86da:	232d      	movlt	r3, #45	; 0x2d
    86dc:	2f46      	cmp	r7, #70	; 0x46
    86de:	4614      	mov	r4, r2
    86e0:	700b      	strb	r3, [r1, #0]
    86e2:	d004      	beq.n	86ee <__cvt+0x36>
    86e4:	2f45      	cmp	r7, #69	; 0x45
    86e6:	d100      	bne.n	86ea <__cvt+0x32>
    86e8:	3501      	adds	r5, #1
    86ea:	2302      	movs	r3, #2
    86ec:	e000      	b.n	86f0 <__cvt+0x38>
    86ee:	2303      	movs	r3, #3
    86f0:	aa07      	add	r2, sp, #28
    86f2:	9204      	str	r2, [sp, #16]
    86f4:	aa06      	add	r2, sp, #24
    86f6:	9203      	str	r2, [sp, #12]
    86f8:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
    86fc:	4622      	mov	r2, r4
    86fe:	4633      	mov	r3, r6
    8700:	f000 fdc2 	bl	9288 <_dtoa_r>
    8704:	2f47      	cmp	r7, #71	; 0x47
    8706:	4680      	mov	r8, r0
    8708:	d102      	bne.n	8710 <__cvt+0x58>
    870a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    870c:	07db      	lsls	r3, r3, #31
    870e:	d526      	bpl.n	875e <__cvt+0xa6>
    8710:	2f46      	cmp	r7, #70	; 0x46
    8712:	eb08 0905 	add.w	r9, r8, r5
    8716:	d111      	bne.n	873c <__cvt+0x84>
    8718:	f898 3000 	ldrb.w	r3, [r8]
    871c:	2b30      	cmp	r3, #48	; 0x30
    871e:	d10a      	bne.n	8736 <__cvt+0x7e>
    8720:	2200      	movs	r2, #0
    8722:	2300      	movs	r3, #0
    8724:	4620      	mov	r0, r4
    8726:	4631      	mov	r1, r6
    8728:	f003 f9f4 	bl	bb14 <__aeabi_dcmpeq>
    872c:	b918      	cbnz	r0, 8736 <__cvt+0x7e>
    872e:	f1c5 0501 	rsb	r5, r5, #1
    8732:	f8ca 5000 	str.w	r5, [sl]
    8736:	f8da 3000 	ldr.w	r3, [sl]
    873a:	4499      	add	r9, r3
    873c:	2200      	movs	r2, #0
    873e:	2300      	movs	r3, #0
    8740:	4620      	mov	r0, r4
    8742:	4631      	mov	r1, r6
    8744:	f003 f9e6 	bl	bb14 <__aeabi_dcmpeq>
    8748:	b938      	cbnz	r0, 875a <__cvt+0xa2>
    874a:	2230      	movs	r2, #48	; 0x30
    874c:	9b07      	ldr	r3, [sp, #28]
    874e:	4599      	cmp	r9, r3
    8750:	d905      	bls.n	875e <__cvt+0xa6>
    8752:	1c59      	adds	r1, r3, #1
    8754:	9107      	str	r1, [sp, #28]
    8756:	701a      	strb	r2, [r3, #0]
    8758:	e7f8      	b.n	874c <__cvt+0x94>
    875a:	f8cd 901c 	str.w	r9, [sp, #28]
    875e:	9b07      	ldr	r3, [sp, #28]
    8760:	9a15      	ldr	r2, [sp, #84]	; 0x54
    8762:	eba3 0308 	sub.w	r3, r3, r8
    8766:	4640      	mov	r0, r8
    8768:	6013      	str	r3, [r2, #0]
    876a:	b008      	add	sp, #32
    876c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00008770 <__exponent>:
    8770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8772:	4603      	mov	r3, r0
    8774:	2900      	cmp	r1, #0
    8776:	bfb8      	it	lt
    8778:	4249      	neglt	r1, r1
    877a:	f803 2b02 	strb.w	r2, [r3], #2
    877e:	bfb4      	ite	lt
    8780:	222d      	movlt	r2, #45	; 0x2d
    8782:	222b      	movge	r2, #43	; 0x2b
    8784:	2909      	cmp	r1, #9
    8786:	7042      	strb	r2, [r0, #1]
    8788:	dd20      	ble.n	87cc <__exponent+0x5c>
    878a:	f10d 0207 	add.w	r2, sp, #7
    878e:	4617      	mov	r7, r2
    8790:	260a      	movs	r6, #10
    8792:	fb91 f5f6 	sdiv	r5, r1, r6
    8796:	fb06 1115 	mls	r1, r6, r5, r1
    879a:	3130      	adds	r1, #48	; 0x30
    879c:	2d09      	cmp	r5, #9
    879e:	f802 1c01 	strb.w	r1, [r2, #-1]
    87a2:	f102 34ff 	add.w	r4, r2, #4294967295
    87a6:	4629      	mov	r1, r5
    87a8:	dc09      	bgt.n	87be <__exponent+0x4e>
    87aa:	3130      	adds	r1, #48	; 0x30
    87ac:	3a02      	subs	r2, #2
    87ae:	f804 1c01 	strb.w	r1, [r4, #-1]
    87b2:	42ba      	cmp	r2, r7
    87b4:	461c      	mov	r4, r3
    87b6:	d304      	bcc.n	87c2 <__exponent+0x52>
    87b8:	1a20      	subs	r0, r4, r0
    87ba:	b003      	add	sp, #12
    87bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    87be:	4622      	mov	r2, r4
    87c0:	e7e7      	b.n	8792 <__exponent+0x22>
    87c2:	f812 1b01 	ldrb.w	r1, [r2], #1
    87c6:	f803 1b01 	strb.w	r1, [r3], #1
    87ca:	e7f2      	b.n	87b2 <__exponent+0x42>
    87cc:	2230      	movs	r2, #48	; 0x30
    87ce:	461c      	mov	r4, r3
    87d0:	4411      	add	r1, r2
    87d2:	f804 2b02 	strb.w	r2, [r4], #2
    87d6:	7059      	strb	r1, [r3, #1]
    87d8:	e7ee      	b.n	87b8 <__exponent+0x48>
	...

000087dc <_printf_float>:
    87dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    87e0:	b091      	sub	sp, #68	; 0x44
    87e2:	460c      	mov	r4, r1
    87e4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
    87e6:	4693      	mov	fp, r2
    87e8:	461e      	mov	r6, r3
    87ea:	4605      	mov	r5, r0
    87ec:	f001 fc9a 	bl	a124 <_localeconv_r>
    87f0:	6803      	ldr	r3, [r0, #0]
    87f2:	9309      	str	r3, [sp, #36]	; 0x24
    87f4:	4618      	mov	r0, r3
    87f6:	f000 fcb1 	bl	915c <strlen>
    87fa:	2300      	movs	r3, #0
    87fc:	930e      	str	r3, [sp, #56]	; 0x38
    87fe:	683b      	ldr	r3, [r7, #0]
    8800:	900a      	str	r0, [sp, #40]	; 0x28
    8802:	3307      	adds	r3, #7
    8804:	f023 0307 	bic.w	r3, r3, #7
    8808:	f103 0208 	add.w	r2, r3, #8
    880c:	f894 8018 	ldrb.w	r8, [r4, #24]
    8810:	f8d4 a000 	ldr.w	sl, [r4]
    8814:	603a      	str	r2, [r7, #0]
    8816:	e9d3 2300 	ldrd	r2, r3, [r3]
    881a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    881e:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    8822:	6ca7      	ldr	r7, [r4, #72]	; 0x48
    8824:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    8828:	930b      	str	r3, [sp, #44]	; 0x2c
    882a:	f04f 32ff 	mov.w	r2, #4294967295
    882e:	4ba6      	ldr	r3, [pc, #664]	; (8ac8 <_printf_float+0x2ec>)
    8830:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8832:	4638      	mov	r0, r7
    8834:	f003 f9a0 	bl	bb78 <__aeabi_dcmpun>
    8838:	2800      	cmp	r0, #0
    883a:	f040 81f7 	bne.w	8c2c <_printf_float+0x450>
    883e:	f04f 32ff 	mov.w	r2, #4294967295
    8842:	4ba1      	ldr	r3, [pc, #644]	; (8ac8 <_printf_float+0x2ec>)
    8844:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8846:	4638      	mov	r0, r7
    8848:	f003 f978 	bl	bb3c <__aeabi_dcmple>
    884c:	2800      	cmp	r0, #0
    884e:	f040 81ed 	bne.w	8c2c <_printf_float+0x450>
    8852:	2200      	movs	r2, #0
    8854:	2300      	movs	r3, #0
    8856:	4638      	mov	r0, r7
    8858:	4649      	mov	r1, r9
    885a:	f003 f965 	bl	bb28 <__aeabi_dcmplt>
    885e:	b110      	cbz	r0, 8866 <_printf_float+0x8a>
    8860:	232d      	movs	r3, #45	; 0x2d
    8862:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    8866:	4b99      	ldr	r3, [pc, #612]	; (8acc <_printf_float+0x2f0>)
    8868:	4f99      	ldr	r7, [pc, #612]	; (8ad0 <_printf_float+0x2f4>)
    886a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
    886e:	bf98      	it	ls
    8870:	461f      	movls	r7, r3
    8872:	2303      	movs	r3, #3
    8874:	6123      	str	r3, [r4, #16]
    8876:	f02a 0304 	bic.w	r3, sl, #4
    887a:	6023      	str	r3, [r4, #0]
    887c:	f04f 0900 	mov.w	r9, #0
    8880:	9600      	str	r6, [sp, #0]
    8882:	465b      	mov	r3, fp
    8884:	aa0f      	add	r2, sp, #60	; 0x3c
    8886:	4621      	mov	r1, r4
    8888:	4628      	mov	r0, r5
    888a:	f000 f9df 	bl	8c4c <_printf_common>
    888e:	3001      	adds	r0, #1
    8890:	f040 809a 	bne.w	89c8 <_printf_float+0x1ec>
    8894:	f04f 30ff 	mov.w	r0, #4294967295
    8898:	b011      	add	sp, #68	; 0x44
    889a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    889e:	6862      	ldr	r2, [r4, #4]
    88a0:	1c53      	adds	r3, r2, #1
    88a2:	a80e      	add	r0, sp, #56	; 0x38
    88a4:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
    88a8:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
    88ac:	d141      	bne.n	8932 <_printf_float+0x156>
    88ae:	2206      	movs	r2, #6
    88b0:	6062      	str	r2, [r4, #4]
    88b2:	6023      	str	r3, [r4, #0]
    88b4:	2100      	movs	r1, #0
    88b6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
    88ba:	9301      	str	r3, [sp, #4]
    88bc:	6863      	ldr	r3, [r4, #4]
    88be:	9005      	str	r0, [sp, #20]
    88c0:	9202      	str	r2, [sp, #8]
    88c2:	9300      	str	r3, [sp, #0]
    88c4:	463a      	mov	r2, r7
    88c6:	464b      	mov	r3, r9
    88c8:	9106      	str	r1, [sp, #24]
    88ca:	f8cd 8010 	str.w	r8, [sp, #16]
    88ce:	f8cd e00c 	str.w	lr, [sp, #12]
    88d2:	4628      	mov	r0, r5
    88d4:	f7ff fef0 	bl	86b8 <__cvt>
    88d8:	f008 03df 	and.w	r3, r8, #223	; 0xdf
    88dc:	2b47      	cmp	r3, #71	; 0x47
    88de:	4607      	mov	r7, r0
    88e0:	d109      	bne.n	88f6 <_printf_float+0x11a>
    88e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    88e4:	1cd8      	adds	r0, r3, #3
    88e6:	db02      	blt.n	88ee <_printf_float+0x112>
    88e8:	6862      	ldr	r2, [r4, #4]
    88ea:	4293      	cmp	r3, r2
    88ec:	dd59      	ble.n	89a2 <_printf_float+0x1c6>
    88ee:	f1a8 0802 	sub.w	r8, r8, #2
    88f2:	fa5f f888 	uxtb.w	r8, r8
    88f6:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
    88fa:	990d      	ldr	r1, [sp, #52]	; 0x34
    88fc:	d836      	bhi.n	896c <_printf_float+0x190>
    88fe:	3901      	subs	r1, #1
    8900:	4642      	mov	r2, r8
    8902:	f104 0050 	add.w	r0, r4, #80	; 0x50
    8906:	910d      	str	r1, [sp, #52]	; 0x34
    8908:	f7ff ff32 	bl	8770 <__exponent>
    890c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    890e:	1883      	adds	r3, r0, r2
    8910:	2a01      	cmp	r2, #1
    8912:	4681      	mov	r9, r0
    8914:	6123      	str	r3, [r4, #16]
    8916:	dc02      	bgt.n	891e <_printf_float+0x142>
    8918:	6822      	ldr	r2, [r4, #0]
    891a:	07d1      	lsls	r1, r2, #31
    891c:	d501      	bpl.n	8922 <_printf_float+0x146>
    891e:	3301      	adds	r3, #1
    8920:	6123      	str	r3, [r4, #16]
    8922:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    8926:	2b00      	cmp	r3, #0
    8928:	d0aa      	beq.n	8880 <_printf_float+0xa4>
    892a:	232d      	movs	r3, #45	; 0x2d
    892c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    8930:	e7a6      	b.n	8880 <_printf_float+0xa4>
    8932:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
    8936:	d002      	beq.n	893e <_printf_float+0x162>
    8938:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
    893c:	d1b9      	bne.n	88b2 <_printf_float+0xd6>
    893e:	b19a      	cbz	r2, 8968 <_printf_float+0x18c>
    8940:	2100      	movs	r1, #0
    8942:	9106      	str	r1, [sp, #24]
    8944:	f10d 0133 	add.w	r1, sp, #51	; 0x33
    8948:	e88d 000c 	stmia.w	sp, {r2, r3}
    894c:	6023      	str	r3, [r4, #0]
    894e:	9005      	str	r0, [sp, #20]
    8950:	463a      	mov	r2, r7
    8952:	f8cd 8010 	str.w	r8, [sp, #16]
    8956:	f8cd e00c 	str.w	lr, [sp, #12]
    895a:	9102      	str	r1, [sp, #8]
    895c:	464b      	mov	r3, r9
    895e:	4628      	mov	r0, r5
    8960:	f7ff feaa 	bl	86b8 <__cvt>
    8964:	4607      	mov	r7, r0
    8966:	e7bc      	b.n	88e2 <_printf_float+0x106>
    8968:	2201      	movs	r2, #1
    896a:	e7a1      	b.n	88b0 <_printf_float+0xd4>
    896c:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
    8970:	d119      	bne.n	89a6 <_printf_float+0x1ca>
    8972:	2900      	cmp	r1, #0
    8974:	6863      	ldr	r3, [r4, #4]
    8976:	dd0c      	ble.n	8992 <_printf_float+0x1b6>
    8978:	6121      	str	r1, [r4, #16]
    897a:	b913      	cbnz	r3, 8982 <_printf_float+0x1a6>
    897c:	6822      	ldr	r2, [r4, #0]
    897e:	07d2      	lsls	r2, r2, #31
    8980:	d502      	bpl.n	8988 <_printf_float+0x1ac>
    8982:	3301      	adds	r3, #1
    8984:	440b      	add	r3, r1
    8986:	6123      	str	r3, [r4, #16]
    8988:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    898a:	65a3      	str	r3, [r4, #88]	; 0x58
    898c:	f04f 0900 	mov.w	r9, #0
    8990:	e7c7      	b.n	8922 <_printf_float+0x146>
    8992:	b913      	cbnz	r3, 899a <_printf_float+0x1be>
    8994:	6822      	ldr	r2, [r4, #0]
    8996:	07d0      	lsls	r0, r2, #31
    8998:	d501      	bpl.n	899e <_printf_float+0x1c2>
    899a:	3302      	adds	r3, #2
    899c:	e7f3      	b.n	8986 <_printf_float+0x1aa>
    899e:	2301      	movs	r3, #1
    89a0:	e7f1      	b.n	8986 <_printf_float+0x1aa>
    89a2:	f04f 0867 	mov.w	r8, #103	; 0x67
    89a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    89a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    89aa:	4293      	cmp	r3, r2
    89ac:	db05      	blt.n	89ba <_printf_float+0x1de>
    89ae:	6822      	ldr	r2, [r4, #0]
    89b0:	6123      	str	r3, [r4, #16]
    89b2:	07d1      	lsls	r1, r2, #31
    89b4:	d5e8      	bpl.n	8988 <_printf_float+0x1ac>
    89b6:	3301      	adds	r3, #1
    89b8:	e7e5      	b.n	8986 <_printf_float+0x1aa>
    89ba:	2b00      	cmp	r3, #0
    89bc:	bfd4      	ite	le
    89be:	f1c3 0302 	rsble	r3, r3, #2
    89c2:	2301      	movgt	r3, #1
    89c4:	4413      	add	r3, r2
    89c6:	e7de      	b.n	8986 <_printf_float+0x1aa>
    89c8:	6823      	ldr	r3, [r4, #0]
    89ca:	055a      	lsls	r2, r3, #21
    89cc:	d407      	bmi.n	89de <_printf_float+0x202>
    89ce:	6923      	ldr	r3, [r4, #16]
    89d0:	463a      	mov	r2, r7
    89d2:	4659      	mov	r1, fp
    89d4:	4628      	mov	r0, r5
    89d6:	47b0      	blx	r6
    89d8:	3001      	adds	r0, #1
    89da:	d12a      	bne.n	8a32 <_printf_float+0x256>
    89dc:	e75a      	b.n	8894 <_printf_float+0xb8>
    89de:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
    89e2:	f240 80dc 	bls.w	8b9e <_printf_float+0x3c2>
    89e6:	2200      	movs	r2, #0
    89e8:	2300      	movs	r3, #0
    89ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    89ee:	f003 f891 	bl	bb14 <__aeabi_dcmpeq>
    89f2:	2800      	cmp	r0, #0
    89f4:	d039      	beq.n	8a6a <_printf_float+0x28e>
    89f6:	2301      	movs	r3, #1
    89f8:	4a36      	ldr	r2, [pc, #216]	; (8ad4 <_printf_float+0x2f8>)
    89fa:	4659      	mov	r1, fp
    89fc:	4628      	mov	r0, r5
    89fe:	47b0      	blx	r6
    8a00:	3001      	adds	r0, #1
    8a02:	f43f af47 	beq.w	8894 <_printf_float+0xb8>
    8a06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8a08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8a0a:	429a      	cmp	r2, r3
    8a0c:	db02      	blt.n	8a14 <_printf_float+0x238>
    8a0e:	6823      	ldr	r3, [r4, #0]
    8a10:	07d8      	lsls	r0, r3, #31
    8a12:	d50e      	bpl.n	8a32 <_printf_float+0x256>
    8a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8a16:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8a18:	4659      	mov	r1, fp
    8a1a:	4628      	mov	r0, r5
    8a1c:	47b0      	blx	r6
    8a1e:	3001      	adds	r0, #1
    8a20:	f43f af38 	beq.w	8894 <_printf_float+0xb8>
    8a24:	2700      	movs	r7, #0
    8a26:	f104 081a 	add.w	r8, r4, #26
    8a2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8a2c:	3b01      	subs	r3, #1
    8a2e:	429f      	cmp	r7, r3
    8a30:	db11      	blt.n	8a56 <_printf_float+0x27a>
    8a32:	6823      	ldr	r3, [r4, #0]
    8a34:	079f      	lsls	r7, r3, #30
    8a36:	d508      	bpl.n	8a4a <_printf_float+0x26e>
    8a38:	2700      	movs	r7, #0
    8a3a:	f104 0819 	add.w	r8, r4, #25
    8a3e:	68e3      	ldr	r3, [r4, #12]
    8a40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8a42:	1a9b      	subs	r3, r3, r2
    8a44:	429f      	cmp	r7, r3
    8a46:	f2c0 80e7 	blt.w	8c18 <_printf_float+0x43c>
    8a4a:	68e0      	ldr	r0, [r4, #12]
    8a4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8a4e:	4298      	cmp	r0, r3
    8a50:	bfb8      	it	lt
    8a52:	4618      	movlt	r0, r3
    8a54:	e720      	b.n	8898 <_printf_float+0xbc>
    8a56:	2301      	movs	r3, #1
    8a58:	4642      	mov	r2, r8
    8a5a:	4659      	mov	r1, fp
    8a5c:	4628      	mov	r0, r5
    8a5e:	47b0      	blx	r6
    8a60:	3001      	adds	r0, #1
    8a62:	f43f af17 	beq.w	8894 <_printf_float+0xb8>
    8a66:	3701      	adds	r7, #1
    8a68:	e7df      	b.n	8a2a <_printf_float+0x24e>
    8a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8a6c:	2b00      	cmp	r3, #0
    8a6e:	dc33      	bgt.n	8ad8 <_printf_float+0x2fc>
    8a70:	2301      	movs	r3, #1
    8a72:	4a18      	ldr	r2, [pc, #96]	; (8ad4 <_printf_float+0x2f8>)
    8a74:	4659      	mov	r1, fp
    8a76:	4628      	mov	r0, r5
    8a78:	47b0      	blx	r6
    8a7a:	3001      	adds	r0, #1
    8a7c:	f43f af0a 	beq.w	8894 <_printf_float+0xb8>
    8a80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8a82:	b923      	cbnz	r3, 8a8e <_printf_float+0x2b2>
    8a84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8a86:	b913      	cbnz	r3, 8a8e <_printf_float+0x2b2>
    8a88:	6823      	ldr	r3, [r4, #0]
    8a8a:	07d9      	lsls	r1, r3, #31
    8a8c:	d5d1      	bpl.n	8a32 <_printf_float+0x256>
    8a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8a90:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8a92:	4659      	mov	r1, fp
    8a94:	4628      	mov	r0, r5
    8a96:	47b0      	blx	r6
    8a98:	3001      	adds	r0, #1
    8a9a:	f43f aefb 	beq.w	8894 <_printf_float+0xb8>
    8a9e:	f04f 0800 	mov.w	r8, #0
    8aa2:	f104 091a 	add.w	r9, r4, #26
    8aa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8aa8:	425b      	negs	r3, r3
    8aaa:	4598      	cmp	r8, r3
    8aac:	db01      	blt.n	8ab2 <_printf_float+0x2d6>
    8aae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8ab0:	e78e      	b.n	89d0 <_printf_float+0x1f4>
    8ab2:	2301      	movs	r3, #1
    8ab4:	464a      	mov	r2, r9
    8ab6:	4659      	mov	r1, fp
    8ab8:	4628      	mov	r0, r5
    8aba:	47b0      	blx	r6
    8abc:	3001      	adds	r0, #1
    8abe:	f43f aee9 	beq.w	8894 <_printf_float+0xb8>
    8ac2:	f108 0801 	add.w	r8, r8, #1
    8ac6:	e7ee      	b.n	8aa6 <_printf_float+0x2ca>
    8ac8:	7fefffff 	.word	0x7fefffff
    8acc:	0000c444 	.word	0x0000c444
    8ad0:	0000c448 	.word	0x0000c448
    8ad4:	0000c454 	.word	0x0000c454
    8ad8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8ada:	6da3      	ldr	r3, [r4, #88]	; 0x58
    8adc:	429a      	cmp	r2, r3
    8ade:	bfa8      	it	ge
    8ae0:	461a      	movge	r2, r3
    8ae2:	2a00      	cmp	r2, #0
    8ae4:	4690      	mov	r8, r2
    8ae6:	dc36      	bgt.n	8b56 <_printf_float+0x37a>
    8ae8:	f104 031a 	add.w	r3, r4, #26
    8aec:	f04f 0a00 	mov.w	sl, #0
    8af0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
    8af4:	930b      	str	r3, [sp, #44]	; 0x2c
    8af6:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
    8afa:	eba9 0308 	sub.w	r3, r9, r8
    8afe:	459a      	cmp	sl, r3
    8b00:	db31      	blt.n	8b66 <_printf_float+0x38a>
    8b02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8b06:	429a      	cmp	r2, r3
    8b08:	db38      	blt.n	8b7c <_printf_float+0x3a0>
    8b0a:	6823      	ldr	r3, [r4, #0]
    8b0c:	07da      	lsls	r2, r3, #31
    8b0e:	d435      	bmi.n	8b7c <_printf_float+0x3a0>
    8b10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b12:	990d      	ldr	r1, [sp, #52]	; 0x34
    8b14:	eba3 0209 	sub.w	r2, r3, r9
    8b18:	eba3 0801 	sub.w	r8, r3, r1
    8b1c:	4590      	cmp	r8, r2
    8b1e:	bfa8      	it	ge
    8b20:	4690      	movge	r8, r2
    8b22:	f1b8 0f00 	cmp.w	r8, #0
    8b26:	dc31      	bgt.n	8b8c <_printf_float+0x3b0>
    8b28:	2700      	movs	r7, #0
    8b2a:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
    8b2e:	f104 091a 	add.w	r9, r4, #26
    8b32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8b34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b36:	1a9b      	subs	r3, r3, r2
    8b38:	eba3 0308 	sub.w	r3, r3, r8
    8b3c:	429f      	cmp	r7, r3
    8b3e:	f6bf af78 	bge.w	8a32 <_printf_float+0x256>
    8b42:	2301      	movs	r3, #1
    8b44:	464a      	mov	r2, r9
    8b46:	4659      	mov	r1, fp
    8b48:	4628      	mov	r0, r5
    8b4a:	47b0      	blx	r6
    8b4c:	3001      	adds	r0, #1
    8b4e:	f43f aea1 	beq.w	8894 <_printf_float+0xb8>
    8b52:	3701      	adds	r7, #1
    8b54:	e7ed      	b.n	8b32 <_printf_float+0x356>
    8b56:	4613      	mov	r3, r2
    8b58:	4659      	mov	r1, fp
    8b5a:	463a      	mov	r2, r7
    8b5c:	4628      	mov	r0, r5
    8b5e:	47b0      	blx	r6
    8b60:	3001      	adds	r0, #1
    8b62:	d1c1      	bne.n	8ae8 <_printf_float+0x30c>
    8b64:	e696      	b.n	8894 <_printf_float+0xb8>
    8b66:	2301      	movs	r3, #1
    8b68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8b6a:	4659      	mov	r1, fp
    8b6c:	4628      	mov	r0, r5
    8b6e:	47b0      	blx	r6
    8b70:	3001      	adds	r0, #1
    8b72:	f43f ae8f 	beq.w	8894 <_printf_float+0xb8>
    8b76:	f10a 0a01 	add.w	sl, sl, #1
    8b7a:	e7bc      	b.n	8af6 <_printf_float+0x31a>
    8b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8b7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8b80:	4659      	mov	r1, fp
    8b82:	4628      	mov	r0, r5
    8b84:	47b0      	blx	r6
    8b86:	3001      	adds	r0, #1
    8b88:	d1c2      	bne.n	8b10 <_printf_float+0x334>
    8b8a:	e683      	b.n	8894 <_printf_float+0xb8>
    8b8c:	4643      	mov	r3, r8
    8b8e:	eb07 0209 	add.w	r2, r7, r9
    8b92:	4659      	mov	r1, fp
    8b94:	4628      	mov	r0, r5
    8b96:	47b0      	blx	r6
    8b98:	3001      	adds	r0, #1
    8b9a:	d1c5      	bne.n	8b28 <_printf_float+0x34c>
    8b9c:	e67a      	b.n	8894 <_printf_float+0xb8>
    8b9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8ba0:	2a01      	cmp	r2, #1
    8ba2:	dc01      	bgt.n	8ba8 <_printf_float+0x3cc>
    8ba4:	07db      	lsls	r3, r3, #31
    8ba6:	d534      	bpl.n	8c12 <_printf_float+0x436>
    8ba8:	2301      	movs	r3, #1
    8baa:	463a      	mov	r2, r7
    8bac:	4659      	mov	r1, fp
    8bae:	4628      	mov	r0, r5
    8bb0:	47b0      	blx	r6
    8bb2:	3001      	adds	r0, #1
    8bb4:	f43f ae6e 	beq.w	8894 <_printf_float+0xb8>
    8bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8bba:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8bbc:	4659      	mov	r1, fp
    8bbe:	4628      	mov	r0, r5
    8bc0:	47b0      	blx	r6
    8bc2:	3001      	adds	r0, #1
    8bc4:	f43f ae66 	beq.w	8894 <_printf_float+0xb8>
    8bc8:	2200      	movs	r2, #0
    8bca:	2300      	movs	r3, #0
    8bcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    8bd0:	f002 ffa0 	bl	bb14 <__aeabi_dcmpeq>
    8bd4:	b150      	cbz	r0, 8bec <_printf_float+0x410>
    8bd6:	2700      	movs	r7, #0
    8bd8:	f104 081a 	add.w	r8, r4, #26
    8bdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8bde:	3b01      	subs	r3, #1
    8be0:	429f      	cmp	r7, r3
    8be2:	db0c      	blt.n	8bfe <_printf_float+0x422>
    8be4:	464b      	mov	r3, r9
    8be6:	f104 0250 	add.w	r2, r4, #80	; 0x50
    8bea:	e6f2      	b.n	89d2 <_printf_float+0x1f6>
    8bec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8bee:	1c7a      	adds	r2, r7, #1
    8bf0:	3b01      	subs	r3, #1
    8bf2:	4659      	mov	r1, fp
    8bf4:	4628      	mov	r0, r5
    8bf6:	47b0      	blx	r6
    8bf8:	3001      	adds	r0, #1
    8bfa:	d1f3      	bne.n	8be4 <_printf_float+0x408>
    8bfc:	e64a      	b.n	8894 <_printf_float+0xb8>
    8bfe:	2301      	movs	r3, #1
    8c00:	4642      	mov	r2, r8
    8c02:	4659      	mov	r1, fp
    8c04:	4628      	mov	r0, r5
    8c06:	47b0      	blx	r6
    8c08:	3001      	adds	r0, #1
    8c0a:	f43f ae43 	beq.w	8894 <_printf_float+0xb8>
    8c0e:	3701      	adds	r7, #1
    8c10:	e7e4      	b.n	8bdc <_printf_float+0x400>
    8c12:	2301      	movs	r3, #1
    8c14:	463a      	mov	r2, r7
    8c16:	e7ec      	b.n	8bf2 <_printf_float+0x416>
    8c18:	2301      	movs	r3, #1
    8c1a:	4642      	mov	r2, r8
    8c1c:	4659      	mov	r1, fp
    8c1e:	4628      	mov	r0, r5
    8c20:	47b0      	blx	r6
    8c22:	3001      	adds	r0, #1
    8c24:	f43f ae36 	beq.w	8894 <_printf_float+0xb8>
    8c28:	3701      	adds	r7, #1
    8c2a:	e708      	b.n	8a3e <_printf_float+0x262>
    8c2c:	463a      	mov	r2, r7
    8c2e:	464b      	mov	r3, r9
    8c30:	4638      	mov	r0, r7
    8c32:	4649      	mov	r1, r9
    8c34:	f002 ffa0 	bl	bb78 <__aeabi_dcmpun>
    8c38:	2800      	cmp	r0, #0
    8c3a:	f43f ae30 	beq.w	889e <_printf_float+0xc2>
    8c3e:	4b01      	ldr	r3, [pc, #4]	; (8c44 <_printf_float+0x468>)
    8c40:	4f01      	ldr	r7, [pc, #4]	; (8c48 <_printf_float+0x46c>)
    8c42:	e612      	b.n	886a <_printf_float+0x8e>
    8c44:	0000c44c 	.word	0x0000c44c
    8c48:	0000c450 	.word	0x0000c450

00008c4c <_printf_common>:
    8c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8c50:	4691      	mov	r9, r2
    8c52:	461f      	mov	r7, r3
    8c54:	688a      	ldr	r2, [r1, #8]
    8c56:	690b      	ldr	r3, [r1, #16]
    8c58:	f8dd 8020 	ldr.w	r8, [sp, #32]
    8c5c:	4293      	cmp	r3, r2
    8c5e:	bfb8      	it	lt
    8c60:	4613      	movlt	r3, r2
    8c62:	f8c9 3000 	str.w	r3, [r9]
    8c66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    8c6a:	4606      	mov	r6, r0
    8c6c:	460c      	mov	r4, r1
    8c6e:	b112      	cbz	r2, 8c76 <_printf_common+0x2a>
    8c70:	3301      	adds	r3, #1
    8c72:	f8c9 3000 	str.w	r3, [r9]
    8c76:	6823      	ldr	r3, [r4, #0]
    8c78:	0699      	lsls	r1, r3, #26
    8c7a:	bf42      	ittt	mi
    8c7c:	f8d9 3000 	ldrmi.w	r3, [r9]
    8c80:	3302      	addmi	r3, #2
    8c82:	f8c9 3000 	strmi.w	r3, [r9]
    8c86:	6825      	ldr	r5, [r4, #0]
    8c88:	f015 0506 	ands.w	r5, r5, #6
    8c8c:	d107      	bne.n	8c9e <_printf_common+0x52>
    8c8e:	f104 0a19 	add.w	sl, r4, #25
    8c92:	68e3      	ldr	r3, [r4, #12]
    8c94:	f8d9 2000 	ldr.w	r2, [r9]
    8c98:	1a9b      	subs	r3, r3, r2
    8c9a:	429d      	cmp	r5, r3
    8c9c:	db29      	blt.n	8cf2 <_printf_common+0xa6>
    8c9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    8ca2:	6822      	ldr	r2, [r4, #0]
    8ca4:	3300      	adds	r3, #0
    8ca6:	bf18      	it	ne
    8ca8:	2301      	movne	r3, #1
    8caa:	0692      	lsls	r2, r2, #26
    8cac:	d42e      	bmi.n	8d0c <_printf_common+0xc0>
    8cae:	f104 0243 	add.w	r2, r4, #67	; 0x43
    8cb2:	4639      	mov	r1, r7
    8cb4:	4630      	mov	r0, r6
    8cb6:	47c0      	blx	r8
    8cb8:	3001      	adds	r0, #1
    8cba:	d021      	beq.n	8d00 <_printf_common+0xb4>
    8cbc:	6823      	ldr	r3, [r4, #0]
    8cbe:	68e5      	ldr	r5, [r4, #12]
    8cc0:	f8d9 2000 	ldr.w	r2, [r9]
    8cc4:	f003 0306 	and.w	r3, r3, #6
    8cc8:	2b04      	cmp	r3, #4
    8cca:	bf08      	it	eq
    8ccc:	1aad      	subeq	r5, r5, r2
    8cce:	68a3      	ldr	r3, [r4, #8]
    8cd0:	6922      	ldr	r2, [r4, #16]
    8cd2:	bf0c      	ite	eq
    8cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    8cd8:	2500      	movne	r5, #0
    8cda:	4293      	cmp	r3, r2
    8cdc:	bfc4      	itt	gt
    8cde:	1a9b      	subgt	r3, r3, r2
    8ce0:	18ed      	addgt	r5, r5, r3
    8ce2:	f04f 0900 	mov.w	r9, #0
    8ce6:	341a      	adds	r4, #26
    8ce8:	454d      	cmp	r5, r9
    8cea:	d11b      	bne.n	8d24 <_printf_common+0xd8>
    8cec:	2000      	movs	r0, #0
    8cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8cf2:	2301      	movs	r3, #1
    8cf4:	4652      	mov	r2, sl
    8cf6:	4639      	mov	r1, r7
    8cf8:	4630      	mov	r0, r6
    8cfa:	47c0      	blx	r8
    8cfc:	3001      	adds	r0, #1
    8cfe:	d103      	bne.n	8d08 <_printf_common+0xbc>
    8d00:	f04f 30ff 	mov.w	r0, #4294967295
    8d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8d08:	3501      	adds	r5, #1
    8d0a:	e7c2      	b.n	8c92 <_printf_common+0x46>
    8d0c:	18e1      	adds	r1, r4, r3
    8d0e:	1c5a      	adds	r2, r3, #1
    8d10:	2030      	movs	r0, #48	; 0x30
    8d12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    8d16:	4422      	add	r2, r4
    8d18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    8d1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    8d20:	3302      	adds	r3, #2
    8d22:	e7c4      	b.n	8cae <_printf_common+0x62>
    8d24:	2301      	movs	r3, #1
    8d26:	4622      	mov	r2, r4
    8d28:	4639      	mov	r1, r7
    8d2a:	4630      	mov	r0, r6
    8d2c:	47c0      	blx	r8
    8d2e:	3001      	adds	r0, #1
    8d30:	d0e6      	beq.n	8d00 <_printf_common+0xb4>
    8d32:	f109 0901 	add.w	r9, r9, #1
    8d36:	e7d7      	b.n	8ce8 <_printf_common+0x9c>

00008d38 <_printf_i>:
    8d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8d3c:	4617      	mov	r7, r2
    8d3e:	7e0a      	ldrb	r2, [r1, #24]
    8d40:	b085      	sub	sp, #20
    8d42:	2a6e      	cmp	r2, #110	; 0x6e
    8d44:	4698      	mov	r8, r3
    8d46:	4606      	mov	r6, r0
    8d48:	460c      	mov	r4, r1
    8d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8d4c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    8d50:	f000 80bc 	beq.w	8ecc <_printf_i+0x194>
    8d54:	d81a      	bhi.n	8d8c <_printf_i+0x54>
    8d56:	2a63      	cmp	r2, #99	; 0x63
    8d58:	d02e      	beq.n	8db8 <_printf_i+0x80>
    8d5a:	d80a      	bhi.n	8d72 <_printf_i+0x3a>
    8d5c:	2a00      	cmp	r2, #0
    8d5e:	f000 80c8 	beq.w	8ef2 <_printf_i+0x1ba>
    8d62:	2a58      	cmp	r2, #88	; 0x58
    8d64:	f000 808a 	beq.w	8e7c <_printf_i+0x144>
    8d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
    8d6c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    8d70:	e02a      	b.n	8dc8 <_printf_i+0x90>
    8d72:	2a64      	cmp	r2, #100	; 0x64
    8d74:	d001      	beq.n	8d7a <_printf_i+0x42>
    8d76:	2a69      	cmp	r2, #105	; 0x69
    8d78:	d1f6      	bne.n	8d68 <_printf_i+0x30>
    8d7a:	6821      	ldr	r1, [r4, #0]
    8d7c:	681a      	ldr	r2, [r3, #0]
    8d7e:	f011 0f80 	tst.w	r1, #128	; 0x80
    8d82:	d023      	beq.n	8dcc <_printf_i+0x94>
    8d84:	1d11      	adds	r1, r2, #4
    8d86:	6019      	str	r1, [r3, #0]
    8d88:	6813      	ldr	r3, [r2, #0]
    8d8a:	e027      	b.n	8ddc <_printf_i+0xa4>
    8d8c:	2a73      	cmp	r2, #115	; 0x73
    8d8e:	f000 80b4 	beq.w	8efa <_printf_i+0x1c2>
    8d92:	d808      	bhi.n	8da6 <_printf_i+0x6e>
    8d94:	2a6f      	cmp	r2, #111	; 0x6f
    8d96:	d02a      	beq.n	8dee <_printf_i+0xb6>
    8d98:	2a70      	cmp	r2, #112	; 0x70
    8d9a:	d1e5      	bne.n	8d68 <_printf_i+0x30>
    8d9c:	680a      	ldr	r2, [r1, #0]
    8d9e:	f042 0220 	orr.w	r2, r2, #32
    8da2:	600a      	str	r2, [r1, #0]
    8da4:	e003      	b.n	8dae <_printf_i+0x76>
    8da6:	2a75      	cmp	r2, #117	; 0x75
    8da8:	d021      	beq.n	8dee <_printf_i+0xb6>
    8daa:	2a78      	cmp	r2, #120	; 0x78
    8dac:	d1dc      	bne.n	8d68 <_printf_i+0x30>
    8dae:	2278      	movs	r2, #120	; 0x78
    8db0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    8db4:	496e      	ldr	r1, [pc, #440]	; (8f70 <_printf_i+0x238>)
    8db6:	e064      	b.n	8e82 <_printf_i+0x14a>
    8db8:	681a      	ldr	r2, [r3, #0]
    8dba:	f101 0542 	add.w	r5, r1, #66	; 0x42
    8dbe:	1d11      	adds	r1, r2, #4
    8dc0:	6019      	str	r1, [r3, #0]
    8dc2:	6813      	ldr	r3, [r2, #0]
    8dc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    8dc8:	2301      	movs	r3, #1
    8dca:	e0a3      	b.n	8f14 <_printf_i+0x1dc>
    8dcc:	f011 0f40 	tst.w	r1, #64	; 0x40
    8dd0:	f102 0104 	add.w	r1, r2, #4
    8dd4:	6019      	str	r1, [r3, #0]
    8dd6:	d0d7      	beq.n	8d88 <_printf_i+0x50>
    8dd8:	f9b2 3000 	ldrsh.w	r3, [r2]
    8ddc:	2b00      	cmp	r3, #0
    8dde:	da03      	bge.n	8de8 <_printf_i+0xb0>
    8de0:	222d      	movs	r2, #45	; 0x2d
    8de2:	425b      	negs	r3, r3
    8de4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    8de8:	4962      	ldr	r1, [pc, #392]	; (8f74 <_printf_i+0x23c>)
    8dea:	220a      	movs	r2, #10
    8dec:	e017      	b.n	8e1e <_printf_i+0xe6>
    8dee:	6820      	ldr	r0, [r4, #0]
    8df0:	6819      	ldr	r1, [r3, #0]
    8df2:	f010 0f80 	tst.w	r0, #128	; 0x80
    8df6:	d003      	beq.n	8e00 <_printf_i+0xc8>
    8df8:	1d08      	adds	r0, r1, #4
    8dfa:	6018      	str	r0, [r3, #0]
    8dfc:	680b      	ldr	r3, [r1, #0]
    8dfe:	e006      	b.n	8e0e <_printf_i+0xd6>
    8e00:	f010 0f40 	tst.w	r0, #64	; 0x40
    8e04:	f101 0004 	add.w	r0, r1, #4
    8e08:	6018      	str	r0, [r3, #0]
    8e0a:	d0f7      	beq.n	8dfc <_printf_i+0xc4>
    8e0c:	880b      	ldrh	r3, [r1, #0]
    8e0e:	4959      	ldr	r1, [pc, #356]	; (8f74 <_printf_i+0x23c>)
    8e10:	2a6f      	cmp	r2, #111	; 0x6f
    8e12:	bf14      	ite	ne
    8e14:	220a      	movne	r2, #10
    8e16:	2208      	moveq	r2, #8
    8e18:	2000      	movs	r0, #0
    8e1a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    8e1e:	6865      	ldr	r5, [r4, #4]
    8e20:	60a5      	str	r5, [r4, #8]
    8e22:	2d00      	cmp	r5, #0
    8e24:	f2c0 809c 	blt.w	8f60 <_printf_i+0x228>
    8e28:	6820      	ldr	r0, [r4, #0]
    8e2a:	f020 0004 	bic.w	r0, r0, #4
    8e2e:	6020      	str	r0, [r4, #0]
    8e30:	2b00      	cmp	r3, #0
    8e32:	d13f      	bne.n	8eb4 <_printf_i+0x17c>
    8e34:	2d00      	cmp	r5, #0
    8e36:	f040 8095 	bne.w	8f64 <_printf_i+0x22c>
    8e3a:	4675      	mov	r5, lr
    8e3c:	2a08      	cmp	r2, #8
    8e3e:	d10b      	bne.n	8e58 <_printf_i+0x120>
    8e40:	6823      	ldr	r3, [r4, #0]
    8e42:	07da      	lsls	r2, r3, #31
    8e44:	d508      	bpl.n	8e58 <_printf_i+0x120>
    8e46:	6923      	ldr	r3, [r4, #16]
    8e48:	6862      	ldr	r2, [r4, #4]
    8e4a:	429a      	cmp	r2, r3
    8e4c:	bfde      	ittt	le
    8e4e:	2330      	movle	r3, #48	; 0x30
    8e50:	f805 3c01 	strble.w	r3, [r5, #-1]
    8e54:	f105 35ff 	addle.w	r5, r5, #4294967295
    8e58:	ebae 0305 	sub.w	r3, lr, r5
    8e5c:	6123      	str	r3, [r4, #16]
    8e5e:	f8cd 8000 	str.w	r8, [sp]
    8e62:	463b      	mov	r3, r7
    8e64:	aa03      	add	r2, sp, #12
    8e66:	4621      	mov	r1, r4
    8e68:	4630      	mov	r0, r6
    8e6a:	f7ff feef 	bl	8c4c <_printf_common>
    8e6e:	3001      	adds	r0, #1
    8e70:	d155      	bne.n	8f1e <_printf_i+0x1e6>
    8e72:	f04f 30ff 	mov.w	r0, #4294967295
    8e76:	b005      	add	sp, #20
    8e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8e7c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    8e80:	493c      	ldr	r1, [pc, #240]	; (8f74 <_printf_i+0x23c>)
    8e82:	6822      	ldr	r2, [r4, #0]
    8e84:	6818      	ldr	r0, [r3, #0]
    8e86:	f012 0f80 	tst.w	r2, #128	; 0x80
    8e8a:	f100 0504 	add.w	r5, r0, #4
    8e8e:	601d      	str	r5, [r3, #0]
    8e90:	d001      	beq.n	8e96 <_printf_i+0x15e>
    8e92:	6803      	ldr	r3, [r0, #0]
    8e94:	e002      	b.n	8e9c <_printf_i+0x164>
    8e96:	0655      	lsls	r5, r2, #25
    8e98:	d5fb      	bpl.n	8e92 <_printf_i+0x15a>
    8e9a:	8803      	ldrh	r3, [r0, #0]
    8e9c:	07d0      	lsls	r0, r2, #31
    8e9e:	bf44      	itt	mi
    8ea0:	f042 0220 	orrmi.w	r2, r2, #32
    8ea4:	6022      	strmi	r2, [r4, #0]
    8ea6:	b91b      	cbnz	r3, 8eb0 <_printf_i+0x178>
    8ea8:	6822      	ldr	r2, [r4, #0]
    8eaa:	f022 0220 	bic.w	r2, r2, #32
    8eae:	6022      	str	r2, [r4, #0]
    8eb0:	2210      	movs	r2, #16
    8eb2:	e7b1      	b.n	8e18 <_printf_i+0xe0>
    8eb4:	4675      	mov	r5, lr
    8eb6:	fbb3 f0f2 	udiv	r0, r3, r2
    8eba:	fb02 3310 	mls	r3, r2, r0, r3
    8ebe:	5ccb      	ldrb	r3, [r1, r3]
    8ec0:	f805 3d01 	strb.w	r3, [r5, #-1]!
    8ec4:	4603      	mov	r3, r0
    8ec6:	2800      	cmp	r0, #0
    8ec8:	d1f5      	bne.n	8eb6 <_printf_i+0x17e>
    8eca:	e7b7      	b.n	8e3c <_printf_i+0x104>
    8ecc:	6808      	ldr	r0, [r1, #0]
    8ece:	681a      	ldr	r2, [r3, #0]
    8ed0:	6949      	ldr	r1, [r1, #20]
    8ed2:	f010 0f80 	tst.w	r0, #128	; 0x80
    8ed6:	d004      	beq.n	8ee2 <_printf_i+0x1aa>
    8ed8:	1d10      	adds	r0, r2, #4
    8eda:	6018      	str	r0, [r3, #0]
    8edc:	6813      	ldr	r3, [r2, #0]
    8ede:	6019      	str	r1, [r3, #0]
    8ee0:	e007      	b.n	8ef2 <_printf_i+0x1ba>
    8ee2:	f010 0f40 	tst.w	r0, #64	; 0x40
    8ee6:	f102 0004 	add.w	r0, r2, #4
    8eea:	6018      	str	r0, [r3, #0]
    8eec:	6813      	ldr	r3, [r2, #0]
    8eee:	d0f6      	beq.n	8ede <_printf_i+0x1a6>
    8ef0:	8019      	strh	r1, [r3, #0]
    8ef2:	2300      	movs	r3, #0
    8ef4:	6123      	str	r3, [r4, #16]
    8ef6:	4675      	mov	r5, lr
    8ef8:	e7b1      	b.n	8e5e <_printf_i+0x126>
    8efa:	681a      	ldr	r2, [r3, #0]
    8efc:	1d11      	adds	r1, r2, #4
    8efe:	6019      	str	r1, [r3, #0]
    8f00:	6815      	ldr	r5, [r2, #0]
    8f02:	6862      	ldr	r2, [r4, #4]
    8f04:	2100      	movs	r1, #0
    8f06:	4628      	mov	r0, r5
    8f08:	f001 f98a 	bl	a220 <memchr>
    8f0c:	b108      	cbz	r0, 8f12 <_printf_i+0x1da>
    8f0e:	1b40      	subs	r0, r0, r5
    8f10:	6060      	str	r0, [r4, #4]
    8f12:	6863      	ldr	r3, [r4, #4]
    8f14:	6123      	str	r3, [r4, #16]
    8f16:	2300      	movs	r3, #0
    8f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    8f1c:	e79f      	b.n	8e5e <_printf_i+0x126>
    8f1e:	6923      	ldr	r3, [r4, #16]
    8f20:	462a      	mov	r2, r5
    8f22:	4639      	mov	r1, r7
    8f24:	4630      	mov	r0, r6
    8f26:	47c0      	blx	r8
    8f28:	3001      	adds	r0, #1
    8f2a:	d0a2      	beq.n	8e72 <_printf_i+0x13a>
    8f2c:	6823      	ldr	r3, [r4, #0]
    8f2e:	079b      	lsls	r3, r3, #30
    8f30:	d507      	bpl.n	8f42 <_printf_i+0x20a>
    8f32:	2500      	movs	r5, #0
    8f34:	f104 0919 	add.w	r9, r4, #25
    8f38:	68e3      	ldr	r3, [r4, #12]
    8f3a:	9a03      	ldr	r2, [sp, #12]
    8f3c:	1a9b      	subs	r3, r3, r2
    8f3e:	429d      	cmp	r5, r3
    8f40:	db05      	blt.n	8f4e <_printf_i+0x216>
    8f42:	68e0      	ldr	r0, [r4, #12]
    8f44:	9b03      	ldr	r3, [sp, #12]
    8f46:	4298      	cmp	r0, r3
    8f48:	bfb8      	it	lt
    8f4a:	4618      	movlt	r0, r3
    8f4c:	e793      	b.n	8e76 <_printf_i+0x13e>
    8f4e:	2301      	movs	r3, #1
    8f50:	464a      	mov	r2, r9
    8f52:	4639      	mov	r1, r7
    8f54:	4630      	mov	r0, r6
    8f56:	47c0      	blx	r8
    8f58:	3001      	adds	r0, #1
    8f5a:	d08a      	beq.n	8e72 <_printf_i+0x13a>
    8f5c:	3501      	adds	r5, #1
    8f5e:	e7eb      	b.n	8f38 <_printf_i+0x200>
    8f60:	2b00      	cmp	r3, #0
    8f62:	d1a7      	bne.n	8eb4 <_printf_i+0x17c>
    8f64:	780b      	ldrb	r3, [r1, #0]
    8f66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    8f6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
    8f6e:	e765      	b.n	8e3c <_printf_i+0x104>
    8f70:	0000c467 	.word	0x0000c467
    8f74:	0000c456 	.word	0x0000c456

00008f78 <iprintf>:
    8f78:	b40f      	push	{r0, r1, r2, r3}
    8f7a:	4b0a      	ldr	r3, [pc, #40]	; (8fa4 <iprintf+0x2c>)
    8f7c:	b513      	push	{r0, r1, r4, lr}
    8f7e:	681c      	ldr	r4, [r3, #0]
    8f80:	b124      	cbz	r4, 8f8c <iprintf+0x14>
    8f82:	69a3      	ldr	r3, [r4, #24]
    8f84:	b913      	cbnz	r3, 8f8c <iprintf+0x14>
    8f86:	4620      	mov	r0, r4
    8f88:	f001 f842 	bl	a010 <__sinit>
    8f8c:	ab05      	add	r3, sp, #20
    8f8e:	9a04      	ldr	r2, [sp, #16]
    8f90:	68a1      	ldr	r1, [r4, #8]
    8f92:	9301      	str	r3, [sp, #4]
    8f94:	4620      	mov	r0, r4
    8f96:	f001 fea1 	bl	acdc <_vfiprintf_r>
    8f9a:	b002      	add	sp, #8
    8f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8fa0:	b004      	add	sp, #16
    8fa2:	4770      	bx	lr
    8fa4:	20000084 	.word	0x20000084

00008fa8 <setbuf>:
    8fa8:	2900      	cmp	r1, #0
    8faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    8fae:	bf0c      	ite	eq
    8fb0:	2202      	moveq	r2, #2
    8fb2:	2200      	movne	r2, #0
    8fb4:	f000 b800 	b.w	8fb8 <setvbuf>

00008fb8 <setvbuf>:
    8fb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    8fbc:	461d      	mov	r5, r3
    8fbe:	4b51      	ldr	r3, [pc, #324]	; (9104 <setvbuf+0x14c>)
    8fc0:	681e      	ldr	r6, [r3, #0]
    8fc2:	4604      	mov	r4, r0
    8fc4:	460f      	mov	r7, r1
    8fc6:	4690      	mov	r8, r2
    8fc8:	b126      	cbz	r6, 8fd4 <setvbuf+0x1c>
    8fca:	69b3      	ldr	r3, [r6, #24]
    8fcc:	b913      	cbnz	r3, 8fd4 <setvbuf+0x1c>
    8fce:	4630      	mov	r0, r6
    8fd0:	f001 f81e 	bl	a010 <__sinit>
    8fd4:	4b4c      	ldr	r3, [pc, #304]	; (9108 <setvbuf+0x150>)
    8fd6:	429c      	cmp	r4, r3
    8fd8:	d152      	bne.n	9080 <setvbuf+0xc8>
    8fda:	6874      	ldr	r4, [r6, #4]
    8fdc:	f1b8 0f02 	cmp.w	r8, #2
    8fe0:	d006      	beq.n	8ff0 <setvbuf+0x38>
    8fe2:	f1b8 0f01 	cmp.w	r8, #1
    8fe6:	f200 8089 	bhi.w	90fc <setvbuf+0x144>
    8fea:	2d00      	cmp	r5, #0
    8fec:	f2c0 8086 	blt.w	90fc <setvbuf+0x144>
    8ff0:	4621      	mov	r1, r4
    8ff2:	4630      	mov	r0, r6
    8ff4:	f000 ffa2 	bl	9f3c <_fflush_r>
    8ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8ffa:	b141      	cbz	r1, 900e <setvbuf+0x56>
    8ffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
    9000:	4299      	cmp	r1, r3
    9002:	d002      	beq.n	900a <setvbuf+0x52>
    9004:	4630      	mov	r0, r6
    9006:	f001 fc45 	bl	a894 <_free_r>
    900a:	2300      	movs	r3, #0
    900c:	6363      	str	r3, [r4, #52]	; 0x34
    900e:	2300      	movs	r3, #0
    9010:	61a3      	str	r3, [r4, #24]
    9012:	6063      	str	r3, [r4, #4]
    9014:	89a3      	ldrh	r3, [r4, #12]
    9016:	061b      	lsls	r3, r3, #24
    9018:	d503      	bpl.n	9022 <setvbuf+0x6a>
    901a:	6921      	ldr	r1, [r4, #16]
    901c:	4630      	mov	r0, r6
    901e:	f001 fc39 	bl	a894 <_free_r>
    9022:	89a3      	ldrh	r3, [r4, #12]
    9024:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    9028:	f023 0303 	bic.w	r3, r3, #3
    902c:	f1b8 0f02 	cmp.w	r8, #2
    9030:	81a3      	strh	r3, [r4, #12]
    9032:	d05d      	beq.n	90f0 <setvbuf+0x138>
    9034:	ab01      	add	r3, sp, #4
    9036:	466a      	mov	r2, sp
    9038:	4621      	mov	r1, r4
    903a:	4630      	mov	r0, r6
    903c:	f001 f880 	bl	a140 <__swhatbuf_r>
    9040:	89a3      	ldrh	r3, [r4, #12]
    9042:	4318      	orrs	r0, r3
    9044:	81a0      	strh	r0, [r4, #12]
    9046:	bb2d      	cbnz	r5, 9094 <setvbuf+0xdc>
    9048:	9d00      	ldr	r5, [sp, #0]
    904a:	4628      	mov	r0, r5
    904c:	f001 f8dc 	bl	a208 <malloc>
    9050:	4607      	mov	r7, r0
    9052:	2800      	cmp	r0, #0
    9054:	d14e      	bne.n	90f4 <setvbuf+0x13c>
    9056:	f8dd 9000 	ldr.w	r9, [sp]
    905a:	45a9      	cmp	r9, r5
    905c:	d13c      	bne.n	90d8 <setvbuf+0x120>
    905e:	f04f 30ff 	mov.w	r0, #4294967295
    9062:	89a3      	ldrh	r3, [r4, #12]
    9064:	f043 0302 	orr.w	r3, r3, #2
    9068:	81a3      	strh	r3, [r4, #12]
    906a:	2300      	movs	r3, #0
    906c:	60a3      	str	r3, [r4, #8]
    906e:	f104 0347 	add.w	r3, r4, #71	; 0x47
    9072:	6023      	str	r3, [r4, #0]
    9074:	6123      	str	r3, [r4, #16]
    9076:	2301      	movs	r3, #1
    9078:	6163      	str	r3, [r4, #20]
    907a:	b003      	add	sp, #12
    907c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9080:	4b22      	ldr	r3, [pc, #136]	; (910c <setvbuf+0x154>)
    9082:	429c      	cmp	r4, r3
    9084:	d101      	bne.n	908a <setvbuf+0xd2>
    9086:	68b4      	ldr	r4, [r6, #8]
    9088:	e7a8      	b.n	8fdc <setvbuf+0x24>
    908a:	4b21      	ldr	r3, [pc, #132]	; (9110 <setvbuf+0x158>)
    908c:	429c      	cmp	r4, r3
    908e:	bf08      	it	eq
    9090:	68f4      	ldreq	r4, [r6, #12]
    9092:	e7a3      	b.n	8fdc <setvbuf+0x24>
    9094:	2f00      	cmp	r7, #0
    9096:	d0d8      	beq.n	904a <setvbuf+0x92>
    9098:	69b3      	ldr	r3, [r6, #24]
    909a:	b913      	cbnz	r3, 90a2 <setvbuf+0xea>
    909c:	4630      	mov	r0, r6
    909e:	f000 ffb7 	bl	a010 <__sinit>
    90a2:	f1b8 0f01 	cmp.w	r8, #1
    90a6:	bf08      	it	eq
    90a8:	89a3      	ldrheq	r3, [r4, #12]
    90aa:	6027      	str	r7, [r4, #0]
    90ac:	bf04      	itt	eq
    90ae:	f043 0301 	orreq.w	r3, r3, #1
    90b2:	81a3      	strheq	r3, [r4, #12]
    90b4:	89a3      	ldrh	r3, [r4, #12]
    90b6:	6127      	str	r7, [r4, #16]
    90b8:	f013 0008 	ands.w	r0, r3, #8
    90bc:	6165      	str	r5, [r4, #20]
    90be:	d01b      	beq.n	90f8 <setvbuf+0x140>
    90c0:	f013 0001 	ands.w	r0, r3, #1
    90c4:	bf18      	it	ne
    90c6:	426d      	negne	r5, r5
    90c8:	f04f 0300 	mov.w	r3, #0
    90cc:	bf1d      	ittte	ne
    90ce:	60a3      	strne	r3, [r4, #8]
    90d0:	61a5      	strne	r5, [r4, #24]
    90d2:	4618      	movne	r0, r3
    90d4:	60a5      	streq	r5, [r4, #8]
    90d6:	e7d0      	b.n	907a <setvbuf+0xc2>
    90d8:	4648      	mov	r0, r9
    90da:	f001 f895 	bl	a208 <malloc>
    90de:	4607      	mov	r7, r0
    90e0:	2800      	cmp	r0, #0
    90e2:	d0bc      	beq.n	905e <setvbuf+0xa6>
    90e4:	89a3      	ldrh	r3, [r4, #12]
    90e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    90ea:	81a3      	strh	r3, [r4, #12]
    90ec:	464d      	mov	r5, r9
    90ee:	e7d3      	b.n	9098 <setvbuf+0xe0>
    90f0:	2000      	movs	r0, #0
    90f2:	e7b6      	b.n	9062 <setvbuf+0xaa>
    90f4:	46a9      	mov	r9, r5
    90f6:	e7f5      	b.n	90e4 <setvbuf+0x12c>
    90f8:	60a0      	str	r0, [r4, #8]
    90fa:	e7be      	b.n	907a <setvbuf+0xc2>
    90fc:	f04f 30ff 	mov.w	r0, #4294967295
    9100:	e7bb      	b.n	907a <setvbuf+0xc2>
    9102:	bf00      	nop
    9104:	20000084 	.word	0x20000084
    9108:	0000c4a8 	.word	0x0000c4a8
    910c:	0000c4c8 	.word	0x0000c4c8
    9110:	0000c488 	.word	0x0000c488

00009114 <siprintf>:
    9114:	b40e      	push	{r1, r2, r3}
    9116:	b500      	push	{lr}
    9118:	b09c      	sub	sp, #112	; 0x70
    911a:	f44f 7102 	mov.w	r1, #520	; 0x208
    911e:	ab1d      	add	r3, sp, #116	; 0x74
    9120:	f8ad 1014 	strh.w	r1, [sp, #20]
    9124:	9002      	str	r0, [sp, #8]
    9126:	9006      	str	r0, [sp, #24]
    9128:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    912c:	480a      	ldr	r0, [pc, #40]	; (9158 <siprintf+0x44>)
    912e:	9104      	str	r1, [sp, #16]
    9130:	9107      	str	r1, [sp, #28]
    9132:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9136:	f853 2b04 	ldr.w	r2, [r3], #4
    913a:	f8ad 1016 	strh.w	r1, [sp, #22]
    913e:	6800      	ldr	r0, [r0, #0]
    9140:	9301      	str	r3, [sp, #4]
    9142:	a902      	add	r1, sp, #8
    9144:	f001 fcae 	bl	aaa4 <_svfiprintf_r>
    9148:	9b02      	ldr	r3, [sp, #8]
    914a:	2200      	movs	r2, #0
    914c:	701a      	strb	r2, [r3, #0]
    914e:	b01c      	add	sp, #112	; 0x70
    9150:	f85d eb04 	ldr.w	lr, [sp], #4
    9154:	b003      	add	sp, #12
    9156:	4770      	bx	lr
    9158:	20000084 	.word	0x20000084

0000915c <strlen>:
    915c:	4603      	mov	r3, r0
    915e:	f813 2b01 	ldrb.w	r2, [r3], #1
    9162:	2a00      	cmp	r2, #0
    9164:	d1fb      	bne.n	915e <strlen+0x2>
    9166:	1a18      	subs	r0, r3, r0
    9168:	3801      	subs	r0, #1
    916a:	4770      	bx	lr

0000916c <quorem>:
    916c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9170:	6903      	ldr	r3, [r0, #16]
    9172:	690c      	ldr	r4, [r1, #16]
    9174:	429c      	cmp	r4, r3
    9176:	4680      	mov	r8, r0
    9178:	f300 8082 	bgt.w	9280 <quorem+0x114>
    917c:	3c01      	subs	r4, #1
    917e:	f101 0714 	add.w	r7, r1, #20
    9182:	ea4f 0e84 	mov.w	lr, r4, lsl #2
    9186:	f100 0614 	add.w	r6, r0, #20
    918a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
    918e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    9192:	eb06 030e 	add.w	r3, r6, lr
    9196:	3501      	adds	r5, #1
    9198:	eb07 090e 	add.w	r9, r7, lr
    919c:	9301      	str	r3, [sp, #4]
    919e:	fbb0 f5f5 	udiv	r5, r0, r5
    91a2:	b395      	cbz	r5, 920a <quorem+0x9e>
    91a4:	f04f 0a00 	mov.w	sl, #0
    91a8:	4638      	mov	r0, r7
    91aa:	46b4      	mov	ip, r6
    91ac:	46d3      	mov	fp, sl
    91ae:	f850 2b04 	ldr.w	r2, [r0], #4
    91b2:	b293      	uxth	r3, r2
    91b4:	fb05 a303 	mla	r3, r5, r3, sl
    91b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
    91bc:	b29b      	uxth	r3, r3
    91be:	ebab 0303 	sub.w	r3, fp, r3
    91c2:	0c12      	lsrs	r2, r2, #16
    91c4:	f8bc b000 	ldrh.w	fp, [ip]
    91c8:	fb05 a202 	mla	r2, r5, r2, sl
    91cc:	fa13 f38b 	uxtah	r3, r3, fp
    91d0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
    91d4:	fa1f fb82 	uxth.w	fp, r2
    91d8:	f8dc 2000 	ldr.w	r2, [ip]
    91dc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
    91e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
    91e4:	b29b      	uxth	r3, r3
    91e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    91ea:	4581      	cmp	r9, r0
    91ec:	ea4f 4b22 	mov.w	fp, r2, asr #16
    91f0:	f84c 3b04 	str.w	r3, [ip], #4
    91f4:	d2db      	bcs.n	91ae <quorem+0x42>
    91f6:	f856 300e 	ldr.w	r3, [r6, lr]
    91fa:	b933      	cbnz	r3, 920a <quorem+0x9e>
    91fc:	9b01      	ldr	r3, [sp, #4]
    91fe:	3b04      	subs	r3, #4
    9200:	429e      	cmp	r6, r3
    9202:	461a      	mov	r2, r3
    9204:	d330      	bcc.n	9268 <quorem+0xfc>
    9206:	f8c8 4010 	str.w	r4, [r8, #16]
    920a:	4640      	mov	r0, r8
    920c:	f001 fa6d 	bl	a6ea <__mcmp>
    9210:	2800      	cmp	r0, #0
    9212:	db25      	blt.n	9260 <quorem+0xf4>
    9214:	3501      	adds	r5, #1
    9216:	4630      	mov	r0, r6
    9218:	f04f 0e00 	mov.w	lr, #0
    921c:	f857 2b04 	ldr.w	r2, [r7], #4
    9220:	f8d0 c000 	ldr.w	ip, [r0]
    9224:	b293      	uxth	r3, r2
    9226:	ebae 0303 	sub.w	r3, lr, r3
    922a:	0c12      	lsrs	r2, r2, #16
    922c:	fa13 f38c 	uxtah	r3, r3, ip
    9230:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
    9234:	eb02 4223 	add.w	r2, r2, r3, asr #16
    9238:	b29b      	uxth	r3, r3
    923a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    923e:	45b9      	cmp	r9, r7
    9240:	ea4f 4e22 	mov.w	lr, r2, asr #16
    9244:	f840 3b04 	str.w	r3, [r0], #4
    9248:	d2e8      	bcs.n	921c <quorem+0xb0>
    924a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    924e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
    9252:	b92a      	cbnz	r2, 9260 <quorem+0xf4>
    9254:	3b04      	subs	r3, #4
    9256:	429e      	cmp	r6, r3
    9258:	461a      	mov	r2, r3
    925a:	d30b      	bcc.n	9274 <quorem+0x108>
    925c:	f8c8 4010 	str.w	r4, [r8, #16]
    9260:	4628      	mov	r0, r5
    9262:	b003      	add	sp, #12
    9264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9268:	6812      	ldr	r2, [r2, #0]
    926a:	3b04      	subs	r3, #4
    926c:	2a00      	cmp	r2, #0
    926e:	d1ca      	bne.n	9206 <quorem+0x9a>
    9270:	3c01      	subs	r4, #1
    9272:	e7c5      	b.n	9200 <quorem+0x94>
    9274:	6812      	ldr	r2, [r2, #0]
    9276:	3b04      	subs	r3, #4
    9278:	2a00      	cmp	r2, #0
    927a:	d1ef      	bne.n	925c <quorem+0xf0>
    927c:	3c01      	subs	r4, #1
    927e:	e7ea      	b.n	9256 <quorem+0xea>
    9280:	2000      	movs	r0, #0
    9282:	e7ee      	b.n	9262 <quorem+0xf6>
    9284:	0000      	movs	r0, r0
	...

00009288 <_dtoa_r>:
    9288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    928c:	6a46      	ldr	r6, [r0, #36]	; 0x24
    928e:	b095      	sub	sp, #84	; 0x54
    9290:	4604      	mov	r4, r0
    9292:	9d21      	ldr	r5, [sp, #132]	; 0x84
    9294:	e9cd 2302 	strd	r2, r3, [sp, #8]
    9298:	b93e      	cbnz	r6, 92aa <_dtoa_r+0x22>
    929a:	2010      	movs	r0, #16
    929c:	f000 ffb4 	bl	a208 <malloc>
    92a0:	6260      	str	r0, [r4, #36]	; 0x24
    92a2:	6046      	str	r6, [r0, #4]
    92a4:	6086      	str	r6, [r0, #8]
    92a6:	6006      	str	r6, [r0, #0]
    92a8:	60c6      	str	r6, [r0, #12]
    92aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    92ac:	6819      	ldr	r1, [r3, #0]
    92ae:	b151      	cbz	r1, 92c6 <_dtoa_r+0x3e>
    92b0:	685a      	ldr	r2, [r3, #4]
    92b2:	604a      	str	r2, [r1, #4]
    92b4:	2301      	movs	r3, #1
    92b6:	4093      	lsls	r3, r2
    92b8:	608b      	str	r3, [r1, #8]
    92ba:	4620      	mov	r0, r4
    92bc:	f001 f83f 	bl	a33e <_Bfree>
    92c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    92c2:	2200      	movs	r2, #0
    92c4:	601a      	str	r2, [r3, #0]
    92c6:	9b03      	ldr	r3, [sp, #12]
    92c8:	2b00      	cmp	r3, #0
    92ca:	bfbf      	itttt	lt
    92cc:	2301      	movlt	r3, #1
    92ce:	602b      	strlt	r3, [r5, #0]
    92d0:	9b03      	ldrlt	r3, [sp, #12]
    92d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    92d6:	bfb2      	itee	lt
    92d8:	9303      	strlt	r3, [sp, #12]
    92da:	2300      	movge	r3, #0
    92dc:	602b      	strge	r3, [r5, #0]
    92de:	f8dd 900c 	ldr.w	r9, [sp, #12]
    92e2:	4ba9      	ldr	r3, [pc, #676]	; (9588 <_dtoa_r+0x300>)
    92e4:	ea33 0309 	bics.w	r3, r3, r9
    92e8:	d11b      	bne.n	9322 <_dtoa_r+0x9a>
    92ea:	9a20      	ldr	r2, [sp, #128]	; 0x80
    92ec:	f242 730f 	movw	r3, #9999	; 0x270f
    92f0:	6013      	str	r3, [r2, #0]
    92f2:	9b02      	ldr	r3, [sp, #8]
    92f4:	b923      	cbnz	r3, 9300 <_dtoa_r+0x78>
    92f6:	f3c9 0013 	ubfx	r0, r9, #0, #20
    92fa:	2800      	cmp	r0, #0
    92fc:	f000 8581 	beq.w	9e02 <_dtoa_r+0xb7a>
    9300:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9302:	b953      	cbnz	r3, 931a <_dtoa_r+0x92>
    9304:	4ba1      	ldr	r3, [pc, #644]	; (958c <_dtoa_r+0x304>)
    9306:	e021      	b.n	934c <_dtoa_r+0xc4>
    9308:	4ba1      	ldr	r3, [pc, #644]	; (9590 <_dtoa_r+0x308>)
    930a:	9306      	str	r3, [sp, #24]
    930c:	3308      	adds	r3, #8
    930e:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9310:	6013      	str	r3, [r2, #0]
    9312:	9806      	ldr	r0, [sp, #24]
    9314:	b015      	add	sp, #84	; 0x54
    9316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    931a:	4b9c      	ldr	r3, [pc, #624]	; (958c <_dtoa_r+0x304>)
    931c:	9306      	str	r3, [sp, #24]
    931e:	3303      	adds	r3, #3
    9320:	e7f5      	b.n	930e <_dtoa_r+0x86>
    9322:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    9326:	2200      	movs	r2, #0
    9328:	2300      	movs	r3, #0
    932a:	4630      	mov	r0, r6
    932c:	4639      	mov	r1, r7
    932e:	f002 fbf1 	bl	bb14 <__aeabi_dcmpeq>
    9332:	4680      	mov	r8, r0
    9334:	b160      	cbz	r0, 9350 <_dtoa_r+0xc8>
    9336:	9a20      	ldr	r2, [sp, #128]	; 0x80
    9338:	2301      	movs	r3, #1
    933a:	6013      	str	r3, [r2, #0]
    933c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    933e:	2b00      	cmp	r3, #0
    9340:	f000 855c 	beq.w	9dfc <_dtoa_r+0xb74>
    9344:	4b93      	ldr	r3, [pc, #588]	; (9594 <_dtoa_r+0x30c>)
    9346:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9348:	6013      	str	r3, [r2, #0]
    934a:	3b01      	subs	r3, #1
    934c:	9306      	str	r3, [sp, #24]
    934e:	e7e0      	b.n	9312 <_dtoa_r+0x8a>
    9350:	ab12      	add	r3, sp, #72	; 0x48
    9352:	9301      	str	r3, [sp, #4]
    9354:	ab13      	add	r3, sp, #76	; 0x4c
    9356:	9300      	str	r3, [sp, #0]
    9358:	4632      	mov	r2, r6
    935a:	463b      	mov	r3, r7
    935c:	4620      	mov	r0, r4
    935e:	f001 fa3c 	bl	a7da <__d2b>
    9362:	f3c9 550a 	ubfx	r5, r9, #20, #11
    9366:	4682      	mov	sl, r0
    9368:	2d00      	cmp	r5, #0
    936a:	d07c      	beq.n	9466 <_dtoa_r+0x1de>
    936c:	f3c7 0313 	ubfx	r3, r7, #0, #20
    9370:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    9374:	4630      	mov	r0, r6
    9376:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    937a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
    937e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    9382:	2200      	movs	r2, #0
    9384:	4b84      	ldr	r3, [pc, #528]	; (9598 <_dtoa_r+0x310>)
    9386:	f001 ffa9 	bl	b2dc <__aeabi_dsub>
    938a:	a379      	add	r3, pc, #484	; (adr r3, 9570 <_dtoa_r+0x2e8>)
    938c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9390:	f002 f958 	bl	b644 <__aeabi_dmul>
    9394:	a378      	add	r3, pc, #480	; (adr r3, 9578 <_dtoa_r+0x2f0>)
    9396:	e9d3 2300 	ldrd	r2, r3, [r3]
    939a:	f001 ffa1 	bl	b2e0 <__adddf3>
    939e:	4606      	mov	r6, r0
    93a0:	4628      	mov	r0, r5
    93a2:	460f      	mov	r7, r1
    93a4:	f002 f8e8 	bl	b578 <__aeabi_i2d>
    93a8:	a375      	add	r3, pc, #468	; (adr r3, 9580 <_dtoa_r+0x2f8>)
    93aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    93ae:	f002 f949 	bl	b644 <__aeabi_dmul>
    93b2:	4602      	mov	r2, r0
    93b4:	460b      	mov	r3, r1
    93b6:	4630      	mov	r0, r6
    93b8:	4639      	mov	r1, r7
    93ba:	f001 ff91 	bl	b2e0 <__adddf3>
    93be:	4606      	mov	r6, r0
    93c0:	460f      	mov	r7, r1
    93c2:	f002 fbef 	bl	bba4 <__aeabi_d2iz>
    93c6:	2200      	movs	r2, #0
    93c8:	4683      	mov	fp, r0
    93ca:	2300      	movs	r3, #0
    93cc:	4630      	mov	r0, r6
    93ce:	4639      	mov	r1, r7
    93d0:	f002 fbaa 	bl	bb28 <__aeabi_dcmplt>
    93d4:	b158      	cbz	r0, 93ee <_dtoa_r+0x166>
    93d6:	4658      	mov	r0, fp
    93d8:	f002 f8ce 	bl	b578 <__aeabi_i2d>
    93dc:	4602      	mov	r2, r0
    93de:	460b      	mov	r3, r1
    93e0:	4630      	mov	r0, r6
    93e2:	4639      	mov	r1, r7
    93e4:	f002 fb96 	bl	bb14 <__aeabi_dcmpeq>
    93e8:	b908      	cbnz	r0, 93ee <_dtoa_r+0x166>
    93ea:	f10b 3bff 	add.w	fp, fp, #4294967295
    93ee:	f1bb 0f16 	cmp.w	fp, #22
    93f2:	d857      	bhi.n	94a4 <_dtoa_r+0x21c>
    93f4:	4969      	ldr	r1, [pc, #420]	; (959c <_dtoa_r+0x314>)
    93f6:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
    93fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    93fe:	e9d1 0100 	ldrd	r0, r1, [r1]
    9402:	f002 fbaf 	bl	bb64 <__aeabi_dcmpgt>
    9406:	2800      	cmp	r0, #0
    9408:	d04e      	beq.n	94a8 <_dtoa_r+0x220>
    940a:	f10b 3bff 	add.w	fp, fp, #4294967295
    940e:	2300      	movs	r3, #0
    9410:	930d      	str	r3, [sp, #52]	; 0x34
    9412:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9414:	1b5d      	subs	r5, r3, r5
    9416:	1e6b      	subs	r3, r5, #1
    9418:	9307      	str	r3, [sp, #28]
    941a:	bf43      	ittte	mi
    941c:	2300      	movmi	r3, #0
    941e:	f1c5 0801 	rsbmi	r8, r5, #1
    9422:	9307      	strmi	r3, [sp, #28]
    9424:	f04f 0800 	movpl.w	r8, #0
    9428:	f1bb 0f00 	cmp.w	fp, #0
    942c:	db3e      	blt.n	94ac <_dtoa_r+0x224>
    942e:	9b07      	ldr	r3, [sp, #28]
    9430:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    9434:	445b      	add	r3, fp
    9436:	9307      	str	r3, [sp, #28]
    9438:	2300      	movs	r3, #0
    943a:	9308      	str	r3, [sp, #32]
    943c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    943e:	2b09      	cmp	r3, #9
    9440:	f200 80b0 	bhi.w	95a4 <_dtoa_r+0x31c>
    9444:	2b05      	cmp	r3, #5
    9446:	bfc4      	itt	gt
    9448:	3b04      	subgt	r3, #4
    944a:	931e      	strgt	r3, [sp, #120]	; 0x78
    944c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    944e:	f1a3 0302 	sub.w	r3, r3, #2
    9452:	bfcc      	ite	gt
    9454:	2600      	movgt	r6, #0
    9456:	2601      	movle	r6, #1
    9458:	2b03      	cmp	r3, #3
    945a:	f200 80af 	bhi.w	95bc <_dtoa_r+0x334>
    945e:	e8df f003 	tbb	[pc, r3]
    9462:	8583      	.short	0x8583
    9464:	772d      	.short	0x772d
    9466:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9468:	9d12      	ldr	r5, [sp, #72]	; 0x48
    946a:	441d      	add	r5, r3
    946c:	f205 4332 	addw	r3, r5, #1074	; 0x432
    9470:	2b20      	cmp	r3, #32
    9472:	dd11      	ble.n	9498 <_dtoa_r+0x210>
    9474:	9a02      	ldr	r2, [sp, #8]
    9476:	f205 4012 	addw	r0, r5, #1042	; 0x412
    947a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    947e:	fa22 f000 	lsr.w	r0, r2, r0
    9482:	fa09 f303 	lsl.w	r3, r9, r3
    9486:	4318      	orrs	r0, r3
    9488:	f002 f866 	bl	b558 <__aeabi_ui2d>
    948c:	2301      	movs	r3, #1
    948e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    9492:	3d01      	subs	r5, #1
    9494:	9310      	str	r3, [sp, #64]	; 0x40
    9496:	e774      	b.n	9382 <_dtoa_r+0xfa>
    9498:	f1c3 0020 	rsb	r0, r3, #32
    949c:	9b02      	ldr	r3, [sp, #8]
    949e:	fa03 f000 	lsl.w	r0, r3, r0
    94a2:	e7f1      	b.n	9488 <_dtoa_r+0x200>
    94a4:	2301      	movs	r3, #1
    94a6:	e7b3      	b.n	9410 <_dtoa_r+0x188>
    94a8:	900d      	str	r0, [sp, #52]	; 0x34
    94aa:	e7b2      	b.n	9412 <_dtoa_r+0x18a>
    94ac:	f1cb 0300 	rsb	r3, fp, #0
    94b0:	9308      	str	r3, [sp, #32]
    94b2:	2300      	movs	r3, #0
    94b4:	eba8 080b 	sub.w	r8, r8, fp
    94b8:	930c      	str	r3, [sp, #48]	; 0x30
    94ba:	e7bf      	b.n	943c <_dtoa_r+0x1b4>
    94bc:	2301      	movs	r3, #1
    94be:	9309      	str	r3, [sp, #36]	; 0x24
    94c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    94c2:	2b00      	cmp	r3, #0
    94c4:	dd7d      	ble.n	95c2 <_dtoa_r+0x33a>
    94c6:	9304      	str	r3, [sp, #16]
    94c8:	4699      	mov	r9, r3
    94ca:	6a65      	ldr	r5, [r4, #36]	; 0x24
    94cc:	2200      	movs	r2, #0
    94ce:	606a      	str	r2, [r5, #4]
    94d0:	2104      	movs	r1, #4
    94d2:	f101 0214 	add.w	r2, r1, #20
    94d6:	429a      	cmp	r2, r3
    94d8:	d978      	bls.n	95cc <_dtoa_r+0x344>
    94da:	6869      	ldr	r1, [r5, #4]
    94dc:	4620      	mov	r0, r4
    94de:	f000 fefa 	bl	a2d6 <_Balloc>
    94e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    94e4:	6028      	str	r0, [r5, #0]
    94e6:	681b      	ldr	r3, [r3, #0]
    94e8:	9306      	str	r3, [sp, #24]
    94ea:	f1b9 0f0e 	cmp.w	r9, #14
    94ee:	f200 80ee 	bhi.w	96ce <_dtoa_r+0x446>
    94f2:	2e00      	cmp	r6, #0
    94f4:	f000 80eb 	beq.w	96ce <_dtoa_r+0x446>
    94f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    94fc:	f1bb 0f00 	cmp.w	fp, #0
    9500:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    9504:	dd77      	ble.n	95f6 <_dtoa_r+0x36e>
    9506:	4a25      	ldr	r2, [pc, #148]	; (959c <_dtoa_r+0x314>)
    9508:	f00b 030f 	and.w	r3, fp, #15
    950c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    9510:	e9d3 2300 	ldrd	r2, r3, [r3]
    9514:	ea4f 162b 	mov.w	r6, fp, asr #4
    9518:	06f0      	lsls	r0, r6, #27
    951a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    951e:	d55a      	bpl.n	95d6 <_dtoa_r+0x34e>
    9520:	4b1f      	ldr	r3, [pc, #124]	; (95a0 <_dtoa_r+0x318>)
    9522:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    9526:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    952a:	f002 f9b5 	bl	b898 <__aeabi_ddiv>
    952e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    9532:	f006 060f 	and.w	r6, r6, #15
    9536:	2503      	movs	r5, #3
    9538:	4f19      	ldr	r7, [pc, #100]	; (95a0 <_dtoa_r+0x318>)
    953a:	2e00      	cmp	r6, #0
    953c:	d14d      	bne.n	95da <_dtoa_r+0x352>
    953e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    9542:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9546:	f002 f9a7 	bl	b898 <__aeabi_ddiv>
    954a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    954e:	e06c      	b.n	962a <_dtoa_r+0x3a2>
    9550:	2301      	movs	r3, #1
    9552:	9309      	str	r3, [sp, #36]	; 0x24
    9554:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9556:	445b      	add	r3, fp
    9558:	f103 0901 	add.w	r9, r3, #1
    955c:	9304      	str	r3, [sp, #16]
    955e:	464b      	mov	r3, r9
    9560:	2b01      	cmp	r3, #1
    9562:	bfb8      	it	lt
    9564:	2301      	movlt	r3, #1
    9566:	e7b0      	b.n	94ca <_dtoa_r+0x242>
    9568:	2300      	movs	r3, #0
    956a:	e7a8      	b.n	94be <_dtoa_r+0x236>
    956c:	2300      	movs	r3, #0
    956e:	e7f0      	b.n	9552 <_dtoa_r+0x2ca>
    9570:	636f4361 	.word	0x636f4361
    9574:	3fd287a7 	.word	0x3fd287a7
    9578:	8b60c8b3 	.word	0x8b60c8b3
    957c:	3fc68a28 	.word	0x3fc68a28
    9580:	509f79fb 	.word	0x509f79fb
    9584:	3fd34413 	.word	0x3fd34413
    9588:	7ff00000 	.word	0x7ff00000
    958c:	0000c481 	.word	0x0000c481
    9590:	0000c478 	.word	0x0000c478
    9594:	0000c455 	.word	0x0000c455
    9598:	3ff80000 	.word	0x3ff80000
    959c:	0000c510 	.word	0x0000c510
    95a0:	0000c4e8 	.word	0x0000c4e8
    95a4:	2601      	movs	r6, #1
    95a6:	2300      	movs	r3, #0
    95a8:	931e      	str	r3, [sp, #120]	; 0x78
    95aa:	9609      	str	r6, [sp, #36]	; 0x24
    95ac:	f04f 33ff 	mov.w	r3, #4294967295
    95b0:	9304      	str	r3, [sp, #16]
    95b2:	4699      	mov	r9, r3
    95b4:	2200      	movs	r2, #0
    95b6:	2312      	movs	r3, #18
    95b8:	921f      	str	r2, [sp, #124]	; 0x7c
    95ba:	e786      	b.n	94ca <_dtoa_r+0x242>
    95bc:	2301      	movs	r3, #1
    95be:	9309      	str	r3, [sp, #36]	; 0x24
    95c0:	e7f4      	b.n	95ac <_dtoa_r+0x324>
    95c2:	2301      	movs	r3, #1
    95c4:	9304      	str	r3, [sp, #16]
    95c6:	4699      	mov	r9, r3
    95c8:	461a      	mov	r2, r3
    95ca:	e7f5      	b.n	95b8 <_dtoa_r+0x330>
    95cc:	686a      	ldr	r2, [r5, #4]
    95ce:	3201      	adds	r2, #1
    95d0:	606a      	str	r2, [r5, #4]
    95d2:	0049      	lsls	r1, r1, #1
    95d4:	e77d      	b.n	94d2 <_dtoa_r+0x24a>
    95d6:	2502      	movs	r5, #2
    95d8:	e7ae      	b.n	9538 <_dtoa_r+0x2b0>
    95da:	07f1      	lsls	r1, r6, #31
    95dc:	d508      	bpl.n	95f0 <_dtoa_r+0x368>
    95de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    95e2:	e9d7 2300 	ldrd	r2, r3, [r7]
    95e6:	f002 f82d 	bl	b644 <__aeabi_dmul>
    95ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    95ee:	3501      	adds	r5, #1
    95f0:	1076      	asrs	r6, r6, #1
    95f2:	3708      	adds	r7, #8
    95f4:	e7a1      	b.n	953a <_dtoa_r+0x2b2>
    95f6:	f000 80a5 	beq.w	9744 <_dtoa_r+0x4bc>
    95fa:	f1cb 0600 	rsb	r6, fp, #0
    95fe:	4ba3      	ldr	r3, [pc, #652]	; (988c <_dtoa_r+0x604>)
    9600:	4fa3      	ldr	r7, [pc, #652]	; (9890 <_dtoa_r+0x608>)
    9602:	f006 020f 	and.w	r2, r6, #15
    9606:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    960a:	e9d3 2300 	ldrd	r2, r3, [r3]
    960e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    9612:	f002 f817 	bl	b644 <__aeabi_dmul>
    9616:	e9cd 0102 	strd	r0, r1, [sp, #8]
    961a:	1136      	asrs	r6, r6, #4
    961c:	2300      	movs	r3, #0
    961e:	2502      	movs	r5, #2
    9620:	2e00      	cmp	r6, #0
    9622:	f040 8084 	bne.w	972e <_dtoa_r+0x4a6>
    9626:	2b00      	cmp	r3, #0
    9628:	d18f      	bne.n	954a <_dtoa_r+0x2c2>
    962a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    962c:	2b00      	cmp	r3, #0
    962e:	f000 808b 	beq.w	9748 <_dtoa_r+0x4c0>
    9632:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    9636:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    963a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    963e:	2200      	movs	r2, #0
    9640:	4b94      	ldr	r3, [pc, #592]	; (9894 <_dtoa_r+0x60c>)
    9642:	f002 fa71 	bl	bb28 <__aeabi_dcmplt>
    9646:	2800      	cmp	r0, #0
    9648:	d07e      	beq.n	9748 <_dtoa_r+0x4c0>
    964a:	f1b9 0f00 	cmp.w	r9, #0
    964e:	d07b      	beq.n	9748 <_dtoa_r+0x4c0>
    9650:	9b04      	ldr	r3, [sp, #16]
    9652:	2b00      	cmp	r3, #0
    9654:	dd37      	ble.n	96c6 <_dtoa_r+0x43e>
    9656:	2200      	movs	r2, #0
    9658:	4b8f      	ldr	r3, [pc, #572]	; (9898 <_dtoa_r+0x610>)
    965a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    965e:	f001 fff1 	bl	b644 <__aeabi_dmul>
    9662:	e9cd 0102 	strd	r0, r1, [sp, #8]
    9666:	9e04      	ldr	r6, [sp, #16]
    9668:	f10b 37ff 	add.w	r7, fp, #4294967295
    966c:	3501      	adds	r5, #1
    966e:	4628      	mov	r0, r5
    9670:	f001 ff82 	bl	b578 <__aeabi_i2d>
    9674:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    9678:	f001 ffe4 	bl	b644 <__aeabi_dmul>
    967c:	4b87      	ldr	r3, [pc, #540]	; (989c <_dtoa_r+0x614>)
    967e:	2200      	movs	r2, #0
    9680:	f001 fe2e 	bl	b2e0 <__adddf3>
    9684:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    9688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    968a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
    968e:	950b      	str	r5, [sp, #44]	; 0x2c
    9690:	2e00      	cmp	r6, #0
    9692:	d15c      	bne.n	974e <_dtoa_r+0x4c6>
    9694:	2200      	movs	r2, #0
    9696:	4b82      	ldr	r3, [pc, #520]	; (98a0 <_dtoa_r+0x618>)
    9698:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    969c:	f001 fe1e 	bl	b2dc <__aeabi_dsub>
    96a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    96a2:	462b      	mov	r3, r5
    96a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    96a8:	f002 fa5c 	bl	bb64 <__aeabi_dcmpgt>
    96ac:	2800      	cmp	r0, #0
    96ae:	f040 82f7 	bne.w	9ca0 <_dtoa_r+0xa18>
    96b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    96b4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    96b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    96bc:	f002 fa34 	bl	bb28 <__aeabi_dcmplt>
    96c0:	2800      	cmp	r0, #0
    96c2:	f040 82eb 	bne.w	9c9c <_dtoa_r+0xa14>
    96c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    96ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
    96ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    96d0:	2b00      	cmp	r3, #0
    96d2:	f2c0 8151 	blt.w	9978 <_dtoa_r+0x6f0>
    96d6:	f1bb 0f0e 	cmp.w	fp, #14
    96da:	f300 814d 	bgt.w	9978 <_dtoa_r+0x6f0>
    96de:	4b6b      	ldr	r3, [pc, #428]	; (988c <_dtoa_r+0x604>)
    96e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    96e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    96e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    96ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    96ee:	2b00      	cmp	r3, #0
    96f0:	f280 80da 	bge.w	98a8 <_dtoa_r+0x620>
    96f4:	f1b9 0f00 	cmp.w	r9, #0
    96f8:	f300 80d6 	bgt.w	98a8 <_dtoa_r+0x620>
    96fc:	f040 82cd 	bne.w	9c9a <_dtoa_r+0xa12>
    9700:	2200      	movs	r2, #0
    9702:	4b67      	ldr	r3, [pc, #412]	; (98a0 <_dtoa_r+0x618>)
    9704:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9708:	f001 ff9c 	bl	b644 <__aeabi_dmul>
    970c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    9710:	f002 fa1e 	bl	bb50 <__aeabi_dcmpge>
    9714:	464e      	mov	r6, r9
    9716:	464f      	mov	r7, r9
    9718:	2800      	cmp	r0, #0
    971a:	f040 82a4 	bne.w	9c66 <_dtoa_r+0x9de>
    971e:	9b06      	ldr	r3, [sp, #24]
    9720:	9a06      	ldr	r2, [sp, #24]
    9722:	1c5d      	adds	r5, r3, #1
    9724:	2331      	movs	r3, #49	; 0x31
    9726:	7013      	strb	r3, [r2, #0]
    9728:	f10b 0b01 	add.w	fp, fp, #1
    972c:	e29f      	b.n	9c6e <_dtoa_r+0x9e6>
    972e:	07f2      	lsls	r2, r6, #31
    9730:	d505      	bpl.n	973e <_dtoa_r+0x4b6>
    9732:	e9d7 2300 	ldrd	r2, r3, [r7]
    9736:	f001 ff85 	bl	b644 <__aeabi_dmul>
    973a:	3501      	adds	r5, #1
    973c:	2301      	movs	r3, #1
    973e:	1076      	asrs	r6, r6, #1
    9740:	3708      	adds	r7, #8
    9742:	e76d      	b.n	9620 <_dtoa_r+0x398>
    9744:	2502      	movs	r5, #2
    9746:	e770      	b.n	962a <_dtoa_r+0x3a2>
    9748:	465f      	mov	r7, fp
    974a:	464e      	mov	r6, r9
    974c:	e78f      	b.n	966e <_dtoa_r+0x3e6>
    974e:	9a06      	ldr	r2, [sp, #24]
    9750:	4b4e      	ldr	r3, [pc, #312]	; (988c <_dtoa_r+0x604>)
    9752:	4432      	add	r2, r6
    9754:	9211      	str	r2, [sp, #68]	; 0x44
    9756:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9758:	1e71      	subs	r1, r6, #1
    975a:	2a00      	cmp	r2, #0
    975c:	d048      	beq.n	97f0 <_dtoa_r+0x568>
    975e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    9762:	e9d3 2300 	ldrd	r2, r3, [r3]
    9766:	2000      	movs	r0, #0
    9768:	494e      	ldr	r1, [pc, #312]	; (98a4 <_dtoa_r+0x61c>)
    976a:	f002 f895 	bl	b898 <__aeabi_ddiv>
    976e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    9772:	f001 fdb3 	bl	b2dc <__aeabi_dsub>
    9776:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    977a:	9d06      	ldr	r5, [sp, #24]
    977c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9780:	f002 fa10 	bl	bba4 <__aeabi_d2iz>
    9784:	4606      	mov	r6, r0
    9786:	f001 fef7 	bl	b578 <__aeabi_i2d>
    978a:	4602      	mov	r2, r0
    978c:	460b      	mov	r3, r1
    978e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9792:	f001 fda3 	bl	b2dc <__aeabi_dsub>
    9796:	3630      	adds	r6, #48	; 0x30
    9798:	f805 6b01 	strb.w	r6, [r5], #1
    979c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    97a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
    97a4:	f002 f9c0 	bl	bb28 <__aeabi_dcmplt>
    97a8:	2800      	cmp	r0, #0
    97aa:	d165      	bne.n	9878 <_dtoa_r+0x5f0>
    97ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    97b0:	2000      	movs	r0, #0
    97b2:	4938      	ldr	r1, [pc, #224]	; (9894 <_dtoa_r+0x60c>)
    97b4:	f001 fd92 	bl	b2dc <__aeabi_dsub>
    97b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    97bc:	f002 f9b4 	bl	bb28 <__aeabi_dcmplt>
    97c0:	2800      	cmp	r0, #0
    97c2:	f040 80b9 	bne.w	9938 <_dtoa_r+0x6b0>
    97c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    97c8:	429d      	cmp	r5, r3
    97ca:	f43f af7c 	beq.w	96c6 <_dtoa_r+0x43e>
    97ce:	2200      	movs	r2, #0
    97d0:	4b31      	ldr	r3, [pc, #196]	; (9898 <_dtoa_r+0x610>)
    97d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    97d6:	f001 ff35 	bl	b644 <__aeabi_dmul>
    97da:	2200      	movs	r2, #0
    97dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    97e0:	4b2d      	ldr	r3, [pc, #180]	; (9898 <_dtoa_r+0x610>)
    97e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    97e6:	f001 ff2d 	bl	b644 <__aeabi_dmul>
    97ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
    97ee:	e7c5      	b.n	977c <_dtoa_r+0x4f4>
    97f0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    97f4:	e9d1 0100 	ldrd	r0, r1, [r1]
    97f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    97fc:	f001 ff22 	bl	b644 <__aeabi_dmul>
    9800:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    9804:	9d06      	ldr	r5, [sp, #24]
    9806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    980a:	f002 f9cb 	bl	bba4 <__aeabi_d2iz>
    980e:	4606      	mov	r6, r0
    9810:	f001 feb2 	bl	b578 <__aeabi_i2d>
    9814:	3630      	adds	r6, #48	; 0x30
    9816:	4602      	mov	r2, r0
    9818:	460b      	mov	r3, r1
    981a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    981e:	f001 fd5d 	bl	b2dc <__aeabi_dsub>
    9822:	f805 6b01 	strb.w	r6, [r5], #1
    9826:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9828:	42ab      	cmp	r3, r5
    982a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    982e:	f04f 0200 	mov.w	r2, #0
    9832:	d125      	bne.n	9880 <_dtoa_r+0x5f8>
    9834:	4b1b      	ldr	r3, [pc, #108]	; (98a4 <_dtoa_r+0x61c>)
    9836:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    983a:	f001 fd51 	bl	b2e0 <__adddf3>
    983e:	4602      	mov	r2, r0
    9840:	460b      	mov	r3, r1
    9842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9846:	f002 f98d 	bl	bb64 <__aeabi_dcmpgt>
    984a:	2800      	cmp	r0, #0
    984c:	d174      	bne.n	9938 <_dtoa_r+0x6b0>
    984e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    9852:	2000      	movs	r0, #0
    9854:	4913      	ldr	r1, [pc, #76]	; (98a4 <_dtoa_r+0x61c>)
    9856:	f001 fd41 	bl	b2dc <__aeabi_dsub>
    985a:	4602      	mov	r2, r0
    985c:	460b      	mov	r3, r1
    985e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9862:	f002 f961 	bl	bb28 <__aeabi_dcmplt>
    9866:	2800      	cmp	r0, #0
    9868:	f43f af2d 	beq.w	96c6 <_dtoa_r+0x43e>
    986c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    9870:	2b30      	cmp	r3, #48	; 0x30
    9872:	f105 32ff 	add.w	r2, r5, #4294967295
    9876:	d001      	beq.n	987c <_dtoa_r+0x5f4>
    9878:	46bb      	mov	fp, r7
    987a:	e04c      	b.n	9916 <_dtoa_r+0x68e>
    987c:	4615      	mov	r5, r2
    987e:	e7f5      	b.n	986c <_dtoa_r+0x5e4>
    9880:	4b05      	ldr	r3, [pc, #20]	; (9898 <_dtoa_r+0x610>)
    9882:	f001 fedf 	bl	b644 <__aeabi_dmul>
    9886:	e9cd 0102 	strd	r0, r1, [sp, #8]
    988a:	e7bc      	b.n	9806 <_dtoa_r+0x57e>
    988c:	0000c510 	.word	0x0000c510
    9890:	0000c4e8 	.word	0x0000c4e8
    9894:	3ff00000 	.word	0x3ff00000
    9898:	40240000 	.word	0x40240000
    989c:	401c0000 	.word	0x401c0000
    98a0:	40140000 	.word	0x40140000
    98a4:	3fe00000 	.word	0x3fe00000
    98a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    98ac:	9d06      	ldr	r5, [sp, #24]
    98ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    98b2:	4630      	mov	r0, r6
    98b4:	4639      	mov	r1, r7
    98b6:	f001 ffef 	bl	b898 <__aeabi_ddiv>
    98ba:	f002 f973 	bl	bba4 <__aeabi_d2iz>
    98be:	4680      	mov	r8, r0
    98c0:	f001 fe5a 	bl	b578 <__aeabi_i2d>
    98c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    98c8:	f001 febc 	bl	b644 <__aeabi_dmul>
    98cc:	4602      	mov	r2, r0
    98ce:	460b      	mov	r3, r1
    98d0:	4630      	mov	r0, r6
    98d2:	4639      	mov	r1, r7
    98d4:	f108 0630 	add.w	r6, r8, #48	; 0x30
    98d8:	f001 fd00 	bl	b2dc <__aeabi_dsub>
    98dc:	f805 6b01 	strb.w	r6, [r5], #1
    98e0:	9e06      	ldr	r6, [sp, #24]
    98e2:	1bae      	subs	r6, r5, r6
    98e4:	45b1      	cmp	r9, r6
    98e6:	4602      	mov	r2, r0
    98e8:	460b      	mov	r3, r1
    98ea:	d138      	bne.n	995e <_dtoa_r+0x6d6>
    98ec:	f001 fcf8 	bl	b2e0 <__adddf3>
    98f0:	4606      	mov	r6, r0
    98f2:	460f      	mov	r7, r1
    98f4:	4602      	mov	r2, r0
    98f6:	460b      	mov	r3, r1
    98f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    98fc:	f002 f914 	bl	bb28 <__aeabi_dcmplt>
    9900:	b9c8      	cbnz	r0, 9936 <_dtoa_r+0x6ae>
    9902:	4632      	mov	r2, r6
    9904:	463b      	mov	r3, r7
    9906:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    990a:	f002 f903 	bl	bb14 <__aeabi_dcmpeq>
    990e:	b110      	cbz	r0, 9916 <_dtoa_r+0x68e>
    9910:	f018 0f01 	tst.w	r8, #1
    9914:	d10f      	bne.n	9936 <_dtoa_r+0x6ae>
    9916:	4651      	mov	r1, sl
    9918:	4620      	mov	r0, r4
    991a:	f000 fd10 	bl	a33e <_Bfree>
    991e:	2300      	movs	r3, #0
    9920:	9a20      	ldr	r2, [sp, #128]	; 0x80
    9922:	702b      	strb	r3, [r5, #0]
    9924:	f10b 0301 	add.w	r3, fp, #1
    9928:	6013      	str	r3, [r2, #0]
    992a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    992c:	2b00      	cmp	r3, #0
    992e:	f43f acf0 	beq.w	9312 <_dtoa_r+0x8a>
    9932:	601d      	str	r5, [r3, #0]
    9934:	e4ed      	b.n	9312 <_dtoa_r+0x8a>
    9936:	465f      	mov	r7, fp
    9938:	f815 2c01 	ldrb.w	r2, [r5, #-1]
    993c:	2a39      	cmp	r2, #57	; 0x39
    993e:	f105 33ff 	add.w	r3, r5, #4294967295
    9942:	d106      	bne.n	9952 <_dtoa_r+0x6ca>
    9944:	9a06      	ldr	r2, [sp, #24]
    9946:	429a      	cmp	r2, r3
    9948:	d107      	bne.n	995a <_dtoa_r+0x6d2>
    994a:	2330      	movs	r3, #48	; 0x30
    994c:	7013      	strb	r3, [r2, #0]
    994e:	3701      	adds	r7, #1
    9950:	4613      	mov	r3, r2
    9952:	781a      	ldrb	r2, [r3, #0]
    9954:	3201      	adds	r2, #1
    9956:	701a      	strb	r2, [r3, #0]
    9958:	e78e      	b.n	9878 <_dtoa_r+0x5f0>
    995a:	461d      	mov	r5, r3
    995c:	e7ec      	b.n	9938 <_dtoa_r+0x6b0>
    995e:	2200      	movs	r2, #0
    9960:	4bb4      	ldr	r3, [pc, #720]	; (9c34 <_dtoa_r+0x9ac>)
    9962:	f001 fe6f 	bl	b644 <__aeabi_dmul>
    9966:	2200      	movs	r2, #0
    9968:	2300      	movs	r3, #0
    996a:	4606      	mov	r6, r0
    996c:	460f      	mov	r7, r1
    996e:	f002 f8d1 	bl	bb14 <__aeabi_dcmpeq>
    9972:	2800      	cmp	r0, #0
    9974:	d09b      	beq.n	98ae <_dtoa_r+0x626>
    9976:	e7ce      	b.n	9916 <_dtoa_r+0x68e>
    9978:	9a09      	ldr	r2, [sp, #36]	; 0x24
    997a:	2a00      	cmp	r2, #0
    997c:	f000 8129 	beq.w	9bd2 <_dtoa_r+0x94a>
    9980:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    9982:	2a01      	cmp	r2, #1
    9984:	f300 810e 	bgt.w	9ba4 <_dtoa_r+0x91c>
    9988:	9a10      	ldr	r2, [sp, #64]	; 0x40
    998a:	2a00      	cmp	r2, #0
    998c:	f000 8106 	beq.w	9b9c <_dtoa_r+0x914>
    9990:	f203 4333 	addw	r3, r3, #1075	; 0x433
    9994:	9e08      	ldr	r6, [sp, #32]
    9996:	4645      	mov	r5, r8
    9998:	9a07      	ldr	r2, [sp, #28]
    999a:	2101      	movs	r1, #1
    999c:	441a      	add	r2, r3
    999e:	4620      	mov	r0, r4
    99a0:	4498      	add	r8, r3
    99a2:	9207      	str	r2, [sp, #28]
    99a4:	f000 fd6b 	bl	a47e <__i2b>
    99a8:	4607      	mov	r7, r0
    99aa:	2d00      	cmp	r5, #0
    99ac:	dd0b      	ble.n	99c6 <_dtoa_r+0x73e>
    99ae:	9b07      	ldr	r3, [sp, #28]
    99b0:	2b00      	cmp	r3, #0
    99b2:	dd08      	ble.n	99c6 <_dtoa_r+0x73e>
    99b4:	42ab      	cmp	r3, r5
    99b6:	9a07      	ldr	r2, [sp, #28]
    99b8:	bfa8      	it	ge
    99ba:	462b      	movge	r3, r5
    99bc:	eba8 0803 	sub.w	r8, r8, r3
    99c0:	1aed      	subs	r5, r5, r3
    99c2:	1ad3      	subs	r3, r2, r3
    99c4:	9307      	str	r3, [sp, #28]
    99c6:	9b08      	ldr	r3, [sp, #32]
    99c8:	b1fb      	cbz	r3, 9a0a <_dtoa_r+0x782>
    99ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    99cc:	2b00      	cmp	r3, #0
    99ce:	f000 8104 	beq.w	9bda <_dtoa_r+0x952>
    99d2:	2e00      	cmp	r6, #0
    99d4:	dd11      	ble.n	99fa <_dtoa_r+0x772>
    99d6:	4639      	mov	r1, r7
    99d8:	4632      	mov	r2, r6
    99da:	4620      	mov	r0, r4
    99dc:	f000 fde6 	bl	a5ac <__pow5mult>
    99e0:	4652      	mov	r2, sl
    99e2:	4601      	mov	r1, r0
    99e4:	4607      	mov	r7, r0
    99e6:	4620      	mov	r0, r4
    99e8:	f000 fd52 	bl	a490 <__multiply>
    99ec:	4651      	mov	r1, sl
    99ee:	900a      	str	r0, [sp, #40]	; 0x28
    99f0:	4620      	mov	r0, r4
    99f2:	f000 fca4 	bl	a33e <_Bfree>
    99f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    99f8:	469a      	mov	sl, r3
    99fa:	9b08      	ldr	r3, [sp, #32]
    99fc:	1b9a      	subs	r2, r3, r6
    99fe:	d004      	beq.n	9a0a <_dtoa_r+0x782>
    9a00:	4651      	mov	r1, sl
    9a02:	4620      	mov	r0, r4
    9a04:	f000 fdd2 	bl	a5ac <__pow5mult>
    9a08:	4682      	mov	sl, r0
    9a0a:	2101      	movs	r1, #1
    9a0c:	4620      	mov	r0, r4
    9a0e:	f000 fd36 	bl	a47e <__i2b>
    9a12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9a14:	2b00      	cmp	r3, #0
    9a16:	4606      	mov	r6, r0
    9a18:	f340 80e1 	ble.w	9bde <_dtoa_r+0x956>
    9a1c:	461a      	mov	r2, r3
    9a1e:	4601      	mov	r1, r0
    9a20:	4620      	mov	r0, r4
    9a22:	f000 fdc3 	bl	a5ac <__pow5mult>
    9a26:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9a28:	2b01      	cmp	r3, #1
    9a2a:	4606      	mov	r6, r0
    9a2c:	f340 80da 	ble.w	9be4 <_dtoa_r+0x95c>
    9a30:	2300      	movs	r3, #0
    9a32:	9308      	str	r3, [sp, #32]
    9a34:	6933      	ldr	r3, [r6, #16]
    9a36:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    9a3a:	6918      	ldr	r0, [r3, #16]
    9a3c:	f000 fcd1 	bl	a3e2 <__hi0bits>
    9a40:	f1c0 0020 	rsb	r0, r0, #32
    9a44:	9b07      	ldr	r3, [sp, #28]
    9a46:	4418      	add	r0, r3
    9a48:	f010 001f 	ands.w	r0, r0, #31
    9a4c:	f000 80f0 	beq.w	9c30 <_dtoa_r+0x9a8>
    9a50:	f1c0 0320 	rsb	r3, r0, #32
    9a54:	2b04      	cmp	r3, #4
    9a56:	f340 80e2 	ble.w	9c1e <_dtoa_r+0x996>
    9a5a:	9b07      	ldr	r3, [sp, #28]
    9a5c:	f1c0 001c 	rsb	r0, r0, #28
    9a60:	4480      	add	r8, r0
    9a62:	4405      	add	r5, r0
    9a64:	4403      	add	r3, r0
    9a66:	9307      	str	r3, [sp, #28]
    9a68:	f1b8 0f00 	cmp.w	r8, #0
    9a6c:	dd05      	ble.n	9a7a <_dtoa_r+0x7f2>
    9a6e:	4651      	mov	r1, sl
    9a70:	4642      	mov	r2, r8
    9a72:	4620      	mov	r0, r4
    9a74:	f000 fde8 	bl	a648 <__lshift>
    9a78:	4682      	mov	sl, r0
    9a7a:	9b07      	ldr	r3, [sp, #28]
    9a7c:	2b00      	cmp	r3, #0
    9a7e:	dd05      	ble.n	9a8c <_dtoa_r+0x804>
    9a80:	4631      	mov	r1, r6
    9a82:	461a      	mov	r2, r3
    9a84:	4620      	mov	r0, r4
    9a86:	f000 fddf 	bl	a648 <__lshift>
    9a8a:	4606      	mov	r6, r0
    9a8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9a8e:	2b00      	cmp	r3, #0
    9a90:	f000 80d2 	beq.w	9c38 <_dtoa_r+0x9b0>
    9a94:	4631      	mov	r1, r6
    9a96:	4650      	mov	r0, sl
    9a98:	f000 fe27 	bl	a6ea <__mcmp>
    9a9c:	2800      	cmp	r0, #0
    9a9e:	f280 80cb 	bge.w	9c38 <_dtoa_r+0x9b0>
    9aa2:	2300      	movs	r3, #0
    9aa4:	4651      	mov	r1, sl
    9aa6:	220a      	movs	r2, #10
    9aa8:	4620      	mov	r0, r4
    9aaa:	f000 fc5f 	bl	a36c <__multadd>
    9aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9ab0:	f10b 3bff 	add.w	fp, fp, #4294967295
    9ab4:	4682      	mov	sl, r0
    9ab6:	2b00      	cmp	r3, #0
    9ab8:	f000 81aa 	beq.w	9e10 <_dtoa_r+0xb88>
    9abc:	2300      	movs	r3, #0
    9abe:	4639      	mov	r1, r7
    9ac0:	220a      	movs	r2, #10
    9ac2:	4620      	mov	r0, r4
    9ac4:	f000 fc52 	bl	a36c <__multadd>
    9ac8:	9b04      	ldr	r3, [sp, #16]
    9aca:	2b00      	cmp	r3, #0
    9acc:	4607      	mov	r7, r0
    9ace:	dc03      	bgt.n	9ad8 <_dtoa_r+0x850>
    9ad0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9ad2:	2b02      	cmp	r3, #2
    9ad4:	f300 80b8 	bgt.w	9c48 <_dtoa_r+0x9c0>
    9ad8:	2d00      	cmp	r5, #0
    9ada:	dd05      	ble.n	9ae8 <_dtoa_r+0x860>
    9adc:	4639      	mov	r1, r7
    9ade:	462a      	mov	r2, r5
    9ae0:	4620      	mov	r0, r4
    9ae2:	f000 fdb1 	bl	a648 <__lshift>
    9ae6:	4607      	mov	r7, r0
    9ae8:	9b08      	ldr	r3, [sp, #32]
    9aea:	2b00      	cmp	r3, #0
    9aec:	f000 8110 	beq.w	9d10 <_dtoa_r+0xa88>
    9af0:	6879      	ldr	r1, [r7, #4]
    9af2:	4620      	mov	r0, r4
    9af4:	f000 fbef 	bl	a2d6 <_Balloc>
    9af8:	693a      	ldr	r2, [r7, #16]
    9afa:	3202      	adds	r2, #2
    9afc:	4605      	mov	r5, r0
    9afe:	0092      	lsls	r2, r2, #2
    9b00:	f107 010c 	add.w	r1, r7, #12
    9b04:	300c      	adds	r0, #12
    9b06:	f000 fbdb 	bl	a2c0 <memcpy>
    9b0a:	2201      	movs	r2, #1
    9b0c:	4629      	mov	r1, r5
    9b0e:	4620      	mov	r0, r4
    9b10:	f000 fd9a 	bl	a648 <__lshift>
    9b14:	9b02      	ldr	r3, [sp, #8]
    9b16:	f8dd 8018 	ldr.w	r8, [sp, #24]
    9b1a:	9707      	str	r7, [sp, #28]
    9b1c:	f003 0301 	and.w	r3, r3, #1
    9b20:	4607      	mov	r7, r0
    9b22:	9308      	str	r3, [sp, #32]
    9b24:	4631      	mov	r1, r6
    9b26:	4650      	mov	r0, sl
    9b28:	f7ff fb20 	bl	916c <quorem>
    9b2c:	9907      	ldr	r1, [sp, #28]
    9b2e:	4605      	mov	r5, r0
    9b30:	f100 0930 	add.w	r9, r0, #48	; 0x30
    9b34:	4650      	mov	r0, sl
    9b36:	f000 fdd8 	bl	a6ea <__mcmp>
    9b3a:	463a      	mov	r2, r7
    9b3c:	9002      	str	r0, [sp, #8]
    9b3e:	4631      	mov	r1, r6
    9b40:	4620      	mov	r0, r4
    9b42:	f000 fdec 	bl	a71e <__mdiff>
    9b46:	68c3      	ldr	r3, [r0, #12]
    9b48:	4602      	mov	r2, r0
    9b4a:	2b00      	cmp	r3, #0
    9b4c:	f040 80e2 	bne.w	9d14 <_dtoa_r+0xa8c>
    9b50:	4601      	mov	r1, r0
    9b52:	9009      	str	r0, [sp, #36]	; 0x24
    9b54:	4650      	mov	r0, sl
    9b56:	f000 fdc8 	bl	a6ea <__mcmp>
    9b5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9b5c:	4603      	mov	r3, r0
    9b5e:	4611      	mov	r1, r2
    9b60:	4620      	mov	r0, r4
    9b62:	9309      	str	r3, [sp, #36]	; 0x24
    9b64:	f000 fbeb 	bl	a33e <_Bfree>
    9b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9b6a:	2b00      	cmp	r3, #0
    9b6c:	f040 80d4 	bne.w	9d18 <_dtoa_r+0xa90>
    9b70:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    9b72:	2a00      	cmp	r2, #0
    9b74:	f040 80d0 	bne.w	9d18 <_dtoa_r+0xa90>
    9b78:	9a08      	ldr	r2, [sp, #32]
    9b7a:	2a00      	cmp	r2, #0
    9b7c:	f040 80cc 	bne.w	9d18 <_dtoa_r+0xa90>
    9b80:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    9b84:	f000 80e8 	beq.w	9d58 <_dtoa_r+0xad0>
    9b88:	9b02      	ldr	r3, [sp, #8]
    9b8a:	2b00      	cmp	r3, #0
    9b8c:	dd01      	ble.n	9b92 <_dtoa_r+0x90a>
    9b8e:	f105 0931 	add.w	r9, r5, #49	; 0x31
    9b92:	f108 0501 	add.w	r5, r8, #1
    9b96:	f888 9000 	strb.w	r9, [r8]
    9b9a:	e06a      	b.n	9c72 <_dtoa_r+0x9ea>
    9b9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9b9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    9ba2:	e6f7      	b.n	9994 <_dtoa_r+0x70c>
    9ba4:	9b08      	ldr	r3, [sp, #32]
    9ba6:	f109 36ff 	add.w	r6, r9, #4294967295
    9baa:	42b3      	cmp	r3, r6
    9bac:	bfbf      	itttt	lt
    9bae:	9b08      	ldrlt	r3, [sp, #32]
    9bb0:	9608      	strlt	r6, [sp, #32]
    9bb2:	1af2      	sublt	r2, r6, r3
    9bb4:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    9bb6:	bfb7      	itett	lt
    9bb8:	189b      	addlt	r3, r3, r2
    9bba:	1b9e      	subge	r6, r3, r6
    9bbc:	930c      	strlt	r3, [sp, #48]	; 0x30
    9bbe:	2600      	movlt	r6, #0
    9bc0:	f1b9 0f00 	cmp.w	r9, #0
    9bc4:	bfb9      	ittee	lt
    9bc6:	eba8 0509 	sublt.w	r5, r8, r9
    9bca:	2300      	movlt	r3, #0
    9bcc:	4645      	movge	r5, r8
    9bce:	464b      	movge	r3, r9
    9bd0:	e6e2      	b.n	9998 <_dtoa_r+0x710>
    9bd2:	9e08      	ldr	r6, [sp, #32]
    9bd4:	9f09      	ldr	r7, [sp, #36]	; 0x24
    9bd6:	4645      	mov	r5, r8
    9bd8:	e6e7      	b.n	99aa <_dtoa_r+0x722>
    9bda:	9a08      	ldr	r2, [sp, #32]
    9bdc:	e710      	b.n	9a00 <_dtoa_r+0x778>
    9bde:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9be0:	2b01      	cmp	r3, #1
    9be2:	dc18      	bgt.n	9c16 <_dtoa_r+0x98e>
    9be4:	9b02      	ldr	r3, [sp, #8]
    9be6:	b9b3      	cbnz	r3, 9c16 <_dtoa_r+0x98e>
    9be8:	9b03      	ldr	r3, [sp, #12]
    9bea:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9bee:	b9a3      	cbnz	r3, 9c1a <_dtoa_r+0x992>
    9bf0:	9b03      	ldr	r3, [sp, #12]
    9bf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    9bf6:	0d1b      	lsrs	r3, r3, #20
    9bf8:	051b      	lsls	r3, r3, #20
    9bfa:	b12b      	cbz	r3, 9c08 <_dtoa_r+0x980>
    9bfc:	9b07      	ldr	r3, [sp, #28]
    9bfe:	3301      	adds	r3, #1
    9c00:	9307      	str	r3, [sp, #28]
    9c02:	f108 0801 	add.w	r8, r8, #1
    9c06:	2301      	movs	r3, #1
    9c08:	9308      	str	r3, [sp, #32]
    9c0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9c0c:	2b00      	cmp	r3, #0
    9c0e:	f47f af11 	bne.w	9a34 <_dtoa_r+0x7ac>
    9c12:	2001      	movs	r0, #1
    9c14:	e716      	b.n	9a44 <_dtoa_r+0x7bc>
    9c16:	2300      	movs	r3, #0
    9c18:	e7f6      	b.n	9c08 <_dtoa_r+0x980>
    9c1a:	9b02      	ldr	r3, [sp, #8]
    9c1c:	e7f4      	b.n	9c08 <_dtoa_r+0x980>
    9c1e:	f43f af23 	beq.w	9a68 <_dtoa_r+0x7e0>
    9c22:	9a07      	ldr	r2, [sp, #28]
    9c24:	331c      	adds	r3, #28
    9c26:	441a      	add	r2, r3
    9c28:	4498      	add	r8, r3
    9c2a:	441d      	add	r5, r3
    9c2c:	4613      	mov	r3, r2
    9c2e:	e71a      	b.n	9a66 <_dtoa_r+0x7de>
    9c30:	4603      	mov	r3, r0
    9c32:	e7f6      	b.n	9c22 <_dtoa_r+0x99a>
    9c34:	40240000 	.word	0x40240000
    9c38:	f1b9 0f00 	cmp.w	r9, #0
    9c3c:	dc33      	bgt.n	9ca6 <_dtoa_r+0xa1e>
    9c3e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9c40:	2b02      	cmp	r3, #2
    9c42:	dd30      	ble.n	9ca6 <_dtoa_r+0xa1e>
    9c44:	f8cd 9010 	str.w	r9, [sp, #16]
    9c48:	9b04      	ldr	r3, [sp, #16]
    9c4a:	b963      	cbnz	r3, 9c66 <_dtoa_r+0x9de>
    9c4c:	4631      	mov	r1, r6
    9c4e:	2205      	movs	r2, #5
    9c50:	4620      	mov	r0, r4
    9c52:	f000 fb8b 	bl	a36c <__multadd>
    9c56:	4601      	mov	r1, r0
    9c58:	4606      	mov	r6, r0
    9c5a:	4650      	mov	r0, sl
    9c5c:	f000 fd45 	bl	a6ea <__mcmp>
    9c60:	2800      	cmp	r0, #0
    9c62:	f73f ad5c 	bgt.w	971e <_dtoa_r+0x496>
    9c66:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9c68:	9d06      	ldr	r5, [sp, #24]
    9c6a:	ea6f 0b03 	mvn.w	fp, r3
    9c6e:	2300      	movs	r3, #0
    9c70:	9307      	str	r3, [sp, #28]
    9c72:	4631      	mov	r1, r6
    9c74:	4620      	mov	r0, r4
    9c76:	f000 fb62 	bl	a33e <_Bfree>
    9c7a:	2f00      	cmp	r7, #0
    9c7c:	f43f ae4b 	beq.w	9916 <_dtoa_r+0x68e>
    9c80:	9b07      	ldr	r3, [sp, #28]
    9c82:	b12b      	cbz	r3, 9c90 <_dtoa_r+0xa08>
    9c84:	42bb      	cmp	r3, r7
    9c86:	d003      	beq.n	9c90 <_dtoa_r+0xa08>
    9c88:	4619      	mov	r1, r3
    9c8a:	4620      	mov	r0, r4
    9c8c:	f000 fb57 	bl	a33e <_Bfree>
    9c90:	4639      	mov	r1, r7
    9c92:	4620      	mov	r0, r4
    9c94:	f000 fb53 	bl	a33e <_Bfree>
    9c98:	e63d      	b.n	9916 <_dtoa_r+0x68e>
    9c9a:	2600      	movs	r6, #0
    9c9c:	4637      	mov	r7, r6
    9c9e:	e7e2      	b.n	9c66 <_dtoa_r+0x9de>
    9ca0:	46bb      	mov	fp, r7
    9ca2:	4637      	mov	r7, r6
    9ca4:	e53b      	b.n	971e <_dtoa_r+0x496>
    9ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9ca8:	f8cd 9010 	str.w	r9, [sp, #16]
    9cac:	2b00      	cmp	r3, #0
    9cae:	f47f af13 	bne.w	9ad8 <_dtoa_r+0x850>
    9cb2:	9d06      	ldr	r5, [sp, #24]
    9cb4:	4631      	mov	r1, r6
    9cb6:	4650      	mov	r0, sl
    9cb8:	f7ff fa58 	bl	916c <quorem>
    9cbc:	f100 0930 	add.w	r9, r0, #48	; 0x30
    9cc0:	f805 9b01 	strb.w	r9, [r5], #1
    9cc4:	9b06      	ldr	r3, [sp, #24]
    9cc6:	9a04      	ldr	r2, [sp, #16]
    9cc8:	1aeb      	subs	r3, r5, r3
    9cca:	429a      	cmp	r2, r3
    9ccc:	f300 8083 	bgt.w	9dd6 <_dtoa_r+0xb4e>
    9cd0:	9b06      	ldr	r3, [sp, #24]
    9cd2:	2a01      	cmp	r2, #1
    9cd4:	bfac      	ite	ge
    9cd6:	189b      	addge	r3, r3, r2
    9cd8:	3301      	addlt	r3, #1
    9cda:	4698      	mov	r8, r3
    9cdc:	2300      	movs	r3, #0
    9cde:	9307      	str	r3, [sp, #28]
    9ce0:	4651      	mov	r1, sl
    9ce2:	2201      	movs	r2, #1
    9ce4:	4620      	mov	r0, r4
    9ce6:	f000 fcaf 	bl	a648 <__lshift>
    9cea:	4631      	mov	r1, r6
    9cec:	4682      	mov	sl, r0
    9cee:	f000 fcfc 	bl	a6ea <__mcmp>
    9cf2:	2800      	cmp	r0, #0
    9cf4:	dc35      	bgt.n	9d62 <_dtoa_r+0xada>
    9cf6:	d102      	bne.n	9cfe <_dtoa_r+0xa76>
    9cf8:	f019 0f01 	tst.w	r9, #1
    9cfc:	d131      	bne.n	9d62 <_dtoa_r+0xada>
    9cfe:	4645      	mov	r5, r8
    9d00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    9d04:	2b30      	cmp	r3, #48	; 0x30
    9d06:	f105 32ff 	add.w	r2, r5, #4294967295
    9d0a:	d1b2      	bne.n	9c72 <_dtoa_r+0x9ea>
    9d0c:	4615      	mov	r5, r2
    9d0e:	e7f7      	b.n	9d00 <_dtoa_r+0xa78>
    9d10:	4638      	mov	r0, r7
    9d12:	e6ff      	b.n	9b14 <_dtoa_r+0x88c>
    9d14:	2301      	movs	r3, #1
    9d16:	e722      	b.n	9b5e <_dtoa_r+0x8d6>
    9d18:	9a02      	ldr	r2, [sp, #8]
    9d1a:	2a00      	cmp	r2, #0
    9d1c:	db04      	blt.n	9d28 <_dtoa_r+0xaa0>
    9d1e:	d129      	bne.n	9d74 <_dtoa_r+0xaec>
    9d20:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    9d22:	bb3a      	cbnz	r2, 9d74 <_dtoa_r+0xaec>
    9d24:	9a08      	ldr	r2, [sp, #32]
    9d26:	bb2a      	cbnz	r2, 9d74 <_dtoa_r+0xaec>
    9d28:	2b00      	cmp	r3, #0
    9d2a:	f77f af32 	ble.w	9b92 <_dtoa_r+0x90a>
    9d2e:	4651      	mov	r1, sl
    9d30:	2201      	movs	r2, #1
    9d32:	4620      	mov	r0, r4
    9d34:	f000 fc88 	bl	a648 <__lshift>
    9d38:	4631      	mov	r1, r6
    9d3a:	4682      	mov	sl, r0
    9d3c:	f000 fcd5 	bl	a6ea <__mcmp>
    9d40:	2800      	cmp	r0, #0
    9d42:	dc05      	bgt.n	9d50 <_dtoa_r+0xac8>
    9d44:	f47f af25 	bne.w	9b92 <_dtoa_r+0x90a>
    9d48:	f019 0f01 	tst.w	r9, #1
    9d4c:	f43f af21 	beq.w	9b92 <_dtoa_r+0x90a>
    9d50:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    9d54:	f47f af1b 	bne.w	9b8e <_dtoa_r+0x906>
    9d58:	2339      	movs	r3, #57	; 0x39
    9d5a:	f888 3000 	strb.w	r3, [r8]
    9d5e:	f108 0801 	add.w	r8, r8, #1
    9d62:	4645      	mov	r5, r8
    9d64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    9d68:	2b39      	cmp	r3, #57	; 0x39
    9d6a:	f105 32ff 	add.w	r2, r5, #4294967295
    9d6e:	d03a      	beq.n	9de6 <_dtoa_r+0xb5e>
    9d70:	3301      	adds	r3, #1
    9d72:	e03f      	b.n	9df4 <_dtoa_r+0xb6c>
    9d74:	2b00      	cmp	r3, #0
    9d76:	f108 0501 	add.w	r5, r8, #1
    9d7a:	dd05      	ble.n	9d88 <_dtoa_r+0xb00>
    9d7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    9d80:	d0ea      	beq.n	9d58 <_dtoa_r+0xad0>
    9d82:	f109 0901 	add.w	r9, r9, #1
    9d86:	e706      	b.n	9b96 <_dtoa_r+0x90e>
    9d88:	9b06      	ldr	r3, [sp, #24]
    9d8a:	9a04      	ldr	r2, [sp, #16]
    9d8c:	f805 9c01 	strb.w	r9, [r5, #-1]
    9d90:	1aeb      	subs	r3, r5, r3
    9d92:	4293      	cmp	r3, r2
    9d94:	46a8      	mov	r8, r5
    9d96:	d0a3      	beq.n	9ce0 <_dtoa_r+0xa58>
    9d98:	4651      	mov	r1, sl
    9d9a:	2300      	movs	r3, #0
    9d9c:	220a      	movs	r2, #10
    9d9e:	4620      	mov	r0, r4
    9da0:	f000 fae4 	bl	a36c <__multadd>
    9da4:	9b07      	ldr	r3, [sp, #28]
    9da6:	9907      	ldr	r1, [sp, #28]
    9da8:	42bb      	cmp	r3, r7
    9daa:	4682      	mov	sl, r0
    9dac:	f04f 0300 	mov.w	r3, #0
    9db0:	f04f 020a 	mov.w	r2, #10
    9db4:	4620      	mov	r0, r4
    9db6:	d104      	bne.n	9dc2 <_dtoa_r+0xb3a>
    9db8:	f000 fad8 	bl	a36c <__multadd>
    9dbc:	9007      	str	r0, [sp, #28]
    9dbe:	4607      	mov	r7, r0
    9dc0:	e6b0      	b.n	9b24 <_dtoa_r+0x89c>
    9dc2:	f000 fad3 	bl	a36c <__multadd>
    9dc6:	2300      	movs	r3, #0
    9dc8:	9007      	str	r0, [sp, #28]
    9dca:	220a      	movs	r2, #10
    9dcc:	4639      	mov	r1, r7
    9dce:	4620      	mov	r0, r4
    9dd0:	f000 facc 	bl	a36c <__multadd>
    9dd4:	e7f3      	b.n	9dbe <_dtoa_r+0xb36>
    9dd6:	4651      	mov	r1, sl
    9dd8:	2300      	movs	r3, #0
    9dda:	220a      	movs	r2, #10
    9ddc:	4620      	mov	r0, r4
    9dde:	f000 fac5 	bl	a36c <__multadd>
    9de2:	4682      	mov	sl, r0
    9de4:	e766      	b.n	9cb4 <_dtoa_r+0xa2c>
    9de6:	9b06      	ldr	r3, [sp, #24]
    9de8:	4293      	cmp	r3, r2
    9dea:	d105      	bne.n	9df8 <_dtoa_r+0xb70>
    9dec:	9a06      	ldr	r2, [sp, #24]
    9dee:	f10b 0b01 	add.w	fp, fp, #1
    9df2:	2331      	movs	r3, #49	; 0x31
    9df4:	7013      	strb	r3, [r2, #0]
    9df6:	e73c      	b.n	9c72 <_dtoa_r+0x9ea>
    9df8:	4615      	mov	r5, r2
    9dfa:	e7b3      	b.n	9d64 <_dtoa_r+0xadc>
    9dfc:	4b09      	ldr	r3, [pc, #36]	; (9e24 <_dtoa_r+0xb9c>)
    9dfe:	f7ff baa5 	b.w	934c <_dtoa_r+0xc4>
    9e02:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9e04:	2b00      	cmp	r3, #0
    9e06:	f47f aa7f 	bne.w	9308 <_dtoa_r+0x80>
    9e0a:	4b07      	ldr	r3, [pc, #28]	; (9e28 <_dtoa_r+0xba0>)
    9e0c:	f7ff ba9e 	b.w	934c <_dtoa_r+0xc4>
    9e10:	9b04      	ldr	r3, [sp, #16]
    9e12:	2b00      	cmp	r3, #0
    9e14:	f73f af4d 	bgt.w	9cb2 <_dtoa_r+0xa2a>
    9e18:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9e1a:	2b02      	cmp	r3, #2
    9e1c:	f77f af49 	ble.w	9cb2 <_dtoa_r+0xa2a>
    9e20:	e712      	b.n	9c48 <_dtoa_r+0x9c0>
    9e22:	bf00      	nop
    9e24:	0000c454 	.word	0x0000c454
    9e28:	0000c478 	.word	0x0000c478

00009e2c <__sflush_r>:
    9e2c:	898a      	ldrh	r2, [r1, #12]
    9e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e32:	4605      	mov	r5, r0
    9e34:	0710      	lsls	r0, r2, #28
    9e36:	460c      	mov	r4, r1
    9e38:	d45a      	bmi.n	9ef0 <__sflush_r+0xc4>
    9e3a:	684b      	ldr	r3, [r1, #4]
    9e3c:	2b00      	cmp	r3, #0
    9e3e:	dc05      	bgt.n	9e4c <__sflush_r+0x20>
    9e40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    9e42:	2b00      	cmp	r3, #0
    9e44:	dc02      	bgt.n	9e4c <__sflush_r+0x20>
    9e46:	2000      	movs	r0, #0
    9e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9e4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    9e4e:	2e00      	cmp	r6, #0
    9e50:	d0f9      	beq.n	9e46 <__sflush_r+0x1a>
    9e52:	2300      	movs	r3, #0
    9e54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    9e58:	682f      	ldr	r7, [r5, #0]
    9e5a:	602b      	str	r3, [r5, #0]
    9e5c:	d033      	beq.n	9ec6 <__sflush_r+0x9a>
    9e5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    9e60:	89a3      	ldrh	r3, [r4, #12]
    9e62:	075a      	lsls	r2, r3, #29
    9e64:	d505      	bpl.n	9e72 <__sflush_r+0x46>
    9e66:	6863      	ldr	r3, [r4, #4]
    9e68:	1ac0      	subs	r0, r0, r3
    9e6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9e6c:	b10b      	cbz	r3, 9e72 <__sflush_r+0x46>
    9e6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9e70:	1ac0      	subs	r0, r0, r3
    9e72:	2300      	movs	r3, #0
    9e74:	4602      	mov	r2, r0
    9e76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    9e78:	6a21      	ldr	r1, [r4, #32]
    9e7a:	4628      	mov	r0, r5
    9e7c:	47b0      	blx	r6
    9e7e:	1c43      	adds	r3, r0, #1
    9e80:	89a3      	ldrh	r3, [r4, #12]
    9e82:	d106      	bne.n	9e92 <__sflush_r+0x66>
    9e84:	6829      	ldr	r1, [r5, #0]
    9e86:	291d      	cmp	r1, #29
    9e88:	d84b      	bhi.n	9f22 <__sflush_r+0xf6>
    9e8a:	4a2b      	ldr	r2, [pc, #172]	; (9f38 <__sflush_r+0x10c>)
    9e8c:	40ca      	lsrs	r2, r1
    9e8e:	07d6      	lsls	r6, r2, #31
    9e90:	d547      	bpl.n	9f22 <__sflush_r+0xf6>
    9e92:	2200      	movs	r2, #0
    9e94:	6062      	str	r2, [r4, #4]
    9e96:	04d9      	lsls	r1, r3, #19
    9e98:	6922      	ldr	r2, [r4, #16]
    9e9a:	6022      	str	r2, [r4, #0]
    9e9c:	d504      	bpl.n	9ea8 <__sflush_r+0x7c>
    9e9e:	1c42      	adds	r2, r0, #1
    9ea0:	d101      	bne.n	9ea6 <__sflush_r+0x7a>
    9ea2:	682b      	ldr	r3, [r5, #0]
    9ea4:	b903      	cbnz	r3, 9ea8 <__sflush_r+0x7c>
    9ea6:	6560      	str	r0, [r4, #84]	; 0x54
    9ea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9eaa:	602f      	str	r7, [r5, #0]
    9eac:	2900      	cmp	r1, #0
    9eae:	d0ca      	beq.n	9e46 <__sflush_r+0x1a>
    9eb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    9eb4:	4299      	cmp	r1, r3
    9eb6:	d002      	beq.n	9ebe <__sflush_r+0x92>
    9eb8:	4628      	mov	r0, r5
    9eba:	f000 fceb 	bl	a894 <_free_r>
    9ebe:	2000      	movs	r0, #0
    9ec0:	6360      	str	r0, [r4, #52]	; 0x34
    9ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9ec6:	6a21      	ldr	r1, [r4, #32]
    9ec8:	2301      	movs	r3, #1
    9eca:	4628      	mov	r0, r5
    9ecc:	47b0      	blx	r6
    9ece:	1c41      	adds	r1, r0, #1
    9ed0:	d1c6      	bne.n	9e60 <__sflush_r+0x34>
    9ed2:	682b      	ldr	r3, [r5, #0]
    9ed4:	2b00      	cmp	r3, #0
    9ed6:	d0c3      	beq.n	9e60 <__sflush_r+0x34>
    9ed8:	2b1d      	cmp	r3, #29
    9eda:	d001      	beq.n	9ee0 <__sflush_r+0xb4>
    9edc:	2b16      	cmp	r3, #22
    9ede:	d101      	bne.n	9ee4 <__sflush_r+0xb8>
    9ee0:	602f      	str	r7, [r5, #0]
    9ee2:	e7b0      	b.n	9e46 <__sflush_r+0x1a>
    9ee4:	89a3      	ldrh	r3, [r4, #12]
    9ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9eea:	81a3      	strh	r3, [r4, #12]
    9eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9ef0:	690f      	ldr	r7, [r1, #16]
    9ef2:	2f00      	cmp	r7, #0
    9ef4:	d0a7      	beq.n	9e46 <__sflush_r+0x1a>
    9ef6:	0793      	lsls	r3, r2, #30
    9ef8:	680e      	ldr	r6, [r1, #0]
    9efa:	bf08      	it	eq
    9efc:	694b      	ldreq	r3, [r1, #20]
    9efe:	600f      	str	r7, [r1, #0]
    9f00:	bf18      	it	ne
    9f02:	2300      	movne	r3, #0
    9f04:	eba6 0807 	sub.w	r8, r6, r7
    9f08:	608b      	str	r3, [r1, #8]
    9f0a:	f1b8 0f00 	cmp.w	r8, #0
    9f0e:	dd9a      	ble.n	9e46 <__sflush_r+0x1a>
    9f10:	4643      	mov	r3, r8
    9f12:	463a      	mov	r2, r7
    9f14:	6a21      	ldr	r1, [r4, #32]
    9f16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    9f18:	4628      	mov	r0, r5
    9f1a:	47b0      	blx	r6
    9f1c:	2800      	cmp	r0, #0
    9f1e:	dc07      	bgt.n	9f30 <__sflush_r+0x104>
    9f20:	89a3      	ldrh	r3, [r4, #12]
    9f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9f26:	81a3      	strh	r3, [r4, #12]
    9f28:	f04f 30ff 	mov.w	r0, #4294967295
    9f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f30:	4407      	add	r7, r0
    9f32:	eba8 0800 	sub.w	r8, r8, r0
    9f36:	e7e8      	b.n	9f0a <__sflush_r+0xde>
    9f38:	20400001 	.word	0x20400001

00009f3c <_fflush_r>:
    9f3c:	b538      	push	{r3, r4, r5, lr}
    9f3e:	690b      	ldr	r3, [r1, #16]
    9f40:	4605      	mov	r5, r0
    9f42:	460c      	mov	r4, r1
    9f44:	b1db      	cbz	r3, 9f7e <_fflush_r+0x42>
    9f46:	b118      	cbz	r0, 9f50 <_fflush_r+0x14>
    9f48:	6983      	ldr	r3, [r0, #24]
    9f4a:	b90b      	cbnz	r3, 9f50 <_fflush_r+0x14>
    9f4c:	f000 f860 	bl	a010 <__sinit>
    9f50:	4b0c      	ldr	r3, [pc, #48]	; (9f84 <_fflush_r+0x48>)
    9f52:	429c      	cmp	r4, r3
    9f54:	d109      	bne.n	9f6a <_fflush_r+0x2e>
    9f56:	686c      	ldr	r4, [r5, #4]
    9f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9f5c:	b17b      	cbz	r3, 9f7e <_fflush_r+0x42>
    9f5e:	4621      	mov	r1, r4
    9f60:	4628      	mov	r0, r5
    9f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9f66:	f7ff bf61 	b.w	9e2c <__sflush_r>
    9f6a:	4b07      	ldr	r3, [pc, #28]	; (9f88 <_fflush_r+0x4c>)
    9f6c:	429c      	cmp	r4, r3
    9f6e:	d101      	bne.n	9f74 <_fflush_r+0x38>
    9f70:	68ac      	ldr	r4, [r5, #8]
    9f72:	e7f1      	b.n	9f58 <_fflush_r+0x1c>
    9f74:	4b05      	ldr	r3, [pc, #20]	; (9f8c <_fflush_r+0x50>)
    9f76:	429c      	cmp	r4, r3
    9f78:	bf08      	it	eq
    9f7a:	68ec      	ldreq	r4, [r5, #12]
    9f7c:	e7ec      	b.n	9f58 <_fflush_r+0x1c>
    9f7e:	2000      	movs	r0, #0
    9f80:	bd38      	pop	{r3, r4, r5, pc}
    9f82:	bf00      	nop
    9f84:	0000c4a8 	.word	0x0000c4a8
    9f88:	0000c4c8 	.word	0x0000c4c8
    9f8c:	0000c488 	.word	0x0000c488

00009f90 <_cleanup_r>:
    9f90:	4901      	ldr	r1, [pc, #4]	; (9f98 <_cleanup_r+0x8>)
    9f92:	f000 b8a9 	b.w	a0e8 <_fwalk_reent>
    9f96:	bf00      	nop
    9f98:	00009f3d 	.word	0x00009f3d

00009f9c <std.isra.0>:
    9f9c:	2300      	movs	r3, #0
    9f9e:	b510      	push	{r4, lr}
    9fa0:	4604      	mov	r4, r0
    9fa2:	6003      	str	r3, [r0, #0]
    9fa4:	6043      	str	r3, [r0, #4]
    9fa6:	6083      	str	r3, [r0, #8]
    9fa8:	8181      	strh	r1, [r0, #12]
    9faa:	6643      	str	r3, [r0, #100]	; 0x64
    9fac:	81c2      	strh	r2, [r0, #14]
    9fae:	6103      	str	r3, [r0, #16]
    9fb0:	6143      	str	r3, [r0, #20]
    9fb2:	6183      	str	r3, [r0, #24]
    9fb4:	4619      	mov	r1, r3
    9fb6:	2208      	movs	r2, #8
    9fb8:	305c      	adds	r0, #92	; 0x5c
    9fba:	f7fe fb75 	bl	86a8 <memset>
    9fbe:	4b05      	ldr	r3, [pc, #20]	; (9fd4 <std.isra.0+0x38>)
    9fc0:	6263      	str	r3, [r4, #36]	; 0x24
    9fc2:	4b05      	ldr	r3, [pc, #20]	; (9fd8 <std.isra.0+0x3c>)
    9fc4:	62a3      	str	r3, [r4, #40]	; 0x28
    9fc6:	4b05      	ldr	r3, [pc, #20]	; (9fdc <std.isra.0+0x40>)
    9fc8:	62e3      	str	r3, [r4, #44]	; 0x2c
    9fca:	4b05      	ldr	r3, [pc, #20]	; (9fe0 <std.isra.0+0x44>)
    9fcc:	6224      	str	r4, [r4, #32]
    9fce:	6323      	str	r3, [r4, #48]	; 0x30
    9fd0:	bd10      	pop	{r4, pc}
    9fd2:	bf00      	nop
    9fd4:	0000af29 	.word	0x0000af29
    9fd8:	0000af4b 	.word	0x0000af4b
    9fdc:	0000af83 	.word	0x0000af83
    9fe0:	0000afa7 	.word	0x0000afa7

00009fe4 <__sfmoreglue>:
    9fe4:	b570      	push	{r4, r5, r6, lr}
    9fe6:	1e4a      	subs	r2, r1, #1
    9fe8:	2568      	movs	r5, #104	; 0x68
    9fea:	4355      	muls	r5, r2
    9fec:	460e      	mov	r6, r1
    9fee:	f105 0174 	add.w	r1, r5, #116	; 0x74
    9ff2:	f000 fc9d 	bl	a930 <_malloc_r>
    9ff6:	4604      	mov	r4, r0
    9ff8:	b140      	cbz	r0, a00c <__sfmoreglue+0x28>
    9ffa:	2100      	movs	r1, #0
    9ffc:	e880 0042 	stmia.w	r0, {r1, r6}
    a000:	300c      	adds	r0, #12
    a002:	60a0      	str	r0, [r4, #8]
    a004:	f105 0268 	add.w	r2, r5, #104	; 0x68
    a008:	f7fe fb4e 	bl	86a8 <memset>
    a00c:	4620      	mov	r0, r4
    a00e:	bd70      	pop	{r4, r5, r6, pc}

0000a010 <__sinit>:
    a010:	6983      	ldr	r3, [r0, #24]
    a012:	b510      	push	{r4, lr}
    a014:	4604      	mov	r4, r0
    a016:	bb33      	cbnz	r3, a066 <__sinit+0x56>
    a018:	6483      	str	r3, [r0, #72]	; 0x48
    a01a:	64c3      	str	r3, [r0, #76]	; 0x4c
    a01c:	6503      	str	r3, [r0, #80]	; 0x50
    a01e:	4b12      	ldr	r3, [pc, #72]	; (a068 <__sinit+0x58>)
    a020:	4a12      	ldr	r2, [pc, #72]	; (a06c <__sinit+0x5c>)
    a022:	681b      	ldr	r3, [r3, #0]
    a024:	6282      	str	r2, [r0, #40]	; 0x28
    a026:	4298      	cmp	r0, r3
    a028:	bf04      	itt	eq
    a02a:	2301      	moveq	r3, #1
    a02c:	6183      	streq	r3, [r0, #24]
    a02e:	f000 f81f 	bl	a070 <__sfp>
    a032:	6060      	str	r0, [r4, #4]
    a034:	4620      	mov	r0, r4
    a036:	f000 f81b 	bl	a070 <__sfp>
    a03a:	60a0      	str	r0, [r4, #8]
    a03c:	4620      	mov	r0, r4
    a03e:	f000 f817 	bl	a070 <__sfp>
    a042:	2200      	movs	r2, #0
    a044:	60e0      	str	r0, [r4, #12]
    a046:	2104      	movs	r1, #4
    a048:	6860      	ldr	r0, [r4, #4]
    a04a:	f7ff ffa7 	bl	9f9c <std.isra.0>
    a04e:	2201      	movs	r2, #1
    a050:	2109      	movs	r1, #9
    a052:	68a0      	ldr	r0, [r4, #8]
    a054:	f7ff ffa2 	bl	9f9c <std.isra.0>
    a058:	2202      	movs	r2, #2
    a05a:	2112      	movs	r1, #18
    a05c:	68e0      	ldr	r0, [r4, #12]
    a05e:	f7ff ff9d 	bl	9f9c <std.isra.0>
    a062:	2301      	movs	r3, #1
    a064:	61a3      	str	r3, [r4, #24]
    a066:	bd10      	pop	{r4, pc}
    a068:	0000c440 	.word	0x0000c440
    a06c:	00009f91 	.word	0x00009f91

0000a070 <__sfp>:
    a070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a072:	4b1c      	ldr	r3, [pc, #112]	; (a0e4 <__sfp+0x74>)
    a074:	681e      	ldr	r6, [r3, #0]
    a076:	69b3      	ldr	r3, [r6, #24]
    a078:	4607      	mov	r7, r0
    a07a:	b913      	cbnz	r3, a082 <__sfp+0x12>
    a07c:	4630      	mov	r0, r6
    a07e:	f7ff ffc7 	bl	a010 <__sinit>
    a082:	3648      	adds	r6, #72	; 0x48
    a084:	68b4      	ldr	r4, [r6, #8]
    a086:	6873      	ldr	r3, [r6, #4]
    a088:	3b01      	subs	r3, #1
    a08a:	d503      	bpl.n	a094 <__sfp+0x24>
    a08c:	6833      	ldr	r3, [r6, #0]
    a08e:	b133      	cbz	r3, a09e <__sfp+0x2e>
    a090:	6836      	ldr	r6, [r6, #0]
    a092:	e7f7      	b.n	a084 <__sfp+0x14>
    a094:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    a098:	b16d      	cbz	r5, a0b6 <__sfp+0x46>
    a09a:	3468      	adds	r4, #104	; 0x68
    a09c:	e7f4      	b.n	a088 <__sfp+0x18>
    a09e:	2104      	movs	r1, #4
    a0a0:	4638      	mov	r0, r7
    a0a2:	f7ff ff9f 	bl	9fe4 <__sfmoreglue>
    a0a6:	6030      	str	r0, [r6, #0]
    a0a8:	2800      	cmp	r0, #0
    a0aa:	d1f1      	bne.n	a090 <__sfp+0x20>
    a0ac:	230c      	movs	r3, #12
    a0ae:	603b      	str	r3, [r7, #0]
    a0b0:	4604      	mov	r4, r0
    a0b2:	4620      	mov	r0, r4
    a0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a0b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a0ba:	81e3      	strh	r3, [r4, #14]
    a0bc:	2301      	movs	r3, #1
    a0be:	81a3      	strh	r3, [r4, #12]
    a0c0:	6665      	str	r5, [r4, #100]	; 0x64
    a0c2:	6025      	str	r5, [r4, #0]
    a0c4:	60a5      	str	r5, [r4, #8]
    a0c6:	6065      	str	r5, [r4, #4]
    a0c8:	6125      	str	r5, [r4, #16]
    a0ca:	6165      	str	r5, [r4, #20]
    a0cc:	61a5      	str	r5, [r4, #24]
    a0ce:	2208      	movs	r2, #8
    a0d0:	4629      	mov	r1, r5
    a0d2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    a0d6:	f7fe fae7 	bl	86a8 <memset>
    a0da:	6365      	str	r5, [r4, #52]	; 0x34
    a0dc:	63a5      	str	r5, [r4, #56]	; 0x38
    a0de:	64a5      	str	r5, [r4, #72]	; 0x48
    a0e0:	64e5      	str	r5, [r4, #76]	; 0x4c
    a0e2:	e7e6      	b.n	a0b2 <__sfp+0x42>
    a0e4:	0000c440 	.word	0x0000c440

0000a0e8 <_fwalk_reent>:
    a0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a0ec:	4680      	mov	r8, r0
    a0ee:	4689      	mov	r9, r1
    a0f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
    a0f4:	2600      	movs	r6, #0
    a0f6:	b914      	cbnz	r4, a0fe <_fwalk_reent+0x16>
    a0f8:	4630      	mov	r0, r6
    a0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a0fe:	68a5      	ldr	r5, [r4, #8]
    a100:	6867      	ldr	r7, [r4, #4]
    a102:	3f01      	subs	r7, #1
    a104:	d501      	bpl.n	a10a <_fwalk_reent+0x22>
    a106:	6824      	ldr	r4, [r4, #0]
    a108:	e7f5      	b.n	a0f6 <_fwalk_reent+0xe>
    a10a:	89ab      	ldrh	r3, [r5, #12]
    a10c:	2b01      	cmp	r3, #1
    a10e:	d907      	bls.n	a120 <_fwalk_reent+0x38>
    a110:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    a114:	3301      	adds	r3, #1
    a116:	d003      	beq.n	a120 <_fwalk_reent+0x38>
    a118:	4629      	mov	r1, r5
    a11a:	4640      	mov	r0, r8
    a11c:	47c8      	blx	r9
    a11e:	4306      	orrs	r6, r0
    a120:	3568      	adds	r5, #104	; 0x68
    a122:	e7ee      	b.n	a102 <_fwalk_reent+0x1a>

0000a124 <_localeconv_r>:
    a124:	4b04      	ldr	r3, [pc, #16]	; (a138 <_localeconv_r+0x14>)
    a126:	681b      	ldr	r3, [r3, #0]
    a128:	6a18      	ldr	r0, [r3, #32]
    a12a:	4b04      	ldr	r3, [pc, #16]	; (a13c <_localeconv_r+0x18>)
    a12c:	2800      	cmp	r0, #0
    a12e:	bf08      	it	eq
    a130:	4618      	moveq	r0, r3
    a132:	30f0      	adds	r0, #240	; 0xf0
    a134:	4770      	bx	lr
    a136:	bf00      	nop
    a138:	20000084 	.word	0x20000084
    a13c:	200000e8 	.word	0x200000e8

0000a140 <__swhatbuf_r>:
    a140:	b570      	push	{r4, r5, r6, lr}
    a142:	460e      	mov	r6, r1
    a144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    a148:	2900      	cmp	r1, #0
    a14a:	b090      	sub	sp, #64	; 0x40
    a14c:	4614      	mov	r4, r2
    a14e:	461d      	mov	r5, r3
    a150:	da07      	bge.n	a162 <__swhatbuf_r+0x22>
    a152:	2300      	movs	r3, #0
    a154:	602b      	str	r3, [r5, #0]
    a156:	89b3      	ldrh	r3, [r6, #12]
    a158:	061a      	lsls	r2, r3, #24
    a15a:	d410      	bmi.n	a17e <__swhatbuf_r+0x3e>
    a15c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    a160:	e00e      	b.n	a180 <__swhatbuf_r+0x40>
    a162:	aa01      	add	r2, sp, #4
    a164:	f001 f806 	bl	b174 <_fstat_r>
    a168:	2800      	cmp	r0, #0
    a16a:	dbf2      	blt.n	a152 <__swhatbuf_r+0x12>
    a16c:	9a02      	ldr	r2, [sp, #8]
    a16e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    a172:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    a176:	425a      	negs	r2, r3
    a178:	415a      	adcs	r2, r3
    a17a:	602a      	str	r2, [r5, #0]
    a17c:	e7ee      	b.n	a15c <__swhatbuf_r+0x1c>
    a17e:	2340      	movs	r3, #64	; 0x40
    a180:	2000      	movs	r0, #0
    a182:	6023      	str	r3, [r4, #0]
    a184:	b010      	add	sp, #64	; 0x40
    a186:	bd70      	pop	{r4, r5, r6, pc}

0000a188 <__smakebuf_r>:
    a188:	898b      	ldrh	r3, [r1, #12]
    a18a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a18c:	079d      	lsls	r5, r3, #30
    a18e:	4606      	mov	r6, r0
    a190:	460c      	mov	r4, r1
    a192:	d507      	bpl.n	a1a4 <__smakebuf_r+0x1c>
    a194:	f104 0347 	add.w	r3, r4, #71	; 0x47
    a198:	6023      	str	r3, [r4, #0]
    a19a:	6123      	str	r3, [r4, #16]
    a19c:	2301      	movs	r3, #1
    a19e:	6163      	str	r3, [r4, #20]
    a1a0:	b002      	add	sp, #8
    a1a2:	bd70      	pop	{r4, r5, r6, pc}
    a1a4:	ab01      	add	r3, sp, #4
    a1a6:	466a      	mov	r2, sp
    a1a8:	f7ff ffca 	bl	a140 <__swhatbuf_r>
    a1ac:	9900      	ldr	r1, [sp, #0]
    a1ae:	4605      	mov	r5, r0
    a1b0:	4630      	mov	r0, r6
    a1b2:	f000 fbbd 	bl	a930 <_malloc_r>
    a1b6:	b948      	cbnz	r0, a1cc <__smakebuf_r+0x44>
    a1b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a1bc:	059a      	lsls	r2, r3, #22
    a1be:	d4ef      	bmi.n	a1a0 <__smakebuf_r+0x18>
    a1c0:	f023 0303 	bic.w	r3, r3, #3
    a1c4:	f043 0302 	orr.w	r3, r3, #2
    a1c8:	81a3      	strh	r3, [r4, #12]
    a1ca:	e7e3      	b.n	a194 <__smakebuf_r+0xc>
    a1cc:	4b0d      	ldr	r3, [pc, #52]	; (a204 <__smakebuf_r+0x7c>)
    a1ce:	62b3      	str	r3, [r6, #40]	; 0x28
    a1d0:	89a3      	ldrh	r3, [r4, #12]
    a1d2:	6020      	str	r0, [r4, #0]
    a1d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a1d8:	81a3      	strh	r3, [r4, #12]
    a1da:	9b00      	ldr	r3, [sp, #0]
    a1dc:	6163      	str	r3, [r4, #20]
    a1de:	9b01      	ldr	r3, [sp, #4]
    a1e0:	6120      	str	r0, [r4, #16]
    a1e2:	b15b      	cbz	r3, a1fc <__smakebuf_r+0x74>
    a1e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    a1e8:	4630      	mov	r0, r6
    a1ea:	f000 ffd5 	bl	b198 <_isatty_r>
    a1ee:	b128      	cbz	r0, a1fc <__smakebuf_r+0x74>
    a1f0:	89a3      	ldrh	r3, [r4, #12]
    a1f2:	f023 0303 	bic.w	r3, r3, #3
    a1f6:	f043 0301 	orr.w	r3, r3, #1
    a1fa:	81a3      	strh	r3, [r4, #12]
    a1fc:	89a3      	ldrh	r3, [r4, #12]
    a1fe:	431d      	orrs	r5, r3
    a200:	81a5      	strh	r5, [r4, #12]
    a202:	e7cd      	b.n	a1a0 <__smakebuf_r+0x18>
    a204:	00009f91 	.word	0x00009f91

0000a208 <malloc>:
    a208:	4b02      	ldr	r3, [pc, #8]	; (a214 <malloc+0xc>)
    a20a:	4601      	mov	r1, r0
    a20c:	6818      	ldr	r0, [r3, #0]
    a20e:	f000 bb8f 	b.w	a930 <_malloc_r>
    a212:	bf00      	nop
    a214:	20000084 	.word	0x20000084
	...

0000a220 <memchr>:
    a220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    a224:	2a10      	cmp	r2, #16
    a226:	db2b      	blt.n	a280 <memchr+0x60>
    a228:	f010 0f07 	tst.w	r0, #7
    a22c:	d008      	beq.n	a240 <memchr+0x20>
    a22e:	f810 3b01 	ldrb.w	r3, [r0], #1
    a232:	3a01      	subs	r2, #1
    a234:	428b      	cmp	r3, r1
    a236:	d02d      	beq.n	a294 <memchr+0x74>
    a238:	f010 0f07 	tst.w	r0, #7
    a23c:	b342      	cbz	r2, a290 <memchr+0x70>
    a23e:	d1f6      	bne.n	a22e <memchr+0xe>
    a240:	b4f0      	push	{r4, r5, r6, r7}
    a242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    a246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    a24a:	f022 0407 	bic.w	r4, r2, #7
    a24e:	f07f 0700 	mvns.w	r7, #0
    a252:	2300      	movs	r3, #0
    a254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    a258:	3c08      	subs	r4, #8
    a25a:	ea85 0501 	eor.w	r5, r5, r1
    a25e:	ea86 0601 	eor.w	r6, r6, r1
    a262:	fa85 f547 	uadd8	r5, r5, r7
    a266:	faa3 f587 	sel	r5, r3, r7
    a26a:	fa86 f647 	uadd8	r6, r6, r7
    a26e:	faa5 f687 	sel	r6, r5, r7
    a272:	b98e      	cbnz	r6, a298 <memchr+0x78>
    a274:	d1ee      	bne.n	a254 <memchr+0x34>
    a276:	bcf0      	pop	{r4, r5, r6, r7}
    a278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    a27c:	f002 0207 	and.w	r2, r2, #7
    a280:	b132      	cbz	r2, a290 <memchr+0x70>
    a282:	f810 3b01 	ldrb.w	r3, [r0], #1
    a286:	3a01      	subs	r2, #1
    a288:	ea83 0301 	eor.w	r3, r3, r1
    a28c:	b113      	cbz	r3, a294 <memchr+0x74>
    a28e:	d1f8      	bne.n	a282 <memchr+0x62>
    a290:	2000      	movs	r0, #0
    a292:	4770      	bx	lr
    a294:	3801      	subs	r0, #1
    a296:	4770      	bx	lr
    a298:	2d00      	cmp	r5, #0
    a29a:	bf06      	itte	eq
    a29c:	4635      	moveq	r5, r6
    a29e:	3803      	subeq	r0, #3
    a2a0:	3807      	subne	r0, #7
    a2a2:	f015 0f01 	tst.w	r5, #1
    a2a6:	d107      	bne.n	a2b8 <memchr+0x98>
    a2a8:	3001      	adds	r0, #1
    a2aa:	f415 7f80 	tst.w	r5, #256	; 0x100
    a2ae:	bf02      	ittt	eq
    a2b0:	3001      	addeq	r0, #1
    a2b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    a2b6:	3001      	addeq	r0, #1
    a2b8:	bcf0      	pop	{r4, r5, r6, r7}
    a2ba:	3801      	subs	r0, #1
    a2bc:	4770      	bx	lr
    a2be:	bf00      	nop

0000a2c0 <memcpy>:
    a2c0:	b510      	push	{r4, lr}
    a2c2:	1e43      	subs	r3, r0, #1
    a2c4:	440a      	add	r2, r1
    a2c6:	4291      	cmp	r1, r2
    a2c8:	d100      	bne.n	a2cc <memcpy+0xc>
    a2ca:	bd10      	pop	{r4, pc}
    a2cc:	f811 4b01 	ldrb.w	r4, [r1], #1
    a2d0:	f803 4f01 	strb.w	r4, [r3, #1]!
    a2d4:	e7f7      	b.n	a2c6 <memcpy+0x6>

0000a2d6 <_Balloc>:
    a2d6:	b570      	push	{r4, r5, r6, lr}
    a2d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
    a2da:	4604      	mov	r4, r0
    a2dc:	460e      	mov	r6, r1
    a2de:	b93d      	cbnz	r5, a2f0 <_Balloc+0x1a>
    a2e0:	2010      	movs	r0, #16
    a2e2:	f7ff ff91 	bl	a208 <malloc>
    a2e6:	6260      	str	r0, [r4, #36]	; 0x24
    a2e8:	6045      	str	r5, [r0, #4]
    a2ea:	6085      	str	r5, [r0, #8]
    a2ec:	6005      	str	r5, [r0, #0]
    a2ee:	60c5      	str	r5, [r0, #12]
    a2f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
    a2f2:	68eb      	ldr	r3, [r5, #12]
    a2f4:	b183      	cbz	r3, a318 <_Balloc+0x42>
    a2f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a2f8:	68db      	ldr	r3, [r3, #12]
    a2fa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
    a2fe:	b9b8      	cbnz	r0, a330 <_Balloc+0x5a>
    a300:	2101      	movs	r1, #1
    a302:	fa01 f506 	lsl.w	r5, r1, r6
    a306:	1d6a      	adds	r2, r5, #5
    a308:	0092      	lsls	r2, r2, #2
    a30a:	4620      	mov	r0, r4
    a30c:	f000 fab4 	bl	a878 <_calloc_r>
    a310:	b160      	cbz	r0, a32c <_Balloc+0x56>
    a312:	6046      	str	r6, [r0, #4]
    a314:	6085      	str	r5, [r0, #8]
    a316:	e00e      	b.n	a336 <_Balloc+0x60>
    a318:	2221      	movs	r2, #33	; 0x21
    a31a:	2104      	movs	r1, #4
    a31c:	4620      	mov	r0, r4
    a31e:	f000 faab 	bl	a878 <_calloc_r>
    a322:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a324:	60e8      	str	r0, [r5, #12]
    a326:	68db      	ldr	r3, [r3, #12]
    a328:	2b00      	cmp	r3, #0
    a32a:	d1e4      	bne.n	a2f6 <_Balloc+0x20>
    a32c:	2000      	movs	r0, #0
    a32e:	bd70      	pop	{r4, r5, r6, pc}
    a330:	6802      	ldr	r2, [r0, #0]
    a332:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    a336:	2300      	movs	r3, #0
    a338:	6103      	str	r3, [r0, #16]
    a33a:	60c3      	str	r3, [r0, #12]
    a33c:	bd70      	pop	{r4, r5, r6, pc}

0000a33e <_Bfree>:
    a33e:	b570      	push	{r4, r5, r6, lr}
    a340:	6a44      	ldr	r4, [r0, #36]	; 0x24
    a342:	4606      	mov	r6, r0
    a344:	460d      	mov	r5, r1
    a346:	b93c      	cbnz	r4, a358 <_Bfree+0x1a>
    a348:	2010      	movs	r0, #16
    a34a:	f7ff ff5d 	bl	a208 <malloc>
    a34e:	6270      	str	r0, [r6, #36]	; 0x24
    a350:	6044      	str	r4, [r0, #4]
    a352:	6084      	str	r4, [r0, #8]
    a354:	6004      	str	r4, [r0, #0]
    a356:	60c4      	str	r4, [r0, #12]
    a358:	b13d      	cbz	r5, a36a <_Bfree+0x2c>
    a35a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    a35c:	686a      	ldr	r2, [r5, #4]
    a35e:	68db      	ldr	r3, [r3, #12]
    a360:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    a364:	6029      	str	r1, [r5, #0]
    a366:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    a36a:	bd70      	pop	{r4, r5, r6, pc}

0000a36c <__multadd>:
    a36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a370:	690d      	ldr	r5, [r1, #16]
    a372:	461f      	mov	r7, r3
    a374:	4606      	mov	r6, r0
    a376:	460c      	mov	r4, r1
    a378:	f101 0e14 	add.w	lr, r1, #20
    a37c:	2300      	movs	r3, #0
    a37e:	f8de 0000 	ldr.w	r0, [lr]
    a382:	b281      	uxth	r1, r0
    a384:	fb02 7101 	mla	r1, r2, r1, r7
    a388:	0c0f      	lsrs	r7, r1, #16
    a38a:	0c00      	lsrs	r0, r0, #16
    a38c:	fb02 7000 	mla	r0, r2, r0, r7
    a390:	b289      	uxth	r1, r1
    a392:	3301      	adds	r3, #1
    a394:	eb01 4100 	add.w	r1, r1, r0, lsl #16
    a398:	429d      	cmp	r5, r3
    a39a:	ea4f 4710 	mov.w	r7, r0, lsr #16
    a39e:	f84e 1b04 	str.w	r1, [lr], #4
    a3a2:	dcec      	bgt.n	a37e <__multadd+0x12>
    a3a4:	b1d7      	cbz	r7, a3dc <__multadd+0x70>
    a3a6:	68a3      	ldr	r3, [r4, #8]
    a3a8:	429d      	cmp	r5, r3
    a3aa:	db12      	blt.n	a3d2 <__multadd+0x66>
    a3ac:	6861      	ldr	r1, [r4, #4]
    a3ae:	4630      	mov	r0, r6
    a3b0:	3101      	adds	r1, #1
    a3b2:	f7ff ff90 	bl	a2d6 <_Balloc>
    a3b6:	6922      	ldr	r2, [r4, #16]
    a3b8:	3202      	adds	r2, #2
    a3ba:	f104 010c 	add.w	r1, r4, #12
    a3be:	4680      	mov	r8, r0
    a3c0:	0092      	lsls	r2, r2, #2
    a3c2:	300c      	adds	r0, #12
    a3c4:	f7ff ff7c 	bl	a2c0 <memcpy>
    a3c8:	4621      	mov	r1, r4
    a3ca:	4630      	mov	r0, r6
    a3cc:	f7ff ffb7 	bl	a33e <_Bfree>
    a3d0:	4644      	mov	r4, r8
    a3d2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    a3d6:	3501      	adds	r5, #1
    a3d8:	615f      	str	r7, [r3, #20]
    a3da:	6125      	str	r5, [r4, #16]
    a3dc:	4620      	mov	r0, r4
    a3de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a3e2 <__hi0bits>:
    a3e2:	0c02      	lsrs	r2, r0, #16
    a3e4:	0412      	lsls	r2, r2, #16
    a3e6:	4603      	mov	r3, r0
    a3e8:	b9b2      	cbnz	r2, a418 <__hi0bits+0x36>
    a3ea:	0403      	lsls	r3, r0, #16
    a3ec:	2010      	movs	r0, #16
    a3ee:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    a3f2:	bf04      	itt	eq
    a3f4:	021b      	lsleq	r3, r3, #8
    a3f6:	3008      	addeq	r0, #8
    a3f8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    a3fc:	bf04      	itt	eq
    a3fe:	011b      	lsleq	r3, r3, #4
    a400:	3004      	addeq	r0, #4
    a402:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    a406:	bf04      	itt	eq
    a408:	009b      	lsleq	r3, r3, #2
    a40a:	3002      	addeq	r0, #2
    a40c:	2b00      	cmp	r3, #0
    a40e:	db06      	blt.n	a41e <__hi0bits+0x3c>
    a410:	005b      	lsls	r3, r3, #1
    a412:	d503      	bpl.n	a41c <__hi0bits+0x3a>
    a414:	3001      	adds	r0, #1
    a416:	4770      	bx	lr
    a418:	2000      	movs	r0, #0
    a41a:	e7e8      	b.n	a3ee <__hi0bits+0xc>
    a41c:	2020      	movs	r0, #32
    a41e:	4770      	bx	lr

0000a420 <__lo0bits>:
    a420:	6803      	ldr	r3, [r0, #0]
    a422:	f013 0207 	ands.w	r2, r3, #7
    a426:	4601      	mov	r1, r0
    a428:	d00b      	beq.n	a442 <__lo0bits+0x22>
    a42a:	07da      	lsls	r2, r3, #31
    a42c:	d423      	bmi.n	a476 <__lo0bits+0x56>
    a42e:	0798      	lsls	r0, r3, #30
    a430:	bf49      	itett	mi
    a432:	085b      	lsrmi	r3, r3, #1
    a434:	089b      	lsrpl	r3, r3, #2
    a436:	2001      	movmi	r0, #1
    a438:	600b      	strmi	r3, [r1, #0]
    a43a:	bf5c      	itt	pl
    a43c:	600b      	strpl	r3, [r1, #0]
    a43e:	2002      	movpl	r0, #2
    a440:	4770      	bx	lr
    a442:	b298      	uxth	r0, r3
    a444:	b9a8      	cbnz	r0, a472 <__lo0bits+0x52>
    a446:	0c1b      	lsrs	r3, r3, #16
    a448:	2010      	movs	r0, #16
    a44a:	f013 0fff 	tst.w	r3, #255	; 0xff
    a44e:	bf04      	itt	eq
    a450:	0a1b      	lsreq	r3, r3, #8
    a452:	3008      	addeq	r0, #8
    a454:	071a      	lsls	r2, r3, #28
    a456:	bf04      	itt	eq
    a458:	091b      	lsreq	r3, r3, #4
    a45a:	3004      	addeq	r0, #4
    a45c:	079a      	lsls	r2, r3, #30
    a45e:	bf04      	itt	eq
    a460:	089b      	lsreq	r3, r3, #2
    a462:	3002      	addeq	r0, #2
    a464:	07da      	lsls	r2, r3, #31
    a466:	d402      	bmi.n	a46e <__lo0bits+0x4e>
    a468:	085b      	lsrs	r3, r3, #1
    a46a:	d006      	beq.n	a47a <__lo0bits+0x5a>
    a46c:	3001      	adds	r0, #1
    a46e:	600b      	str	r3, [r1, #0]
    a470:	4770      	bx	lr
    a472:	4610      	mov	r0, r2
    a474:	e7e9      	b.n	a44a <__lo0bits+0x2a>
    a476:	2000      	movs	r0, #0
    a478:	4770      	bx	lr
    a47a:	2020      	movs	r0, #32
    a47c:	4770      	bx	lr

0000a47e <__i2b>:
    a47e:	b510      	push	{r4, lr}
    a480:	460c      	mov	r4, r1
    a482:	2101      	movs	r1, #1
    a484:	f7ff ff27 	bl	a2d6 <_Balloc>
    a488:	2201      	movs	r2, #1
    a48a:	6144      	str	r4, [r0, #20]
    a48c:	6102      	str	r2, [r0, #16]
    a48e:	bd10      	pop	{r4, pc}

0000a490 <__multiply>:
    a490:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a494:	4614      	mov	r4, r2
    a496:	690a      	ldr	r2, [r1, #16]
    a498:	6923      	ldr	r3, [r4, #16]
    a49a:	429a      	cmp	r2, r3
    a49c:	bfb8      	it	lt
    a49e:	460b      	movlt	r3, r1
    a4a0:	4689      	mov	r9, r1
    a4a2:	bfbc      	itt	lt
    a4a4:	46a1      	movlt	r9, r4
    a4a6:	461c      	movlt	r4, r3
    a4a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
    a4ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
    a4b0:	f8d9 3008 	ldr.w	r3, [r9, #8]
    a4b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
    a4b8:	eb07 060a 	add.w	r6, r7, sl
    a4bc:	429e      	cmp	r6, r3
    a4be:	bfc8      	it	gt
    a4c0:	3101      	addgt	r1, #1
    a4c2:	f7ff ff08 	bl	a2d6 <_Balloc>
    a4c6:	f100 0514 	add.w	r5, r0, #20
    a4ca:	eb05 0886 	add.w	r8, r5, r6, lsl #2
    a4ce:	462b      	mov	r3, r5
    a4d0:	2200      	movs	r2, #0
    a4d2:	4543      	cmp	r3, r8
    a4d4:	d316      	bcc.n	a504 <__multiply+0x74>
    a4d6:	f104 0214 	add.w	r2, r4, #20
    a4da:	f109 0114 	add.w	r1, r9, #20
    a4de:	eb02 038a 	add.w	r3, r2, sl, lsl #2
    a4e2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
    a4e6:	9301      	str	r3, [sp, #4]
    a4e8:	9c01      	ldr	r4, [sp, #4]
    a4ea:	4294      	cmp	r4, r2
    a4ec:	4613      	mov	r3, r2
    a4ee:	d80c      	bhi.n	a50a <__multiply+0x7a>
    a4f0:	2e00      	cmp	r6, #0
    a4f2:	dd03      	ble.n	a4fc <__multiply+0x6c>
    a4f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
    a4f8:	2b00      	cmp	r3, #0
    a4fa:	d054      	beq.n	a5a6 <__multiply+0x116>
    a4fc:	6106      	str	r6, [r0, #16]
    a4fe:	b003      	add	sp, #12
    a500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a504:	f843 2b04 	str.w	r2, [r3], #4
    a508:	e7e3      	b.n	a4d2 <__multiply+0x42>
    a50a:	f8b3 a000 	ldrh.w	sl, [r3]
    a50e:	3204      	adds	r2, #4
    a510:	f1ba 0f00 	cmp.w	sl, #0
    a514:	d020      	beq.n	a558 <__multiply+0xc8>
    a516:	46ae      	mov	lr, r5
    a518:	4689      	mov	r9, r1
    a51a:	f04f 0c00 	mov.w	ip, #0
    a51e:	f859 4b04 	ldr.w	r4, [r9], #4
    a522:	f8be b000 	ldrh.w	fp, [lr]
    a526:	b2a3      	uxth	r3, r4
    a528:	fb0a b303 	mla	r3, sl, r3, fp
    a52c:	ea4f 4b14 	mov.w	fp, r4, lsr #16
    a530:	f8de 4000 	ldr.w	r4, [lr]
    a534:	4463      	add	r3, ip
    a536:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    a53a:	fb0a c40b 	mla	r4, sl, fp, ip
    a53e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    a542:	b29b      	uxth	r3, r3
    a544:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    a548:	454f      	cmp	r7, r9
    a54a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    a54e:	f84e 3b04 	str.w	r3, [lr], #4
    a552:	d8e4      	bhi.n	a51e <__multiply+0x8e>
    a554:	f8ce c000 	str.w	ip, [lr]
    a558:	f832 9c02 	ldrh.w	r9, [r2, #-2]
    a55c:	f1b9 0f00 	cmp.w	r9, #0
    a560:	d01f      	beq.n	a5a2 <__multiply+0x112>
    a562:	682b      	ldr	r3, [r5, #0]
    a564:	46ae      	mov	lr, r5
    a566:	468c      	mov	ip, r1
    a568:	f04f 0a00 	mov.w	sl, #0
    a56c:	f8bc 4000 	ldrh.w	r4, [ip]
    a570:	f8be b002 	ldrh.w	fp, [lr, #2]
    a574:	fb09 b404 	mla	r4, r9, r4, fp
    a578:	44a2      	add	sl, r4
    a57a:	b29b      	uxth	r3, r3
    a57c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
    a580:	f84e 3b04 	str.w	r3, [lr], #4
    a584:	f85c 3b04 	ldr.w	r3, [ip], #4
    a588:	f8be 4000 	ldrh.w	r4, [lr]
    a58c:	0c1b      	lsrs	r3, r3, #16
    a58e:	fb09 4303 	mla	r3, r9, r3, r4
    a592:	eb03 431a 	add.w	r3, r3, sl, lsr #16
    a596:	4567      	cmp	r7, ip
    a598:	ea4f 4a13 	mov.w	sl, r3, lsr #16
    a59c:	d8e6      	bhi.n	a56c <__multiply+0xdc>
    a59e:	f8ce 3000 	str.w	r3, [lr]
    a5a2:	3504      	adds	r5, #4
    a5a4:	e7a0      	b.n	a4e8 <__multiply+0x58>
    a5a6:	3e01      	subs	r6, #1
    a5a8:	e7a2      	b.n	a4f0 <__multiply+0x60>
	...

0000a5ac <__pow5mult>:
    a5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a5b0:	4615      	mov	r5, r2
    a5b2:	f012 0203 	ands.w	r2, r2, #3
    a5b6:	4606      	mov	r6, r0
    a5b8:	460f      	mov	r7, r1
    a5ba:	d007      	beq.n	a5cc <__pow5mult+0x20>
    a5bc:	3a01      	subs	r2, #1
    a5be:	4c21      	ldr	r4, [pc, #132]	; (a644 <__pow5mult+0x98>)
    a5c0:	2300      	movs	r3, #0
    a5c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    a5c6:	f7ff fed1 	bl	a36c <__multadd>
    a5ca:	4607      	mov	r7, r0
    a5cc:	10ad      	asrs	r5, r5, #2
    a5ce:	d035      	beq.n	a63c <__pow5mult+0x90>
    a5d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
    a5d2:	b93c      	cbnz	r4, a5e4 <__pow5mult+0x38>
    a5d4:	2010      	movs	r0, #16
    a5d6:	f7ff fe17 	bl	a208 <malloc>
    a5da:	6270      	str	r0, [r6, #36]	; 0x24
    a5dc:	6044      	str	r4, [r0, #4]
    a5de:	6084      	str	r4, [r0, #8]
    a5e0:	6004      	str	r4, [r0, #0]
    a5e2:	60c4      	str	r4, [r0, #12]
    a5e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    a5e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
    a5ec:	b94c      	cbnz	r4, a602 <__pow5mult+0x56>
    a5ee:	f240 2171 	movw	r1, #625	; 0x271
    a5f2:	4630      	mov	r0, r6
    a5f4:	f7ff ff43 	bl	a47e <__i2b>
    a5f8:	2300      	movs	r3, #0
    a5fa:	f8c8 0008 	str.w	r0, [r8, #8]
    a5fe:	4604      	mov	r4, r0
    a600:	6003      	str	r3, [r0, #0]
    a602:	f04f 0800 	mov.w	r8, #0
    a606:	07eb      	lsls	r3, r5, #31
    a608:	d50a      	bpl.n	a620 <__pow5mult+0x74>
    a60a:	4639      	mov	r1, r7
    a60c:	4622      	mov	r2, r4
    a60e:	4630      	mov	r0, r6
    a610:	f7ff ff3e 	bl	a490 <__multiply>
    a614:	4639      	mov	r1, r7
    a616:	4681      	mov	r9, r0
    a618:	4630      	mov	r0, r6
    a61a:	f7ff fe90 	bl	a33e <_Bfree>
    a61e:	464f      	mov	r7, r9
    a620:	106d      	asrs	r5, r5, #1
    a622:	d00b      	beq.n	a63c <__pow5mult+0x90>
    a624:	6820      	ldr	r0, [r4, #0]
    a626:	b938      	cbnz	r0, a638 <__pow5mult+0x8c>
    a628:	4622      	mov	r2, r4
    a62a:	4621      	mov	r1, r4
    a62c:	4630      	mov	r0, r6
    a62e:	f7ff ff2f 	bl	a490 <__multiply>
    a632:	6020      	str	r0, [r4, #0]
    a634:	f8c0 8000 	str.w	r8, [r0]
    a638:	4604      	mov	r4, r0
    a63a:	e7e4      	b.n	a606 <__pow5mult+0x5a>
    a63c:	4638      	mov	r0, r7
    a63e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a642:	bf00      	nop
    a644:	0000c5d8 	.word	0x0000c5d8

0000a648 <__lshift>:
    a648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a64c:	460c      	mov	r4, r1
    a64e:	ea4f 1a62 	mov.w	sl, r2, asr #5
    a652:	6923      	ldr	r3, [r4, #16]
    a654:	6849      	ldr	r1, [r1, #4]
    a656:	eb0a 0903 	add.w	r9, sl, r3
    a65a:	68a3      	ldr	r3, [r4, #8]
    a65c:	4607      	mov	r7, r0
    a65e:	4616      	mov	r6, r2
    a660:	f109 0501 	add.w	r5, r9, #1
    a664:	42ab      	cmp	r3, r5
    a666:	db31      	blt.n	a6cc <__lshift+0x84>
    a668:	4638      	mov	r0, r7
    a66a:	f7ff fe34 	bl	a2d6 <_Balloc>
    a66e:	2200      	movs	r2, #0
    a670:	4680      	mov	r8, r0
    a672:	f100 0314 	add.w	r3, r0, #20
    a676:	4611      	mov	r1, r2
    a678:	4552      	cmp	r2, sl
    a67a:	db2a      	blt.n	a6d2 <__lshift+0x8a>
    a67c:	6920      	ldr	r0, [r4, #16]
    a67e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
    a682:	f104 0114 	add.w	r1, r4, #20
    a686:	f016 021f 	ands.w	r2, r6, #31
    a68a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
    a68e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
    a692:	d022      	beq.n	a6da <__lshift+0x92>
    a694:	f1c2 0c20 	rsb	ip, r2, #32
    a698:	2000      	movs	r0, #0
    a69a:	680e      	ldr	r6, [r1, #0]
    a69c:	4096      	lsls	r6, r2
    a69e:	4330      	orrs	r0, r6
    a6a0:	f843 0b04 	str.w	r0, [r3], #4
    a6a4:	f851 0b04 	ldr.w	r0, [r1], #4
    a6a8:	458e      	cmp	lr, r1
    a6aa:	fa20 f00c 	lsr.w	r0, r0, ip
    a6ae:	d8f4      	bhi.n	a69a <__lshift+0x52>
    a6b0:	6018      	str	r0, [r3, #0]
    a6b2:	b108      	cbz	r0, a6b8 <__lshift+0x70>
    a6b4:	f109 0502 	add.w	r5, r9, #2
    a6b8:	3d01      	subs	r5, #1
    a6ba:	4638      	mov	r0, r7
    a6bc:	f8c8 5010 	str.w	r5, [r8, #16]
    a6c0:	4621      	mov	r1, r4
    a6c2:	f7ff fe3c 	bl	a33e <_Bfree>
    a6c6:	4640      	mov	r0, r8
    a6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a6cc:	3101      	adds	r1, #1
    a6ce:	005b      	lsls	r3, r3, #1
    a6d0:	e7c8      	b.n	a664 <__lshift+0x1c>
    a6d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    a6d6:	3201      	adds	r2, #1
    a6d8:	e7ce      	b.n	a678 <__lshift+0x30>
    a6da:	3b04      	subs	r3, #4
    a6dc:	f851 2b04 	ldr.w	r2, [r1], #4
    a6e0:	f843 2f04 	str.w	r2, [r3, #4]!
    a6e4:	458e      	cmp	lr, r1
    a6e6:	d8f9      	bhi.n	a6dc <__lshift+0x94>
    a6e8:	e7e6      	b.n	a6b8 <__lshift+0x70>

0000a6ea <__mcmp>:
    a6ea:	6903      	ldr	r3, [r0, #16]
    a6ec:	690a      	ldr	r2, [r1, #16]
    a6ee:	1a9b      	subs	r3, r3, r2
    a6f0:	b530      	push	{r4, r5, lr}
    a6f2:	d10c      	bne.n	a70e <__mcmp+0x24>
    a6f4:	0092      	lsls	r2, r2, #2
    a6f6:	3014      	adds	r0, #20
    a6f8:	3114      	adds	r1, #20
    a6fa:	1884      	adds	r4, r0, r2
    a6fc:	4411      	add	r1, r2
    a6fe:	f854 5d04 	ldr.w	r5, [r4, #-4]!
    a702:	f851 2d04 	ldr.w	r2, [r1, #-4]!
    a706:	4295      	cmp	r5, r2
    a708:	d003      	beq.n	a712 <__mcmp+0x28>
    a70a:	d305      	bcc.n	a718 <__mcmp+0x2e>
    a70c:	2301      	movs	r3, #1
    a70e:	4618      	mov	r0, r3
    a710:	bd30      	pop	{r4, r5, pc}
    a712:	42a0      	cmp	r0, r4
    a714:	d3f3      	bcc.n	a6fe <__mcmp+0x14>
    a716:	e7fa      	b.n	a70e <__mcmp+0x24>
    a718:	f04f 33ff 	mov.w	r3, #4294967295
    a71c:	e7f7      	b.n	a70e <__mcmp+0x24>

0000a71e <__mdiff>:
    a71e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a722:	460d      	mov	r5, r1
    a724:	4607      	mov	r7, r0
    a726:	4611      	mov	r1, r2
    a728:	4628      	mov	r0, r5
    a72a:	4614      	mov	r4, r2
    a72c:	f7ff ffdd 	bl	a6ea <__mcmp>
    a730:	1e06      	subs	r6, r0, #0
    a732:	d108      	bne.n	a746 <__mdiff+0x28>
    a734:	4631      	mov	r1, r6
    a736:	4638      	mov	r0, r7
    a738:	f7ff fdcd 	bl	a2d6 <_Balloc>
    a73c:	2301      	movs	r3, #1
    a73e:	6103      	str	r3, [r0, #16]
    a740:	6146      	str	r6, [r0, #20]
    a742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a746:	bfa4      	itt	ge
    a748:	4623      	movge	r3, r4
    a74a:	462c      	movge	r4, r5
    a74c:	4638      	mov	r0, r7
    a74e:	6861      	ldr	r1, [r4, #4]
    a750:	bfa6      	itte	ge
    a752:	461d      	movge	r5, r3
    a754:	2600      	movge	r6, #0
    a756:	2601      	movlt	r6, #1
    a758:	f7ff fdbd 	bl	a2d6 <_Balloc>
    a75c:	692b      	ldr	r3, [r5, #16]
    a75e:	60c6      	str	r6, [r0, #12]
    a760:	6926      	ldr	r6, [r4, #16]
    a762:	f105 0914 	add.w	r9, r5, #20
    a766:	f104 0214 	add.w	r2, r4, #20
    a76a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
    a76e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
    a772:	f100 0514 	add.w	r5, r0, #20
    a776:	f04f 0c00 	mov.w	ip, #0
    a77a:	f852 ab04 	ldr.w	sl, [r2], #4
    a77e:	f859 4b04 	ldr.w	r4, [r9], #4
    a782:	fa1c f18a 	uxtah	r1, ip, sl
    a786:	b2a3      	uxth	r3, r4
    a788:	1ac9      	subs	r1, r1, r3
    a78a:	0c23      	lsrs	r3, r4, #16
    a78c:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
    a790:	eb03 4321 	add.w	r3, r3, r1, asr #16
    a794:	b289      	uxth	r1, r1
    a796:	ea4f 4c23 	mov.w	ip, r3, asr #16
    a79a:	45c8      	cmp	r8, r9
    a79c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    a7a0:	4696      	mov	lr, r2
    a7a2:	f845 3b04 	str.w	r3, [r5], #4
    a7a6:	d8e8      	bhi.n	a77a <__mdiff+0x5c>
    a7a8:	45be      	cmp	lr, r7
    a7aa:	d305      	bcc.n	a7b8 <__mdiff+0x9a>
    a7ac:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    a7b0:	b18b      	cbz	r3, a7d6 <__mdiff+0xb8>
    a7b2:	6106      	str	r6, [r0, #16]
    a7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a7b8:	f85e 1b04 	ldr.w	r1, [lr], #4
    a7bc:	fa1c f381 	uxtah	r3, ip, r1
    a7c0:	141a      	asrs	r2, r3, #16
    a7c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
    a7c6:	b29b      	uxth	r3, r3
    a7c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    a7cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
    a7d0:	f845 3b04 	str.w	r3, [r5], #4
    a7d4:	e7e8      	b.n	a7a8 <__mdiff+0x8a>
    a7d6:	3e01      	subs	r6, #1
    a7d8:	e7e8      	b.n	a7ac <__mdiff+0x8e>

0000a7da <__d2b>:
    a7da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a7de:	2101      	movs	r1, #1
    a7e0:	461c      	mov	r4, r3
    a7e2:	4690      	mov	r8, r2
    a7e4:	9e08      	ldr	r6, [sp, #32]
    a7e6:	9d09      	ldr	r5, [sp, #36]	; 0x24
    a7e8:	f7ff fd75 	bl	a2d6 <_Balloc>
    a7ec:	f3c4 0213 	ubfx	r2, r4, #0, #20
    a7f0:	f3c4 540a 	ubfx	r4, r4, #20, #11
    a7f4:	4607      	mov	r7, r0
    a7f6:	bb34      	cbnz	r4, a846 <__d2b+0x6c>
    a7f8:	9201      	str	r2, [sp, #4]
    a7fa:	f1b8 0f00 	cmp.w	r8, #0
    a7fe:	d027      	beq.n	a850 <__d2b+0x76>
    a800:	a802      	add	r0, sp, #8
    a802:	f840 8d08 	str.w	r8, [r0, #-8]!
    a806:	f7ff fe0b 	bl	a420 <__lo0bits>
    a80a:	9900      	ldr	r1, [sp, #0]
    a80c:	b1f0      	cbz	r0, a84c <__d2b+0x72>
    a80e:	9a01      	ldr	r2, [sp, #4]
    a810:	f1c0 0320 	rsb	r3, r0, #32
    a814:	fa02 f303 	lsl.w	r3, r2, r3
    a818:	430b      	orrs	r3, r1
    a81a:	40c2      	lsrs	r2, r0
    a81c:	617b      	str	r3, [r7, #20]
    a81e:	9201      	str	r2, [sp, #4]
    a820:	9b01      	ldr	r3, [sp, #4]
    a822:	61bb      	str	r3, [r7, #24]
    a824:	2b00      	cmp	r3, #0
    a826:	bf14      	ite	ne
    a828:	2102      	movne	r1, #2
    a82a:	2101      	moveq	r1, #1
    a82c:	6139      	str	r1, [r7, #16]
    a82e:	b1c4      	cbz	r4, a862 <__d2b+0x88>
    a830:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
    a834:	4404      	add	r4, r0
    a836:	6034      	str	r4, [r6, #0]
    a838:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    a83c:	6028      	str	r0, [r5, #0]
    a83e:	4638      	mov	r0, r7
    a840:	b002      	add	sp, #8
    a842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a846:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    a84a:	e7d5      	b.n	a7f8 <__d2b+0x1e>
    a84c:	6179      	str	r1, [r7, #20]
    a84e:	e7e7      	b.n	a820 <__d2b+0x46>
    a850:	a801      	add	r0, sp, #4
    a852:	f7ff fde5 	bl	a420 <__lo0bits>
    a856:	9b01      	ldr	r3, [sp, #4]
    a858:	617b      	str	r3, [r7, #20]
    a85a:	2101      	movs	r1, #1
    a85c:	6139      	str	r1, [r7, #16]
    a85e:	3020      	adds	r0, #32
    a860:	e7e5      	b.n	a82e <__d2b+0x54>
    a862:	eb07 0381 	add.w	r3, r7, r1, lsl #2
    a866:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    a86a:	6030      	str	r0, [r6, #0]
    a86c:	6918      	ldr	r0, [r3, #16]
    a86e:	f7ff fdb8 	bl	a3e2 <__hi0bits>
    a872:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    a876:	e7e1      	b.n	a83c <__d2b+0x62>

0000a878 <_calloc_r>:
    a878:	b538      	push	{r3, r4, r5, lr}
    a87a:	fb02 f401 	mul.w	r4, r2, r1
    a87e:	4621      	mov	r1, r4
    a880:	f000 f856 	bl	a930 <_malloc_r>
    a884:	4605      	mov	r5, r0
    a886:	b118      	cbz	r0, a890 <_calloc_r+0x18>
    a888:	4622      	mov	r2, r4
    a88a:	2100      	movs	r1, #0
    a88c:	f7fd ff0c 	bl	86a8 <memset>
    a890:	4628      	mov	r0, r5
    a892:	bd38      	pop	{r3, r4, r5, pc}

0000a894 <_free_r>:
    a894:	b538      	push	{r3, r4, r5, lr}
    a896:	4605      	mov	r5, r0
    a898:	2900      	cmp	r1, #0
    a89a:	d045      	beq.n	a928 <_free_r+0x94>
    a89c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    a8a0:	1f0c      	subs	r4, r1, #4
    a8a2:	2b00      	cmp	r3, #0
    a8a4:	bfb8      	it	lt
    a8a6:	18e4      	addlt	r4, r4, r3
    a8a8:	f000 fcc4 	bl	b234 <__malloc_lock>
    a8ac:	4a1f      	ldr	r2, [pc, #124]	; (a92c <_free_r+0x98>)
    a8ae:	6813      	ldr	r3, [r2, #0]
    a8b0:	4610      	mov	r0, r2
    a8b2:	b933      	cbnz	r3, a8c2 <_free_r+0x2e>
    a8b4:	6063      	str	r3, [r4, #4]
    a8b6:	6014      	str	r4, [r2, #0]
    a8b8:	4628      	mov	r0, r5
    a8ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a8be:	f000 bcba 	b.w	b236 <__malloc_unlock>
    a8c2:	42a3      	cmp	r3, r4
    a8c4:	d90c      	bls.n	a8e0 <_free_r+0x4c>
    a8c6:	6821      	ldr	r1, [r4, #0]
    a8c8:	1862      	adds	r2, r4, r1
    a8ca:	4293      	cmp	r3, r2
    a8cc:	bf04      	itt	eq
    a8ce:	681a      	ldreq	r2, [r3, #0]
    a8d0:	685b      	ldreq	r3, [r3, #4]
    a8d2:	6063      	str	r3, [r4, #4]
    a8d4:	bf04      	itt	eq
    a8d6:	1852      	addeq	r2, r2, r1
    a8d8:	6022      	streq	r2, [r4, #0]
    a8da:	6004      	str	r4, [r0, #0]
    a8dc:	e7ec      	b.n	a8b8 <_free_r+0x24>
    a8de:	4613      	mov	r3, r2
    a8e0:	685a      	ldr	r2, [r3, #4]
    a8e2:	b10a      	cbz	r2, a8e8 <_free_r+0x54>
    a8e4:	42a2      	cmp	r2, r4
    a8e6:	d9fa      	bls.n	a8de <_free_r+0x4a>
    a8e8:	6819      	ldr	r1, [r3, #0]
    a8ea:	1858      	adds	r0, r3, r1
    a8ec:	42a0      	cmp	r0, r4
    a8ee:	d10b      	bne.n	a908 <_free_r+0x74>
    a8f0:	6820      	ldr	r0, [r4, #0]
    a8f2:	4401      	add	r1, r0
    a8f4:	1858      	adds	r0, r3, r1
    a8f6:	4282      	cmp	r2, r0
    a8f8:	6019      	str	r1, [r3, #0]
    a8fa:	d1dd      	bne.n	a8b8 <_free_r+0x24>
    a8fc:	6810      	ldr	r0, [r2, #0]
    a8fe:	6852      	ldr	r2, [r2, #4]
    a900:	605a      	str	r2, [r3, #4]
    a902:	4401      	add	r1, r0
    a904:	6019      	str	r1, [r3, #0]
    a906:	e7d7      	b.n	a8b8 <_free_r+0x24>
    a908:	d902      	bls.n	a910 <_free_r+0x7c>
    a90a:	230c      	movs	r3, #12
    a90c:	602b      	str	r3, [r5, #0]
    a90e:	e7d3      	b.n	a8b8 <_free_r+0x24>
    a910:	6820      	ldr	r0, [r4, #0]
    a912:	1821      	adds	r1, r4, r0
    a914:	428a      	cmp	r2, r1
    a916:	bf04      	itt	eq
    a918:	6811      	ldreq	r1, [r2, #0]
    a91a:	6852      	ldreq	r2, [r2, #4]
    a91c:	6062      	str	r2, [r4, #4]
    a91e:	bf04      	itt	eq
    a920:	1809      	addeq	r1, r1, r0
    a922:	6021      	streq	r1, [r4, #0]
    a924:	605c      	str	r4, [r3, #4]
    a926:	e7c7      	b.n	a8b8 <_free_r+0x24>
    a928:	bd38      	pop	{r3, r4, r5, pc}
    a92a:	bf00      	nop
    a92c:	20000364 	.word	0x20000364

0000a930 <_malloc_r>:
    a930:	b570      	push	{r4, r5, r6, lr}
    a932:	1ccd      	adds	r5, r1, #3
    a934:	f025 0503 	bic.w	r5, r5, #3
    a938:	3508      	adds	r5, #8
    a93a:	2d0c      	cmp	r5, #12
    a93c:	bf38      	it	cc
    a93e:	250c      	movcc	r5, #12
    a940:	2d00      	cmp	r5, #0
    a942:	4606      	mov	r6, r0
    a944:	db01      	blt.n	a94a <_malloc_r+0x1a>
    a946:	42a9      	cmp	r1, r5
    a948:	d903      	bls.n	a952 <_malloc_r+0x22>
    a94a:	230c      	movs	r3, #12
    a94c:	6033      	str	r3, [r6, #0]
    a94e:	2000      	movs	r0, #0
    a950:	bd70      	pop	{r4, r5, r6, pc}
    a952:	f000 fc6f 	bl	b234 <__malloc_lock>
    a956:	4a23      	ldr	r2, [pc, #140]	; (a9e4 <_malloc_r+0xb4>)
    a958:	6814      	ldr	r4, [r2, #0]
    a95a:	4621      	mov	r1, r4
    a95c:	b991      	cbnz	r1, a984 <_malloc_r+0x54>
    a95e:	4c22      	ldr	r4, [pc, #136]	; (a9e8 <_malloc_r+0xb8>)
    a960:	6823      	ldr	r3, [r4, #0]
    a962:	b91b      	cbnz	r3, a96c <_malloc_r+0x3c>
    a964:	4630      	mov	r0, r6
    a966:	f000 facf 	bl	af08 <_sbrk_r>
    a96a:	6020      	str	r0, [r4, #0]
    a96c:	4629      	mov	r1, r5
    a96e:	4630      	mov	r0, r6
    a970:	f000 faca 	bl	af08 <_sbrk_r>
    a974:	1c43      	adds	r3, r0, #1
    a976:	d126      	bne.n	a9c6 <_malloc_r+0x96>
    a978:	230c      	movs	r3, #12
    a97a:	6033      	str	r3, [r6, #0]
    a97c:	4630      	mov	r0, r6
    a97e:	f000 fc5a 	bl	b236 <__malloc_unlock>
    a982:	e7e4      	b.n	a94e <_malloc_r+0x1e>
    a984:	680b      	ldr	r3, [r1, #0]
    a986:	1b5b      	subs	r3, r3, r5
    a988:	d41a      	bmi.n	a9c0 <_malloc_r+0x90>
    a98a:	2b0b      	cmp	r3, #11
    a98c:	d90f      	bls.n	a9ae <_malloc_r+0x7e>
    a98e:	600b      	str	r3, [r1, #0]
    a990:	50cd      	str	r5, [r1, r3]
    a992:	18cc      	adds	r4, r1, r3
    a994:	4630      	mov	r0, r6
    a996:	f000 fc4e 	bl	b236 <__malloc_unlock>
    a99a:	f104 000b 	add.w	r0, r4, #11
    a99e:	1d23      	adds	r3, r4, #4
    a9a0:	f020 0007 	bic.w	r0, r0, #7
    a9a4:	1ac3      	subs	r3, r0, r3
    a9a6:	d01b      	beq.n	a9e0 <_malloc_r+0xb0>
    a9a8:	425a      	negs	r2, r3
    a9aa:	50e2      	str	r2, [r4, r3]
    a9ac:	bd70      	pop	{r4, r5, r6, pc}
    a9ae:	428c      	cmp	r4, r1
    a9b0:	bf0d      	iteet	eq
    a9b2:	6863      	ldreq	r3, [r4, #4]
    a9b4:	684b      	ldrne	r3, [r1, #4]
    a9b6:	6063      	strne	r3, [r4, #4]
    a9b8:	6013      	streq	r3, [r2, #0]
    a9ba:	bf18      	it	ne
    a9bc:	460c      	movne	r4, r1
    a9be:	e7e9      	b.n	a994 <_malloc_r+0x64>
    a9c0:	460c      	mov	r4, r1
    a9c2:	6849      	ldr	r1, [r1, #4]
    a9c4:	e7ca      	b.n	a95c <_malloc_r+0x2c>
    a9c6:	1cc4      	adds	r4, r0, #3
    a9c8:	f024 0403 	bic.w	r4, r4, #3
    a9cc:	42a0      	cmp	r0, r4
    a9ce:	d005      	beq.n	a9dc <_malloc_r+0xac>
    a9d0:	1a21      	subs	r1, r4, r0
    a9d2:	4630      	mov	r0, r6
    a9d4:	f000 fa98 	bl	af08 <_sbrk_r>
    a9d8:	3001      	adds	r0, #1
    a9da:	d0cd      	beq.n	a978 <_malloc_r+0x48>
    a9dc:	6025      	str	r5, [r4, #0]
    a9de:	e7d9      	b.n	a994 <_malloc_r+0x64>
    a9e0:	bd70      	pop	{r4, r5, r6, pc}
    a9e2:	bf00      	nop
    a9e4:	20000364 	.word	0x20000364
    a9e8:	20000368 	.word	0x20000368

0000a9ec <__ssputs_r>:
    a9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a9f0:	688e      	ldr	r6, [r1, #8]
    a9f2:	429e      	cmp	r6, r3
    a9f4:	4682      	mov	sl, r0
    a9f6:	460c      	mov	r4, r1
    a9f8:	4691      	mov	r9, r2
    a9fa:	4698      	mov	r8, r3
    a9fc:	d835      	bhi.n	aa6a <__ssputs_r+0x7e>
    a9fe:	898a      	ldrh	r2, [r1, #12]
    aa00:	f412 6f90 	tst.w	r2, #1152	; 0x480
    aa04:	d031      	beq.n	aa6a <__ssputs_r+0x7e>
    aa06:	6825      	ldr	r5, [r4, #0]
    aa08:	6909      	ldr	r1, [r1, #16]
    aa0a:	1a6f      	subs	r7, r5, r1
    aa0c:	6965      	ldr	r5, [r4, #20]
    aa0e:	2302      	movs	r3, #2
    aa10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    aa14:	fb95 f5f3 	sdiv	r5, r5, r3
    aa18:	f108 0301 	add.w	r3, r8, #1
    aa1c:	443b      	add	r3, r7
    aa1e:	429d      	cmp	r5, r3
    aa20:	bf38      	it	cc
    aa22:	461d      	movcc	r5, r3
    aa24:	0553      	lsls	r3, r2, #21
    aa26:	d531      	bpl.n	aa8c <__ssputs_r+0xa0>
    aa28:	4629      	mov	r1, r5
    aa2a:	f7ff ff81 	bl	a930 <_malloc_r>
    aa2e:	4606      	mov	r6, r0
    aa30:	b950      	cbnz	r0, aa48 <__ssputs_r+0x5c>
    aa32:	230c      	movs	r3, #12
    aa34:	f8ca 3000 	str.w	r3, [sl]
    aa38:	89a3      	ldrh	r3, [r4, #12]
    aa3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    aa3e:	81a3      	strh	r3, [r4, #12]
    aa40:	f04f 30ff 	mov.w	r0, #4294967295
    aa44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aa48:	463a      	mov	r2, r7
    aa4a:	6921      	ldr	r1, [r4, #16]
    aa4c:	f7ff fc38 	bl	a2c0 <memcpy>
    aa50:	89a3      	ldrh	r3, [r4, #12]
    aa52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    aa56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    aa5a:	81a3      	strh	r3, [r4, #12]
    aa5c:	6126      	str	r6, [r4, #16]
    aa5e:	6165      	str	r5, [r4, #20]
    aa60:	443e      	add	r6, r7
    aa62:	1bed      	subs	r5, r5, r7
    aa64:	6026      	str	r6, [r4, #0]
    aa66:	60a5      	str	r5, [r4, #8]
    aa68:	4646      	mov	r6, r8
    aa6a:	4546      	cmp	r6, r8
    aa6c:	bf28      	it	cs
    aa6e:	4646      	movcs	r6, r8
    aa70:	4632      	mov	r2, r6
    aa72:	4649      	mov	r1, r9
    aa74:	6820      	ldr	r0, [r4, #0]
    aa76:	f000 fbc3 	bl	b200 <memmove>
    aa7a:	68a3      	ldr	r3, [r4, #8]
    aa7c:	1b9b      	subs	r3, r3, r6
    aa7e:	60a3      	str	r3, [r4, #8]
    aa80:	6823      	ldr	r3, [r4, #0]
    aa82:	441e      	add	r6, r3
    aa84:	6026      	str	r6, [r4, #0]
    aa86:	2000      	movs	r0, #0
    aa88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aa8c:	462a      	mov	r2, r5
    aa8e:	f000 fbd3 	bl	b238 <_realloc_r>
    aa92:	4606      	mov	r6, r0
    aa94:	2800      	cmp	r0, #0
    aa96:	d1e1      	bne.n	aa5c <__ssputs_r+0x70>
    aa98:	6921      	ldr	r1, [r4, #16]
    aa9a:	4650      	mov	r0, sl
    aa9c:	f7ff fefa 	bl	a894 <_free_r>
    aaa0:	e7c7      	b.n	aa32 <__ssputs_r+0x46>
	...

0000aaa4 <_svfiprintf_r>:
    aaa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aaa8:	b09d      	sub	sp, #116	; 0x74
    aaaa:	4680      	mov	r8, r0
    aaac:	9303      	str	r3, [sp, #12]
    aaae:	898b      	ldrh	r3, [r1, #12]
    aab0:	061c      	lsls	r4, r3, #24
    aab2:	460d      	mov	r5, r1
    aab4:	4616      	mov	r6, r2
    aab6:	d50f      	bpl.n	aad8 <_svfiprintf_r+0x34>
    aab8:	690b      	ldr	r3, [r1, #16]
    aaba:	b96b      	cbnz	r3, aad8 <_svfiprintf_r+0x34>
    aabc:	2140      	movs	r1, #64	; 0x40
    aabe:	f7ff ff37 	bl	a930 <_malloc_r>
    aac2:	6028      	str	r0, [r5, #0]
    aac4:	6128      	str	r0, [r5, #16]
    aac6:	b928      	cbnz	r0, aad4 <_svfiprintf_r+0x30>
    aac8:	230c      	movs	r3, #12
    aaca:	f8c8 3000 	str.w	r3, [r8]
    aace:	f04f 30ff 	mov.w	r0, #4294967295
    aad2:	e0c5      	b.n	ac60 <_svfiprintf_r+0x1bc>
    aad4:	2340      	movs	r3, #64	; 0x40
    aad6:	616b      	str	r3, [r5, #20]
    aad8:	2300      	movs	r3, #0
    aada:	9309      	str	r3, [sp, #36]	; 0x24
    aadc:	2320      	movs	r3, #32
    aade:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    aae2:	2330      	movs	r3, #48	; 0x30
    aae4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    aae8:	f04f 0b01 	mov.w	fp, #1
    aaec:	4637      	mov	r7, r6
    aaee:	463c      	mov	r4, r7
    aaf0:	f814 3b01 	ldrb.w	r3, [r4], #1
    aaf4:	2b00      	cmp	r3, #0
    aaf6:	d13c      	bne.n	ab72 <_svfiprintf_r+0xce>
    aaf8:	ebb7 0a06 	subs.w	sl, r7, r6
    aafc:	d00b      	beq.n	ab16 <_svfiprintf_r+0x72>
    aafe:	4653      	mov	r3, sl
    ab00:	4632      	mov	r2, r6
    ab02:	4629      	mov	r1, r5
    ab04:	4640      	mov	r0, r8
    ab06:	f7ff ff71 	bl	a9ec <__ssputs_r>
    ab0a:	3001      	adds	r0, #1
    ab0c:	f000 80a3 	beq.w	ac56 <_svfiprintf_r+0x1b2>
    ab10:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ab12:	4453      	add	r3, sl
    ab14:	9309      	str	r3, [sp, #36]	; 0x24
    ab16:	783b      	ldrb	r3, [r7, #0]
    ab18:	2b00      	cmp	r3, #0
    ab1a:	f000 809c 	beq.w	ac56 <_svfiprintf_r+0x1b2>
    ab1e:	2300      	movs	r3, #0
    ab20:	f04f 32ff 	mov.w	r2, #4294967295
    ab24:	9304      	str	r3, [sp, #16]
    ab26:	9307      	str	r3, [sp, #28]
    ab28:	9205      	str	r2, [sp, #20]
    ab2a:	9306      	str	r3, [sp, #24]
    ab2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    ab30:	931a      	str	r3, [sp, #104]	; 0x68
    ab32:	2205      	movs	r2, #5
    ab34:	7821      	ldrb	r1, [r4, #0]
    ab36:	4850      	ldr	r0, [pc, #320]	; (ac78 <_svfiprintf_r+0x1d4>)
    ab38:	f7ff fb72 	bl	a220 <memchr>
    ab3c:	1c67      	adds	r7, r4, #1
    ab3e:	9b04      	ldr	r3, [sp, #16]
    ab40:	b9d8      	cbnz	r0, ab7a <_svfiprintf_r+0xd6>
    ab42:	06d9      	lsls	r1, r3, #27
    ab44:	bf44      	itt	mi
    ab46:	2220      	movmi	r2, #32
    ab48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    ab4c:	071a      	lsls	r2, r3, #28
    ab4e:	bf44      	itt	mi
    ab50:	222b      	movmi	r2, #43	; 0x2b
    ab52:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    ab56:	7822      	ldrb	r2, [r4, #0]
    ab58:	2a2a      	cmp	r2, #42	; 0x2a
    ab5a:	d016      	beq.n	ab8a <_svfiprintf_r+0xe6>
    ab5c:	9a07      	ldr	r2, [sp, #28]
    ab5e:	2100      	movs	r1, #0
    ab60:	200a      	movs	r0, #10
    ab62:	4627      	mov	r7, r4
    ab64:	3401      	adds	r4, #1
    ab66:	783b      	ldrb	r3, [r7, #0]
    ab68:	3b30      	subs	r3, #48	; 0x30
    ab6a:	2b09      	cmp	r3, #9
    ab6c:	d951      	bls.n	ac12 <_svfiprintf_r+0x16e>
    ab6e:	b1c9      	cbz	r1, aba4 <_svfiprintf_r+0x100>
    ab70:	e011      	b.n	ab96 <_svfiprintf_r+0xf2>
    ab72:	2b25      	cmp	r3, #37	; 0x25
    ab74:	d0c0      	beq.n	aaf8 <_svfiprintf_r+0x54>
    ab76:	4627      	mov	r7, r4
    ab78:	e7b9      	b.n	aaee <_svfiprintf_r+0x4a>
    ab7a:	4a3f      	ldr	r2, [pc, #252]	; (ac78 <_svfiprintf_r+0x1d4>)
    ab7c:	1a80      	subs	r0, r0, r2
    ab7e:	fa0b f000 	lsl.w	r0, fp, r0
    ab82:	4318      	orrs	r0, r3
    ab84:	9004      	str	r0, [sp, #16]
    ab86:	463c      	mov	r4, r7
    ab88:	e7d3      	b.n	ab32 <_svfiprintf_r+0x8e>
    ab8a:	9a03      	ldr	r2, [sp, #12]
    ab8c:	1d11      	adds	r1, r2, #4
    ab8e:	6812      	ldr	r2, [r2, #0]
    ab90:	9103      	str	r1, [sp, #12]
    ab92:	2a00      	cmp	r2, #0
    ab94:	db01      	blt.n	ab9a <_svfiprintf_r+0xf6>
    ab96:	9207      	str	r2, [sp, #28]
    ab98:	e004      	b.n	aba4 <_svfiprintf_r+0x100>
    ab9a:	4252      	negs	r2, r2
    ab9c:	f043 0302 	orr.w	r3, r3, #2
    aba0:	9207      	str	r2, [sp, #28]
    aba2:	9304      	str	r3, [sp, #16]
    aba4:	783b      	ldrb	r3, [r7, #0]
    aba6:	2b2e      	cmp	r3, #46	; 0x2e
    aba8:	d10e      	bne.n	abc8 <_svfiprintf_r+0x124>
    abaa:	787b      	ldrb	r3, [r7, #1]
    abac:	2b2a      	cmp	r3, #42	; 0x2a
    abae:	f107 0101 	add.w	r1, r7, #1
    abb2:	d132      	bne.n	ac1a <_svfiprintf_r+0x176>
    abb4:	9b03      	ldr	r3, [sp, #12]
    abb6:	1d1a      	adds	r2, r3, #4
    abb8:	681b      	ldr	r3, [r3, #0]
    abba:	9203      	str	r2, [sp, #12]
    abbc:	2b00      	cmp	r3, #0
    abbe:	bfb8      	it	lt
    abc0:	f04f 33ff 	movlt.w	r3, #4294967295
    abc4:	3702      	adds	r7, #2
    abc6:	9305      	str	r3, [sp, #20]
    abc8:	4c2c      	ldr	r4, [pc, #176]	; (ac7c <_svfiprintf_r+0x1d8>)
    abca:	7839      	ldrb	r1, [r7, #0]
    abcc:	2203      	movs	r2, #3
    abce:	4620      	mov	r0, r4
    abd0:	f7ff fb26 	bl	a220 <memchr>
    abd4:	b138      	cbz	r0, abe6 <_svfiprintf_r+0x142>
    abd6:	2340      	movs	r3, #64	; 0x40
    abd8:	1b00      	subs	r0, r0, r4
    abda:	fa03 f000 	lsl.w	r0, r3, r0
    abde:	9b04      	ldr	r3, [sp, #16]
    abe0:	4303      	orrs	r3, r0
    abe2:	9304      	str	r3, [sp, #16]
    abe4:	3701      	adds	r7, #1
    abe6:	7839      	ldrb	r1, [r7, #0]
    abe8:	4825      	ldr	r0, [pc, #148]	; (ac80 <_svfiprintf_r+0x1dc>)
    abea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    abee:	2206      	movs	r2, #6
    abf0:	1c7e      	adds	r6, r7, #1
    abf2:	f7ff fb15 	bl	a220 <memchr>
    abf6:	2800      	cmp	r0, #0
    abf8:	d035      	beq.n	ac66 <_svfiprintf_r+0x1c2>
    abfa:	4b22      	ldr	r3, [pc, #136]	; (ac84 <_svfiprintf_r+0x1e0>)
    abfc:	b9fb      	cbnz	r3, ac3e <_svfiprintf_r+0x19a>
    abfe:	9b03      	ldr	r3, [sp, #12]
    ac00:	3307      	adds	r3, #7
    ac02:	f023 0307 	bic.w	r3, r3, #7
    ac06:	3308      	adds	r3, #8
    ac08:	9303      	str	r3, [sp, #12]
    ac0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ac0c:	444b      	add	r3, r9
    ac0e:	9309      	str	r3, [sp, #36]	; 0x24
    ac10:	e76c      	b.n	aaec <_svfiprintf_r+0x48>
    ac12:	fb00 3202 	mla	r2, r0, r2, r3
    ac16:	2101      	movs	r1, #1
    ac18:	e7a3      	b.n	ab62 <_svfiprintf_r+0xbe>
    ac1a:	2300      	movs	r3, #0
    ac1c:	9305      	str	r3, [sp, #20]
    ac1e:	4618      	mov	r0, r3
    ac20:	240a      	movs	r4, #10
    ac22:	460f      	mov	r7, r1
    ac24:	3101      	adds	r1, #1
    ac26:	783a      	ldrb	r2, [r7, #0]
    ac28:	3a30      	subs	r2, #48	; 0x30
    ac2a:	2a09      	cmp	r2, #9
    ac2c:	d903      	bls.n	ac36 <_svfiprintf_r+0x192>
    ac2e:	2b00      	cmp	r3, #0
    ac30:	d0ca      	beq.n	abc8 <_svfiprintf_r+0x124>
    ac32:	9005      	str	r0, [sp, #20]
    ac34:	e7c8      	b.n	abc8 <_svfiprintf_r+0x124>
    ac36:	fb04 2000 	mla	r0, r4, r0, r2
    ac3a:	2301      	movs	r3, #1
    ac3c:	e7f1      	b.n	ac22 <_svfiprintf_r+0x17e>
    ac3e:	ab03      	add	r3, sp, #12
    ac40:	9300      	str	r3, [sp, #0]
    ac42:	462a      	mov	r2, r5
    ac44:	4b10      	ldr	r3, [pc, #64]	; (ac88 <_svfiprintf_r+0x1e4>)
    ac46:	a904      	add	r1, sp, #16
    ac48:	4640      	mov	r0, r8
    ac4a:	f7fd fdc7 	bl	87dc <_printf_float>
    ac4e:	f1b0 3fff 	cmp.w	r0, #4294967295
    ac52:	4681      	mov	r9, r0
    ac54:	d1d9      	bne.n	ac0a <_svfiprintf_r+0x166>
    ac56:	89ab      	ldrh	r3, [r5, #12]
    ac58:	065b      	lsls	r3, r3, #25
    ac5a:	f53f af38 	bmi.w	aace <_svfiprintf_r+0x2a>
    ac5e:	9809      	ldr	r0, [sp, #36]	; 0x24
    ac60:	b01d      	add	sp, #116	; 0x74
    ac62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac66:	ab03      	add	r3, sp, #12
    ac68:	9300      	str	r3, [sp, #0]
    ac6a:	462a      	mov	r2, r5
    ac6c:	4b06      	ldr	r3, [pc, #24]	; (ac88 <_svfiprintf_r+0x1e4>)
    ac6e:	a904      	add	r1, sp, #16
    ac70:	4640      	mov	r0, r8
    ac72:	f7fe f861 	bl	8d38 <_printf_i>
    ac76:	e7ea      	b.n	ac4e <_svfiprintf_r+0x1aa>
    ac78:	0000c5e4 	.word	0x0000c5e4
    ac7c:	0000c5ea 	.word	0x0000c5ea
    ac80:	0000c5ee 	.word	0x0000c5ee
    ac84:	000087dd 	.word	0x000087dd
    ac88:	0000a9ed 	.word	0x0000a9ed

0000ac8c <__sfputc_r>:
    ac8c:	6893      	ldr	r3, [r2, #8]
    ac8e:	3b01      	subs	r3, #1
    ac90:	2b00      	cmp	r3, #0
    ac92:	b410      	push	{r4}
    ac94:	6093      	str	r3, [r2, #8]
    ac96:	da08      	bge.n	acaa <__sfputc_r+0x1e>
    ac98:	6994      	ldr	r4, [r2, #24]
    ac9a:	42a3      	cmp	r3, r4
    ac9c:	db02      	blt.n	aca4 <__sfputc_r+0x18>
    ac9e:	b2cb      	uxtb	r3, r1
    aca0:	2b0a      	cmp	r3, #10
    aca2:	d102      	bne.n	acaa <__sfputc_r+0x1e>
    aca4:	bc10      	pop	{r4}
    aca6:	f000 b983 	b.w	afb0 <__swbuf_r>
    acaa:	6813      	ldr	r3, [r2, #0]
    acac:	1c58      	adds	r0, r3, #1
    acae:	6010      	str	r0, [r2, #0]
    acb0:	7019      	strb	r1, [r3, #0]
    acb2:	b2c8      	uxtb	r0, r1
    acb4:	bc10      	pop	{r4}
    acb6:	4770      	bx	lr

0000acb8 <__sfputs_r>:
    acb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    acba:	4606      	mov	r6, r0
    acbc:	460f      	mov	r7, r1
    acbe:	4614      	mov	r4, r2
    acc0:	18d5      	adds	r5, r2, r3
    acc2:	42ac      	cmp	r4, r5
    acc4:	d101      	bne.n	acca <__sfputs_r+0x12>
    acc6:	2000      	movs	r0, #0
    acc8:	e007      	b.n	acda <__sfputs_r+0x22>
    acca:	463a      	mov	r2, r7
    accc:	f814 1b01 	ldrb.w	r1, [r4], #1
    acd0:	4630      	mov	r0, r6
    acd2:	f7ff ffdb 	bl	ac8c <__sfputc_r>
    acd6:	1c43      	adds	r3, r0, #1
    acd8:	d1f3      	bne.n	acc2 <__sfputs_r+0xa>
    acda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000acdc <_vfiprintf_r>:
    acdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ace0:	b09d      	sub	sp, #116	; 0x74
    ace2:	460c      	mov	r4, r1
    ace4:	4617      	mov	r7, r2
    ace6:	9303      	str	r3, [sp, #12]
    ace8:	4606      	mov	r6, r0
    acea:	b118      	cbz	r0, acf4 <_vfiprintf_r+0x18>
    acec:	6983      	ldr	r3, [r0, #24]
    acee:	b90b      	cbnz	r3, acf4 <_vfiprintf_r+0x18>
    acf0:	f7ff f98e 	bl	a010 <__sinit>
    acf4:	4b7c      	ldr	r3, [pc, #496]	; (aee8 <_vfiprintf_r+0x20c>)
    acf6:	429c      	cmp	r4, r3
    acf8:	d157      	bne.n	adaa <_vfiprintf_r+0xce>
    acfa:	6874      	ldr	r4, [r6, #4]
    acfc:	89a3      	ldrh	r3, [r4, #12]
    acfe:	0718      	lsls	r0, r3, #28
    ad00:	d55d      	bpl.n	adbe <_vfiprintf_r+0xe2>
    ad02:	6923      	ldr	r3, [r4, #16]
    ad04:	2b00      	cmp	r3, #0
    ad06:	d05a      	beq.n	adbe <_vfiprintf_r+0xe2>
    ad08:	2300      	movs	r3, #0
    ad0a:	9309      	str	r3, [sp, #36]	; 0x24
    ad0c:	2320      	movs	r3, #32
    ad0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    ad12:	2330      	movs	r3, #48	; 0x30
    ad14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    ad18:	f04f 0b01 	mov.w	fp, #1
    ad1c:	46b8      	mov	r8, r7
    ad1e:	4645      	mov	r5, r8
    ad20:	f815 3b01 	ldrb.w	r3, [r5], #1
    ad24:	2b00      	cmp	r3, #0
    ad26:	d155      	bne.n	add4 <_vfiprintf_r+0xf8>
    ad28:	ebb8 0a07 	subs.w	sl, r8, r7
    ad2c:	d00b      	beq.n	ad46 <_vfiprintf_r+0x6a>
    ad2e:	4653      	mov	r3, sl
    ad30:	463a      	mov	r2, r7
    ad32:	4621      	mov	r1, r4
    ad34:	4630      	mov	r0, r6
    ad36:	f7ff ffbf 	bl	acb8 <__sfputs_r>
    ad3a:	3001      	adds	r0, #1
    ad3c:	f000 80c4 	beq.w	aec8 <_vfiprintf_r+0x1ec>
    ad40:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ad42:	4453      	add	r3, sl
    ad44:	9309      	str	r3, [sp, #36]	; 0x24
    ad46:	f898 3000 	ldrb.w	r3, [r8]
    ad4a:	2b00      	cmp	r3, #0
    ad4c:	f000 80bc 	beq.w	aec8 <_vfiprintf_r+0x1ec>
    ad50:	2300      	movs	r3, #0
    ad52:	f04f 32ff 	mov.w	r2, #4294967295
    ad56:	9304      	str	r3, [sp, #16]
    ad58:	9307      	str	r3, [sp, #28]
    ad5a:	9205      	str	r2, [sp, #20]
    ad5c:	9306      	str	r3, [sp, #24]
    ad5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    ad62:	931a      	str	r3, [sp, #104]	; 0x68
    ad64:	2205      	movs	r2, #5
    ad66:	7829      	ldrb	r1, [r5, #0]
    ad68:	4860      	ldr	r0, [pc, #384]	; (aeec <_vfiprintf_r+0x210>)
    ad6a:	f7ff fa59 	bl	a220 <memchr>
    ad6e:	f105 0801 	add.w	r8, r5, #1
    ad72:	9b04      	ldr	r3, [sp, #16]
    ad74:	2800      	cmp	r0, #0
    ad76:	d131      	bne.n	addc <_vfiprintf_r+0x100>
    ad78:	06d9      	lsls	r1, r3, #27
    ad7a:	bf44      	itt	mi
    ad7c:	2220      	movmi	r2, #32
    ad7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    ad82:	071a      	lsls	r2, r3, #28
    ad84:	bf44      	itt	mi
    ad86:	222b      	movmi	r2, #43	; 0x2b
    ad88:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    ad8c:	782a      	ldrb	r2, [r5, #0]
    ad8e:	2a2a      	cmp	r2, #42	; 0x2a
    ad90:	d02c      	beq.n	adec <_vfiprintf_r+0x110>
    ad92:	9a07      	ldr	r2, [sp, #28]
    ad94:	2100      	movs	r1, #0
    ad96:	200a      	movs	r0, #10
    ad98:	46a8      	mov	r8, r5
    ad9a:	3501      	adds	r5, #1
    ad9c:	f898 3000 	ldrb.w	r3, [r8]
    ada0:	3b30      	subs	r3, #48	; 0x30
    ada2:	2b09      	cmp	r3, #9
    ada4:	d96d      	bls.n	ae82 <_vfiprintf_r+0x1a6>
    ada6:	b371      	cbz	r1, ae06 <_vfiprintf_r+0x12a>
    ada8:	e026      	b.n	adf8 <_vfiprintf_r+0x11c>
    adaa:	4b51      	ldr	r3, [pc, #324]	; (aef0 <_vfiprintf_r+0x214>)
    adac:	429c      	cmp	r4, r3
    adae:	d101      	bne.n	adb4 <_vfiprintf_r+0xd8>
    adb0:	68b4      	ldr	r4, [r6, #8]
    adb2:	e7a3      	b.n	acfc <_vfiprintf_r+0x20>
    adb4:	4b4f      	ldr	r3, [pc, #316]	; (aef4 <_vfiprintf_r+0x218>)
    adb6:	429c      	cmp	r4, r3
    adb8:	bf08      	it	eq
    adba:	68f4      	ldreq	r4, [r6, #12]
    adbc:	e79e      	b.n	acfc <_vfiprintf_r+0x20>
    adbe:	4621      	mov	r1, r4
    adc0:	4630      	mov	r0, r6
    adc2:	f000 f959 	bl	b078 <__swsetup_r>
    adc6:	2800      	cmp	r0, #0
    adc8:	d09e      	beq.n	ad08 <_vfiprintf_r+0x2c>
    adca:	f04f 30ff 	mov.w	r0, #4294967295
    adce:	b01d      	add	sp, #116	; 0x74
    add0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    add4:	2b25      	cmp	r3, #37	; 0x25
    add6:	d0a7      	beq.n	ad28 <_vfiprintf_r+0x4c>
    add8:	46a8      	mov	r8, r5
    adda:	e7a0      	b.n	ad1e <_vfiprintf_r+0x42>
    addc:	4a43      	ldr	r2, [pc, #268]	; (aeec <_vfiprintf_r+0x210>)
    adde:	1a80      	subs	r0, r0, r2
    ade0:	fa0b f000 	lsl.w	r0, fp, r0
    ade4:	4318      	orrs	r0, r3
    ade6:	9004      	str	r0, [sp, #16]
    ade8:	4645      	mov	r5, r8
    adea:	e7bb      	b.n	ad64 <_vfiprintf_r+0x88>
    adec:	9a03      	ldr	r2, [sp, #12]
    adee:	1d11      	adds	r1, r2, #4
    adf0:	6812      	ldr	r2, [r2, #0]
    adf2:	9103      	str	r1, [sp, #12]
    adf4:	2a00      	cmp	r2, #0
    adf6:	db01      	blt.n	adfc <_vfiprintf_r+0x120>
    adf8:	9207      	str	r2, [sp, #28]
    adfa:	e004      	b.n	ae06 <_vfiprintf_r+0x12a>
    adfc:	4252      	negs	r2, r2
    adfe:	f043 0302 	orr.w	r3, r3, #2
    ae02:	9207      	str	r2, [sp, #28]
    ae04:	9304      	str	r3, [sp, #16]
    ae06:	f898 3000 	ldrb.w	r3, [r8]
    ae0a:	2b2e      	cmp	r3, #46	; 0x2e
    ae0c:	d110      	bne.n	ae30 <_vfiprintf_r+0x154>
    ae0e:	f898 3001 	ldrb.w	r3, [r8, #1]
    ae12:	2b2a      	cmp	r3, #42	; 0x2a
    ae14:	f108 0101 	add.w	r1, r8, #1
    ae18:	d137      	bne.n	ae8a <_vfiprintf_r+0x1ae>
    ae1a:	9b03      	ldr	r3, [sp, #12]
    ae1c:	1d1a      	adds	r2, r3, #4
    ae1e:	681b      	ldr	r3, [r3, #0]
    ae20:	9203      	str	r2, [sp, #12]
    ae22:	2b00      	cmp	r3, #0
    ae24:	bfb8      	it	lt
    ae26:	f04f 33ff 	movlt.w	r3, #4294967295
    ae2a:	f108 0802 	add.w	r8, r8, #2
    ae2e:	9305      	str	r3, [sp, #20]
    ae30:	4d31      	ldr	r5, [pc, #196]	; (aef8 <_vfiprintf_r+0x21c>)
    ae32:	f898 1000 	ldrb.w	r1, [r8]
    ae36:	2203      	movs	r2, #3
    ae38:	4628      	mov	r0, r5
    ae3a:	f7ff f9f1 	bl	a220 <memchr>
    ae3e:	b140      	cbz	r0, ae52 <_vfiprintf_r+0x176>
    ae40:	2340      	movs	r3, #64	; 0x40
    ae42:	1b40      	subs	r0, r0, r5
    ae44:	fa03 f000 	lsl.w	r0, r3, r0
    ae48:	9b04      	ldr	r3, [sp, #16]
    ae4a:	4303      	orrs	r3, r0
    ae4c:	9304      	str	r3, [sp, #16]
    ae4e:	f108 0801 	add.w	r8, r8, #1
    ae52:	f898 1000 	ldrb.w	r1, [r8]
    ae56:	4829      	ldr	r0, [pc, #164]	; (aefc <_vfiprintf_r+0x220>)
    ae58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    ae5c:	2206      	movs	r2, #6
    ae5e:	f108 0701 	add.w	r7, r8, #1
    ae62:	f7ff f9dd 	bl	a220 <memchr>
    ae66:	2800      	cmp	r0, #0
    ae68:	d034      	beq.n	aed4 <_vfiprintf_r+0x1f8>
    ae6a:	4b25      	ldr	r3, [pc, #148]	; (af00 <_vfiprintf_r+0x224>)
    ae6c:	bb03      	cbnz	r3, aeb0 <_vfiprintf_r+0x1d4>
    ae6e:	9b03      	ldr	r3, [sp, #12]
    ae70:	3307      	adds	r3, #7
    ae72:	f023 0307 	bic.w	r3, r3, #7
    ae76:	3308      	adds	r3, #8
    ae78:	9303      	str	r3, [sp, #12]
    ae7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ae7c:	444b      	add	r3, r9
    ae7e:	9309      	str	r3, [sp, #36]	; 0x24
    ae80:	e74c      	b.n	ad1c <_vfiprintf_r+0x40>
    ae82:	fb00 3202 	mla	r2, r0, r2, r3
    ae86:	2101      	movs	r1, #1
    ae88:	e786      	b.n	ad98 <_vfiprintf_r+0xbc>
    ae8a:	2300      	movs	r3, #0
    ae8c:	9305      	str	r3, [sp, #20]
    ae8e:	4618      	mov	r0, r3
    ae90:	250a      	movs	r5, #10
    ae92:	4688      	mov	r8, r1
    ae94:	3101      	adds	r1, #1
    ae96:	f898 2000 	ldrb.w	r2, [r8]
    ae9a:	3a30      	subs	r2, #48	; 0x30
    ae9c:	2a09      	cmp	r2, #9
    ae9e:	d903      	bls.n	aea8 <_vfiprintf_r+0x1cc>
    aea0:	2b00      	cmp	r3, #0
    aea2:	d0c5      	beq.n	ae30 <_vfiprintf_r+0x154>
    aea4:	9005      	str	r0, [sp, #20]
    aea6:	e7c3      	b.n	ae30 <_vfiprintf_r+0x154>
    aea8:	fb05 2000 	mla	r0, r5, r0, r2
    aeac:	2301      	movs	r3, #1
    aeae:	e7f0      	b.n	ae92 <_vfiprintf_r+0x1b6>
    aeb0:	ab03      	add	r3, sp, #12
    aeb2:	9300      	str	r3, [sp, #0]
    aeb4:	4622      	mov	r2, r4
    aeb6:	4b13      	ldr	r3, [pc, #76]	; (af04 <_vfiprintf_r+0x228>)
    aeb8:	a904      	add	r1, sp, #16
    aeba:	4630      	mov	r0, r6
    aebc:	f7fd fc8e 	bl	87dc <_printf_float>
    aec0:	f1b0 3fff 	cmp.w	r0, #4294967295
    aec4:	4681      	mov	r9, r0
    aec6:	d1d8      	bne.n	ae7a <_vfiprintf_r+0x19e>
    aec8:	89a3      	ldrh	r3, [r4, #12]
    aeca:	065b      	lsls	r3, r3, #25
    aecc:	f53f af7d 	bmi.w	adca <_vfiprintf_r+0xee>
    aed0:	9809      	ldr	r0, [sp, #36]	; 0x24
    aed2:	e77c      	b.n	adce <_vfiprintf_r+0xf2>
    aed4:	ab03      	add	r3, sp, #12
    aed6:	9300      	str	r3, [sp, #0]
    aed8:	4622      	mov	r2, r4
    aeda:	4b0a      	ldr	r3, [pc, #40]	; (af04 <_vfiprintf_r+0x228>)
    aedc:	a904      	add	r1, sp, #16
    aede:	4630      	mov	r0, r6
    aee0:	f7fd ff2a 	bl	8d38 <_printf_i>
    aee4:	e7ec      	b.n	aec0 <_vfiprintf_r+0x1e4>
    aee6:	bf00      	nop
    aee8:	0000c4a8 	.word	0x0000c4a8
    aeec:	0000c5e4 	.word	0x0000c5e4
    aef0:	0000c4c8 	.word	0x0000c4c8
    aef4:	0000c488 	.word	0x0000c488
    aef8:	0000c5ea 	.word	0x0000c5ea
    aefc:	0000c5ee 	.word	0x0000c5ee
    af00:	000087dd 	.word	0x000087dd
    af04:	0000acb9 	.word	0x0000acb9

0000af08 <_sbrk_r>:
    af08:	b538      	push	{r3, r4, r5, lr}
    af0a:	4c06      	ldr	r4, [pc, #24]	; (af24 <_sbrk_r+0x1c>)
    af0c:	2300      	movs	r3, #0
    af0e:	4605      	mov	r5, r0
    af10:	4608      	mov	r0, r1
    af12:	6023      	str	r3, [r4, #0]
    af14:	f7f9 ff52 	bl	4dbc <_sbrk>
    af18:	1c43      	adds	r3, r0, #1
    af1a:	d102      	bne.n	af22 <_sbrk_r+0x1a>
    af1c:	6823      	ldr	r3, [r4, #0]
    af1e:	b103      	cbz	r3, af22 <_sbrk_r+0x1a>
    af20:	602b      	str	r3, [r5, #0]
    af22:	bd38      	pop	{r3, r4, r5, pc}
    af24:	200003f4 	.word	0x200003f4

0000af28 <__sread>:
    af28:	b510      	push	{r4, lr}
    af2a:	460c      	mov	r4, r1
    af2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    af30:	f000 f9a8 	bl	b284 <_read_r>
    af34:	2800      	cmp	r0, #0
    af36:	bfab      	itete	ge
    af38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    af3a:	89a3      	ldrhlt	r3, [r4, #12]
    af3c:	181b      	addge	r3, r3, r0
    af3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    af42:	bfac      	ite	ge
    af44:	6563      	strge	r3, [r4, #84]	; 0x54
    af46:	81a3      	strhlt	r3, [r4, #12]
    af48:	bd10      	pop	{r4, pc}

0000af4a <__swrite>:
    af4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    af4e:	461f      	mov	r7, r3
    af50:	898b      	ldrh	r3, [r1, #12]
    af52:	05db      	lsls	r3, r3, #23
    af54:	4605      	mov	r5, r0
    af56:	460c      	mov	r4, r1
    af58:	4616      	mov	r6, r2
    af5a:	d505      	bpl.n	af68 <__swrite+0x1e>
    af5c:	2302      	movs	r3, #2
    af5e:	2200      	movs	r2, #0
    af60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    af64:	f000 f928 	bl	b1b8 <_lseek_r>
    af68:	89a3      	ldrh	r3, [r4, #12]
    af6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    af6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    af72:	81a3      	strh	r3, [r4, #12]
    af74:	4632      	mov	r2, r6
    af76:	463b      	mov	r3, r7
    af78:	4628      	mov	r0, r5
    af7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    af7e:	f000 b869 	b.w	b054 <_write_r>

0000af82 <__sseek>:
    af82:	b510      	push	{r4, lr}
    af84:	460c      	mov	r4, r1
    af86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    af8a:	f000 f915 	bl	b1b8 <_lseek_r>
    af8e:	1c43      	adds	r3, r0, #1
    af90:	89a3      	ldrh	r3, [r4, #12]
    af92:	bf15      	itete	ne
    af94:	6560      	strne	r0, [r4, #84]	; 0x54
    af96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    af9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    af9e:	81a3      	strheq	r3, [r4, #12]
    afa0:	bf18      	it	ne
    afa2:	81a3      	strhne	r3, [r4, #12]
    afa4:	bd10      	pop	{r4, pc}

0000afa6 <__sclose>:
    afa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    afaa:	f000 b8d3 	b.w	b154 <_close_r>
	...

0000afb0 <__swbuf_r>:
    afb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    afb2:	460e      	mov	r6, r1
    afb4:	4614      	mov	r4, r2
    afb6:	4605      	mov	r5, r0
    afb8:	b118      	cbz	r0, afc2 <__swbuf_r+0x12>
    afba:	6983      	ldr	r3, [r0, #24]
    afbc:	b90b      	cbnz	r3, afc2 <__swbuf_r+0x12>
    afbe:	f7ff f827 	bl	a010 <__sinit>
    afc2:	4b21      	ldr	r3, [pc, #132]	; (b048 <__swbuf_r+0x98>)
    afc4:	429c      	cmp	r4, r3
    afc6:	d12a      	bne.n	b01e <__swbuf_r+0x6e>
    afc8:	686c      	ldr	r4, [r5, #4]
    afca:	69a3      	ldr	r3, [r4, #24]
    afcc:	60a3      	str	r3, [r4, #8]
    afce:	89a3      	ldrh	r3, [r4, #12]
    afd0:	071a      	lsls	r2, r3, #28
    afd2:	d52e      	bpl.n	b032 <__swbuf_r+0x82>
    afd4:	6923      	ldr	r3, [r4, #16]
    afd6:	b363      	cbz	r3, b032 <__swbuf_r+0x82>
    afd8:	6923      	ldr	r3, [r4, #16]
    afda:	6820      	ldr	r0, [r4, #0]
    afdc:	1ac0      	subs	r0, r0, r3
    afde:	6963      	ldr	r3, [r4, #20]
    afe0:	b2f6      	uxtb	r6, r6
    afe2:	4298      	cmp	r0, r3
    afe4:	4637      	mov	r7, r6
    afe6:	db04      	blt.n	aff2 <__swbuf_r+0x42>
    afe8:	4621      	mov	r1, r4
    afea:	4628      	mov	r0, r5
    afec:	f7fe ffa6 	bl	9f3c <_fflush_r>
    aff0:	bb28      	cbnz	r0, b03e <__swbuf_r+0x8e>
    aff2:	68a3      	ldr	r3, [r4, #8]
    aff4:	3b01      	subs	r3, #1
    aff6:	60a3      	str	r3, [r4, #8]
    aff8:	6823      	ldr	r3, [r4, #0]
    affa:	1c5a      	adds	r2, r3, #1
    affc:	6022      	str	r2, [r4, #0]
    affe:	701e      	strb	r6, [r3, #0]
    b000:	6963      	ldr	r3, [r4, #20]
    b002:	3001      	adds	r0, #1
    b004:	4298      	cmp	r0, r3
    b006:	d004      	beq.n	b012 <__swbuf_r+0x62>
    b008:	89a3      	ldrh	r3, [r4, #12]
    b00a:	07db      	lsls	r3, r3, #31
    b00c:	d519      	bpl.n	b042 <__swbuf_r+0x92>
    b00e:	2e0a      	cmp	r6, #10
    b010:	d117      	bne.n	b042 <__swbuf_r+0x92>
    b012:	4621      	mov	r1, r4
    b014:	4628      	mov	r0, r5
    b016:	f7fe ff91 	bl	9f3c <_fflush_r>
    b01a:	b190      	cbz	r0, b042 <__swbuf_r+0x92>
    b01c:	e00f      	b.n	b03e <__swbuf_r+0x8e>
    b01e:	4b0b      	ldr	r3, [pc, #44]	; (b04c <__swbuf_r+0x9c>)
    b020:	429c      	cmp	r4, r3
    b022:	d101      	bne.n	b028 <__swbuf_r+0x78>
    b024:	68ac      	ldr	r4, [r5, #8]
    b026:	e7d0      	b.n	afca <__swbuf_r+0x1a>
    b028:	4b09      	ldr	r3, [pc, #36]	; (b050 <__swbuf_r+0xa0>)
    b02a:	429c      	cmp	r4, r3
    b02c:	bf08      	it	eq
    b02e:	68ec      	ldreq	r4, [r5, #12]
    b030:	e7cb      	b.n	afca <__swbuf_r+0x1a>
    b032:	4621      	mov	r1, r4
    b034:	4628      	mov	r0, r5
    b036:	f000 f81f 	bl	b078 <__swsetup_r>
    b03a:	2800      	cmp	r0, #0
    b03c:	d0cc      	beq.n	afd8 <__swbuf_r+0x28>
    b03e:	f04f 37ff 	mov.w	r7, #4294967295
    b042:	4638      	mov	r0, r7
    b044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b046:	bf00      	nop
    b048:	0000c4a8 	.word	0x0000c4a8
    b04c:	0000c4c8 	.word	0x0000c4c8
    b050:	0000c488 	.word	0x0000c488

0000b054 <_write_r>:
    b054:	b538      	push	{r3, r4, r5, lr}
    b056:	4c07      	ldr	r4, [pc, #28]	; (b074 <_write_r+0x20>)
    b058:	4605      	mov	r5, r0
    b05a:	4608      	mov	r0, r1
    b05c:	4611      	mov	r1, r2
    b05e:	2200      	movs	r2, #0
    b060:	6022      	str	r2, [r4, #0]
    b062:	461a      	mov	r2, r3
    b064:	f7f5 f8ec 	bl	240 <_write>
    b068:	1c43      	adds	r3, r0, #1
    b06a:	d102      	bne.n	b072 <_write_r+0x1e>
    b06c:	6823      	ldr	r3, [r4, #0]
    b06e:	b103      	cbz	r3, b072 <_write_r+0x1e>
    b070:	602b      	str	r3, [r5, #0]
    b072:	bd38      	pop	{r3, r4, r5, pc}
    b074:	200003f4 	.word	0x200003f4

0000b078 <__swsetup_r>:
    b078:	4b32      	ldr	r3, [pc, #200]	; (b144 <__swsetup_r+0xcc>)
    b07a:	b570      	push	{r4, r5, r6, lr}
    b07c:	681d      	ldr	r5, [r3, #0]
    b07e:	4606      	mov	r6, r0
    b080:	460c      	mov	r4, r1
    b082:	b125      	cbz	r5, b08e <__swsetup_r+0x16>
    b084:	69ab      	ldr	r3, [r5, #24]
    b086:	b913      	cbnz	r3, b08e <__swsetup_r+0x16>
    b088:	4628      	mov	r0, r5
    b08a:	f7fe ffc1 	bl	a010 <__sinit>
    b08e:	4b2e      	ldr	r3, [pc, #184]	; (b148 <__swsetup_r+0xd0>)
    b090:	429c      	cmp	r4, r3
    b092:	d10f      	bne.n	b0b4 <__swsetup_r+0x3c>
    b094:	686c      	ldr	r4, [r5, #4]
    b096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b09a:	b29a      	uxth	r2, r3
    b09c:	0715      	lsls	r5, r2, #28
    b09e:	d42c      	bmi.n	b0fa <__swsetup_r+0x82>
    b0a0:	06d0      	lsls	r0, r2, #27
    b0a2:	d411      	bmi.n	b0c8 <__swsetup_r+0x50>
    b0a4:	2209      	movs	r2, #9
    b0a6:	6032      	str	r2, [r6, #0]
    b0a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b0ac:	81a3      	strh	r3, [r4, #12]
    b0ae:	f04f 30ff 	mov.w	r0, #4294967295
    b0b2:	bd70      	pop	{r4, r5, r6, pc}
    b0b4:	4b25      	ldr	r3, [pc, #148]	; (b14c <__swsetup_r+0xd4>)
    b0b6:	429c      	cmp	r4, r3
    b0b8:	d101      	bne.n	b0be <__swsetup_r+0x46>
    b0ba:	68ac      	ldr	r4, [r5, #8]
    b0bc:	e7eb      	b.n	b096 <__swsetup_r+0x1e>
    b0be:	4b24      	ldr	r3, [pc, #144]	; (b150 <__swsetup_r+0xd8>)
    b0c0:	429c      	cmp	r4, r3
    b0c2:	bf08      	it	eq
    b0c4:	68ec      	ldreq	r4, [r5, #12]
    b0c6:	e7e6      	b.n	b096 <__swsetup_r+0x1e>
    b0c8:	0751      	lsls	r1, r2, #29
    b0ca:	d512      	bpl.n	b0f2 <__swsetup_r+0x7a>
    b0cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b0ce:	b141      	cbz	r1, b0e2 <__swsetup_r+0x6a>
    b0d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    b0d4:	4299      	cmp	r1, r3
    b0d6:	d002      	beq.n	b0de <__swsetup_r+0x66>
    b0d8:	4630      	mov	r0, r6
    b0da:	f7ff fbdb 	bl	a894 <_free_r>
    b0de:	2300      	movs	r3, #0
    b0e0:	6363      	str	r3, [r4, #52]	; 0x34
    b0e2:	89a3      	ldrh	r3, [r4, #12]
    b0e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    b0e8:	81a3      	strh	r3, [r4, #12]
    b0ea:	2300      	movs	r3, #0
    b0ec:	6063      	str	r3, [r4, #4]
    b0ee:	6923      	ldr	r3, [r4, #16]
    b0f0:	6023      	str	r3, [r4, #0]
    b0f2:	89a3      	ldrh	r3, [r4, #12]
    b0f4:	f043 0308 	orr.w	r3, r3, #8
    b0f8:	81a3      	strh	r3, [r4, #12]
    b0fa:	6923      	ldr	r3, [r4, #16]
    b0fc:	b94b      	cbnz	r3, b112 <__swsetup_r+0x9a>
    b0fe:	89a3      	ldrh	r3, [r4, #12]
    b100:	f403 7320 	and.w	r3, r3, #640	; 0x280
    b104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    b108:	d003      	beq.n	b112 <__swsetup_r+0x9a>
    b10a:	4621      	mov	r1, r4
    b10c:	4630      	mov	r0, r6
    b10e:	f7ff f83b 	bl	a188 <__smakebuf_r>
    b112:	89a2      	ldrh	r2, [r4, #12]
    b114:	f012 0301 	ands.w	r3, r2, #1
    b118:	d00c      	beq.n	b134 <__swsetup_r+0xbc>
    b11a:	2300      	movs	r3, #0
    b11c:	60a3      	str	r3, [r4, #8]
    b11e:	6963      	ldr	r3, [r4, #20]
    b120:	425b      	negs	r3, r3
    b122:	61a3      	str	r3, [r4, #24]
    b124:	6923      	ldr	r3, [r4, #16]
    b126:	b953      	cbnz	r3, b13e <__swsetup_r+0xc6>
    b128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b12c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    b130:	d1ba      	bne.n	b0a8 <__swsetup_r+0x30>
    b132:	bd70      	pop	{r4, r5, r6, pc}
    b134:	0792      	lsls	r2, r2, #30
    b136:	bf58      	it	pl
    b138:	6963      	ldrpl	r3, [r4, #20]
    b13a:	60a3      	str	r3, [r4, #8]
    b13c:	e7f2      	b.n	b124 <__swsetup_r+0xac>
    b13e:	2000      	movs	r0, #0
    b140:	e7f7      	b.n	b132 <__swsetup_r+0xba>
    b142:	bf00      	nop
    b144:	20000084 	.word	0x20000084
    b148:	0000c4a8 	.word	0x0000c4a8
    b14c:	0000c4c8 	.word	0x0000c4c8
    b150:	0000c488 	.word	0x0000c488

0000b154 <_close_r>:
    b154:	b538      	push	{r3, r4, r5, lr}
    b156:	4c06      	ldr	r4, [pc, #24]	; (b170 <_close_r+0x1c>)
    b158:	2300      	movs	r3, #0
    b15a:	4605      	mov	r5, r0
    b15c:	4608      	mov	r0, r1
    b15e:	6023      	str	r3, [r4, #0]
    b160:	f7f9 fe58 	bl	4e14 <_close>
    b164:	1c43      	adds	r3, r0, #1
    b166:	d102      	bne.n	b16e <_close_r+0x1a>
    b168:	6823      	ldr	r3, [r4, #0]
    b16a:	b103      	cbz	r3, b16e <_close_r+0x1a>
    b16c:	602b      	str	r3, [r5, #0]
    b16e:	bd38      	pop	{r3, r4, r5, pc}
    b170:	200003f4 	.word	0x200003f4

0000b174 <_fstat_r>:
    b174:	b538      	push	{r3, r4, r5, lr}
    b176:	4c07      	ldr	r4, [pc, #28]	; (b194 <_fstat_r+0x20>)
    b178:	2300      	movs	r3, #0
    b17a:	4605      	mov	r5, r0
    b17c:	4608      	mov	r0, r1
    b17e:	4611      	mov	r1, r2
    b180:	6023      	str	r3, [r4, #0]
    b182:	f7f9 fe52 	bl	4e2a <_fstat>
    b186:	1c43      	adds	r3, r0, #1
    b188:	d102      	bne.n	b190 <_fstat_r+0x1c>
    b18a:	6823      	ldr	r3, [r4, #0]
    b18c:	b103      	cbz	r3, b190 <_fstat_r+0x1c>
    b18e:	602b      	str	r3, [r5, #0]
    b190:	bd38      	pop	{r3, r4, r5, pc}
    b192:	bf00      	nop
    b194:	200003f4 	.word	0x200003f4

0000b198 <_isatty_r>:
    b198:	b538      	push	{r3, r4, r5, lr}
    b19a:	4c06      	ldr	r4, [pc, #24]	; (b1b4 <_isatty_r+0x1c>)
    b19c:	2300      	movs	r3, #0
    b19e:	4605      	mov	r5, r0
    b1a0:	4608      	mov	r0, r1
    b1a2:	6023      	str	r3, [r4, #0]
    b1a4:	f7f9 fe50 	bl	4e48 <_isatty>
    b1a8:	1c43      	adds	r3, r0, #1
    b1aa:	d102      	bne.n	b1b2 <_isatty_r+0x1a>
    b1ac:	6823      	ldr	r3, [r4, #0]
    b1ae:	b103      	cbz	r3, b1b2 <_isatty_r+0x1a>
    b1b0:	602b      	str	r3, [r5, #0]
    b1b2:	bd38      	pop	{r3, r4, r5, pc}
    b1b4:	200003f4 	.word	0x200003f4

0000b1b8 <_lseek_r>:
    b1b8:	b538      	push	{r3, r4, r5, lr}
    b1ba:	4c07      	ldr	r4, [pc, #28]	; (b1d8 <_lseek_r+0x20>)
    b1bc:	4605      	mov	r5, r0
    b1be:	4608      	mov	r0, r1
    b1c0:	4611      	mov	r1, r2
    b1c2:	2200      	movs	r2, #0
    b1c4:	6022      	str	r2, [r4, #0]
    b1c6:	461a      	mov	r2, r3
    b1c8:	f7f9 fe48 	bl	4e5c <_lseek>
    b1cc:	1c43      	adds	r3, r0, #1
    b1ce:	d102      	bne.n	b1d6 <_lseek_r+0x1e>
    b1d0:	6823      	ldr	r3, [r4, #0]
    b1d2:	b103      	cbz	r3, b1d6 <_lseek_r+0x1e>
    b1d4:	602b      	str	r3, [r5, #0]
    b1d6:	bd38      	pop	{r3, r4, r5, pc}
    b1d8:	200003f4 	.word	0x200003f4

0000b1dc <__ascii_mbtowc>:
    b1dc:	b082      	sub	sp, #8
    b1de:	b901      	cbnz	r1, b1e2 <__ascii_mbtowc+0x6>
    b1e0:	a901      	add	r1, sp, #4
    b1e2:	b142      	cbz	r2, b1f6 <__ascii_mbtowc+0x1a>
    b1e4:	b14b      	cbz	r3, b1fa <__ascii_mbtowc+0x1e>
    b1e6:	7813      	ldrb	r3, [r2, #0]
    b1e8:	600b      	str	r3, [r1, #0]
    b1ea:	7812      	ldrb	r2, [r2, #0]
    b1ec:	1c10      	adds	r0, r2, #0
    b1ee:	bf18      	it	ne
    b1f0:	2001      	movne	r0, #1
    b1f2:	b002      	add	sp, #8
    b1f4:	4770      	bx	lr
    b1f6:	4610      	mov	r0, r2
    b1f8:	e7fb      	b.n	b1f2 <__ascii_mbtowc+0x16>
    b1fa:	f06f 0001 	mvn.w	r0, #1
    b1fe:	e7f8      	b.n	b1f2 <__ascii_mbtowc+0x16>

0000b200 <memmove>:
    b200:	4288      	cmp	r0, r1
    b202:	b510      	push	{r4, lr}
    b204:	eb01 0302 	add.w	r3, r1, r2
    b208:	d803      	bhi.n	b212 <memmove+0x12>
    b20a:	1e42      	subs	r2, r0, #1
    b20c:	4299      	cmp	r1, r3
    b20e:	d10c      	bne.n	b22a <memmove+0x2a>
    b210:	bd10      	pop	{r4, pc}
    b212:	4298      	cmp	r0, r3
    b214:	d2f9      	bcs.n	b20a <memmove+0xa>
    b216:	1881      	adds	r1, r0, r2
    b218:	1ad2      	subs	r2, r2, r3
    b21a:	42d3      	cmn	r3, r2
    b21c:	d100      	bne.n	b220 <memmove+0x20>
    b21e:	bd10      	pop	{r4, pc}
    b220:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    b224:	f801 4d01 	strb.w	r4, [r1, #-1]!
    b228:	e7f7      	b.n	b21a <memmove+0x1a>
    b22a:	f811 4b01 	ldrb.w	r4, [r1], #1
    b22e:	f802 4f01 	strb.w	r4, [r2, #1]!
    b232:	e7eb      	b.n	b20c <memmove+0xc>

0000b234 <__malloc_lock>:
    b234:	4770      	bx	lr

0000b236 <__malloc_unlock>:
    b236:	4770      	bx	lr

0000b238 <_realloc_r>:
    b238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b23a:	4607      	mov	r7, r0
    b23c:	4614      	mov	r4, r2
    b23e:	460e      	mov	r6, r1
    b240:	b921      	cbnz	r1, b24c <_realloc_r+0x14>
    b242:	4611      	mov	r1, r2
    b244:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b248:	f7ff bb72 	b.w	a930 <_malloc_r>
    b24c:	b922      	cbnz	r2, b258 <_realloc_r+0x20>
    b24e:	f7ff fb21 	bl	a894 <_free_r>
    b252:	4625      	mov	r5, r4
    b254:	4628      	mov	r0, r5
    b256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b258:	f000 f833 	bl	b2c2 <_malloc_usable_size_r>
    b25c:	4284      	cmp	r4, r0
    b25e:	d90f      	bls.n	b280 <_realloc_r+0x48>
    b260:	4621      	mov	r1, r4
    b262:	4638      	mov	r0, r7
    b264:	f7ff fb64 	bl	a930 <_malloc_r>
    b268:	4605      	mov	r5, r0
    b26a:	2800      	cmp	r0, #0
    b26c:	d0f2      	beq.n	b254 <_realloc_r+0x1c>
    b26e:	4631      	mov	r1, r6
    b270:	4622      	mov	r2, r4
    b272:	f7ff f825 	bl	a2c0 <memcpy>
    b276:	4631      	mov	r1, r6
    b278:	4638      	mov	r0, r7
    b27a:	f7ff fb0b 	bl	a894 <_free_r>
    b27e:	e7e9      	b.n	b254 <_realloc_r+0x1c>
    b280:	4635      	mov	r5, r6
    b282:	e7e7      	b.n	b254 <_realloc_r+0x1c>

0000b284 <_read_r>:
    b284:	b538      	push	{r3, r4, r5, lr}
    b286:	4c07      	ldr	r4, [pc, #28]	; (b2a4 <_read_r+0x20>)
    b288:	4605      	mov	r5, r0
    b28a:	4608      	mov	r0, r1
    b28c:	4611      	mov	r1, r2
    b28e:	2200      	movs	r2, #0
    b290:	6022      	str	r2, [r4, #0]
    b292:	461a      	mov	r2, r3
    b294:	f7f4 ffaa 	bl	1ec <_read>
    b298:	1c43      	adds	r3, r0, #1
    b29a:	d102      	bne.n	b2a2 <_read_r+0x1e>
    b29c:	6823      	ldr	r3, [r4, #0]
    b29e:	b103      	cbz	r3, b2a2 <_read_r+0x1e>
    b2a0:	602b      	str	r3, [r5, #0]
    b2a2:	bd38      	pop	{r3, r4, r5, pc}
    b2a4:	200003f4 	.word	0x200003f4

0000b2a8 <__ascii_wctomb>:
    b2a8:	b149      	cbz	r1, b2be <__ascii_wctomb+0x16>
    b2aa:	2aff      	cmp	r2, #255	; 0xff
    b2ac:	bf85      	ittet	hi
    b2ae:	238a      	movhi	r3, #138	; 0x8a
    b2b0:	6003      	strhi	r3, [r0, #0]
    b2b2:	700a      	strbls	r2, [r1, #0]
    b2b4:	f04f 30ff 	movhi.w	r0, #4294967295
    b2b8:	bf98      	it	ls
    b2ba:	2001      	movls	r0, #1
    b2bc:	4770      	bx	lr
    b2be:	4608      	mov	r0, r1
    b2c0:	4770      	bx	lr

0000b2c2 <_malloc_usable_size_r>:
    b2c2:	f851 0c04 	ldr.w	r0, [r1, #-4]
    b2c6:	2800      	cmp	r0, #0
    b2c8:	f1a0 0004 	sub.w	r0, r0, #4
    b2cc:	bfbc      	itt	lt
    b2ce:	580b      	ldrlt	r3, [r1, r0]
    b2d0:	18c0      	addlt	r0, r0, r3
    b2d2:	4770      	bx	lr

0000b2d4 <__aeabi_drsub>:
    b2d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    b2d8:	e002      	b.n	b2e0 <__adddf3>
    b2da:	bf00      	nop

0000b2dc <__aeabi_dsub>:
    b2dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000b2e0 <__adddf3>:
    b2e0:	b530      	push	{r4, r5, lr}
    b2e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
    b2e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
    b2ea:	ea94 0f05 	teq	r4, r5
    b2ee:	bf08      	it	eq
    b2f0:	ea90 0f02 	teqeq	r0, r2
    b2f4:	bf1f      	itttt	ne
    b2f6:	ea54 0c00 	orrsne.w	ip, r4, r0
    b2fa:	ea55 0c02 	orrsne.w	ip, r5, r2
    b2fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    b302:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b306:	f000 80e2 	beq.w	b4ce <__adddf3+0x1ee>
    b30a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    b30e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    b312:	bfb8      	it	lt
    b314:	426d      	neglt	r5, r5
    b316:	dd0c      	ble.n	b332 <__adddf3+0x52>
    b318:	442c      	add	r4, r5
    b31a:	ea80 0202 	eor.w	r2, r0, r2
    b31e:	ea81 0303 	eor.w	r3, r1, r3
    b322:	ea82 0000 	eor.w	r0, r2, r0
    b326:	ea83 0101 	eor.w	r1, r3, r1
    b32a:	ea80 0202 	eor.w	r2, r0, r2
    b32e:	ea81 0303 	eor.w	r3, r1, r3
    b332:	2d36      	cmp	r5, #54	; 0x36
    b334:	bf88      	it	hi
    b336:	bd30      	pophi	{r4, r5, pc}
    b338:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    b33c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b340:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    b344:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    b348:	d002      	beq.n	b350 <__adddf3+0x70>
    b34a:	4240      	negs	r0, r0
    b34c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b350:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    b354:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b358:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    b35c:	d002      	beq.n	b364 <__adddf3+0x84>
    b35e:	4252      	negs	r2, r2
    b360:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    b364:	ea94 0f05 	teq	r4, r5
    b368:	f000 80a7 	beq.w	b4ba <__adddf3+0x1da>
    b36c:	f1a4 0401 	sub.w	r4, r4, #1
    b370:	f1d5 0e20 	rsbs	lr, r5, #32
    b374:	db0d      	blt.n	b392 <__adddf3+0xb2>
    b376:	fa02 fc0e 	lsl.w	ip, r2, lr
    b37a:	fa22 f205 	lsr.w	r2, r2, r5
    b37e:	1880      	adds	r0, r0, r2
    b380:	f141 0100 	adc.w	r1, r1, #0
    b384:	fa03 f20e 	lsl.w	r2, r3, lr
    b388:	1880      	adds	r0, r0, r2
    b38a:	fa43 f305 	asr.w	r3, r3, r5
    b38e:	4159      	adcs	r1, r3
    b390:	e00e      	b.n	b3b0 <__adddf3+0xd0>
    b392:	f1a5 0520 	sub.w	r5, r5, #32
    b396:	f10e 0e20 	add.w	lr, lr, #32
    b39a:	2a01      	cmp	r2, #1
    b39c:	fa03 fc0e 	lsl.w	ip, r3, lr
    b3a0:	bf28      	it	cs
    b3a2:	f04c 0c02 	orrcs.w	ip, ip, #2
    b3a6:	fa43 f305 	asr.w	r3, r3, r5
    b3aa:	18c0      	adds	r0, r0, r3
    b3ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    b3b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b3b4:	d507      	bpl.n	b3c6 <__adddf3+0xe6>
    b3b6:	f04f 0e00 	mov.w	lr, #0
    b3ba:	f1dc 0c00 	rsbs	ip, ip, #0
    b3be:	eb7e 0000 	sbcs.w	r0, lr, r0
    b3c2:	eb6e 0101 	sbc.w	r1, lr, r1
    b3c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    b3ca:	d31b      	bcc.n	b404 <__adddf3+0x124>
    b3cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    b3d0:	d30c      	bcc.n	b3ec <__adddf3+0x10c>
    b3d2:	0849      	lsrs	r1, r1, #1
    b3d4:	ea5f 0030 	movs.w	r0, r0, rrx
    b3d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
    b3dc:	f104 0401 	add.w	r4, r4, #1
    b3e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
    b3e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    b3e8:	f080 809a 	bcs.w	b520 <__adddf3+0x240>
    b3ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    b3f0:	bf08      	it	eq
    b3f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b3f6:	f150 0000 	adcs.w	r0, r0, #0
    b3fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b3fe:	ea41 0105 	orr.w	r1, r1, r5
    b402:	bd30      	pop	{r4, r5, pc}
    b404:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    b408:	4140      	adcs	r0, r0
    b40a:	eb41 0101 	adc.w	r1, r1, r1
    b40e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b412:	f1a4 0401 	sub.w	r4, r4, #1
    b416:	d1e9      	bne.n	b3ec <__adddf3+0x10c>
    b418:	f091 0f00 	teq	r1, #0
    b41c:	bf04      	itt	eq
    b41e:	4601      	moveq	r1, r0
    b420:	2000      	moveq	r0, #0
    b422:	fab1 f381 	clz	r3, r1
    b426:	bf08      	it	eq
    b428:	3320      	addeq	r3, #32
    b42a:	f1a3 030b 	sub.w	r3, r3, #11
    b42e:	f1b3 0220 	subs.w	r2, r3, #32
    b432:	da0c      	bge.n	b44e <__adddf3+0x16e>
    b434:	320c      	adds	r2, #12
    b436:	dd08      	ble.n	b44a <__adddf3+0x16a>
    b438:	f102 0c14 	add.w	ip, r2, #20
    b43c:	f1c2 020c 	rsb	r2, r2, #12
    b440:	fa01 f00c 	lsl.w	r0, r1, ip
    b444:	fa21 f102 	lsr.w	r1, r1, r2
    b448:	e00c      	b.n	b464 <__adddf3+0x184>
    b44a:	f102 0214 	add.w	r2, r2, #20
    b44e:	bfd8      	it	le
    b450:	f1c2 0c20 	rsble	ip, r2, #32
    b454:	fa01 f102 	lsl.w	r1, r1, r2
    b458:	fa20 fc0c 	lsr.w	ip, r0, ip
    b45c:	bfdc      	itt	le
    b45e:	ea41 010c 	orrle.w	r1, r1, ip
    b462:	4090      	lslle	r0, r2
    b464:	1ae4      	subs	r4, r4, r3
    b466:	bfa2      	ittt	ge
    b468:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    b46c:	4329      	orrge	r1, r5
    b46e:	bd30      	popge	{r4, r5, pc}
    b470:	ea6f 0404 	mvn.w	r4, r4
    b474:	3c1f      	subs	r4, #31
    b476:	da1c      	bge.n	b4b2 <__adddf3+0x1d2>
    b478:	340c      	adds	r4, #12
    b47a:	dc0e      	bgt.n	b49a <__adddf3+0x1ba>
    b47c:	f104 0414 	add.w	r4, r4, #20
    b480:	f1c4 0220 	rsb	r2, r4, #32
    b484:	fa20 f004 	lsr.w	r0, r0, r4
    b488:	fa01 f302 	lsl.w	r3, r1, r2
    b48c:	ea40 0003 	orr.w	r0, r0, r3
    b490:	fa21 f304 	lsr.w	r3, r1, r4
    b494:	ea45 0103 	orr.w	r1, r5, r3
    b498:	bd30      	pop	{r4, r5, pc}
    b49a:	f1c4 040c 	rsb	r4, r4, #12
    b49e:	f1c4 0220 	rsb	r2, r4, #32
    b4a2:	fa20 f002 	lsr.w	r0, r0, r2
    b4a6:	fa01 f304 	lsl.w	r3, r1, r4
    b4aa:	ea40 0003 	orr.w	r0, r0, r3
    b4ae:	4629      	mov	r1, r5
    b4b0:	bd30      	pop	{r4, r5, pc}
    b4b2:	fa21 f004 	lsr.w	r0, r1, r4
    b4b6:	4629      	mov	r1, r5
    b4b8:	bd30      	pop	{r4, r5, pc}
    b4ba:	f094 0f00 	teq	r4, #0
    b4be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    b4c2:	bf06      	itte	eq
    b4c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    b4c8:	3401      	addeq	r4, #1
    b4ca:	3d01      	subne	r5, #1
    b4cc:	e74e      	b.n	b36c <__adddf3+0x8c>
    b4ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b4d2:	bf18      	it	ne
    b4d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b4d8:	d029      	beq.n	b52e <__adddf3+0x24e>
    b4da:	ea94 0f05 	teq	r4, r5
    b4de:	bf08      	it	eq
    b4e0:	ea90 0f02 	teqeq	r0, r2
    b4e4:	d005      	beq.n	b4f2 <__adddf3+0x212>
    b4e6:	ea54 0c00 	orrs.w	ip, r4, r0
    b4ea:	bf04      	itt	eq
    b4ec:	4619      	moveq	r1, r3
    b4ee:	4610      	moveq	r0, r2
    b4f0:	bd30      	pop	{r4, r5, pc}
    b4f2:	ea91 0f03 	teq	r1, r3
    b4f6:	bf1e      	ittt	ne
    b4f8:	2100      	movne	r1, #0
    b4fa:	2000      	movne	r0, #0
    b4fc:	bd30      	popne	{r4, r5, pc}
    b4fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    b502:	d105      	bne.n	b510 <__adddf3+0x230>
    b504:	0040      	lsls	r0, r0, #1
    b506:	4149      	adcs	r1, r1
    b508:	bf28      	it	cs
    b50a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    b50e:	bd30      	pop	{r4, r5, pc}
    b510:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    b514:	bf3c      	itt	cc
    b516:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    b51a:	bd30      	popcc	{r4, r5, pc}
    b51c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b520:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    b524:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b528:	f04f 0000 	mov.w	r0, #0
    b52c:	bd30      	pop	{r4, r5, pc}
    b52e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b532:	bf1a      	itte	ne
    b534:	4619      	movne	r1, r3
    b536:	4610      	movne	r0, r2
    b538:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    b53c:	bf1c      	itt	ne
    b53e:	460b      	movne	r3, r1
    b540:	4602      	movne	r2, r0
    b542:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b546:	bf06      	itte	eq
    b548:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    b54c:	ea91 0f03 	teqeq	r1, r3
    b550:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    b554:	bd30      	pop	{r4, r5, pc}
    b556:	bf00      	nop

0000b558 <__aeabi_ui2d>:
    b558:	f090 0f00 	teq	r0, #0
    b55c:	bf04      	itt	eq
    b55e:	2100      	moveq	r1, #0
    b560:	4770      	bxeq	lr
    b562:	b530      	push	{r4, r5, lr}
    b564:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b568:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b56c:	f04f 0500 	mov.w	r5, #0
    b570:	f04f 0100 	mov.w	r1, #0
    b574:	e750      	b.n	b418 <__adddf3+0x138>
    b576:	bf00      	nop

0000b578 <__aeabi_i2d>:
    b578:	f090 0f00 	teq	r0, #0
    b57c:	bf04      	itt	eq
    b57e:	2100      	moveq	r1, #0
    b580:	4770      	bxeq	lr
    b582:	b530      	push	{r4, r5, lr}
    b584:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b588:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b58c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    b590:	bf48      	it	mi
    b592:	4240      	negmi	r0, r0
    b594:	f04f 0100 	mov.w	r1, #0
    b598:	e73e      	b.n	b418 <__adddf3+0x138>
    b59a:	bf00      	nop

0000b59c <__aeabi_f2d>:
    b59c:	0042      	lsls	r2, r0, #1
    b59e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    b5a2:	ea4f 0131 	mov.w	r1, r1, rrx
    b5a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
    b5aa:	bf1f      	itttt	ne
    b5ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    b5b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b5b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    b5b8:	4770      	bxne	lr
    b5ba:	f092 0f00 	teq	r2, #0
    b5be:	bf14      	ite	ne
    b5c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b5c4:	4770      	bxeq	lr
    b5c6:	b530      	push	{r4, r5, lr}
    b5c8:	f44f 7460 	mov.w	r4, #896	; 0x380
    b5cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b5d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b5d4:	e720      	b.n	b418 <__adddf3+0x138>
    b5d6:	bf00      	nop

0000b5d8 <__aeabi_ul2d>:
    b5d8:	ea50 0201 	orrs.w	r2, r0, r1
    b5dc:	bf08      	it	eq
    b5de:	4770      	bxeq	lr
    b5e0:	b530      	push	{r4, r5, lr}
    b5e2:	f04f 0500 	mov.w	r5, #0
    b5e6:	e00a      	b.n	b5fe <__aeabi_l2d+0x16>

0000b5e8 <__aeabi_l2d>:
    b5e8:	ea50 0201 	orrs.w	r2, r0, r1
    b5ec:	bf08      	it	eq
    b5ee:	4770      	bxeq	lr
    b5f0:	b530      	push	{r4, r5, lr}
    b5f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    b5f6:	d502      	bpl.n	b5fe <__aeabi_l2d+0x16>
    b5f8:	4240      	negs	r0, r0
    b5fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b5fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b602:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b606:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    b60a:	f43f aedc 	beq.w	b3c6 <__adddf3+0xe6>
    b60e:	f04f 0203 	mov.w	r2, #3
    b612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b616:	bf18      	it	ne
    b618:	3203      	addne	r2, #3
    b61a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b61e:	bf18      	it	ne
    b620:	3203      	addne	r2, #3
    b622:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    b626:	f1c2 0320 	rsb	r3, r2, #32
    b62a:	fa00 fc03 	lsl.w	ip, r0, r3
    b62e:	fa20 f002 	lsr.w	r0, r0, r2
    b632:	fa01 fe03 	lsl.w	lr, r1, r3
    b636:	ea40 000e 	orr.w	r0, r0, lr
    b63a:	fa21 f102 	lsr.w	r1, r1, r2
    b63e:	4414      	add	r4, r2
    b640:	e6c1      	b.n	b3c6 <__adddf3+0xe6>
    b642:	bf00      	nop

0000b644 <__aeabi_dmul>:
    b644:	b570      	push	{r4, r5, r6, lr}
    b646:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b64a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b64e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b652:	bf1d      	ittte	ne
    b654:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b658:	ea94 0f0c 	teqne	r4, ip
    b65c:	ea95 0f0c 	teqne	r5, ip
    b660:	f000 f8de 	bleq	b820 <__aeabi_dmul+0x1dc>
    b664:	442c      	add	r4, r5
    b666:	ea81 0603 	eor.w	r6, r1, r3
    b66a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    b66e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    b672:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    b676:	bf18      	it	ne
    b678:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    b67c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b680:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    b684:	d038      	beq.n	b6f8 <__aeabi_dmul+0xb4>
    b686:	fba0 ce02 	umull	ip, lr, r0, r2
    b68a:	f04f 0500 	mov.w	r5, #0
    b68e:	fbe1 e502 	umlal	lr, r5, r1, r2
    b692:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    b696:	fbe0 e503 	umlal	lr, r5, r0, r3
    b69a:	f04f 0600 	mov.w	r6, #0
    b69e:	fbe1 5603 	umlal	r5, r6, r1, r3
    b6a2:	f09c 0f00 	teq	ip, #0
    b6a6:	bf18      	it	ne
    b6a8:	f04e 0e01 	orrne.w	lr, lr, #1
    b6ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    b6b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    b6b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    b6b8:	d204      	bcs.n	b6c4 <__aeabi_dmul+0x80>
    b6ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    b6be:	416d      	adcs	r5, r5
    b6c0:	eb46 0606 	adc.w	r6, r6, r6
    b6c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    b6c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    b6cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    b6d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    b6d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    b6d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b6dc:	bf88      	it	hi
    b6de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b6e2:	d81e      	bhi.n	b722 <__aeabi_dmul+0xde>
    b6e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    b6e8:	bf08      	it	eq
    b6ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    b6ee:	f150 0000 	adcs.w	r0, r0, #0
    b6f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b6f6:	bd70      	pop	{r4, r5, r6, pc}
    b6f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    b6fc:	ea46 0101 	orr.w	r1, r6, r1
    b700:	ea40 0002 	orr.w	r0, r0, r2
    b704:	ea81 0103 	eor.w	r1, r1, r3
    b708:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    b70c:	bfc2      	ittt	gt
    b70e:	ebd4 050c 	rsbsgt	r5, r4, ip
    b712:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b716:	bd70      	popgt	{r4, r5, r6, pc}
    b718:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b71c:	f04f 0e00 	mov.w	lr, #0
    b720:	3c01      	subs	r4, #1
    b722:	f300 80ab 	bgt.w	b87c <__aeabi_dmul+0x238>
    b726:	f114 0f36 	cmn.w	r4, #54	; 0x36
    b72a:	bfde      	ittt	le
    b72c:	2000      	movle	r0, #0
    b72e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    b732:	bd70      	pople	{r4, r5, r6, pc}
    b734:	f1c4 0400 	rsb	r4, r4, #0
    b738:	3c20      	subs	r4, #32
    b73a:	da35      	bge.n	b7a8 <__aeabi_dmul+0x164>
    b73c:	340c      	adds	r4, #12
    b73e:	dc1b      	bgt.n	b778 <__aeabi_dmul+0x134>
    b740:	f104 0414 	add.w	r4, r4, #20
    b744:	f1c4 0520 	rsb	r5, r4, #32
    b748:	fa00 f305 	lsl.w	r3, r0, r5
    b74c:	fa20 f004 	lsr.w	r0, r0, r4
    b750:	fa01 f205 	lsl.w	r2, r1, r5
    b754:	ea40 0002 	orr.w	r0, r0, r2
    b758:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    b75c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    b764:	fa21 f604 	lsr.w	r6, r1, r4
    b768:	eb42 0106 	adc.w	r1, r2, r6
    b76c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b770:	bf08      	it	eq
    b772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b776:	bd70      	pop	{r4, r5, r6, pc}
    b778:	f1c4 040c 	rsb	r4, r4, #12
    b77c:	f1c4 0520 	rsb	r5, r4, #32
    b780:	fa00 f304 	lsl.w	r3, r0, r4
    b784:	fa20 f005 	lsr.w	r0, r0, r5
    b788:	fa01 f204 	lsl.w	r2, r1, r4
    b78c:	ea40 0002 	orr.w	r0, r0, r2
    b790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b794:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    b798:	f141 0100 	adc.w	r1, r1, #0
    b79c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b7a0:	bf08      	it	eq
    b7a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b7a6:	bd70      	pop	{r4, r5, r6, pc}
    b7a8:	f1c4 0520 	rsb	r5, r4, #32
    b7ac:	fa00 f205 	lsl.w	r2, r0, r5
    b7b0:	ea4e 0e02 	orr.w	lr, lr, r2
    b7b4:	fa20 f304 	lsr.w	r3, r0, r4
    b7b8:	fa01 f205 	lsl.w	r2, r1, r5
    b7bc:	ea43 0302 	orr.w	r3, r3, r2
    b7c0:	fa21 f004 	lsr.w	r0, r1, r4
    b7c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b7c8:	fa21 f204 	lsr.w	r2, r1, r4
    b7cc:	ea20 0002 	bic.w	r0, r0, r2
    b7d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    b7d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b7d8:	bf08      	it	eq
    b7da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b7de:	bd70      	pop	{r4, r5, r6, pc}
    b7e0:	f094 0f00 	teq	r4, #0
    b7e4:	d10f      	bne.n	b806 <__aeabi_dmul+0x1c2>
    b7e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    b7ea:	0040      	lsls	r0, r0, #1
    b7ec:	eb41 0101 	adc.w	r1, r1, r1
    b7f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b7f4:	bf08      	it	eq
    b7f6:	3c01      	subeq	r4, #1
    b7f8:	d0f7      	beq.n	b7ea <__aeabi_dmul+0x1a6>
    b7fa:	ea41 0106 	orr.w	r1, r1, r6
    b7fe:	f095 0f00 	teq	r5, #0
    b802:	bf18      	it	ne
    b804:	4770      	bxne	lr
    b806:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    b80a:	0052      	lsls	r2, r2, #1
    b80c:	eb43 0303 	adc.w	r3, r3, r3
    b810:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    b814:	bf08      	it	eq
    b816:	3d01      	subeq	r5, #1
    b818:	d0f7      	beq.n	b80a <__aeabi_dmul+0x1c6>
    b81a:	ea43 0306 	orr.w	r3, r3, r6
    b81e:	4770      	bx	lr
    b820:	ea94 0f0c 	teq	r4, ip
    b824:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b828:	bf18      	it	ne
    b82a:	ea95 0f0c 	teqne	r5, ip
    b82e:	d00c      	beq.n	b84a <__aeabi_dmul+0x206>
    b830:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b834:	bf18      	it	ne
    b836:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b83a:	d1d1      	bne.n	b7e0 <__aeabi_dmul+0x19c>
    b83c:	ea81 0103 	eor.w	r1, r1, r3
    b840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b844:	f04f 0000 	mov.w	r0, #0
    b848:	bd70      	pop	{r4, r5, r6, pc}
    b84a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b84e:	bf06      	itte	eq
    b850:	4610      	moveq	r0, r2
    b852:	4619      	moveq	r1, r3
    b854:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b858:	d019      	beq.n	b88e <__aeabi_dmul+0x24a>
    b85a:	ea94 0f0c 	teq	r4, ip
    b85e:	d102      	bne.n	b866 <__aeabi_dmul+0x222>
    b860:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    b864:	d113      	bne.n	b88e <__aeabi_dmul+0x24a>
    b866:	ea95 0f0c 	teq	r5, ip
    b86a:	d105      	bne.n	b878 <__aeabi_dmul+0x234>
    b86c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    b870:	bf1c      	itt	ne
    b872:	4610      	movne	r0, r2
    b874:	4619      	movne	r1, r3
    b876:	d10a      	bne.n	b88e <__aeabi_dmul+0x24a>
    b878:	ea81 0103 	eor.w	r1, r1, r3
    b87c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b880:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b884:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b888:	f04f 0000 	mov.w	r0, #0
    b88c:	bd70      	pop	{r4, r5, r6, pc}
    b88e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b892:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    b896:	bd70      	pop	{r4, r5, r6, pc}

0000b898 <__aeabi_ddiv>:
    b898:	b570      	push	{r4, r5, r6, lr}
    b89a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b89e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b8a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b8a6:	bf1d      	ittte	ne
    b8a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b8ac:	ea94 0f0c 	teqne	r4, ip
    b8b0:	ea95 0f0c 	teqne	r5, ip
    b8b4:	f000 f8a7 	bleq	ba06 <__aeabi_ddiv+0x16e>
    b8b8:	eba4 0405 	sub.w	r4, r4, r5
    b8bc:	ea81 0e03 	eor.w	lr, r1, r3
    b8c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b8c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b8c8:	f000 8088 	beq.w	b9dc <__aeabi_ddiv+0x144>
    b8cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b8d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    b8d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    b8d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    b8dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
    b8e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    b8e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    b8e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
    b8ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    b8f0:	429d      	cmp	r5, r3
    b8f2:	bf08      	it	eq
    b8f4:	4296      	cmpeq	r6, r2
    b8f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    b8fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
    b8fe:	d202      	bcs.n	b906 <__aeabi_ddiv+0x6e>
    b900:	085b      	lsrs	r3, r3, #1
    b902:	ea4f 0232 	mov.w	r2, r2, rrx
    b906:	1ab6      	subs	r6, r6, r2
    b908:	eb65 0503 	sbc.w	r5, r5, r3
    b90c:	085b      	lsrs	r3, r3, #1
    b90e:	ea4f 0232 	mov.w	r2, r2, rrx
    b912:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b916:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    b91a:	ebb6 0e02 	subs.w	lr, r6, r2
    b91e:	eb75 0e03 	sbcs.w	lr, r5, r3
    b922:	bf22      	ittt	cs
    b924:	1ab6      	subcs	r6, r6, r2
    b926:	4675      	movcs	r5, lr
    b928:	ea40 000c 	orrcs.w	r0, r0, ip
    b92c:	085b      	lsrs	r3, r3, #1
    b92e:	ea4f 0232 	mov.w	r2, r2, rrx
    b932:	ebb6 0e02 	subs.w	lr, r6, r2
    b936:	eb75 0e03 	sbcs.w	lr, r5, r3
    b93a:	bf22      	ittt	cs
    b93c:	1ab6      	subcs	r6, r6, r2
    b93e:	4675      	movcs	r5, lr
    b940:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    b944:	085b      	lsrs	r3, r3, #1
    b946:	ea4f 0232 	mov.w	r2, r2, rrx
    b94a:	ebb6 0e02 	subs.w	lr, r6, r2
    b94e:	eb75 0e03 	sbcs.w	lr, r5, r3
    b952:	bf22      	ittt	cs
    b954:	1ab6      	subcs	r6, r6, r2
    b956:	4675      	movcs	r5, lr
    b958:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    b95c:	085b      	lsrs	r3, r3, #1
    b95e:	ea4f 0232 	mov.w	r2, r2, rrx
    b962:	ebb6 0e02 	subs.w	lr, r6, r2
    b966:	eb75 0e03 	sbcs.w	lr, r5, r3
    b96a:	bf22      	ittt	cs
    b96c:	1ab6      	subcs	r6, r6, r2
    b96e:	4675      	movcs	r5, lr
    b970:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    b974:	ea55 0e06 	orrs.w	lr, r5, r6
    b978:	d018      	beq.n	b9ac <__aeabi_ddiv+0x114>
    b97a:	ea4f 1505 	mov.w	r5, r5, lsl #4
    b97e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    b982:	ea4f 1606 	mov.w	r6, r6, lsl #4
    b986:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    b98a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    b98e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    b992:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    b996:	d1c0      	bne.n	b91a <__aeabi_ddiv+0x82>
    b998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b99c:	d10b      	bne.n	b9b6 <__aeabi_ddiv+0x11e>
    b99e:	ea41 0100 	orr.w	r1, r1, r0
    b9a2:	f04f 0000 	mov.w	r0, #0
    b9a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    b9aa:	e7b6      	b.n	b91a <__aeabi_ddiv+0x82>
    b9ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b9b0:	bf04      	itt	eq
    b9b2:	4301      	orreq	r1, r0
    b9b4:	2000      	moveq	r0, #0
    b9b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b9ba:	bf88      	it	hi
    b9bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b9c0:	f63f aeaf 	bhi.w	b722 <__aeabi_dmul+0xde>
    b9c4:	ebb5 0c03 	subs.w	ip, r5, r3
    b9c8:	bf04      	itt	eq
    b9ca:	ebb6 0c02 	subseq.w	ip, r6, r2
    b9ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b9d2:	f150 0000 	adcs.w	r0, r0, #0
    b9d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b9da:	bd70      	pop	{r4, r5, r6, pc}
    b9dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    b9e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    b9e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    b9e8:	bfc2      	ittt	gt
    b9ea:	ebd4 050c 	rsbsgt	r5, r4, ip
    b9ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b9f2:	bd70      	popgt	{r4, r5, r6, pc}
    b9f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b9f8:	f04f 0e00 	mov.w	lr, #0
    b9fc:	3c01      	subs	r4, #1
    b9fe:	e690      	b.n	b722 <__aeabi_dmul+0xde>
    ba00:	ea45 0e06 	orr.w	lr, r5, r6
    ba04:	e68d      	b.n	b722 <__aeabi_dmul+0xde>
    ba06:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    ba0a:	ea94 0f0c 	teq	r4, ip
    ba0e:	bf08      	it	eq
    ba10:	ea95 0f0c 	teqeq	r5, ip
    ba14:	f43f af3b 	beq.w	b88e <__aeabi_dmul+0x24a>
    ba18:	ea94 0f0c 	teq	r4, ip
    ba1c:	d10a      	bne.n	ba34 <__aeabi_ddiv+0x19c>
    ba1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    ba22:	f47f af34 	bne.w	b88e <__aeabi_dmul+0x24a>
    ba26:	ea95 0f0c 	teq	r5, ip
    ba2a:	f47f af25 	bne.w	b878 <__aeabi_dmul+0x234>
    ba2e:	4610      	mov	r0, r2
    ba30:	4619      	mov	r1, r3
    ba32:	e72c      	b.n	b88e <__aeabi_dmul+0x24a>
    ba34:	ea95 0f0c 	teq	r5, ip
    ba38:	d106      	bne.n	ba48 <__aeabi_ddiv+0x1b0>
    ba3a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    ba3e:	f43f aefd 	beq.w	b83c <__aeabi_dmul+0x1f8>
    ba42:	4610      	mov	r0, r2
    ba44:	4619      	mov	r1, r3
    ba46:	e722      	b.n	b88e <__aeabi_dmul+0x24a>
    ba48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ba4c:	bf18      	it	ne
    ba4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ba52:	f47f aec5 	bne.w	b7e0 <__aeabi_dmul+0x19c>
    ba56:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    ba5a:	f47f af0d 	bne.w	b878 <__aeabi_dmul+0x234>
    ba5e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    ba62:	f47f aeeb 	bne.w	b83c <__aeabi_dmul+0x1f8>
    ba66:	e712      	b.n	b88e <__aeabi_dmul+0x24a>

0000ba68 <__gedf2>:
    ba68:	f04f 3cff 	mov.w	ip, #4294967295
    ba6c:	e006      	b.n	ba7c <__cmpdf2+0x4>
    ba6e:	bf00      	nop

0000ba70 <__ledf2>:
    ba70:	f04f 0c01 	mov.w	ip, #1
    ba74:	e002      	b.n	ba7c <__cmpdf2+0x4>
    ba76:	bf00      	nop

0000ba78 <__cmpdf2>:
    ba78:	f04f 0c01 	mov.w	ip, #1
    ba7c:	f84d cd04 	str.w	ip, [sp, #-4]!
    ba80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    ba84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ba88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    ba8c:	bf18      	it	ne
    ba8e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    ba92:	d01b      	beq.n	bacc <__cmpdf2+0x54>
    ba94:	b001      	add	sp, #4
    ba96:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    ba9a:	bf0c      	ite	eq
    ba9c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    baa0:	ea91 0f03 	teqne	r1, r3
    baa4:	bf02      	ittt	eq
    baa6:	ea90 0f02 	teqeq	r0, r2
    baaa:	2000      	moveq	r0, #0
    baac:	4770      	bxeq	lr
    baae:	f110 0f00 	cmn.w	r0, #0
    bab2:	ea91 0f03 	teq	r1, r3
    bab6:	bf58      	it	pl
    bab8:	4299      	cmppl	r1, r3
    baba:	bf08      	it	eq
    babc:	4290      	cmpeq	r0, r2
    babe:	bf2c      	ite	cs
    bac0:	17d8      	asrcs	r0, r3, #31
    bac2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    bac6:	f040 0001 	orr.w	r0, r0, #1
    baca:	4770      	bx	lr
    bacc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    bad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    bad4:	d102      	bne.n	badc <__cmpdf2+0x64>
    bad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    bada:	d107      	bne.n	baec <__cmpdf2+0x74>
    badc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    bae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    bae4:	d1d6      	bne.n	ba94 <__cmpdf2+0x1c>
    bae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    baea:	d0d3      	beq.n	ba94 <__cmpdf2+0x1c>
    baec:	f85d 0b04 	ldr.w	r0, [sp], #4
    baf0:	4770      	bx	lr
    baf2:	bf00      	nop

0000baf4 <__aeabi_cdrcmple>:
    baf4:	4684      	mov	ip, r0
    baf6:	4610      	mov	r0, r2
    baf8:	4662      	mov	r2, ip
    bafa:	468c      	mov	ip, r1
    bafc:	4619      	mov	r1, r3
    bafe:	4663      	mov	r3, ip
    bb00:	e000      	b.n	bb04 <__aeabi_cdcmpeq>
    bb02:	bf00      	nop

0000bb04 <__aeabi_cdcmpeq>:
    bb04:	b501      	push	{r0, lr}
    bb06:	f7ff ffb7 	bl	ba78 <__cmpdf2>
    bb0a:	2800      	cmp	r0, #0
    bb0c:	bf48      	it	mi
    bb0e:	f110 0f00 	cmnmi.w	r0, #0
    bb12:	bd01      	pop	{r0, pc}

0000bb14 <__aeabi_dcmpeq>:
    bb14:	f84d ed08 	str.w	lr, [sp, #-8]!
    bb18:	f7ff fff4 	bl	bb04 <__aeabi_cdcmpeq>
    bb1c:	bf0c      	ite	eq
    bb1e:	2001      	moveq	r0, #1
    bb20:	2000      	movne	r0, #0
    bb22:	f85d fb08 	ldr.w	pc, [sp], #8
    bb26:	bf00      	nop

0000bb28 <__aeabi_dcmplt>:
    bb28:	f84d ed08 	str.w	lr, [sp, #-8]!
    bb2c:	f7ff ffea 	bl	bb04 <__aeabi_cdcmpeq>
    bb30:	bf34      	ite	cc
    bb32:	2001      	movcc	r0, #1
    bb34:	2000      	movcs	r0, #0
    bb36:	f85d fb08 	ldr.w	pc, [sp], #8
    bb3a:	bf00      	nop

0000bb3c <__aeabi_dcmple>:
    bb3c:	f84d ed08 	str.w	lr, [sp, #-8]!
    bb40:	f7ff ffe0 	bl	bb04 <__aeabi_cdcmpeq>
    bb44:	bf94      	ite	ls
    bb46:	2001      	movls	r0, #1
    bb48:	2000      	movhi	r0, #0
    bb4a:	f85d fb08 	ldr.w	pc, [sp], #8
    bb4e:	bf00      	nop

0000bb50 <__aeabi_dcmpge>:
    bb50:	f84d ed08 	str.w	lr, [sp, #-8]!
    bb54:	f7ff ffce 	bl	baf4 <__aeabi_cdrcmple>
    bb58:	bf94      	ite	ls
    bb5a:	2001      	movls	r0, #1
    bb5c:	2000      	movhi	r0, #0
    bb5e:	f85d fb08 	ldr.w	pc, [sp], #8
    bb62:	bf00      	nop

0000bb64 <__aeabi_dcmpgt>:
    bb64:	f84d ed08 	str.w	lr, [sp, #-8]!
    bb68:	f7ff ffc4 	bl	baf4 <__aeabi_cdrcmple>
    bb6c:	bf34      	ite	cc
    bb6e:	2001      	movcc	r0, #1
    bb70:	2000      	movcs	r0, #0
    bb72:	f85d fb08 	ldr.w	pc, [sp], #8
    bb76:	bf00      	nop

0000bb78 <__aeabi_dcmpun>:
    bb78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    bb7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    bb80:	d102      	bne.n	bb88 <__aeabi_dcmpun+0x10>
    bb82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    bb86:	d10a      	bne.n	bb9e <__aeabi_dcmpun+0x26>
    bb88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    bb8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    bb90:	d102      	bne.n	bb98 <__aeabi_dcmpun+0x20>
    bb92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    bb96:	d102      	bne.n	bb9e <__aeabi_dcmpun+0x26>
    bb98:	f04f 0000 	mov.w	r0, #0
    bb9c:	4770      	bx	lr
    bb9e:	f04f 0001 	mov.w	r0, #1
    bba2:	4770      	bx	lr

0000bba4 <__aeabi_d2iz>:
    bba4:	ea4f 0241 	mov.w	r2, r1, lsl #1
    bba8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    bbac:	d215      	bcs.n	bbda <__aeabi_d2iz+0x36>
    bbae:	d511      	bpl.n	bbd4 <__aeabi_d2iz+0x30>
    bbb0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    bbb4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    bbb8:	d912      	bls.n	bbe0 <__aeabi_d2iz+0x3c>
    bbba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    bbbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    bbc2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    bbc6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    bbca:	fa23 f002 	lsr.w	r0, r3, r2
    bbce:	bf18      	it	ne
    bbd0:	4240      	negne	r0, r0
    bbd2:	4770      	bx	lr
    bbd4:	f04f 0000 	mov.w	r0, #0
    bbd8:	4770      	bx	lr
    bbda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    bbde:	d105      	bne.n	bbec <__aeabi_d2iz+0x48>
    bbe0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    bbe4:	bf08      	it	eq
    bbe6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    bbea:	4770      	bx	lr
    bbec:	f04f 0000 	mov.w	r0, #0
    bbf0:	4770      	bx	lr
    bbf2:	bf00      	nop

0000bbf4 <__aeabi_d2uiz>:
    bbf4:	004a      	lsls	r2, r1, #1
    bbf6:	d211      	bcs.n	bc1c <__aeabi_d2uiz+0x28>
    bbf8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    bbfc:	d211      	bcs.n	bc22 <__aeabi_d2uiz+0x2e>
    bbfe:	d50d      	bpl.n	bc1c <__aeabi_d2uiz+0x28>
    bc00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    bc04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    bc08:	d40e      	bmi.n	bc28 <__aeabi_d2uiz+0x34>
    bc0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    bc0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    bc12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    bc16:	fa23 f002 	lsr.w	r0, r3, r2
    bc1a:	4770      	bx	lr
    bc1c:	f04f 0000 	mov.w	r0, #0
    bc20:	4770      	bx	lr
    bc22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    bc26:	d102      	bne.n	bc2e <__aeabi_d2uiz+0x3a>
    bc28:	f04f 30ff 	mov.w	r0, #4294967295
    bc2c:	4770      	bx	lr
    bc2e:	f04f 0000 	mov.w	r0, #0
    bc32:	4770      	bx	lr
    bc34:	0f0f0f0f 	.word	0x0f0f0f0f
    bc38:	0000000f 	.word	0x0000000f
    bc3c:	00643425 	.word	0x00643425
    bc40:	0001c200 	.word	0x0001c200
    bc44:	000000c0 	.word	0x000000c0
    bc48:	00000800 	.word	0x00000800
    bc4c:	00000000 	.word	0x00000000
    bc50:	202d2d2d 	.word	0x202d2d2d
    bc54:	69766544 	.word	0x69766544
    bc58:	6d206563 	.word	0x6d206563
    bc5c:	2065646f 	.word	0x2065646f
    bc60:	6c696166 	.word	0x6c696166
    bc64:	74206465 	.word	0x74206465
    bc68:	6562206f 	.word	0x6562206f
    bc6c:	74657320 	.word	0x74657320
    bc70:	000a0d2e 	.word	0x000a0d2e
    bc74:	202b2b2b 	.word	0x202b2b2b
    bc78:	69766544 	.word	0x69766544
    bc7c:	6d206563 	.word	0x6d206563
    bc80:	2065646f 	.word	0x2065646f
    bc84:	2e746573 	.word	0x2e746573
    bc88:	00000a0d 	.word	0x00000a0d
    bc8c:	65747942 	.word	0x65747942
    bc90:	203a3120 	.word	0x203a3120
    bc94:	0a0d5825 	.word	0x0a0d5825
    bc98:	00000000 	.word	0x00000000
    bc9c:	202d2d2d 	.word	0x202d2d2d
    bca0:	6c696146 	.word	0x6c696146
    bca4:	74206465 	.word	0x74206465
    bca8:	6572206f 	.word	0x6572206f
    bcac:	64206461 	.word	0x64206461
    bcb0:	63697665 	.word	0x63697665
    bcb4:	6f6d2065 	.word	0x6f6d2065
    bcb8:	0d2e6564 	.word	0x0d2e6564
    bcbc:	0000000a 	.word	0x0000000a
    bcc0:	202b2b2b 	.word	0x202b2b2b
    bcc4:	69766544 	.word	0x69766544
    bcc8:	6d206563 	.word	0x6d206563
    bccc:	2065646f 	.word	0x2065646f
    bcd0:	64616572 	.word	0x64616572
    bcd4:	000a0d2e 	.word	0x000a0d2e
    bcd8:	65747942 	.word	0x65747942
    bcdc:	203a3220 	.word	0x203a3220
    bce0:	0a0d5825 	.word	0x0a0d5825
    bce4:	00000000 	.word	0x00000000
    bce8:	202d2d2d 	.word	0x202d2d2d
    bcec:	6c696146 	.word	0x6c696146
    bcf0:	74206465 	.word	0x74206465
    bcf4:	6572206f 	.word	0x6572206f
    bcf8:	72206461 	.word	0x72206461
    bcfc:	73696765 	.word	0x73696765
    bd00:	20726574 	.word	0x20726574
    bd04:	72747461 	.word	0x72747461
    bd08:	74756269 	.word	0x74756269
    bd0c:	0d2e7365 	.word	0x0d2e7365
    bd10:	0000000a 	.word	0x0000000a
    bd14:	202b2b2b 	.word	0x202b2b2b
    bd18:	69676552 	.word	0x69676552
    bd1c:	72657473 	.word	0x72657473
    bd20:	74746120 	.word	0x74746120
    bd24:	75626972 	.word	0x75626972
    bd28:	20736574 	.word	0x20736574
    bd2c:	64616572 	.word	0x64616572
    bd30:	000a0d2e 	.word	0x000a0d2e
    bd34:	65747942 	.word	0x65747942
    bd38:	203a3320 	.word	0x203a3320
    bd3c:	0a0d5825 	.word	0x0a0d5825
    bd40:	00000000 	.word	0x00000000
    bd44:	00000342 	.word	0x00000342
    bd48:	202d2d2d 	.word	0x202d2d2d
    bd4c:	7074754f 	.word	0x7074754f
    bd50:	6d207475 	.word	0x6d207475
    bd54:	2065646f 	.word	0x2065646f
    bd58:	6c696166 	.word	0x6c696166
    bd5c:	74206465 	.word	0x74206465
    bd60:	6562206f 	.word	0x6562206f
    bd64:	74657320 	.word	0x74657320
    bd68:	000a0d2e 	.word	0x000a0d2e
    bd6c:	202b2b2b 	.word	0x202b2b2b
    bd70:	7074754f 	.word	0x7074754f
    bd74:	6d207475 	.word	0x6d207475
    bd78:	2065646f 	.word	0x2065646f
    bd7c:	2e746573 	.word	0x2e746573
    bd80:	00000a0d 	.word	0x00000a0d
    bd84:	00020010 	.word	0x00020010
    bd88:	202d2d2d 	.word	0x202d2d2d
    bd8c:	4f464946 	.word	0x4f464946
    bd90:	72687420 	.word	0x72687420
    bd94:	6f687365 	.word	0x6f687365
    bd98:	6620646c 	.word	0x6620646c
    bd9c:	656c6961 	.word	0x656c6961
    bda0:	6f742064 	.word	0x6f742064
    bda4:	20656220 	.word	0x20656220
    bda8:	2e746573 	.word	0x2e746573
    bdac:	00000a0d 	.word	0x00000a0d
    bdb0:	202b2b2b 	.word	0x202b2b2b
    bdb4:	4f464946 	.word	0x4f464946
    bdb8:	72687420 	.word	0x72687420
    bdbc:	6f687365 	.word	0x6f687365
    bdc0:	7320646c 	.word	0x7320646c
    bdc4:	0d2e7465 	.word	0x0d2e7465
    bdc8:	0000000a 	.word	0x0000000a
    bdcc:	00010110 	.word	0x00010110
    bdd0:	202d2d2d 	.word	0x202d2d2d
    bdd4:	20434741 	.word	0x20434741
    bdd8:	6c696166 	.word	0x6c696166
    bddc:	74206465 	.word	0x74206465
    bde0:	6562206f 	.word	0x6562206f
    bde4:	616e6520 	.word	0x616e6520
    bde8:	64656c62 	.word	0x64656c62
    bdec:	000a0d2e 	.word	0x000a0d2e
    bdf0:	202b2b2b 	.word	0x202b2b2b
    bdf4:	20434741 	.word	0x20434741
    bdf8:	62616e65 	.word	0x62616e65
    bdfc:	2e64656c 	.word	0x2e64656c
    be00:	00000a0d 	.word	0x00000a0d
    be04:	00010052 	.word	0x00010052
    be08:	202d2d2d 	.word	0x202d2d2d
    be0c:	73205248 	.word	0x73205248
    be10:	6f736e65 	.word	0x6f736e65
    be14:	61662072 	.word	0x61662072
    be18:	64656c69 	.word	0x64656c69
    be1c:	206f7420 	.word	0x206f7420
    be20:	65206562 	.word	0x65206562
    be24:	6c62616e 	.word	0x6c62616e
    be28:	0d2e6465 	.word	0x0d2e6465
    be2c:	0000000a 	.word	0x0000000a
    be30:	202b2b2b 	.word	0x202b2b2b
    be34:	73205248 	.word	0x73205248
    be38:	6f736e65 	.word	0x6f736e65
    be3c:	6e652072 	.word	0x6e652072
    be40:	656c6261 	.word	0x656c6261
    be44:	0a0d2e64 	.word	0x0a0d2e64
    be48:	00000000 	.word	0x00000000
    be4c:	00010344 	.word	0x00010344
    be50:	202d2d2d 	.word	0x202d2d2d
    be54:	6f676c41 	.word	0x6f676c41
    be58:	68746972 	.word	0x68746972
    be5c:	6166206d 	.word	0x6166206d
    be60:	64656c69 	.word	0x64656c69
    be64:	206f7420 	.word	0x206f7420
    be68:	73206562 	.word	0x73206562
    be6c:	0d2e7465 	.word	0x0d2e7465
    be70:	0000000a 	.word	0x0000000a
    be74:	202b2b2b 	.word	0x202b2b2b
    be78:	6f676c41 	.word	0x6f676c41
    be7c:	68746972 	.word	0x68746972
    be80:	6573206d 	.word	0x6573206d
    be84:	0a0d2e74 	.word	0x0a0d2e74
    be88:	00000000 	.word	0x00000000
    be8c:	00010252 	.word	0x00010252
    be90:	202d2d2d 	.word	0x202d2d2d
    be94:	6c696146 	.word	0x6c696146
    be98:	74206465 	.word	0x74206465
    be9c:	6572206f 	.word	0x6572206f
    bea0:	6e206461 	.word	0x6e206461
    bea4:	65626d75 	.word	0x65626d75
    bea8:	666f2072 	.word	0x666f2072
    beac:	6d617320 	.word	0x6d617320
    beb0:	73656c70 	.word	0x73656c70
    beb4:	726f6620 	.word	0x726f6620
    beb8:	43474120 	.word	0x43474120
    bebc:	676c6120 	.word	0x676c6120
    bec0:	7469726f 	.word	0x7469726f
    bec4:	0d2e6d68 	.word	0x0d2e6d68
    bec8:	0000000a 	.word	0x0000000a
    becc:	202b2b2b 	.word	0x202b2b2b
    bed0:	64616552 	.word	0x64616552
    bed4:	6d756e20 	.word	0x6d756e20
    bed8:	20726562 	.word	0x20726562
    bedc:	7320666f 	.word	0x7320666f
    bee0:	6c706d61 	.word	0x6c706d61
    bee4:	66207365 	.word	0x66207365
    bee8:	4120726f 	.word	0x4120726f
    beec:	61204347 	.word	0x61204347
    bef0:	726f676c 	.word	0x726f676c
    bef4:	6d687469 	.word	0x6d687469
    bef8:	000a0d2e 	.word	0x000a0d2e
    befc:	00030051 	.word	0x00030051
    bf00:	202d2d2d 	.word	0x202d2d2d
    bf04:	736e6553 	.word	0x736e6553
    bf08:	7320726f 	.word	0x7320726f
    bf0c:	75746174 	.word	0x75746174
    bf10:	6f6e2073 	.word	0x6f6e2073
    bf14:	65722074 	.word	0x65722074
    bf18:	0d2e6461 	.word	0x0d2e6461
    bf1c:	0000000a 	.word	0x0000000a
    bf20:	202b2b2b 	.word	0x202b2b2b
    bf24:	736e6553 	.word	0x736e6553
    bf28:	7320726f 	.word	0x7320726f
    bf2c:	75746174 	.word	0x75746174
    bf30:	65722073 	.word	0x65722073
    bf34:	0d2e6461 	.word	0x0d2e6461
    bf38:	0000000a 	.word	0x0000000a
    bf3c:	202d2d2d 	.word	0x202d2d2d
    bf40:	206d754e 	.word	0x206d754e
    bf44:	706d6173 	.word	0x706d6173
    bf48:	2073656c 	.word	0x2073656c
    bf4c:	6c696166 	.word	0x6c696166
    bf50:	74206465 	.word	0x74206465
    bf54:	6562206f 	.word	0x6562206f
    bf58:	61657220 	.word	0x61657220
    bf5c:	0a0d2e64 	.word	0x0a0d2e64
    bf60:	00000000 	.word	0x00000000
    bf64:	202b2b2b 	.word	0x202b2b2b
    bf68:	206d754e 	.word	0x206d754e
    bf6c:	706d6173 	.word	0x706d6173
    bf70:	2073656c 	.word	0x2073656c
    bf74:	64616572 	.word	0x64616572
    bf78:	000a0d2e 	.word	0x000a0d2e
    bf7c:	202d2d2d 	.word	0x202d2d2d
    bf80:	6c696146 	.word	0x6c696146
    bf84:	74206465 	.word	0x74206465
    bf88:	6572206f 	.word	0x6572206f
    bf8c:	64206461 	.word	0x64206461
    bf90:	2e617461 	.word	0x2e617461
    bf94:	00000a0d 	.word	0x00000a0d
    bf98:	202b2b2b 	.word	0x202b2b2b
    bf9c:	61746144 	.word	0x61746144
    bfa0:	61657220 	.word	0x61657220
    bfa4:	0a0d2e64 	.word	0x0a0d2e64
    bfa8:	00000000 	.word	0x00000000
    bfac:	203a5248 	.word	0x203a5248
    bfb0:	0a0d6925 	.word	0x0a0d6925
    bfb4:	00000000 	.word	0x00000000
    bfb8:	74617453 	.word	0x74617453
    bfbc:	203a7375 	.word	0x203a7375
    bfc0:	0a0d7825 	.word	0x0a0d7825
    bfc4:	00000a0d 	.word	0x00000a0d
    bfc8:	00000112 	.word	0x00000112
    bfcc:	202d2d2d 	.word	0x202d2d2d
    bfd0:	73205248 	.word	0x73205248
    bfd4:	6f736e65 	.word	0x6f736e65
    bfd8:	61662072 	.word	0x61662072
    bfdc:	64656c69 	.word	0x64656c69
    bfe0:	206f7420 	.word	0x206f7420
    bfe4:	64206562 	.word	0x64206562
    bfe8:	62617369 	.word	0x62617369
    bfec:	2e64656c 	.word	0x2e64656c
    bff0:	00000a0d 	.word	0x00000a0d
    bff4:	202b2b2b 	.word	0x202b2b2b
    bff8:	73205248 	.word	0x73205248
    bffc:	6f736e65 	.word	0x6f736e65
    c000:	69642072 	.word	0x69642072
    c004:	6c626173 	.word	0x6c626173
    c008:	0d2e6465 	.word	0x0d2e6465
    c00c:	0000000a 	.word	0x0000000a
    c010:	00000344 	.word	0x00000344
    c014:	202d2d2d 	.word	0x202d2d2d
    c018:	6f676c41 	.word	0x6f676c41
    c01c:	68746972 	.word	0x68746972
    c020:	6166206d 	.word	0x6166206d
    c024:	64656c69 	.word	0x64656c69
    c028:	206f7420 	.word	0x206f7420
    c02c:	64206562 	.word	0x64206562
    c030:	62617369 	.word	0x62617369
    c034:	2e64656c 	.word	0x2e64656c
    c038:	00000a0d 	.word	0x00000a0d
    c03c:	202b2b2b 	.word	0x202b2b2b
    c040:	6f676c41 	.word	0x6f676c41
    c044:	68746972 	.word	0x68746972
    c048:	6964206d 	.word	0x6964206d
    c04c:	6c626173 	.word	0x6c626173
    c050:	0d2e6465 	.word	0x0d2e6465
    c054:	0000000a 	.word	0x0000000a
    c058:	00000252 	.word	0x00000252
    c05c:	2a2a0a0d 	.word	0x2a2a0a0d
    c060:	2a2a2a2a 	.word	0x2a2a2a2a
    c064:	2a2a2a2a 	.word	0x2a2a2a2a
    c068:	41545320 	.word	0x41545320
    c06c:	4e495452 	.word	0x4e495452
    c070:	4e492047 	.word	0x4e492047
    c074:	41495449 	.word	0x41495449
    c078:	415a494c 	.word	0x415a494c
    c07c:	4e4f4954 	.word	0x4e4f4954
    c080:	2a2a2a20 	.word	0x2a2a2a20
    c084:	2a2a2a2a 	.word	0x2a2a2a2a
    c088:	0d2a2a2a 	.word	0x0d2a2a2a
    c08c:	0000000a 	.word	0x0000000a
    c090:	65440a0d 	.word	0x65440a0d
    c094:	65636976 	.word	0x65636976
    c098:	646f6d20 	.word	0x646f6d20
    c09c:	65722065 	.word	0x65722065
    c0a0:	0d3a6461 	.word	0x0d3a6461
    c0a4:	0000000a 	.word	0x0000000a
    c0a8:	65520a0d 	.word	0x65520a0d
    c0ac:	74736967 	.word	0x74736967
    c0b0:	61207265 	.word	0x61207265
    c0b4:	69727474 	.word	0x69727474
    c0b8:	65747562 	.word	0x65747562
    c0bc:	0d203a73 	.word	0x0d203a73
    c0c0:	0000000a 	.word	0x0000000a
    c0c4:	65530a0d 	.word	0x65530a0d
    c0c8:	6e697474 	.word	0x6e697474
    c0cc:	756f2067 	.word	0x756f2067
    c0d0:	74757074 	.word	0x74757074
    c0d4:	646f6d20 	.word	0x646f6d20
    c0d8:	0d203a65 	.word	0x0d203a65
    c0dc:	0000000a 	.word	0x0000000a
    c0e0:	65530a0d 	.word	0x65530a0d
    c0e4:	6e697474 	.word	0x6e697474
    c0e8:	68742067 	.word	0x68742067
    c0ec:	68736572 	.word	0x68736572
    c0f0:	3a646c6f 	.word	0x3a646c6f
    c0f4:	000a0d20 	.word	0x000a0d20
    c0f8:	6e450a0d 	.word	0x6e450a0d
    c0fc:	696c6261 	.word	0x696c6261
    c100:	6120676e 	.word	0x6120676e
    c104:	203a6367 	.word	0x203a6367
    c108:	00000a0d 	.word	0x00000a0d
    c10c:	6e450a0d 	.word	0x6e450a0d
    c110:	696c6261 	.word	0x696c6261
    c114:	4820676e 	.word	0x4820676e
    c118:	65732052 	.word	0x65732052
    c11c:	726f736e 	.word	0x726f736e
    c120:	0a0d203a 	.word	0x0a0d203a
    c124:	00000000 	.word	0x00000000
    c128:	6e450a0d 	.word	0x6e450a0d
    c12c:	696c6261 	.word	0x696c6261
    c130:	6120676e 	.word	0x6120676e
    c134:	726f676c 	.word	0x726f676c
    c138:	6d687469 	.word	0x6d687469
    c13c:	0a0d203a 	.word	0x0a0d203a
    c140:	00000000 	.word	0x00000000
    c144:	6f430a0d 	.word	0x6f430a0d
    c148:	6769666e 	.word	0x6769666e
    c14c:	6e697275 	.word	0x6e697275
    c150:	6c612067 	.word	0x6c612067
    c154:	69726f67 	.word	0x69726f67
    c158:	206d6874 	.word	0x206d6874
    c15c:	706d6173 	.word	0x706d6173
    c160:	3a73656c 	.word	0x3a73656c
    c164:	000a0d20 	.word	0x000a0d20
    c168:	2a2a0a0d 	.word	0x2a2a0a0d
    c16c:	2a2a2a2a 	.word	0x2a2a2a2a
    c170:	2a2a2a2a 	.word	0x2a2a2a2a
    c174:	494e4920 	.word	0x494e4920
    c178:	4c414954 	.word	0x4c414954
    c17c:	54415a49 	.word	0x54415a49
    c180:	204e4f49 	.word	0x204e4f49
    c184:	504d4f43 	.word	0x504d4f43
    c188:	4554454c 	.word	0x4554454c
    c18c:	2a2a2a20 	.word	0x2a2a2a20
    c190:	2a2a2a2a 	.word	0x2a2a2a2a
    c194:	0d2a2a2a 	.word	0x0d2a2a2a
    c198:	0000000a 	.word	0x0000000a
    c19c:	63746157 	.word	0x63746157
    c1a0:	74732068 	.word	0x74732068
    c1a4:	3a657461 	.word	0x3a657461
    c1a8:	0d642520 	.word	0x0d642520
    c1ac:	0000000a 	.word	0x0000000a
    c1b0:	70736944 	.word	0x70736944
    c1b4:	2079616c 	.word	0x2079616c
    c1b8:	74617473 	.word	0x74617473
    c1bc:	25203a65 	.word	0x25203a65
    c1c0:	000a0d64 	.word	0x000a0d64
    c1c4:	000662b5 	.word	0x000662b5
    c1c8:	07000001 	.word	0x07000001
    c1cc:	00000021 	.word	0x00000021
    c1d0:	070162b5 	.word	0x070162b5
    c1d4:	19080000 	.word	0x19080000
    c1d8:	52415453 	.word	0x52415453
    c1dc:	00000054 	.word	0x00000054
    c1e0:	3a74616c 	.word	0x3a74616c
    c1e4:	0d642520 	.word	0x0d642520
    c1e8:	0000000a 	.word	0x0000000a
    c1ec:	3a6e6f6c 	.word	0x3a6e6f6c
    c1f0:	0d642520 	.word	0x0d642520
    c1f4:	0000000a 	.word	0x0000000a
    c1f8:	6e616863 	.word	0x6e616863
    c1fc:	614c6567 	.word	0x614c6567
    c200:	25203a74 	.word	0x25203a74
    c204:	000a0d64 	.word	0x000a0d64
    c208:	25203a61 	.word	0x25203a61
    c20c:	66352e33 	.word	0x66352e33
    c210:	00000a0d 	.word	0x00000a0d
    c214:	74736944 	.word	0x74736944
    c218:	65636e61 	.word	0x65636e61
    c21c:	3325203a 	.word	0x3325203a
    c220:	0d66322e 	.word	0x0d66322e
    c224:	0000000a 	.word	0x0000000a
    c228:	61746f54 	.word	0x61746f54
    c22c:	6964206c 	.word	0x6964206c
    c230:	6e617473 	.word	0x6e617473
    c234:	203a6563 	.word	0x203a6563
    c238:	2e303125 	.word	0x2e303125
    c23c:	0d663031 	.word	0x0d663031
    c240:	0000000a 	.word	0x0000000a
    c244:	4e494452 	.word	0x4e494452
    c248:	00000047 	.word	0x00000047
    c24c:	454e4f44 	.word	0x454e4f44
    c250:	00000000 	.word	0x00000000
    c254:	6e697361 	.word	0x6e697361
    c258:	00000000 	.word	0x00000000
    c25c:	74727173 	.word	0x74727173
    c260:	00000000 	.word	0x00000000

0000c264 <npio2_hw>:
    c264:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
    c274:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
    c284:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
    c294:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
    c2a4:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
    c2b4:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
    c2c4:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
    c2d4:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

0000c2e4 <two_over_pi>:
    c2e4:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
    c2f4:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
    c304:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
    c314:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
    c324:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
    c334:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
    c344:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
    c354:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
    c364:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
    c374:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
    c384:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
    c394:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
    c3a4:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
    c3b4:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
    c3c4:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
    c3d4:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
    c3e4:	0060e27b 00c08c6b 00000000              {.`.k.......

0000c3f0 <PIo2>:
    c3f0:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
    c400:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
    c410:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
    c420:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

0000c430 <init_jk>:
    c430:	00000002 00000003 00000004 00000006     ................

0000c440 <_global_impure_ptr>:
    c440:	20000088 00464e49 00666e69 004e414e     ... INF.inf.NAN.
    c450:	006e616e 31300030 35343332 39383736     nan.0.0123456789
    c460:	44434241 30004645 34333231 38373635     ABCDEF.012345678
    c470:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
    c480:	4e614e00 00000000                       .NaN....

0000c488 <__sf_fake_stderr>:
	...

0000c4a8 <__sf_fake_stdin>:
	...

0000c4c8 <__sf_fake_stdout>:
	...

0000c4e8 <__mprec_bigtens>:
    c4e8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    c4f8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    c508:	7f73bf3c 75154fdd                       <.s..O.u

0000c510 <__mprec_tens>:
    c510:	00000000 3ff00000 00000000 40240000     .......?......$@
    c520:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    c530:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    c540:	00000000 412e8480 00000000 416312d0     .......A......cA
    c550:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    c560:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    c570:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    c580:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    c590:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    c5a0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    c5b0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    c5c0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    c5d0:	79d99db4 44ea7843                       ...yCx.D

0000c5d8 <p05.6047>:
    c5d8:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    c5e8:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
    c5f8:	5849534f 00002e00                                OSIX...

0000c5ff <_ctype_>:
    c5ff:	20202000 20202020 28282020 20282828     .         ((((( 
    c60f:	20202020 20202020 20202020 20202020                     
    c61f:	10108820 10101010 10101010 10101010      ...............
    c62f:	04040410 04040404 10040404 10101010     ................
    c63f:	41411010 41414141 01010101 01010101     ..AAAAAA........
    c64f:	01010101 01010101 01010101 10101010     ................
    c65f:	42421010 42424242 02020202 02020202     ..BBBBBB........
    c66f:	02020202 02020202 02020202 10101010     ................
    c67f:	00000020 00000000 00000000 00000000      ...............
	...

0000c700 <_init>:
    c700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c702:	bf00      	nop
    c704:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c706:	bc08      	pop	{r3}
    c708:	469e      	mov	lr, r3
    c70a:	4770      	bx	lr

0000c70c <__init_array_start>:
    c70c:	000001a5 	.word	0x000001a5

0000c710 <_fini>:
    c710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c712:	bf00      	nop
    c714:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c716:	bc08      	pop	{r3}
    c718:	469e      	mov	lr, r3
    c71a:	4770      	bx	lr

0000c71c <__fini_array_start>:
    c71c:	00000181 	.word	0x00000181

Disassembly of section .relocate:

20000000 <bpm_ps_no_halt_exec>:
{
20000000:	b480      	push	{r7}
20000002:	b085      	sub	sp, #20
20000004:	af00      	add	r7, sp, #0
20000006:	6078      	str	r0, [r7, #4]
20000008:	6039      	str	r1, [r7, #0]
	bool b_psok = false;
2000000a:	2300      	movs	r3, #0
2000000c:	73fb      	strb	r3, [r7, #15]
	bool b_timeout = false;
2000000e:	2300      	movs	r3, #0
20000010:	73bb      	strb	r3, [r7, #14]
	BPM_UNLOCK(PMCON);
20000012:	4b15      	ldr	r3, [pc, #84]	; (20000068 <bpm_ps_no_halt_exec+0x68>)
20000014:	4a15      	ldr	r2, [pc, #84]	; (2000006c <bpm_ps_no_halt_exec+0x6c>)
20000016:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
20000018:	687b      	ldr	r3, [r7, #4]
2000001a:	683a      	ldr	r2, [r7, #0]
2000001c:	61da      	str	r2, [r3, #28]
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
2000001e:	4b12      	ldr	r3, [pc, #72]	; (20000068 <bpm_ps_no_halt_exec+0x68>)
20000020:	695b      	ldr	r3, [r3, #20]
20000022:	f003 0301 	and.w	r3, r3, #1
20000026:	2b00      	cmp	r3, #0
20000028:	bf14      	ite	ne
2000002a:	2301      	movne	r3, #1
2000002c:	2300      	moveq	r3, #0
2000002e:	73fb      	strb	r3, [r7, #15]
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
20000030:	4b0f      	ldr	r3, [pc, #60]	; (20000070 <bpm_ps_no_halt_exec+0x70>)
20000032:	681b      	ldr	r3, [r3, #0]
20000034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000038:	2b00      	cmp	r3, #0
2000003a:	bf14      	ite	ne
2000003c:	2301      	movne	r3, #1
2000003e:	2300      	moveq	r3, #0
20000040:	73bb      	strb	r3, [r7, #14]
	} while (!b_psok && !b_timeout);
20000042:	7bfb      	ldrb	r3, [r7, #15]
20000044:	f083 0301 	eor.w	r3, r3, #1
20000048:	b2db      	uxtb	r3, r3
2000004a:	2b00      	cmp	r3, #0
2000004c:	d005      	beq.n	2000005a <bpm_ps_no_halt_exec+0x5a>
2000004e:	7bbb      	ldrb	r3, [r7, #14]
20000050:	f083 0301 	eor.w	r3, r3, #1
20000054:	b2db      	uxtb	r3, r3
20000056:	2b00      	cmp	r3, #0
20000058:	d1e1      	bne.n	2000001e <bpm_ps_no_halt_exec+0x1e>
	return b_psok;
2000005a:	7bfb      	ldrb	r3, [r7, #15]
}
2000005c:	4618      	mov	r0, r3
2000005e:	3714      	adds	r7, #20
20000060:	46bd      	mov	sp, r7
20000062:	bc80      	pop	{r7}
20000064:	4770      	bx	lr
20000066:	bf00      	nop
20000068:	400f0000 	.word	0x400f0000
2000006c:	aa00001c 	.word	0xaa00001c
20000070:	e000e010 	.word	0xe000e010

20000074 <g_interrupt_enabled>:
20000074:	00000001                                ....

20000078 <flashcalw_wait_until_ready>:
20000078:	000049c9                                .I..

2000007c <radius>:
2000007c:	00000f7b                                {...

20000080 <__fdlib_version>:
20000080:	00000001                                ....

20000084 <_impure_ptr>:
20000084:	20000088                                ... 

20000088 <impure_data>:
20000088:	00000000 0000c4a8 0000c4c8 0000c488     ................
	...

200000e8 <__global_locale>:
200000e8:	00000043 00000000 00000000 00000000     C...............
	...
20000108:	00000043 00000000 00000000 00000000     C...............
	...
20000128:	00000043 00000000 00000000 00000000     C...............
	...
20000148:	00000043 00000000 00000000 00000000     C...............
	...
20000168:	00000043 00000000 00000000 00000000     C...............
	...
20000188:	00000043 00000000 00000000 00000000     C...............
	...
200001a8:	00000043 00000000 00000000 00000000     C...............
	...
200001c8:	0000b2a9 0000b1dd 00000000 0000c5ff     ................
200001d8:	0000c5fd 0000c5e9 0000c5e9 0000c5e9     ................
200001e8:	0000c5e9 0000c5e9 0000c5e9 0000c5e9     ................
200001f8:	0000c5e9 0000c5e9 ffffffff ffffffff     ................
20000208:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000230:	53410000 00494943 00000000 00000000     ..ASCII.........
	...
